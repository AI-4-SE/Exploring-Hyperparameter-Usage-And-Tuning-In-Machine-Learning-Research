{
    "handwriting-synthesis/data_frame.py": {
        "sklearn": {
            "train_test_split_43": {
                "variable": {
                    "value": "(train_idx, test_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self.idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.randint(1000)",
                            "MethodArgument"
                        ]
                    ]
                },
                "stratify": {
                    "value": "stratify",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "handwriting-synthesis/rnn.py": {
        "tensorflow": {
            "split_88": {
                "variable": {
                    "value": "(pis, sigmas, rhos, mus, es)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[1 * self.output_mixture_components, 2 * self.output_mixture_components, 1 * self.output_mixture_components, 2 * self.output_mixture_components, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_99": {
                "variable": {
                    "value": "pis",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(pis, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_100": {
                "variable": {
                    "value": "sigmas",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.exp(sigmas)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "sigma_eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_101": {
                "variable": {
                    "value": "rhos",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.tanh(rhos)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "eps - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_102": {
                "variable": {
                    "value": "es",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.nn.sigmoid(es)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1.0 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_106": {
                "variable": {
                    "value": "(sigma_1, sigma_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "sigmas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.exp(sigmas), sigma_eps, np.inf)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_107": {
                "variable": {
                    "value": "(y_1, y_2, y_3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_108": {
                "variable": {
                    "value": "(mu_1, mu_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "mus",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_117": {
                "variable": {
                    "value": "gmm_likelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pis * gaussian_likelihoods",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_118": {
                "variable": {
                    "value": "gmm_likelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "gmm_likelihood",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(pis * gaussian_likelihoods, 2)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(gmm_likelihood, eps, np.inf)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_120": {
                "variable": {
                    "value": "bernoulli_likelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.where(tf.equal(tf.ones_like(y_3), y_3), es, 1 - es)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_123": {
                "variable": {
                    "value": "sequence_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sequence_mask(lengths, maxlen=tf.shape(y)[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.logical_not(tf.is_nan(nll))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_127": {
                "variable": {
                    "value": "nll",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sequence_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.sequence_mask(lengths, maxlen=tf.shape(y)[1]), tf.logical_not(tf.is_nan(nll)))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "nll",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-(tf.log(gmm_likelihood) + tf.log(bernoulli_likelihood))",
                            "UnaryOp"
                        ],
                        [
                            "tf.where(sequence_mask, nll, tf.zeros_like(nll))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(nll)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_128": {
                "variable": {
                    "value": "num_valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(sequence_mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_136": {
                "variable": {
                    "value": "initial_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([self.num_samples, 2]), tf.ones([self.num_samples, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_166": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_169": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_170": {
                "variable": {
                    "value": "self.c_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_172": {
                "variable": {
                    "value": "self.sample_tsteps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_173": {
                "variable": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_174": {
                "variable": {
                    "value": "self.prime",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_175": {
                "variable": {
                    "value": "self.x_prime",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_176": {
                "variable": {
                    "value": "self.x_prime_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_with_default_177": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.zeros([self.num_samples], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dynamic_rnn_189": {
                "variable": {
                    "value": "(outputs, self.final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LSTMAttentionCell(lstm_size=self.lstm_size, num_attn_mixture_components=self.attention_mixture_components, attention_values=tf.one_hot(self.c, len(drawing.alphabet)), attention_values_lengths=self.c_len, num_output_mixture_components=self.output_mixture_components, bias=self.bias)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.x_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "self.initial_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_201": {
                "variable": {
                    "value": "self.sampled_sequence",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.prime",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self.primed_sample(cell)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.sample(cell)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "exp_100": {
                "x": {
                    "value": "sigmas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.exp(sigmas), sigma_eps, np.inf)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_101": {
                "x": {
                    "value": "rhos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.tanh(rhos), eps - 1.0, 1.0 - eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_102": {
                "x": {
                    "value": "es",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.nn.sigmoid(es), eps, 1.0 - eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_116": {
                "x": {
                    "value": "exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1.0 * Z / (2 * (1 - tf.square(rho)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_120": {
                "condition": {
                    "value": "tf.equal(tf.ones_like(y_3), y_3)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "es",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.nn.sigmoid(es), eps, 1.0 - eps)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - es",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sequence_mask_124": {
                "lengths": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "tf.shape(y)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logical_not_125": {
                "x": {
                    "value": "tf.is_nan(nll)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_127": {
                "input": {
                    "value": "nll",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-(tf.log(gmm_likelihood) + tf.log(bernoulli_likelihood))",
                            "UnaryOp"
                        ],
                        [
                            "tf.where(sequence_mask, nll, tf.zeros_like(nll))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_128": {
                "x": {
                    "value": "sequence_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.sequence_mask(lengths, maxlen=tf.shape(y)[1]), tf.logical_not(tf.is_nan(nll)))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_130": {
                "input_tensor": {
                    "value": "nll",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-(tf.log(gmm_likelihood) + tf.log(bernoulli_likelihood))",
                            "UnaryOp"
                        ],
                        [
                            "tf.where(sequence_mask, nll, tf.zeros_like(nll))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_130": {
                "x": {
                    "value": "num_valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(sequence_mask, tf.float32), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_131": {
                "input_tensor": {
                    "value": "num_valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(sequence_mask, tf.float32), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_131": {
                "x": {
                    "value": "tf.reduce_sum(num_valid)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dynamic_rnn_150": {
                "inputs": {
                    "value": "self.x_prime",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LSTMAttentionCell(lstm_size=self.lstm_size, num_attn_mixture_components=self.attention_mixture_components, attention_values=tf.one_hot(self.c, len(drawing.alphabet)), attention_values_lengths=self.c_len, num_output_mixture_components=self.output_mixture_components, bias=self.bias)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.x_prime_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell.zero_state(self.num_samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "cell.zero_state(self.num_samples, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "rnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "shape": {
                    "value": "[self.num_samples]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_110": {
                "x": {
                    "value": "1 - tf.square(rho)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_111": {
                "x": {
                    "value": "(y_1 - mu_1) / sigma_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_112": {
                "x": {
                    "value": "(y_2 - mu_2) / sigma_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_120": {
                "x": {
                    "value": "tf.ones_like(y_3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "y_3",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_122": {
                "x": {
                    "value": "bernoulli_likelihood",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.where(tf.equal(tf.ones_like(y_3), y_3), es, 1 - es))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_125": {
                "x": {
                    "value": "nll",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-(tf.log(gmm_likelihood) + tf.log(bernoulli_likelihood))",
                            "UnaryOp"
                        ],
                        [
                            "tf.where(sequence_mask, nll, tf.zeros_like(nll))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_137": {
                "shape": {
                    "value": "[self.num_samples, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_138": {
                "shape": {
                    "value": "[self.num_samples, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_183": {
                "indices": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "len(drawing.alphabet)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_188": {
                "input": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_115": {
                "x": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_120": {
                "input": {
                    "value": "y_3",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_110": {
                "x": {
                    "value": "rho",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_124": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "handwriting-synthesis/rnn_cell.py": {
        "tensorflow": {
            "split_131": {
                "variable": {
                    "value": "(mu1, mu2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "mus",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([mu1, mu2], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "mus",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mu1, mu2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_133": {
                "variable": {
                    "value": "(sigma1, sigma2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "sigmas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sigmas - tf.expand_dims(self.bias, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(tf.exp(sigmas), sigma_eps, np.inf)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_137": {
                "variable": {
                    "value": "covar_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "covar_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.square(sigma1), rhos * sigma1 * sigma2, rhos * sigma1 * sigma2, tf.square(sigma2)]",
                            "List"
                        ],
                        [
                            "tf.stack(covar_matrix, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(covar_matrix, (self.batch_size, self.num_output_mixture_components, 2, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "covar_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "covar_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.square(sigma1), rhos * sigma1 * sigma2, rhos * sigma1 * sigma2, tf.square(sigma2)]",
                            "List"
                        ],
                        [
                            "tf.stack(covar_matrix, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(covar_matrix, (self.batch_size, self.num_output_mixture_components, 2, 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.batch_size, self.num_output_mixture_components, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Bernoulli_141": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "es",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(output[:, 2], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.nn.sigmoid(es), eps, 1.0 - eps)",
                            "Call"
                        ],
                        [
                            "tf.where(es < 0.01, tf.zeros_like(es), es)",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_142": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "pis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pis * (1 + tf.expand_dims(self.bias, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(pis, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.where(pis < 0.01, tf.zeros_like(pis), pis)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_148": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(self.batch_size), sampled_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_149": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sampled_coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mvn.sample()",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(self.batch_size), sampled_idx], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_153": {
                "variable": {
                    "value": "char_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(state.phi, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_157": {
                "variable": {
                    "value": "es",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_158": {
                "variable": {
                    "value": "is_eos",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "es",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(output[:, 2], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.nn.sigmoid(es), eps, 1.0 - eps)",
                            "Call"
                        ],
                        [
                            "tf.where(es < 0.01, tf.zeros_like(es), es)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "np.ones_like(es)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_162": {
                "variable": {
                    "value": "(pis, sigmas, rhos, mus, es)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "gmm_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[1 * self.num_output_mixture_components, 2 * self.num_output_mixture_components, 1 * self.num_output_mixture_components, 2 * self.num_output_mixture_components, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_176": {
                "variable": {
                    "value": "pis",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pis * (1 + tf.expand_dims(self.bias, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(pis, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.where(pis < 0.01, tf.zeros_like(pis), pis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_177": {
                "variable": {
                    "value": "pis",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "pis < 0.01",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(pis)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "pis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pis * (1 + tf.expand_dims(self.bias, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(pis, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.where(pis < 0.01, tf.zeros_like(pis), pis)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_178": {
                "variable": {
                    "value": "sigmas",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.exp(sigmas)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "sigma_eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_179": {
                "variable": {
                    "value": "rhos",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.tanh(rhos)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "eps - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_180": {
                "variable": {
                    "value": "es",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.nn.sigmoid(es)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1.0 - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_181": {
                "variable": {
                    "value": "es",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "es < 0.01",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(es)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "es",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(output[:, 2], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.nn.sigmoid(es), eps, 1.0 - eps)",
                            "Call"
                        ],
                        [
                            "tf.where(es < 0.01, tf.zeros_like(es), es)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_79": {
                "variable": {
                    "value": "s1_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[state.w, inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_80": {
                "variable": {
                    "value": "cell1",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.lstm_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_84": {
                "variable": {
                    "value": "attention_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[state.w, inputs, s1_out]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_86": {
                "variable": {
                    "value": "(alpha, beta, kappa)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.softplus(attention_params)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_88": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(beta, 0.01, np.inf)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "enum",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(self.char_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 1, self.char_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_94": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(enum, (self.batch_size, self.num_attn_mixture_components, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_95": {
                "variable": {
                    "value": "phi_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "alpha * tf.exp(-tf.square(kappa - u) / beta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_97": {
                "variable": {
                    "value": "phi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(alpha * tf.exp(-tf.square(kappa - u) / beta), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_98": {
                "variable": {
                    "value": "sequence_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sequence_mask(self.attention_values_lengths, maxlen=self.char_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_99": {
                "variable": {
                    "value": "sequence_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.sequence_mask(self.attention_values_lengths, maxlen=self.char_len), tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(sequence_mask, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "phi * self.attention_values * sequence_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_103": {
                "variable": {
                    "value": "s2_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, s1_out, w]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_104": {
                "variable": {
                    "value": "cell2",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.lstm_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_108": {
                "variable": {
                    "value": "s3_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, s2_out, w]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_109": {
                "variable": {
                    "value": "cell3",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.lstm_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_150": {
                "values": {
                    "value": "[coords, tf.cast(sampled_e, tf.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_or_159": {
                "x": {
                    "value": "tf.logical_and(final_char, is_eos)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "past_final_char",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "char_idx >= self.attention_values_lengths",
                            "Compare"
                        ]
                    ]
                }
            },
            "shape_34": {
                "input": {
                    "value": "attention_values",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_35": {
                "input": {
                    "value": "attention_values",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "shape": {
                    "value": "[batch_size, self.lstm_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "shape": {
                    "value": "[batch_size, self.lstm_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "shape": {
                    "value": "[batch_size, self.lstm_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "shape": {
                    "value": "[batch_size, self.lstm_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "shape": {
                    "value": "[batch_size, self.lstm_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "shape": {
                    "value": "[batch_size, self.lstm_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "shape": {
                    "value": "[batch_size, self.num_attn_mixture_components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "shape": {
                    "value": "[batch_size, self.num_attn_mixture_components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "shape": {
                    "value": "[batch_size, self.num_attn_mixture_components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "shape": {
                    "value": "[batch_size, self.window_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "shape": {
                    "value": "[batch_size, self.char_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "scope or type(self).__name__",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_135": {
                "x": {
                    "value": "sigma1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_136": {
                "x": {
                    "value": "sigma2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_153": {
                "input": {
                    "value": "state.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_159": {
                "x": {
                    "value": "final_char",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "char_idx >= self.attention_values_lengths - 1",
                            "Compare"
                        ]
                    ]
                },
                "y": {
                    "value": "is_eos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(es, np.ones_like(es))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_174": {
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_177": {
                "input": {
                    "value": "pis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pis * (1 + tf.expand_dims(self.bias, 1))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(pis, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.where(pis < 0.01, tf.zeros_like(pis), pis)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_178": {
                "x": {
                    "value": "sigmas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sigmas - tf.expand_dims(self.bias, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(tf.exp(sigmas), sigma_eps, np.inf)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_179": {
                "x": {
                    "value": "rhos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(tf.tanh(rhos), eps - 1.0, 1.0 - eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_180": {
                "x": {
                    "value": "es",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(output[:, 2], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.nn.sigmoid(es), eps, 1.0 - eps)",
                            "Call"
                        ],
                        [
                            "tf.where(es < 0.01, tf.zeros_like(es), es)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_181": {
                "input": {
                    "value": "es",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(output[:, 2], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.nn.sigmoid(es), eps, 1.0 - eps)",
                            "Call"
                        ],
                        [
                            "tf.where(es < 0.01, tf.zeros_like(es), es)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_86": {
                "features": {
                    "value": "attention_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dense_layer(attention_inputs, 3 * self.num_attn_mixture_components, scope='attention')",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_91": {
                "input": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(beta, 0.01, np.inf)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_94": {
                "input": {
                    "value": "enum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.range(self.char_len), (1, 1, self.char_len))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(self.batch_size, self.num_attn_mixture_components, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sequence_mask_98": {
                "lengths": {
                    "value": "self.attention_values_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self.char_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_150": {
                "x": {
                    "value": "sampled_e",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b.sample()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_173": {
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_95": {
                "x": {
                    "value": "-tf.square(kappa - u) / beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_95": {
                "x": {
                    "value": "kappa - u",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "handwriting-synthesis/rnn_ops.py": {
        "tensorflow": {
            "transpose_187": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.transpose(inputs, (1, 0, 2))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "TensorArray_188": {
                "variable": {
                    "value": "inputs_ta",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "array_ops.shape(inputs)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_44": {
                "variable": {
                    "value": "time",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_47": {
                "variable": {
                    "value": "flat_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "next_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "control_flow_ops.cond(finished, lambda : array_ops.zeros([array_ops.shape(inputs)[1], inputs.shape.as_list()[2]], dtype=dtypes.float32), lambda : inputs_ta.read(time))",
                            "Call"
                        ],
                        [
                            "control_flow_ops.cond(finished, lambda : array_ops.zeros_like(initial_input), lambda : initial_input if cell_output is None else cell.output_function(next_cell_state))",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_67": {
                "variable": {
                    "value": "flat_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "initial_state",
                            "Name"
                        ],
                        [
                            "nest.pack_sequence_as(structure=state, flat_sequence=flat_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_sequence_as_69": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "initial_state",
                            "Name"
                        ],
                        [
                            "nest.pack_sequence_as(structure=state, flat_sequence=flat_state)",
                            "Call"
                        ]
                    ]
                },
                "flat_sequence": {
                    "value": "flat_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.flatten(state)",
                            "Call"
                        ],
                        [
                            "[ops.convert_to_tensor(s) for s in flat_state]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "pack_sequence_as_97": {
                "variable": {
                    "value": "emit_ta",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "emit_structure",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell.output_size",
                            "Attribute"
                        ]
                    ]
                },
                "flat_sequence": {
                    "value": "flat_emit_ta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tensor_array_ops.TensorArray(dtype=dtype_i, dynamic_size=True, element_shape=tensor_shape.TensorShape([const_batch_size]).concatenate(_maybe_tensor_shape_from_tensor(size_i)), size=0, name='rnn_output_%d' % i) for (i, (dtype_i, size_i)) in enumerate(zip(flat_emit_dtypes, flat_emit_size))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "pack_sequence_as_102": {
                "variable": {
                    "value": "zero_emit",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "emit_structure",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell.output_size",
                            "Attribute"
                        ]
                    ]
                },
                "flat_sequence": {
                    "value": "flat_zero_emit",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[array_ops.zeros(_concat(batch_size, size_i), dtype_i) for (size_i, dtype_i) in zip(flat_emit_size, flat_emit_dtypes)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "pack_sequence_as_115": {
                "variable": {
                    "value": "state_ta",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "initial_state",
                            "Name"
                        ],
                        [
                            "nest.pack_sequence_as(structure=state, flat_sequence=flat_state)",
                            "Call"
                        ]
                    ]
                },
                "flat_sequence": {
                    "value": "flat_state_ta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tensor_array_ops.TensorArray(dtype=dtype_i, dynamic_size=True, element_shape=tensor_shape.TensorShape([const_batch_size]).concatenate(_maybe_tensor_shape_from_tensor(size_i)), size=0, name='rnn_state_%d' % i) for (i, (dtype_i, size_i)) in enumerate(zip(flat_state_dtypes, flat_state_size))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "while_loop_161": {
                "variable": {
                    "value": "returned",
                    "type": "Variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[time, elements_finished, next_input, state_ta, emit_ta, state, loop_state]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "parallel_iterations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parallel_iterations or 32",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "swap_memory": {
                    "value": "swap_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_171": {
                "variable": {
                    "value": "flat_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "state_ta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.pack_sequence_as(structure=state, flat_sequence=flat_state_ta)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta, state: ta.write(time, state), state_ta, next_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_sequence_as_173": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "state_ta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.pack_sequence_as(structure=state, flat_sequence=flat_state_ta)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta, state: ta.write(time, state), state_ta, next_state)",
                            "Call"
                        ]
                    ]
                },
                "flat_sequence": {
                    "value": "flat_states",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.flatten(state_ta)",
                            "Call"
                        ],
                        [
                            "[array_ops.transpose(ta.stack(), (1, 0, 2)) for ta in flat_states]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "flatten_175": {
                "variable": {
                    "value": "flat_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "emit_ta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.pack_sequence_as(structure=emit_structure, flat_sequence=flat_emit_ta)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta, emit: ta.write(time, emit), emit_ta, emit_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "pack_sequence_as_177": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "emit_ta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.pack_sequence_as(structure=emit_structure, flat_sequence=flat_emit_ta)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta, emit: ta.write(time, emit), emit_ta, emit_output)",
                            "Call"
                        ]
                    ]
                },
                "flat_sequence": {
                    "value": "flat_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.flatten(emit_ta)",
                            "Call"
                        ],
                        [
                            "[array_ops.transpose(ta.stack(), (1, 0, 2)) for ta in flat_outputs]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_all_196": {
                "variable": {
                    "value": "finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "elements_finished",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.logical_or(elements_finished, next_finished)",
                            "Call"
                        ],
                        [
                            "time >= sequence_length",
                            "Compare"
                        ],
                        [
                            "math_ops.logical_or(time >= sequence_length, cell.termination_condition(next_cell_state))",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_198": {
                "variable": {
                    "value": "next_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "finished",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_all(elements_finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(elements_finished)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : array_ops.zeros([array_ops.shape(inputs)[1], inputs.shape.as_list()[2]], dtype=dtypes.float32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : inputs_ta.read(time)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "logical_or_230": {
                "variable": {
                    "value": "elements_finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "time >= sequence_length",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "cell.termination_condition(next_cell_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_all_234": {
                "variable": {
                    "value": "finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "elements_finished",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.logical_or(elements_finished, next_finished)",
                            "Call"
                        ],
                        [
                            "time >= sequence_length",
                            "Compare"
                        ],
                        [
                            "math_ops.logical_or(time >= sequence_length, cell.termination_condition(next_cell_state))",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_236": {
                "variable": {
                    "value": "next_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "finished",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_all(elements_finished)",
                            "Call"
                        ],
                        [
                            "math_ops.reduce_all(elements_finished)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : array_ops.zeros_like(initial_input)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : initial_input if cell_output is None else cell.output_function(next_cell_state)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "scope or 'rnn'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "assert_same_structure_65": {
                "nest1": {
                    "value": "initial_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "nest2": {
                    "value": "cell.state_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_73": {
                "variable": {
                    "value": "flat_emit_structure",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "emit_structure",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell.output_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "flatten_79": {
                "variable": {
                    "value": "flat_emit_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "emit_structure",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell.output_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "map_structure_153": {
                "variable": {
                    "value": "emit_ta",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda ta, emit: ta.write(time, emit)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "emit_ta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.pack_sequence_as(structure=emit_structure, flat_sequence=flat_emit_ta)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta, emit: ta.write(time, emit), emit_ta, emit_output)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "emit_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_copy_some_through(zero_emit, emit_output)",
                            "Call"
                        ],
                        [
                            "cell_output",
                            "Name"
                        ],
                        [
                            "next_input[0] if cell_output is None else next_input",
                            "IfExp"
                        ]
                    ]
                }
            },
            "map_structure_154": {
                "variable": {
                    "value": "state_ta",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda ta, state: ta.write(time, state)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "state_ta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.pack_sequence_as(structure=state, flat_sequence=flat_state_ta)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta, state: ta.write(time, state), state_ta, next_state)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "next_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_copy_some_through(state, next_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_or_156": {
                "variable": {
                    "value": "elements_finished",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "elements_finished",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.logical_or(elements_finished, next_finished)",
                            "Call"
                        ],
                        [
                            "time >= sequence_length",
                            "Compare"
                        ],
                        [
                            "math_ops.logical_or(time >= sequence_length, cell.termination_condition(next_cell_state))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "next_finished",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'dynamic-rnn-teacher-force'",
                            "MethodArgument"
                        ],
                        [
                            "'dynamic-rnn-free-run'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_51": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_68": {
                "value": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorArray_87": {
                "dtype": {
                    "value": "dtype_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "element_shape": {
                    "value": "tensor_shape.TensorShape([const_batch_size]).concatenate(_maybe_tensor_shape_from_tensor(size_i))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'rnn_output_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "shape": {
                    "value": "_concat(batch_size, size_i)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorArray_105": {
                "dtype": {
                    "value": "dtype_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "dynamic_size": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "element_shape": {
                    "value": "tensor_shape.TensorShape([const_batch_size]).concatenate(_maybe_tensor_shape_from_tensor(size_i))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'rnn_state_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logical_not_118": {
                "x": {
                    "value": "math_ops.reduce_all(elements_finished)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assert_same_structure_123": {
                "nest1": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "initial_state",
                            "Name"
                        ],
                        [
                            "nest.pack_sequence_as(structure=state, flat_sequence=flat_state)",
                            "Call"
                        ]
                    ]
                },
                "nest2": {
                    "value": "cell_state",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "assert_same_structure_124": {
                "nest1": {
                    "value": "cell.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nest2": {
                    "value": "next_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "assert_same_structure_130": {
                "nest1": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "initial_state",
                            "Name"
                        ],
                        [
                            "nest.pack_sequence_as(structure=state, flat_sequence=flat_state)",
                            "Call"
                        ]
                    ]
                },
                "nest2": {
                    "value": "next_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_copy_some_through(state, next_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_same_structure_131": {
                "nest1": {
                    "value": "current_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "nest2": {
                    "value": "next_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "control_flow_ops.cond(finished, lambda : array_ops.zeros([array_ops.shape(inputs)[1], inputs.shape.as_list()[2]], dtype=dtypes.float32), lambda : inputs_ta.read(time))",
                            "Call"
                        ],
                        [
                            "control_flow_ops.cond(finished, lambda : array_ops.zeros_like(initial_input), lambda : initial_input if cell_output is None else cell.output_function(next_cell_state))",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_same_structure_132": {
                "nest1": {
                    "value": "emit_ta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nest.pack_sequence_as(structure=emit_structure, flat_sequence=flat_emit_ta)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda ta, emit: ta.write(time, emit), emit_ta, emit_output)",
                            "Call"
                        ]
                    ]
                },
                "nest2": {
                    "value": "emit_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_copy_some_through(zero_emit, emit_output)",
                            "Call"
                        ],
                        [
                            "cell_output",
                            "Name"
                        ],
                        [
                            "next_input[0] if cell_output is None else next_input",
                            "IfExp"
                        ]
                    ]
                }
            },
            "transpose_172": {
                "a": {
                    "value": "ta.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_176": {
                "a": {
                    "value": "ta.stack()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_63": {
                "input": {
                    "value": "flat_input[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_83": {
                "input": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_all_118": {
                "input_tensor": {
                    "value": "elements_finished",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.logical_or(elements_finished, next_finished)",
                            "Call"
                        ],
                        [
                            "time >= sequence_length",
                            "Compare"
                        ],
                        [
                            "math_ops.logical_or(time >= sequence_length, cell.termination_condition(next_cell_state))",
                            "Call"
                        ]
                    ]
                }
            },
            "map_structure_148": {
                "func": {
                    "value": "copy_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "current",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "candidate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_188": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.transpose(inputs, (1, 0, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_200": {
                "shape": {
                    "value": "[array_ops.shape(inputs)[1], inputs.shape.as_list()[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_238": {
                "input": {
                    "value": "initial_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell.output_function(initial_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_75": {
                "input": {
                    "value": "emit",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorShape_90": {
                "dims": {
                    "value": "[const_batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_90": {
                "arys": {
                    "value": "_maybe_tensor_shape_from_tensor(size_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorShape_108": {
                "dims": {
                    "value": "[const_batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_108": {
                "arys": {
                    "value": "_maybe_tensor_shape_from_tensor(size_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "colocate_with_146": {
                "op": {
                    "value": "cand_i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_147": {
                "condition": {
                    "value": "elements_finished",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math_ops.logical_or(elements_finished, next_finished)",
                            "Call"
                        ],
                        [
                            "time >= sequence_length",
                            "Compare"
                        ],
                        [
                            "math_ops.logical_or(time >= sequence_length, cell.termination_condition(next_cell_state))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "cur_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "cand_i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_200": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array_ops.transpose(inputs, (1, 0, 2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "handwriting-synthesis/tf_base_model.py": {
        "tensorflow": {
            "Session_109": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_362": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_324": {
                "variable": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.checkpoint_dir_averaged if averaged else self.checkpoint_dir",
                            "IfExp"
                        ],
                        [
                            "self.checkpoint_dir_averaged if averaged else self.checkpoint_dir",
                            "IfExp"
                        ],
                        [
                            "'checkpoints'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_355": {
                "input_tensor": {
                    "value": "tf.square(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_394": {
                "variable": {
                    "value": "self.ema",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Variable_395": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_396": {
                "variable": {
                    "value": "self.learning_rate_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_397": {
                "variable": {
                    "value": "self.beta1_decay_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_402": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_406": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_363": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_369": {
                "variable": {
                    "value": "self.step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "maintain_averages_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.ema.apply(tf.trainable_variables())",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_384": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta1": {
                    "value": "beta1_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Graph_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_404": {
                "variable": {
                    "value": "self.saver_averaged",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.ema.variables_to_restore()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_360": {
                "t": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-self.grad_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_368": {
                "control_inputs": {
                    "value": "[step]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_386": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_355": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(param))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_388": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "beta1_decay",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "trainable_variables_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_355": {
                "x": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "trainable_variables_380": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "handwriting-synthesis/tf_utils.py": {
        "tensorflow": {
            "get_variable_18": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape(inputs, -1), output_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_23": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', initializer=tf.contrib.layers.variance_scaling_initializer(), shape=[shape(inputs, -1), output_units])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', initializer=tf.contrib.layers.variance_scaling_initializer(), shape=[shape(inputs, -1), output_units])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape(inputs, -1), output_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_63": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,kl->ijl",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='weights', initializer=tf.contrib.layers.variance_scaling_initializer(), shape=[shape(inputs, -1), output_units])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name='weights', initializer=tf.contrib.layers.variance_scaling_initializer(), shape=[shape(inputs, -1), output_units])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_17": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dense-layer'",
                            "MethodArgument"
                        ],
                        [
                            "'time-distributed-dense-layer'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_normalization_33": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, W)",
                            "Call"
                        ],
                        [
                            "z + b",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(z, training=batch_norm, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "activation(z) if activation else z",
                            "IfExp"
                        ],
                        [
                            "tf.nn.dropout(z, dropout) if dropout is not None else z",
                            "IfExp"
                        ],
                        [
                            "tf.einsum('ijk,kl->ijl', inputs, W)",
                            "Call"
                        ],
                        [
                            "z + b",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(z, training=batch_norm, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "activation(z) if activation else z",
                            "IfExp"
                        ],
                        [
                            "tf.nn.dropout(z, dropout) if dropout is not None else z",
                            "IfExp"
                        ]
                    ]
                },
                "training": {
                    "value": "batch_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dense-layer'",
                            "MethodArgument"
                        ],
                        [
                            "'time-distributed-dense-layer'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_normalization_73": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, W)",
                            "Call"
                        ],
                        [
                            "z + b",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(z, training=batch_norm, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "activation(z) if activation else z",
                            "IfExp"
                        ],
                        [
                            "tf.nn.dropout(z, dropout) if dropout is not None else z",
                            "IfExp"
                        ],
                        [
                            "tf.einsum('ijk,kl->ijl', inputs, W)",
                            "Call"
                        ],
                        [
                            "z + b",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(z, training=batch_norm, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "activation(z) if activation else z",
                            "IfExp"
                        ],
                        [
                            "tf.nn.dropout(z, dropout) if dropout is not None else z",
                            "IfExp"
                        ]
                    ]
                },
                "training": {
                    "value": "batch_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_36": {
                "x": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, W)",
                            "Call"
                        ],
                        [
                            "z + b",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(z, training=batch_norm, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "activation(z) if activation else z",
                            "IfExp"
                        ],
                        [
                            "tf.nn.dropout(z, dropout) if dropout is not None else z",
                            "IfExp"
                        ],
                        [
                            "tf.einsum('ijk,kl->ijl', inputs, W)",
                            "Call"
                        ],
                        [
                            "z + b",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(z, training=batch_norm, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "activation(z) if activation else z",
                            "IfExp"
                        ],
                        [
                            "tf.nn.dropout(z, dropout) if dropout is not None else z",
                            "IfExp"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_76": {
                "x": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, W)",
                            "Call"
                        ],
                        [
                            "z + b",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(z, training=batch_norm, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "activation(z) if activation else z",
                            "IfExp"
                        ],
                        [
                            "tf.nn.dropout(z, dropout) if dropout is not None else z",
                            "IfExp"
                        ],
                        [
                            "tf.einsum('ijk,kl->ijl', inputs, W)",
                            "Call"
                        ],
                        [
                            "z + b",
                            "BinOp"
                        ],
                        [
                            "tf.layers.batch_normalization(z, training=batch_norm, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "activation(z) if activation else z",
                            "IfExp"
                        ],
                        [
                            "tf.nn.dropout(z, dropout) if dropout is not None else z",
                            "IfExp"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sound/project-keyword-spotter/features.py": {
        "tensorflow": {
            "cast_90": {
                "variable": {
                    "value": "min_num_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "min_waveform_seconds * params.sample_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_92": {
                "variable": {
                    "value": "num_padding_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "min_num_samples - num_samples",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_97": {
                "variable": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(waveform)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.maximum(num_samples, min_num_samples)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "min_num_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(min_waveform_seconds * params.sample_rate, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_99": {
                "variable": {
                    "value": "hop_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params.patch_hop_seconds * params.sample_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_100": {
                "variable": {
                    "value": "num_hops_after_first_patch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.ceil(tf.cast(num_samples_after_first_patch, tf.float32) / tf.cast(hop_samples, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_106": {
                "variable": {
                    "value": "padded_waveform",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "waveform",
                    "type": "Variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, num_padding_samples]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "frame_161": {
                "variable": {
                    "value": "framed_signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "signal": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "frame_length": {
                    "value": "frame_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "frame_step": {
                    "value": "frame_step",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linear_to_mel_weight_matrix_50": {
                "variable": {
                    "value": "linear_to_mel_weight_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_mel_bins": {
                    "value": "params.mel_bands",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_spectrogram_bins": {
                    "value": "num_spectrogram_bins",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fft_length // 2 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "sample_rate": {
                    "value": "params.sample_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lower_edge_hertz": {
                    "value": "params.mel_min_hz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "upper_edge_hertz": {
                    "value": "params.mel_max_hz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "variable": {
                    "value": "mel_spectrogram",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "magnitude_spectrogram",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_tflite_stft_magnitude(signal=waveform, frame_length=window_length_samples, frame_step=hop_length_samples, fft_length=fft_length)",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.signal.stft(signals=waveform, frame_length=window_length_samples, frame_step=hop_length_samples, fft_length=fft_length))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "linear_to_mel_weight_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.signal.linear_to_mel_weight_matrix(num_mel_bins=params.mel_bands, num_spectrogram_bins=num_spectrogram_bins, sample_rate=params.sample_rate, lower_edge_hertz=params.mel_min_hz, upper_edge_hertz=params.mel_max_hz)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_58": {
                "variable": {
                    "value": "log_mel_spectrogram",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mel_spectrogram + params.log_offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "frame_72": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "signal": {
                    "value": "log_mel_spectrogram",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.log(mel_spectrogram + params.log_offset)",
                            "Call"
                        ]
                    ]
                },
                "frame_length": {
                    "value": "patch_window_length_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(round(spectrogram_sample_rate * params.patch_window_seconds))",
                            "Call"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "patch_hop_length_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(round(spectrogram_sample_rate * params.patch_hop_seconds))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_136": {
                "variable": {
                    "value": "real_dft_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.real(complex_dft_matrix_kept_values).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "real_dft_matrix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_139": {
                "variable": {
                    "value": "imag_dft_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.imag(complex_dft_matrix_kept_values).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "imaginary_dft_matrix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_144": {
                "variable": {
                    "value": "padded_frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "framed_signal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.signal.frame(signal, frame_length, frame_step)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [half_pad, fft_length - signal_frame_length - half_pad]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                },
                "constant_values": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "variable": {
                    "value": "real_stft",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "padded_frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(framed_signal, [[0, 0], [half_pad, fft_length - signal_frame_length - half_pad]], mode='CONSTANT', constant_values=0.0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "real_dft_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(np.real(complex_dft_matrix_kept_values).astype(np.float32), name='real_dft_matrix')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_155": {
                "variable": {
                    "value": "imag_stft",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "padded_frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pad(framed_signal, [[0, 0], [half_pad, fft_length - signal_frame_length - half_pad]], mode='CONSTANT', constant_values=0.0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "imag_dft_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(np.imag(complex_dft_matrix_kept_values).astype(np.float32), name='imaginary_dft_matrix')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_24": {
                "name": {
                    "value": "log_mel_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "abs_42": {
                "variable": {
                    "value": "magnitude_spectrogram",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.signal.stft(signals=waveform, frame_length=window_length_samples, frame_step=hop_length_samples, fft_length=fft_length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_91": {
                "input": {
                    "value": "waveform",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ceil_100": {
                "x": {
                    "value": "tf.cast(num_samples_after_first_patch, tf.float32) / tf.cast(hop_samples, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "tensor": {
                    "value": "tf.constant((0.5 - 0.5 * np.cos(2 * np.pi * np.arange(0, 1.0, 1.0 / frame_length))).astype(np.float32), name='hann_window')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, frame_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_159": {
                "x": {
                    "value": "tf.add(real * real, imag * imag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_115": {
                "value": {
                    "value": "(0.5 - 0.5 * np.cos(2 * np.pi * np.arange(0, 1.0, 1.0 / frame_length))).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "hann_window",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "framed_signal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.signal.frame(signal, frame_length, frame_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_159": {
                "x": {
                    "value": "real * real",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "imag * imag",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stft_42": {
                "signals": {
                    "value": "waveform",
                    "type": "Variable",
                    "possible_values": []
                },
                "frame_length": {
                    "value": "window_length_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(round(params.sample_rate * params.stft_window_seconds))",
                            "Call"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "hop_length_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(round(params.sample_rate * params.stft_hop_seconds))",
                            "Call"
                        ]
                    ]
                },
                "fft_length": {
                    "value": "fft_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 ** int(np.ceil(np.log(window_length_samples) / np.log(2.0)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_101": {
                "x": {
                    "value": "num_samples_after_first_patch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_samples - min_num_samples",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_102": {
                "x": {
                    "value": "hop_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(params.patch_hop_seconds * params.sample_rate, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sound/project-keyword-spotter/model.py": {
        "tensorflow": {
            "Interpreter_231": {
                "model_path": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "experimental_delegates": {
                    "value": "[tflite.load_delegate(EDGETPU_SHARED_LIB, {'device': device[0]} if device else {})]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Interpreter_239": {
                "model_path": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "decode_wav_310": {
                "variable": {
                    "value": "(audio, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "contents": {
                    "value": "audio_binary",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_314": {
                "variable": {
                    "value": "parts",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "file_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "os.path.sep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_322": {
                "variable": {
                    "value": "audio_binary",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "file_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_311": {
                "input": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_delegate_234": {
                "library": {
                    "value": "EDGETPU_SHARED_LIB",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'Linux': 'libedgetpu.so.1', 'Darwin': 'libedgetpu.1.dylib', 'Windows': 'edgetpu.dll'}[platform.system()]",
                            "Subscript"
                        ]
                    ]
                },
                "options": {
                    "value": "{'device': device[0]} if device else {}",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "sound/project-keyword-spotter/model_yamnet.py": {
        "tensorflow": {
            "Interpreter_232": {
                "model_path": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "experimental_delegates": {
                    "value": "[tflite.load_delegate(EDGETPU_SHARED_LIB, {'device': device[0]} if device else {})]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Interpreter_240": {
                "model_path": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "decode_wav_311": {
                "variable": {
                    "value": "(audio, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "contents": {
                    "value": "audio_binary",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(file_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_315": {
                "variable": {
                    "value": "parts",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "file_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "os.path.sep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_323": {
                "variable": {
                    "value": "audio_binary",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "file_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_312": {
                "input": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_delegate_235": {
                "library": {
                    "value": "EDGETPU_SHARED_LIB",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'Linux': 'libedgetpu.so.1', 'Darwin': 'libedgetpu.1.dylib', 'Windows': 'edgetpu.dll'}[platform.system()]",
                            "Subscript"
                        ]
                    ]
                },
                "options": {
                    "value": "{'device': device[0]} if device else {}",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "sound/project-keyword-spotter/yamnet.py": {
        "tensorflow": {
            "Input_120": {
                "variable": {
                    "value": "waveform",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Model_125": {
                "variable": {
                    "value": "frames_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "yamnet_frames",
                    "type": "str",
                    "possible_values": []
                },
                "inputs": {
                    "value": "waveform",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.Input(batch_shape=(None,), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "[predictions, embeddings, log_mel_spectrogram]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_tensor_133": {
                "x": {
                    "value": "class_map_csv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "class_map_csv.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "Reshape_97": {
                "target_shape": {
                    "value": "(params.patch_frames, params.patch_bands, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(params.patch_frames, params.patch_bands)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_103": {
                "units": {
                    "value": "params.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Activation_104": {
                "activation": {
                    "value": "params.classifier_activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNormalization_29": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "center": {
                    "value": "params.batchnorm_center",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "params.batchnorm_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "params.batchnorm_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_39": {
                "name": {
                    "value": "'{}/conv'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "params.conv_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "name": {
                    "value": "'{}/relu'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DepthwiseConv2D_54": {
                "name": {
                    "value": "'{}/depthwise_conv'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "depth_multiplier": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "params.conv_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "name": {
                    "value": "'{}/depthwise_conv/relu'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_63": {
                "name": {
                    "value": "'{}/pointwise_conv'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "params.conv_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "name": {
                    "value": "'{}/pointwise_conv/relu'.format(name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CycleGANSolution/a4-code-v2-updated/cycle_gan.py": {
        "torch": {
            "manual_seed_49": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "11",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_192": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "g_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(G_XtoY.parameters()) + list(G_YtoX.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "opts.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[opts.beta1, opts.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_193": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "d_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(D_X.parameters()) + list(D_Y.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "opts.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[opts.beta1, opts.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "11",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_105": {
                "obj": {
                    "value": "G_XtoY.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "G_XtoY_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opts.checkpoint_dir, 'G_XtoY.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(opts.load, 'G_XtoY.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_106": {
                "obj": {
                    "value": "G_YtoX.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "G_YtoX_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opts.checkpoint_dir, 'G_YtoX.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(opts.load, 'G_YtoX.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_107": {
                "obj": {
                    "value": "D_X.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "D_X_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opts.checkpoint_dir, 'D_X.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(opts.load, 'D_X.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_108": {
                "obj": {
                    "value": "D_Y.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "D_Y_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opts.checkpoint_dir, 'D_Y.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(opts.load, 'D_Y.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_124": {
                "f": {
                    "value": "G_XtoY_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opts.checkpoint_dir, 'G_XtoY.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(opts.load, 'G_XtoY.pkl')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_125": {
                "f": {
                    "value": "G_YtoX_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opts.checkpoint_dir, 'G_YtoX.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(opts.load, 'G_YtoX.pkl')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_126": {
                "f": {
                    "value": "D_X_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opts.checkpoint_dir, 'D_X.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(opts.load, 'D_X.pkl')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_127": {
                "f": {
                    "value": "D_Y_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opts.checkpoint_dir, 'D_Y.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(opts.load, 'D_Y.pkl')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "CycleGANSolution/a4-code-v2-updated/data_loader.py": {
        "torch": {
            "DataLoader_25": {
                "variable": {
                    "value": "train_dloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(train_path, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opts.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_26": {
                "variable": {
                    "value": "test_dloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(test_path, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opts.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opts.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CycleGANSolution/a4-code-v2-updated/model_checker.py": {
        "torch": {
            "load_53": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checker_files/dc_generator.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checker_files/dc_discriminator.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_107": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checker_files/cycle_generator.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unsqueeze_47": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_47": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "CycleGANSolution/a4-code-v2-updated/models.py": {
        "torch": {
            "Conv2d_34": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv1(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv3(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_72": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv4(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_120": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_123": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.resnet_block(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_125": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_126": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_149": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_150": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_151": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_154": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.deconv1(z))",
                            "Call"
                        ],
                        [
                            "F.relu(self.deconv2(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.deconv3(out))",
                            "Call"
                        ],
                        [
                            "F.tanh(self.deconv4(out))",
                            "Call"
                        ],
                        [
                            "x + self.conv_layer(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.resnet_block(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.deconv1(out))",
                            "Call"
                        ],
                        [
                            "F.tanh(self.deconv2(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "self.conv4(out).squeeze()",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_24": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_36": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "CycleGANSolution/a4-code-v2-updated/utils.py": {
        "torch": {
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CycleGANSolution/a4-code-v2-updated/vanilla_gan.py": {
        "torch": {
            "manual_seed_39": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "11",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_138": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[opts.beta1, opts.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_139": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[opts.beta1, opts.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_41": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "11",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "G.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "G_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opts.checkpoint_dir, 'G.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_80": {
                "obj": {
                    "value": "D.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "D_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opts.checkpoint_dir, 'D.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_125": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opts.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "GAN/Wiley's/models.py": {
        "torch": {
            "Conv2d_48": {
                "variable": {
                    "value": "conv_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv1(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_95": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv3(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_96": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv4(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_161": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_162": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_164": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.resnet_block(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_166": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_167": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_193": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_194": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_195": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_198": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.relu(self.deconv1(z))",
                            "Call"
                        ],
                        [
                            "F.relu(self.deconv2(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.deconv3(out))",
                            "Call"
                        ],
                        [
                            "F.tanh(self.deconv4(out))",
                            "Call"
                        ],
                        [
                            "x + self.conv_layer(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.resnet_block(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.deconv1(out))",
                            "Call"
                        ],
                        [
                            "F.tanh(self.deconv2(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "self.conv4(out).squeeze()",
                            "Call"
                        ],
                        [
                            "F.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_27": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_58": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "GAN/Wiley's/vanilla_gan.py": {
        "torch": {
            "manual_seed_38": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "11",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_137": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[opts.beta1, opts.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_138": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[opts.beta1, opts.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MSELoss_147": {
                "variable": {
                    "value": "mse_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_40": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "11",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_78": {
                "obj": {
                    "value": "G.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "G_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opts.checkpoint_dir, 'G.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_79": {
                "obj": {
                    "value": "D.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "D_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(opts.checkpoint_dir, 'D.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "full_164": {
                "variable": {
                    "value": "real_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(real_images),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_177": {
                "variable": {
                    "value": "fake_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(fake_images),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_201": {
                "variable": {
                    "value": "real_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(fake_images),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_124": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opts.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "GAN/vanilla_gan.py": {
        "torch": {
            "unsqueeze_654": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_682": {
                "variable": {
                    "value": "train_dloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(train_path, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_688": {
                "variable": {
                    "value": "test_dloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(test_path, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv1_depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv2_depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv3_depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv4_depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_72": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_80": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_86": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_92": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_107": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_111": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_115": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_119": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_129": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_133": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_137": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_140": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_147": {
                "variable": {
                    "value": "conv1_depthwise",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "map_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "map_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "map_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_150": {
                "variable": {
                    "value": "conv1_pointwise",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "map_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "map_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_153": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "map_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_154": {
                "variable": {
                    "value": "conv2_depthwise",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "map_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "map_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "map_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_157": {
                "variable": {
                    "value": "conv2_pointwise",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "map_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "map_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_161": {
                "variable": {
                    "value": "resblock",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_174": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_189": {
                "variable": {
                    "value": "self.deconv1_depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_192": {
                "variable": {
                    "value": "self.deconv1_pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_195": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_202": {
                "variable": {
                    "value": "self.deconv2_depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_205": {
                "variable": {
                    "value": "self.deconv2_pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_208": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_215": {
                "variable": {
                    "value": "self.deconv3_depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_218": {
                "variable": {
                    "value": "self.deconv3_pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_221": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_228": {
                "variable": {
                    "value": "self.deconv4_depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_231": {
                "variable": {
                    "value": "self.deconv4_pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_249": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_258": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_266": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_277": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_287": {
                "variable": {
                    "value": "self.conv1_depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_293": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_296": {
                "variable": {
                    "value": "self.conv2_depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_302": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_305": {
                "variable": {
                    "value": "self.conv3_depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_311": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_314": {
                "variable": {
                    "value": "self.conv4_depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nin",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nout",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_321": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_329": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_335": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_341": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_356": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_358": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_360": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_362": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_364": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_366": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_368": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_378": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_382": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_386": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_389": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_399": {
                "variable": {
                    "value": "self.g1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_400": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_402": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_404": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_406": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_408": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_410": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_412": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_438": {
                "variable": {
                    "value": "self.g1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_439": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_441": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_443": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_445": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_447": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_449": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_451": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_477": {
                "variable": {
                    "value": "self.g1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_478": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_480": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_482": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_484": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_486": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_488": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_490": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_492": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_494": {
                "variable": {
                    "value": "self.deconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_496": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_498": {
                "variable": {
                    "value": "self.deconv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_530": {
                "variable": {
                    "value": "self.g1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_531": {
                "variable": {
                    "value": "self.deconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_533": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_535": {
                "variable": {
                    "value": "self.deconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_537": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_539": {
                "variable": {
                    "value": "self.deconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_541": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_543": {
                "variable": {
                    "value": "self.deconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_545": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_547": {
                "variable": {
                    "value": "self.deconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_549": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_551": {
                "variable": {
                    "value": "self.deconv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_586": {
                "variable": {
                    "value": "self.up1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_589": {
                "variable": {
                    "value": "self.up2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_592": {
                "variable": {
                    "value": "self.up3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_606": {
                "variable": {
                    "value": "img1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_607": {
                "variable": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_608": {
                "variable": {
                    "value": "img3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tanh_620": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1_depthwise(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(x).type(dtype)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "resblock[0](out)",
                            "Call"
                        ],
                        [
                            "resblock[1](out)",
                            "Call"
                        ],
                        [
                            "resblock[2](out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "resblock[3](out)",
                            "Call"
                        ],
                        [
                            "resblock[4](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.deconv1_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "out + self.apply_resblock(out.clone(), self.resblock4A)",
                            "BinOp"
                        ],
                        [
                            "self.deconv2_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv2_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv3_pointwise(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_depthwise(out)",
                            "Call"
                        ],
                        [
                            "self.deconv4_pointwise(out)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "layer(out)",
                            "Call"
                        ],
                        [
                            "x.type(dtype)",
                            "Call"
                        ],
                        [
                            "self.g1(img1)",
                            "Call"
                        ],
                        [
                            "upsample1 + self.g2(torch.cat([img2, upsample1], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample2 + self.g3(torch.cat([img3, upsample2], dim=1))",
                            "BinOp"
                        ],
                        [
                            "upsample3 + self.g4(torch.cat([img4, upsample3], dim=1))",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_734": {
                "variable": {
                    "value": "video_d_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "video_d_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_735": {
                "variable": {
                    "value": "video_g_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "video_g_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_833": {
                "obj": {
                    "value": "video_g_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "generator_net.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_417": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_423": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_456": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_459": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_462": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_503": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_506": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_509": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_512": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_515": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_556": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_559": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_562": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_565": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_568": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_653": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_751": {
                "variable": {
                    "value": "clips_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.rollaxis(clips_x, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_752": {
                "variable": {
                    "value": "clips_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.rollaxis(clips_y, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_773": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_773": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_773": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_782": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ],
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_782": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_782": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_613": {
                "tensors": {
                    "value": "[img2, upsample1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_615": {
                "tensors": {
                    "value": "[img3, upsample2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_617": {
                "tensors": {
                    "value": "[img4, upsample3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_827": {
                "obj": {
                    "value": "video_g_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "generator_net.pth.tmp",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Transformers/translation/train.py": {
        "torch": {
            "Transformer_44": {
                "variable": {
                    "value": "trfm_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "AdamW_47": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trfm.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt_config['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "[opt_config['beta1'], opt_config['beta2']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BCELoss_62": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "actual_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "trfm_model(batch)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "expected_out",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "minGPT/mingpt/model.py": {
        "torch": {
            "Linear_48": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_52": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attn_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "variable": {
                    "value": "self.resid_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_72": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q @ k.transpose(-2, -1) * (1.0 / math.sqrt(k.size(-1)))",
                            "BinOp"
                        ],
                        [
                            "att.masked_fill(self.mask[:, :, :T, :T] == 0, float('-inf'))",
                            "Call"
                        ],
                        [
                            "F.softmax(att, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_drop(att)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_86": {
                "variable": {
                    "value": "self.ln1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_87": {
                "variable": {
                    "value": "self.ln2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(config.n_embd, 4 * config.n_embd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_108": {
                "variable": {
                    "value": "self.tok_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.pos_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, config.block_size, config.n_embd)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_110": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[Block(config) for _ in range(config.n_layer)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LayerNorm_114": {
                "variable": {
                    "value": "self.ln_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamW_177": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "optim_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': [param_dict[pn] for pn in sorted(list(decay))], 'weight_decay': train_config.weight_decay}, {'params': [param_dict[pn] for pn in sorted(list(no_decay))], 'weight_decay': 0.0}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "train_config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "train_config.betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_195": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(-1, logits.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "targets.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tril_57": {
                "input": {
                    "value": "torch.ones(config.block_size, config.block_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * config.n_embd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GELU_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "4 * config.n_embd",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "p": {
                    "value": "config.resid_pdrop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "config.block_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.n_embd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_57": {
                "*size": {
                    "value": "config.block_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "config.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "minGPT/mingpt/trainer.py": {
        "torch": {
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_50": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_51": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_57": {
                "obj": {
                    "value": "raw_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.config.ckpt_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.train_dataset if is_train else self.test_dataset",
                            "IfExp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_81": {
                "mode": {
                    "value": "is_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "split == 'train'",
                            "Compare"
                        ]
                    ]
                }
            },
            "clip_grad_norm__91": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config.grad_norm_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "minGPT/mingpt/utils.py": {
        "torch": {
            "topk_14": {
                "variable": {
                    "value": "(v, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, top_k)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_10": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_11": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_logits(logits, top_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_41": {
                "variable": {
                    "value": "ix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_43": {
                "variable": {
                    "value": "(_, ix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}