{
    "run_seq2tree.py": {
        "torch": {}
    },
    "src/masked_cross_entropy.py": {
        "torch": {
            "arange_11": {
                "variable": {
                    "value": "seq_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_41": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_81": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_45": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.log(logits_flat + 1e-12)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_86": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.log(logits_flat + 1e-12)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/models.py": {
        "torch": {
            "Embedding_17": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_18": {
                "variable": {
                    "value": "self.em_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_19": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_25": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.em_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "self.embedding(input_seq)",
                            "Call"
                        ],
                        [
                            "self.em_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "embedded.view(1, batch_size, self.embedding_size)",
                            "Call"
                        ],
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.em_dropout(embedded)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_27": {
                "variable": {
                    "value": "(outputs, output_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[:, :, :self.hidden_size] + outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_39": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "energy_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden, encoder_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_73": {
                "variable": {
                    "value": "self.em_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_74": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_75": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size + embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.concat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "energy_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden, num_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "energy_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden, encoder_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_152": {
                "variable": {
                    "value": "score_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(energy_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_158": {
                "variable": {
                    "value": "attn_energies",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.score(torch.tanh(self.attn(energy_in)))",
                            "Call"
                        ],
                        [
                            "attn_energies.squeeze(1)",
                            "Call"
                        ],
                        [
                            "attn_energies.view(max_len, this_batch_size).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "attn_energies.masked_fill_(seq_mask, -1000000000000.0)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn_energies)",
                            "Call"
                        ],
                        [
                            "self.score(score_feature)",
                            "Call"
                        ],
                        [
                            "attn_energies.squeeze(1)",
                            "Call"
                        ],
                        [
                            "attn_energies.view(max_len, this_batch_size).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "attn_energies.masked_fill_(seq_mask, -1000000000000.0)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(attn_energies, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_173": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_174": {
                "variable": {
                    "value": "self.em_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_175": {
                "variable": {
                    "value": "self.gru_pade",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_181": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.em_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "self.embedding(input_seq)",
                            "Call"
                        ],
                        [
                            "self.em_dropout(embedded)",
                            "Call"
                        ],
                        [
                            "embedded.view(1, batch_size, self.embedding_size)",
                            "Call"
                        ],
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.em_dropout(embedded)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_184": {
                "variable": {
                    "value": "(pade_outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "pade_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pade_outputs[:, :, :self.hidden_size] + pade_outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dropout_203": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_205": {
                "variable": {
                    "value": "self.embedding_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.concat_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_209": {
                "variable": {
                    "value": "self.concat_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_210": {
                "variable": {
                    "value": "self.concat_lg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_211": {
                "variable": {
                    "value": "self.concat_rg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_213": {
                "variable": {
                    "value": "self.ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "op_nums",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_242": {
                "variable": {
                    "value": "current_node",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "current_node_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_256": {
                "variable": {
                    "value": "embedding_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedding_weight, num_pades)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "leaf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(current_node, current_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_283": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "op_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_284": {
                "variable": {
                    "value": "self.em_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_285": {
                "variable": {
                    "value": "self.generate_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_286": {
                "variable": {
                    "value": "self.generate_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_287": {
                "variable": {
                    "value": "self.generate_lg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_288": {
                "variable": {
                    "value": "self.generate_rg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_298": {
                "variable": {
                    "value": "l_child",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generate_l(torch.cat((node_embedding, current_context, node_label), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_299": {
                "variable": {
                    "value": "l_child_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generate_lg(torch.cat((node_embedding, current_context, node_label), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_300": {
                "variable": {
                    "value": "r_child",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generate_r(torch.cat((node_embedding, current_context, node_label), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_301": {
                "variable": {
                    "value": "r_child_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generate_rg(torch.cat((node_embedding, current_context, node_label), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_314": {
                "variable": {
                    "value": "self.em_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_315": {
                "variable": {
                    "value": "self.merge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_316": {
                "variable": {
                    "value": "self.merge_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_323": {
                "variable": {
                    "value": "sub_tree",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.merge(torch.cat((node_embedding, sub_tree_1, sub_tree_2), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_324": {
                "variable": {
                    "value": "sub_tree_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.merge_g(torch.cat((node_embedding, sub_tree_1, sub_tree_2), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_49": {
                "input": {
                    "value": "self.attn(energy_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "(embedded, context.transpose(0, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_98": {
                "input": {
                    "value": "self.concat(torch.cat((rnn_output.squeeze(0), context.squeeze(1)), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_126": {
                "input": {
                    "value": "self.attn(energy_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_205": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_232": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_l(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_233": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_lg(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_238": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_r(torch.cat((ld, c), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_239": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_rg(torch.cat((ld, c), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_298": {
                "tensors": {
                    "value": "(node_embedding, current_context, node_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_299": {
                "tensors": {
                    "value": "(node_embedding, current_context, node_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "tensors": {
                    "value": "(node_embedding, current_context, node_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_301": {
                "tensors": {
                    "value": "(node_embedding, current_context, node_label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_323": {
                "tensors": {
                    "value": "(node_embedding, sub_tree_1, sub_tree_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_324": {
                "tensors": {
                    "value": "(node_embedding, sub_tree_1, sub_tree_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "tensors": {
                    "value": "(rnn_output.squeeze(0), context.squeeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_238": {
                "tensors": {
                    "value": "(ld, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "tensors": {
                    "value": "(ld, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_and_evaluate.py": {
        "torch": {
            "is_available_14": {
                "variable": {
                    "value": "USE_CUDA",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_394": {
                "variable": {
                    "value": "input_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_395": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_418": {
                "variable": {
                    "value": "all_decoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_length)",
                            "Call"
                        ],
                        [
                            "max(target_length)",
                            "Call"
                        ],
                        [
                            "max(target_length)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_input.size(0)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "decoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_536": {
                "variable": {
                    "value": "input_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_664": {
                "variable": {
                    "value": "input_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_666": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_668": {
                "variable": {
                    "value": "padding_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_745": {
                "variable": {
                    "value": "all_node_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_node_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_node_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "all_node_outputs.cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_node_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "all_node_outputs.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_776": {
                "variable": {
                    "value": "input_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_786": {
                "variable": {
                    "value": "padding_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_918": {
                "variable": {
                    "value": "input_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_920": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_922": {
                "variable": {
                    "value": "padding_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_982": {
                "variable": {
                    "value": "all_node_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_node_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_node_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "all_node_outputs.cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_node_outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "all_node_outputs.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1012": {
                "variable": {
                    "value": "input_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1021": {
                "variable": {
                    "value": "padding_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_438": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_input.size(0)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_565": {
                "variable": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "decoder.output_size * beam_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_568": {
                "variable": {
                    "value": "all_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(beam_list)",
                            "Call"
                        ],
                        [
                            "len(beam_list)",
                            "Call"
                        ],
                        [
                            "beam_len - 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_size_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_hidden.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "hidden_size_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_hidden.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_711": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(op, num_score)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_962": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(op, num_score)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_445": {
                "variable": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_input.size(0)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "len(input_length)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "decoder.output_size * beam_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_446": {
                "variable": {
                    "value": "all_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "decoder_hidden.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size * beam_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "decoder_hidden.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_447": {
                "variable": {
                    "value": "all_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_target_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(target_length)",
                            "Call"
                        ],
                        [
                            "max(target_length)",
                            "Call"
                        ],
                        [
                            "max(target_length)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size * beam_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "decoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__520": {
                "parameters": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__521": {
                "parameters": {
                    "value": "decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_591": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_output.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_837": {
                "tensors": {
                    "value": "(op, num_score)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1071": {
                "tensors": {
                    "value": "(op, num_score)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_466": {
                "input": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_output.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}