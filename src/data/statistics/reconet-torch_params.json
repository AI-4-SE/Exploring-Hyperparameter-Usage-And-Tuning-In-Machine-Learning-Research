{
    "data_load.py": {
        "torch": {
            "abs_155": {
                "variable": {
                    "value": "mask_contrary",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_gray - sample_gray",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_176": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_177": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "meshgrid_178": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(0, h)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, h)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(0, w)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_179": {
                "variable": {
                    "value": "gg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.unsqueeze(0), y.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grid_sample_186": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.Upsample(size=(100, 200), mode='bilinear', align_corners=True)(sample[3].unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "gg",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((x.unsqueeze(0), y.unsqueeze(0))).repeat(b, 1, 1, 1).float().to(device)",
                            "Call"
                        ],
                        [
                            "gg + flow",
                            "BinOp"
                        ],
                        [
                            "gg.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x.unsqueeze(0), y.unsqueeze(0))).repeat(b, 1, 1, 1).float().to(device)",
                            "Call"
                        ],
                        [
                            "gg + flow",
                            "BinOp"
                        ],
                        [
                            "gg.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((y.unsqueeze(0), x.unsqueeze(0))).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "2.0 * gg / 3.0 - 1.0",
                            "BinOp"
                        ],
                        [
                            "gg.permute(0, 2, 3, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_187": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(img.size(), device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "gg",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((x.unsqueeze(0), y.unsqueeze(0))).repeat(b, 1, 1, 1).float().to(device)",
                            "Call"
                        ],
                        [
                            "gg + flow",
                            "BinOp"
                        ],
                        [
                            "gg.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x.unsqueeze(0), y.unsqueeze(0))).repeat(b, 1, 1, 1).float().to(device)",
                            "Call"
                        ],
                        [
                            "gg + flow",
                            "BinOp"
                        ],
                        [
                            "gg.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((y.unsqueeze(0), x.unsqueeze(0))).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "2.0 * gg / 3.0 - 1.0",
                            "BinOp"
                        ],
                        [
                            "gg.permute(0, 2, 3, 1).float()",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_201": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_202": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "meshgrid_203": {
                "variable": {
                    "value": "(y, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(0, h)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, h)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.arange(0, w)",
                            "Call"
                        ],
                        [
                            "torch.arange(0, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_204": {
                "variable": {
                    "value": "gg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x.unsqueeze(0), y.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grid_sample_211": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.Upsample(size=(100, 200), mode='bilinear', align_corners=True)(sample[3].unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "gg",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((x.unsqueeze(0), y.unsqueeze(0))).repeat(b, 1, 1, 1).float().to(device)",
                            "Call"
                        ],
                        [
                            "gg + flow",
                            "BinOp"
                        ],
                        [
                            "gg.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x.unsqueeze(0), y.unsqueeze(0))).repeat(b, 1, 1, 1).float().to(device)",
                            "Call"
                        ],
                        [
                            "gg + flow",
                            "BinOp"
                        ],
                        [
                            "gg.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((y.unsqueeze(0), x.unsqueeze(0))).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "2.0 * gg / 3.0 - 1.0",
                            "BinOp"
                        ],
                        [
                            "gg.permute(0, 2, 3, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_212": {
                "variable": {
                    "value": "mask_boundary",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(img.size(), device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "gg",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((x.unsqueeze(0), y.unsqueeze(0))).repeat(b, 1, 1, 1).float().to(device)",
                            "Call"
                        ],
                        [
                            "gg + flow",
                            "BinOp"
                        ],
                        [
                            "gg.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x.unsqueeze(0), y.unsqueeze(0))).repeat(b, 1, 1, 1).float().to(device)",
                            "Call"
                        ],
                        [
                            "gg + flow",
                            "BinOp"
                        ],
                        [
                            "gg.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((y.unsqueeze(0), x.unsqueeze(0))).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "2.0 * gg / 3.0 - 1.0",
                            "BinOp"
                        ],
                        [
                            "gg.permute(0, 2, 3, 1).float()",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_229": {
                "variable": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample[3].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(100, 200)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_244": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_245": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(0, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(0, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "gg",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y.unsqueeze(0), x.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_247": {
                "variable": {
                    "value": "gg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "variable": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "transform.resize(flow, (height, weight))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_47": {
                "variable": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_187": {
                "*size": {
                    "value": "img.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_212": {
                "*size": {
                    "value": "img.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_226": {
                "input": {
                    "value": "sample[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_226": {
                "input": {
                    "value": "sample[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Upsample_234": {
                "size": {
                    "value": "(100, 200)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_245": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_254": {
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor([1, 2, 3, 4]).float().view(1, 1, 2, 2)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "gg",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((x.unsqueeze(0), y.unsqueeze(0))).repeat(b, 1, 1, 1).float().to(device)",
                            "Call"
                        ],
                        [
                            "gg + flow",
                            "BinOp"
                        ],
                        [
                            "gg.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x.unsqueeze(0), y.unsqueeze(0))).repeat(b, 1, 1, 1).float().to(device)",
                            "Call"
                        ],
                        [
                            "gg + flow",
                            "BinOp"
                        ],
                        [
                            "gg.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((y.unsqueeze(0), x.unsqueeze(0))).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "2.0 * gg / 3.0 - 1.0",
                            "BinOp"
                        ],
                        [
                            "gg.permute(0, 2, 3, 1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "transform.resize(flow, (height, weight))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_124": {
                "variable": {
                    "value": "flow",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_289": {
                "input": {
                    "value": "img1_warp - img2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_291": {
                "input": {
                    "value": "output_img",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.abs(img1_warp - img2) ** 2",
                            "BinOp"
                        ],
                        [
                            "output_img * mask2 * mask_boundary_img1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_293": {
                "input": {
                    "value": "output_img",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.abs(img1_warp - img2) ** 2",
                            "BinOp"
                        ],
                        [
                            "output_img * mask2 * mask_boundary_img1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "network.py": {
        "torch": {
            "mm_143": {
                "variable": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gram",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.view(a * b, c * d)",
                            "Call"
                        ],
                        [
                            "sample.view(b, c * d)",
                            "Call"
                        ],
                        [
                            "features.bmm(features_t) / (ch * h * w)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "gram.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_209": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "640",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "360",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_16": {
                "variable": {
                    "value": "self.reflect",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(math.floor(kernel_size / 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_28": {
                "variable": {
                    "value": "self.inst",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_41": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_58": {
                "variable": {
                    "value": "self.inst1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_60": {
                "variable": {
                    "value": "self.inst2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_85": {
                "variable": {
                    "value": "self.up1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_86": {
                "variable": {
                    "value": "self.up2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_153": {
                "variable": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gram",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.view(a * b, c * d)",
                            "Call"
                        ],
                        [
                            "sample.view(b, c * d)",
                            "Call"
                        ],
                        [
                            "features.bmm(features_t) / (ch * h * w)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "gram.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_172": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_155": {
                "tensors": {
                    "value": "list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_228": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_229": {
                "variable": {
                    "value": "cnn_normalization_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "variable": {
                    "value": "cnn_normalization_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MSELoss_250": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_251": {
                "variable": {
                    "value": "msesum_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adamax_253": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_style.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_255": {
                "variable": {
                    "value": "schedular",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "optim.Adamax(model_style.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.Adamax(model_style.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[8, 20]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_266": {
                "variable": {
                    "value": "data_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MPIDataset2(os.path.join(args.path, 'training'))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_267": {
                "variable": {
                    "value": "data_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MPIDataset2(os.path.join(args.path, 'test'))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adamax_285": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_style.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_184": {
                "obj": {
                    "value": "model_style.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_directory, '%s_%s.pt' % (args.phase, time_str))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "model_style.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_directory, '%s.pt' % args.phase)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_74": {
                "size": {
                    "value": "(feat1.size(2), feat1.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_77": {
                "size": {
                    "value": "(feat1.size(2), feat1.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_84": {
                "input": {
                    "value": "temp_feature_loss * mask_feat1 * mask_boundary_feat1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_101": {
                "input": {
                    "value": "temp_output_loss * mask2 * mask_boundary_img1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_137": {
                "input": {
                    "value": "torch.abs(output_img1[:, :, :-1, :] - output_img1[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_283": {
                "f": {
                    "value": "os.path.join(args.save_directory, args.model_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_137": {
                "input": {
                    "value": "output_img1[:, :, :, :-1] - output_img1[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_138": {
                "input": {
                    "value": "output_img1[:, :, :-1, :] - output_img1[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "torch.abs(output_img2[:, :, :-1, :] - output_img2[:, :, 1:, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_141": {
                "input": {
                    "value": "output_img2[:, :, :, :-1] - output_img2[:, :, :, 1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_142": {
                "input": {
                    "value": "output_img2[:, :, :-1, :] - output_img2[:, :, 1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "video_cv2.py": {
        "torch": {
            "device_78": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "frame.astype('float32') / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_36": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_81": {
                "f": {
                    "value": "os.path.join(args.save_directory, args.model_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "concat_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img, output.squeeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_41": {
                "variable": {
                    "value": "concat_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_81": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}