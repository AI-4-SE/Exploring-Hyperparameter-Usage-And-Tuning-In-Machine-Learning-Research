{
    "blocks.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_153": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "st",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_189": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous().view(1, b * c, *x.size()[2:])",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_mean.repeat(b)",
                            "Call"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_var.repeat(b)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_82": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "variable"
                        ],
                        [
                            "out_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_92": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_120": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_131": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "variable"
                        ],
                        [
                            "out_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_143": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_84": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "variable"
                        ],
                        [
                            "out_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "LeakyReLU_94": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_122": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_133": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "variable"
                        ],
                        [
                            "out_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "LeakyReLU_145": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_180": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_96": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_124": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_147": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data.py": {
        "torch": {}
    },
    "funit_model.py": {
        "torch": {
            "mean_15": {
                "input": {
                    "value": "torch.abs(predict - target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool1d_117": {
                "variable": {
                    "value": "s_xb_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_xb_after",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s_xb_before.squeeze(-1).permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_15": {
                "input": {
                    "value": "predict - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "avg_pool1d_106": {
                "variable": {
                    "value": "s_xb_current_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_xb_current_after",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s_xb_current_before.squeeze(-1).permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "networks.py": {
        "torch": {
            "Sequential_60": {
                "variable": {
                    "value": "self.cnn_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cnn_f",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.cnn_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*cnn_c",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.prod(resp_fake.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_75": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.prod(resp_real.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_84": {
                "variable": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "total_count",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.prod(resp_fake.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_155": {
                "variable": {
                    "value": "model_code",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode(one_image, model_set)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_155": {
                "variable": {
                    "value": "model_code",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_164": {
                "variable": {
                    "value": "class_code",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enc_class_model(model_set)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_164": {
                "variable": {
                    "value": "class_code",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_196": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_221": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_262": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "grad_100": {
                "outputs": {
                    "value": "d_out.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_194": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim // 2",
                            "BinOp"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hp['latent_dim']",
                            "Subscript"
                        ],
                        [
                            "latent_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_50": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_51": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_236": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_k_shot.py": {
        "torch": {
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_count_53": {
                "variable": {
                    "value": "ngpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_56": {
                "variable": {
                    "value": "trainer.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "trainer.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "range(ngpus)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "synchronize_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "RMSprop_35": {
                "variable": {
                    "value": "self.dis_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in dis_params if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['lr_gen']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "cfg",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RMSprop_38": {
                "variable": {
                    "value": "self.gen_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in gen_params if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_dis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['lr_dis']",
                            "Subscript"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "cfg",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_49": {
                "variable": {
                    "value": "self.loss_gen_total",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "al",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(co_data, cl_data, hp, 'gen_update')",
                            "Call"
                        ],
                        [
                            "self.model(co_data, cl_data, hp, 'dis_update')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_50": {
                "variable": {
                    "value": "self.loss_gen_recon_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "xr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(co_data, cl_data, hp, 'gen_update')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_51": {
                "variable": {
                    "value": "self.loss_gen_recon_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "cr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(co_data, cl_data, hp, 'gen_update')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_52": {
                "variable": {
                    "value": "self.loss_gen_recon_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "sr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(co_data, cl_data, hp, 'gen_update')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_53": {
                "variable": {
                    "value": "self.loss_gen_adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "ad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(co_data, cl_data, hp, 'gen_update')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_54": {
                "variable": {
                    "value": "self.accuracy_gen_adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "ac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(co_data, cl_data, hp, 'gen_update')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_63": {
                "variable": {
                    "value": "self.loss_dis_total",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "al",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(co_data, cl_data, hp, 'gen_update')",
                            "Call"
                        ],
                        [
                            "self.model(co_data, cl_data, hp, 'dis_update')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_64": {
                "variable": {
                    "value": "self.loss_dis_fake_adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "lfa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(co_data, cl_data, hp, 'dis_update')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_65": {
                "variable": {
                    "value": "self.loss_dis_real_adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "lre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(co_data, cl_data, hp, 'dis_update')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_66": {
                "variable": {
                    "value": "self.loss_dis_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(co_data, cl_data, hp, 'dis_update')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_67": {
                "variable": {
                    "value": "self.accuracy_dis_adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(co_data, cl_data, hp, 'dis_update')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_79": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "last_model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_models[-1]",
                            "Subscript"
                        ],
                        [
                            "get_model_list(checkpoint_dir, 'gen')",
                            "Call"
                        ],
                        [
                            "get_model_list(checkpoint_dir, 'dis')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_85": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "last_model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_models[-1]",
                            "Subscript"
                        ],
                        [
                            "get_model_list(checkpoint_dir, 'gen')",
                            "Call"
                        ],
                        [
                            "get_model_list(checkpoint_dir, 'dis')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_88": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoint_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_110": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_103": {
                "obj": {
                    "value": "{'gen': this_model.gen.state_dict(), 'gen_test': this_model.gen_test.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_dir, 'gen_%08d.pt' % (iterations + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_105": {
                "obj": {
                    "value": "{'dis': this_model.dis.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "dis_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_dir, 'dis_%08d.pt' % (iterations + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_106": {
                "obj": {
                    "value": "{'gen': self.gen_opt.state_dict(), 'dis': self.dis_opt.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "opt_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(snapshot_dir, 'optimizer.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_142": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "hp['step_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hp",
                            "Method Argument"
                        ],
                        [
                            "hp",
                            "Method Argument"
                        ],
                        [
                            "hp",
                            "Method Argument"
                        ],
                        [
                            "hp",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "hp['gamma']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "hp",
                            "Method Argument"
                        ],
                        [
                            "hp",
                            "Method Argument"
                        ],
                        [
                            "hp",
                            "Method Argument"
                        ],
                        [
                            "hp",
                            "Method Argument"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "DataLoader_57": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageLabelFilelist(root, file_list, transform, return_paths=return_paths)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf['batch_size']",
                            "Subscript"
                        ],
                        [
                            "conf['batch_size']",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf['num_workers']",
                            "Subscript"
                        ],
                        [
                            "conf['num_workers']",
                            "Subscript"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_167": {
                "variable": {
                    "value": "image_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images[:dis_img_n] for images in im_outs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}