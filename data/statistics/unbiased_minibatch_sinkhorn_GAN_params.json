{
    "GAN/U_MBSD_GAN.py": {
        "torch": {
            "tensor_53": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['batch_size']",
                            "Subscript"
                        ],
                        [
                            "real_imgs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSprop_70": {
                "variable": {
                    "value": "optimizer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "RMSprop_71": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_170": {
                "obj": {
                    "value": "{'generator_state_dict': netG.state_dict(), 'features_state_dict': netD.state_dict(), 'optimizer_gen_state_dict': optimizer_G.state_dict(), 'features_state_dict': optimizer_D.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(config['output_path_results'], 'umbSD_euclidean_reg_{}_final.pth'.format(reg))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "GAN/architecture.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_channels",
                            "Method Argument"
                        ],
                        [
                            "n_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_18": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "cndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndf",
                            "variable"
                        ],
                        [
                            "cndf * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_57": {
                "in_channels": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngf // 2",
                            "BinOp"
                        ],
                        [
                            "cngf * 2",
                            "BinOp"
                        ],
                        [
                            "cngf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "num_features": {
                    "value": "cngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngf // 2",
                            "BinOp"
                        ],
                        [
                            "cngf * 2",
                            "BinOp"
                        ],
                        [
                            "cngf // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_72": {
                "in_channels": {
                    "value": "cngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngf // 2",
                            "BinOp"
                        ],
                        [
                            "cngf * 2",
                            "BinOp"
                        ],
                        [
                            "cngf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_channels",
                            "Method Argument"
                        ],
                        [
                            "n_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cndf",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cndf * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "out_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cndf * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LeakyReLU_29": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_64": {
                "in_channels": {
                    "value": "cngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngf // 2",
                            "BinOp"
                        ],
                        [
                            "cngf * 2",
                            "BinOp"
                        ],
                        [
                            "cngf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cngf // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "cngf // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "GAN/generate_imgs.py": {
        "torch": {
            "load_60": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SD_weights_10.pth'",
                            "str"
                        ],
                        [
                            "'wgan_gp2.pth'",
                            "str"
                        ],
                        [
                            "methods[i]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "GAN/inception_score.py": {
        "torch": {
            "load_27": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'results/umbSD_euclidean_reg_100.0_epoch975.pth'",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "GAN/utils.py": {
        "torch": {
            "exp_37": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-M / reg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ot.unif(K.size()[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_46": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-M / reg).type(Tensor).double()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.diagflat(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ot.unif(X.size()[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ot.unif(Y.size()[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ot.unif(X.size()[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ot.unif(Y.size()[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_120": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ot.emd(a, b, M.detach().cpu().numpy().copy())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_164": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgs",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Upsample_169": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "variable": {
                    "value": "Kv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-M / reg).type(Tensor).double()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(ot.unif(K.size()[1])).type(Tensor).double()",
                            "Call"
                        ],
                        [
                            "b / Ku",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_43": {
                "variable": {
                    "value": "Ku",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.transpose(K, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a / Kv",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_47": {
                "input": {
                    "value": "pi * M.double()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_121": {
                "input": {
                    "value": "pi * M.double()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_262": {
                "variable": {
                    "value": "D_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up(x)",
                            "Call"
                        ],
                        [
                            "inception_model(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diagflat_46": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(ot.unif(K.size()[1])).type(Tensor).double()",
                            "Call"
                        ],
                        [
                            "b / Ku",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_266": {
                "variable": {
                    "value": "D_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up(x)",
                            "Call"
                        ],
                        [
                            "inception_model(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_43": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-M / reg).type(Tensor).double()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_174": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up(x)",
                            "Call"
                        ],
                        [
                            "inception_model(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Gromov_Wasserstein/Horse/horse_examples.py": {
        "torch": {}
    }
}