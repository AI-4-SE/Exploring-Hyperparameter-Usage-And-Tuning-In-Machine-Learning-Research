{
    "analysis/eval_start_at_depth.py": {
        "sklearn": {}
    },
    "analysis/evaluate_action_start.py": {
        "sklearn": {}
    },
    "helpers/convolve_out.py": {
        "sklearn": {}
    },
    "helpers/hantman_mouse.py": {
        "sklearn": {}
    },
    "helpers/load_hantman_jaaba.py": {
        "sklearn": {}
    },
    "helpers/parse_hantman_mat.py": {
        "sklearn": {}
    },
    "helpers/paths.py": {
        "sklearn": {}
    },
    "helpers/pca_data.py": {
        "sklearn": {
            "IncrementalPCA_11": {
                "variable": {
                    "value": "ipca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "helpers/pca_helper.py": {
        "sklearn": {}
    },
    "helpers/preprocess_features.py": {
        "sklearn": {}
    },
    "helpers/preprocess_features2.py": {
        "sklearn": {}
    },
    "helpers/reduce_data.py": {
        "sklearn": {
            "IncrementalPCA_13": {
                "variable": {
                    "value": "ipca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "i3d/eval_finetune.py": {
        "tensorflow": {
            "DEFINE_string_57": {
                "name": {
                    "value": "eval_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "rgb, rgb600, flow, or joint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_59": {
                "name": {
                    "value": "filelist",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Text file with list of experiments.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_60": {
                "name": {
                    "value": "gpus",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "GPU to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "window_start",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-31",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Offset from the desired frame.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_62": {
                "name": {
                    "value": "window_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Window size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_63": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_64": {
                "name": {
                    "value": "movie_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Movie folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_65": {
                "name": {
                    "value": "out_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_66": {
                "name": {
                    "value": "feat_key",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "new feature key name.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_67": {
                "name": {
                    "value": "logfile",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "log filename.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_68": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "model filename.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_69": {
                "name": {
                    "value": "type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "front or side.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_70": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "placeholder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_71": {
                "name": {
                    "value": "feat_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "feature folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_219": {
                "variable": {
                    "value": "new_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_439": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "endpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_448": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=endpoint, labels=labels)",
                            "Call"
                        ],
                        [
                            "label_weights * cost",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cost)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_verbosity_195": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_222": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_253": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_257": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_293": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_445": {
                "variable": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labels * weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_452": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_455": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_470": {
                "main": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_226": {
                "name_or_scope": {
                    "value": "RGB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_243": {
                "values": {
                    "value": "rgb_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_244": {
                "values": {
                    "value": "rgb_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_260": {
                "name_or_scope": {
                    "value": "Flow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_283": {
                "values": {
                    "value": "rgb_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_284": {
                "values": {
                    "value": "rgb_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_320": {
                "msg": {
                    "value": "RGB checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_329": {
                "msg": {
                    "value": "Flow checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_233": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_269": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "i3d/eval_finetune_odas.py": {
        "tensorflow": {
            "DEFINE_string_57": {
                "name": {
                    "value": "eval_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "rgb, rgb600, flow, or joint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_59": {
                "name": {
                    "value": "filelist",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Text file with list of experiments.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_60": {
                "name": {
                    "value": "gpus",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "GPU to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "window_start",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-31",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Offset from the desired frame.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_62": {
                "name": {
                    "value": "window_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Window size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_63": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_64": {
                "name": {
                    "value": "movie_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Movie folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_65": {
                "name": {
                    "value": "out_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_66": {
                "name": {
                    "value": "feat_key",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "new feature key name.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_67": {
                "name": {
                    "value": "logfile",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "log filename.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_68": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "model filename.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_69": {
                "name": {
                    "value": "type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "front or side.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_70": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "placeholder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_71": {
                "name": {
                    "value": "feat_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "feature folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_234": {
                "variable": {
                    "value": "new_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_468": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "endpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_477": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=endpoint, labels=labels)",
                            "Call"
                        ],
                        [
                            "label_weights * cost",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cost)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_verbosity_210": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_237": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_270": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_274": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_310": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_474": {
                "variable": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labels * weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_481": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_484": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_499": {
                "main": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "RGB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_258": {
                "values": {
                    "value": "rgb_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_259": {
                "values": {
                    "value": "rgb_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_277": {
                "name_or_scope": {
                    "value": "Flow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_300": {
                "values": {
                    "value": "rgb_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_301": {
                "values": {
                    "value": "rgb_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_338": {
                "msg": {
                    "value": "RGB checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_347": {
                "msg": {
                    "value": "Flow checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_248": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_286": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "i3d/evaluate_hantman.py": {
        "tensorflow": {
            "DEFINE_string_55": {
                "name": {
                    "value": "eval_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "rgb, rgb600, flow, or joint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_57": {
                "name": {
                    "value": "filelist",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Text file with list of experiments.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_58": {
                "name": {
                    "value": "gpus",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "GPU to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_59": {
                "name": {
                    "value": "window_start",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-31",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Offset from the desired frame.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_60": {
                "name": {
                    "value": "window_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Window size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_62": {
                "name": {
                    "value": "movie_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Movie folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_63": {
                "name": {
                    "value": "out_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_64": {
                "name": {
                    "value": "feat_key",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "new feature key name.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_65": {
                "name": {
                    "value": "logfile",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "log filename.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_verbosity_190": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_214": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_232": {
                "variable": {
                    "value": "rgb_endpoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "rgb_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_241": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_245": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_264": {
                "variable": {
                    "value": "rgb_endpoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "rgb_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_271": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "run_402": {
                "main": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "RGB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_248": {
                "name_or_scope": {
                    "value": "Flow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_289": {
                "msg": {
                    "value": "RGB checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_298": {
                "msg": {
                    "value": "Flow checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_224": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_256": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "i3d/evaluate_hantman_check.py": {
        "tensorflow": {
            "DEFINE_string_55": {
                "name": {
                    "value": "eval_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "rgb, rgb600, flow, or joint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_57": {
                "name": {
                    "value": "filelist",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Text file with list of experiments.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_58": {
                "name": {
                    "value": "gpus",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "GPU to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_59": {
                "name": {
                    "value": "window_start",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-31",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Offset from the desired frame.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_60": {
                "name": {
                    "value": "window_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Window size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_62": {
                "name": {
                    "value": "movie_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Movie folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_63": {
                "name": {
                    "value": "out_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_64": {
                "name": {
                    "value": "feat_key",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "new feature key name.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_65": {
                "name": {
                    "value": "logfile",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "log filename.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_verbosity_190": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_214": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_232": {
                "variable": {
                    "value": "rgb_endpoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "rgb_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_241": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_245": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_264": {
                "variable": {
                    "value": "rgb_endpoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "rgb_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_271": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "run_407": {
                "main": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "RGB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_248": {
                "name_or_scope": {
                    "value": "Flow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_289": {
                "msg": {
                    "value": "RGB checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_298": {
                "msg": {
                    "value": "Flow checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_224": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_256": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "i3d/evaluate_thumos.py": {
        "tensorflow": {
            "DEFINE_string_56": {
                "name": {
                    "value": "eval_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "rgb, rgb600, flow, or joint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_58": {
                "name": {
                    "value": "filelist",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Text file with list of experiments.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_59": {
                "name": {
                    "value": "gpus",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "GPU to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_60": {
                "name": {
                    "value": "window_start",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-31",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Offset from the desired frame.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "window_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Window size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_62": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_63": {
                "name": {
                    "value": "movie_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Movie folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_64": {
                "name": {
                    "value": "out_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_65": {
                "name": {
                    "value": "feat_key",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "new feature key name.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_66": {
                "name": {
                    "value": "logfile",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "log filename.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_verbosity_200": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_224": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size * gpu_num, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_239": {
                "variable": {
                    "value": "rgb_endpoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "rgb_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_246": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_250": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_266": {
                "variable": {
                    "value": "rgb_endpoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "rgb_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_272": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "run_408": {
                "main": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_228": {
                "name_or_scope": {
                    "value": "RGB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_253": {
                "name_or_scope": {
                    "value": "Flow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_290": {
                "msg": {
                    "value": "RGB checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_297": {
                "msg": {
                    "value": "Flow checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_234": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_261": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "i3d/i3d.py": {
        "tensorflow": {
            "max_pool3d_174": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_189": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_252": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_398": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_mean_483": {
                "variable": {
                    "value": "averaged_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_484": {
                "variable": {
                    "value": "averaged_logits2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=21, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='hantman_Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits2, [2, 3], name='hantman_Squeeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_490": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "averaged_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_219": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_247": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_281": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_309": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_337": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_365": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_393": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_427": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_455": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool3d_463": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 7, 7, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.VALID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_467": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_212": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_241": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_258": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_275": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_286": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_303": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_314": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_331": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_342": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_359": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_370": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_387": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_404": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_421": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_432": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_449": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_462": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "squeeze_481": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_482": {
                "variable": {
                    "value": "logits2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=21, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='hantman_Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits2, [2, 3], name='hantman_Squeeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hantman_Squeeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_228": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_259": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_262": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_268": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_274": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_287": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_290": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_296": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_315": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_324": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_330": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_343": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_346": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_352": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_358": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_371": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_374": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_380": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_386": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_405": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_408": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_414": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_420": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_433": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_436": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_442": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_448": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_466": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "i3d/i3d2.py": {
        "tensorflow": {
            "max_pool3d_174": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_189": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_252": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_398": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_mean_483": {
                "variable": {
                    "value": "averaged_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_484": {
                "variable": {
                    "value": "averaged_logits2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=7, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='hantman_Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits2, [2, 3], name='hantman_Squeeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_490": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "averaged_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_219": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_247": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_281": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_309": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_337": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_365": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_393": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_427": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_455": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool3d_463": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 7, 7, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.VALID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_467": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_212": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_241": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_258": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_275": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_286": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_303": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_314": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_331": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_342": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_359": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_370": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_387": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_404": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_421": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_432": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_449": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_462": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "squeeze_481": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_482": {
                "variable": {
                    "value": "logits2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=7, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='hantman_Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits2, [2, 3], name='hantman_Squeeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hantman_Squeeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_228": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_259": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_262": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_268": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_274": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_287": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_290": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_296": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_315": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_324": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_330": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_343": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_346": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_352": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_358": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_371": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_374": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_380": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_386": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_405": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_408": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_414": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_420": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_433": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_436": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_442": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_448": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_466": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "i3d/i3d_org.py": {
        "tensorflow": {
            "max_pool3d_174": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_189": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_252": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_398": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_mean_476": {
                "variable": {
                    "value": "averaged_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_481": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "averaged_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_219": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_247": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_281": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_309": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_337": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_365": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_393": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_427": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_455": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool3d_463": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 7, 7, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.VALID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_467": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_212": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_241": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_258": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_275": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_286": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_303": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_314": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_331": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_342": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_359": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_370": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_387": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_404": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_421": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_432": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_449": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=False)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_462": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "squeeze_475": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_228": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_259": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_262": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_268": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_274": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_287": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_290": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_296": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_315": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_324": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_330": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_343": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_346": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_352": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_358": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_371": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_374": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_380": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_386": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_405": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_408": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_414": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_420": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_433": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_436": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_442": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_448": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_466": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "i3d/odas_i3d.py": {
        "tensorflow": {
            "max_pool3d_330": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_333": {
                "variable": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net2, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net2, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_617": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_619": {
                "variable": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net2, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net2, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_mean_762": {
                "variable": {
                    "value": "averaged_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_763": {
                "variable": {
                    "value": "averaged_logits2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=7, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='hantman_Conv3d_0c_1x1')(logits, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits2, [2, 3], name='hantman_Squeeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_783": {
                "variable": {
                    "value": "averaged_logits_smooth",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_791": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "averaged_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool3d_176": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_191": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_202": {
                "variable": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net2, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net2, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_214": {
                "variable": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net2, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net2, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_242": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_271": {
                "variable": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_298": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_326": {
                "variable": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_361": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_389": {
                "variable": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_416": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_444": {
                "variable": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_472": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_500": {
                "variable": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_528": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_556": {
                "variable": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_584": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_612": {
                "variable": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_648": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_676": {
                "variable": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_704": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_734": {
                "variable": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool3d_740": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 7, 7, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.VALID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_744": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool3d_769": {
                "variable": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net2, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net2, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 7, 7, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.VALID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_773": {
                "variable": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net2, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net2, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "base",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "base",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_235": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_247": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool3d_264": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net2, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net2, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_275": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_292": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_303": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool3d_320": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net2, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net2, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_355": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_366": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool3d_383": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net2, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net2, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_393": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_410": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_421": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool3d_438": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net2, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net2, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_449": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_466": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_477": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool3d_494": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net2, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net2, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_505": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_522": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_533": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool3d_550": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net2, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net2, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_561": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_578": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_589": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool3d_606": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net2, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net2, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_625": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_642": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_653": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool3d_670": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net2, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net2, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_681": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_698": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_711": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool3d_728": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[1]",
                            "Subscript"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net2, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net2, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net2, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_739": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "squeeze_760": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_761": {
                "variable": {
                    "value": "logits2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=7, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='hantman_Conv3d_0c_1x1')(logits, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits2, [2, 3], name='hantman_Squeeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hantman_Squeeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_768": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_782": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net2, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_786": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_219": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_228": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_248": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_251": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_257": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_276": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_279": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_285": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_291": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_304": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_307": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_313": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_339": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_342": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_348": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_354": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_367": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_370": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_376": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_382": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_394": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_397": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_403": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_409": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_422": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_425": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_431": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_437": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_450": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_453": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_459": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_465": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_478": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_481": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_487": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_493": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_506": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_509": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_515": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_521": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_534": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_537": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_543": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_549": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_562": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_565": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_571": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_577": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_590": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_593": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_599": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_605": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_626": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_629": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_635": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_641": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_654": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_657": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_663": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_669": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_682": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_685": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_691": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_697": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_712": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_715": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_721": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_727": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Flatten_751": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_780": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "i3d/odas_i3d_eval.py": {
        "tensorflow": {
            "max_pool3d_257": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_415": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_mean_506": {
                "variable": {
                    "value": "averaged_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_507": {
                "variable": {
                    "value": "averaged_logits2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=7, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='hantman_Conv3d_0c_1x1')(logits, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits2, [2, 3], name='hantman_Squeeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_513": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "averaged_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool3d_176": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_191": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_221": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_250": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_286": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_316": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_347": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_378": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_408": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_444": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_474": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool3d_484": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 7, 7, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.VALID",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_488": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "base",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_214": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_244": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_280": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_293": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_310": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_324": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_341": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_355": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_372": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_385": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_402": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_421": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_438": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_451": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "max_pool3d_468": {
                "variable": {
                    "value": "branch_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "snt.Conv3D(output_channels=self._output_channels, kernel_shape=self._kernel_shape, stride=self._stride, padding=snt.SAME, use_bias=self._use_bias)(inputs)",
                            "Call"
                        ],
                        [
                            "bn(net, is_training=is_training, test_local_stats=True)",
                            "Call"
                        ],
                        [
                            "self._activation_fn(net)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[7, 7, 7], stride=[2, 2, 2], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=64, kernel_shape=[1, 1, 1], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "Unit3D(output_channels=192, kernel_shape=[3, 3, 3], name=end_point)(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 1, 3, 3, 1], strides=[1, 1, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 3, 3, 3, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(net, ksize=[1, 2, 2, 2, 1], strides=[1, 2, 2, 2, 1], padding=snt.SAME, name=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([branch_0, branch_1, branch_2, branch_3], 4)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(net, ksize=[1, 2, 7, 7, 1], strides=[1, 1, 1, 1, 1], padding=snt.VALID)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(net, dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 3, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "snt.SAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool3d_0a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_483": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'Conv3d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv3d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool3d_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Logits'",
                            "Constant"
                        ],
                        [
                            "'Predictions'",
                            "Constant"
                        ]
                    ]
                }
            },
            "squeeze_504": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=self._num_classes, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='Conv3d_0c_1x1')(net, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [2, 3], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_505": {
                "variable": {
                    "value": "logits2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Unit3D(output_channels=7, kernel_shape=[1, 1, 1], activation_fn=None, use_batch_norm=False, use_bias=True, name='hantman_Conv3d_0c_1x1')(logits, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits2, [2, 3], name='hantman_Squeeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "hantman_Squeeze",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_201": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_207": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_213": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_228": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_237": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_264": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_267": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_273": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_279": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_294": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_297": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_303": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_309": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_325": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_328": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_334": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_340": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_356": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_359": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_365": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_371": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_386": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_389": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_395": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_401": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_422": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_425": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_431": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_437": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_452": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_455": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_461": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_467": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_495": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "i3d/process_i3d_network.py": {
        "tensorflow": {
            "DEFINE_string_54": {
                "name": {
                    "value": "eval_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "rgb, flow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_56": {
                "name": {
                    "value": "filelist",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Text file with list of experiments.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_58": {
                "name": {
                    "value": "window_start",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-31",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Offset from the desired frame.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_59": {
                "name": {
                    "value": "window_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Window size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_60": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_61": {
                "name": {
                    "value": "movie_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Movie folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_62": {
                "name": {
                    "value": "out_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_63": {
                "name": {
                    "value": "feat_key",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "new feature key name.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_65": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "model file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_66": {
                "name": {
                    "value": "feature_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "feature folder.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_verbosity_185": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_226": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_254": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_258": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_286": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "run_415": {
                "main": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "global_variables_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "RGB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_261": {
                "name_or_scope": {
                    "value": "Flow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_306": {
                "msg": {
                    "value": "RGB checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_314": {
                "msg": {
                    "value": "Flow checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_236": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_269": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "i3d/train_hantman.py": {
        "tensorflow": {
            "DEFINE_string_60": {
                "name": {
                    "value": "eval_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "rgb, rgb600, flow, or joint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_62": {
                "name": {
                    "value": "filelist",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Text file with list of experiments.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_64": {
                "name": {
                    "value": "window_start",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-12",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Offset from the desired frame.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_65": {
                "name": {
                    "value": "window_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Window size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_66": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_67": {
                "name": {
                    "value": "frames",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "List of frames to use. automatically generated.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_69": {
                "name": {
                    "value": "total_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Total number of epochs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_70": {
                "name": {
                    "value": "save_iterations",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations to save the network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_73": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_74": {
                "name": {
                    "value": "frame",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "side or front.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_78": {
                "name": {
                    "value": "max_workers",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Max number of workers.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_79": {
                "name": {
                    "value": "max_queue",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum queue length.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_80": {
                "name": {
                    "value": "out_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Output directory path.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_81": {
                "name": {
                    "value": "train_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Train data filename (hdf5).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_82": {
                "name": {
                    "value": "display_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "display dir.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_83": {
                "name": {
                    "value": "video_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "video dir.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_84": {
                "name": {
                    "value": "hantman_mini_batch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "video dir.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_398": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "endpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([labels, np.zeros((num_rows, 1))], axis=1)",
                            "Call"
                        ],
                        [
                            "batch[2]",
                            "Subscript"
                        ],
                        [
                            "augment_labels(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_407": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=endpoint, labels=labels)",
                            "Call"
                        ],
                        [
                            "label_weights * cost",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cost)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "cost + out[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_verbosity_259": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_404": {
                "variable": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labels * weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_409": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_412": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_429": {
                "msg": {
                    "value": "RGB data loaded, shape=%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "str(rgb_sample.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_515": {
                "main": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_306": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_309": {
                "variable": {
                    "value": "org_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, NUM_CLASSES)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_313": {
                "variable": {
                    "value": "new_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_351": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_355": {
                "variable": {
                    "value": "flow_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_367": {
                "variable": {
                    "value": "flow_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "flow_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_315": {
                "name_or_scope": {
                    "value": "RGB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_323": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_358": {
                "name_or_scope": {
                    "value": "Flow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_380": {
                "msg": {
                    "value": "RGB checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_387": {
                "msg": {
                    "value": "Flow checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "i3d/train_i3d_c3d_hantman.py": {
        "tensorflow": {
            "DEFINE_string_62": {
                "name": {
                    "value": "eval_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "rgb, rgb600, flow, or joint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_64": {
                "name": {
                    "value": "filelist",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Text file with list of experiments.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_66": {
                "name": {
                    "value": "window_start",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-12",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Offset from the desired frame.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_67": {
                "name": {
                    "value": "window_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Window size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_68": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_69": {
                "name": {
                    "value": "frames",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "List of frames to use. automatically generated.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_71": {
                "name": {
                    "value": "total_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Total number of epochs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_72": {
                "name": {
                    "value": "save_iterations",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations to save the network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_75": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_76": {
                "name": {
                    "value": "frame",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "side or front.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_80": {
                "name": {
                    "value": "max_workers",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Max number of workers.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_81": {
                "name": {
                    "value": "max_queue",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum queue length.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_82": {
                "name": {
                    "value": "out_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Output directory path.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_83": {
                "name": {
                    "value": "train_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Train data filename (hdf5).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_84": {
                "name": {
                    "value": "display_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "display dir.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_85": {
                "name": {
                    "value": "video_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "video dir.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_86": {
                "name": {
                    "value": "hantman_mini_batch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "video dir.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_431": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "endpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([labels, np.zeros((num_rows, 1))], axis=1)",
                            "Call"
                        ],
                        [
                            "batch[1]",
                            "Subscript"
                        ],
                        [
                            "augment_labels(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_440": {
                "variable": {
                    "value": "sim_cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(avg - avg_next) * (avg - avg_next)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_441": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "class_cost + 0.01 * sim_cost",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_443": {
                "variable": {
                    "value": "last_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "RGB/inception_i3d/Logits/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_444": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fid.readline().strip()",
                            "Call"
                        ],
                        [
                            "fid.readline().strip()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_verbosity_276": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_437": {
                "variable": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labels * weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_464": {
                "msg": {
                    "value": "RGB data loaded, shape=%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "str(rgb_sample.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_578": {
                "main": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_340": {
                "variable": {
                    "value": "org_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, NUM_CLASSES)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_344": {
                "variable": {
                    "value": "new_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, len(g_label_names) + 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_390": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_419": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_392": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_413": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_334": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, split_num_frames, _IMAGE_SIZE, _IMAGE_SIZE, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_336": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, split_num_frames, _IMAGE_SIZE, _IMAGE_SIZE, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_346": {
                "name_or_scope": {
                    "value": "RGB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_354": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_400": {
                "msg": {
                    "value": "RGB checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_407": {
                "msg": {
                    "value": "Flow checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "i3d/train_i3d_flow_hantman.py": {
        "tensorflow": {
            "DEFINE_string_60": {
                "name": {
                    "value": "eval_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "rgb, rgb600, flow, or joint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_62": {
                "name": {
                    "value": "filelist",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Text file with list of experiments.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_64": {
                "name": {
                    "value": "window_start",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-12",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Offset from the desired frame.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_65": {
                "name": {
                    "value": "window_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Window size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_66": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_67": {
                "name": {
                    "value": "frames",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "List of frames to use. automatically generated.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_69": {
                "name": {
                    "value": "total_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Total number of epochs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_70": {
                "name": {
                    "value": "save_iterations",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations to save the network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_73": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_74": {
                "name": {
                    "value": "frame",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "side or front.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_78": {
                "name": {
                    "value": "max_workers",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Max number of workers.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_79": {
                "name": {
                    "value": "max_queue",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum queue length.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_80": {
                "name": {
                    "value": "out_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Output directory path.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_81": {
                "name": {
                    "value": "train_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Train data filename (hdf5).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_82": {
                "name": {
                    "value": "display_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "display dir.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_83": {
                "name": {
                    "value": "video_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "video dir.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_84": {
                "name": {
                    "value": "hantman_mini_batch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "video dir.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_361": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "endpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([labels, np.zeros((num_rows, 1))], axis=1)",
                            "Call"
                        ],
                        [
                            "batch[1]",
                            "Subscript"
                        ],
                        [
                            "augment_labels(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_370": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=endpoint, labels=labels)",
                            "Call"
                        ],
                        [
                            "label_weights * cost",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cost)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "cost + out[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_verbosity_190": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_367": {
                "variable": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labels * weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_374": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_377": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_394": {
                "msg": {
                    "value": "RGB data loaded, shape=%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "str(rgb_sample.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_485": {
                "main": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_237": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_240": {
                "variable": {
                    "value": "org_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, NUM_CLASSES)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_244": {
                "variable": {
                    "value": "new_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_282": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_286": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_289": {
                "variable": {
                    "value": "org_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, NUM_CLASSES)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_293": {
                "variable": {
                    "value": "new_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_323": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_348": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_246": {
                "name_or_scope": {
                    "value": "RGB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_254": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_295": {
                "name_or_scope": {
                    "value": "Flow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_302": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_336": {
                "msg": {
                    "value": "Flow checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "i3d/train_i3d_flow_hantman2.py": {
        "tensorflow": {
            "DEFINE_string_60": {
                "name": {
                    "value": "eval_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "rgb, rgb600, flow, or joint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_62": {
                "name": {
                    "value": "filelist",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Text file with list of experiments.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_64": {
                "name": {
                    "value": "window_start",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-12",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Offset from the desired frame.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_65": {
                "name": {
                    "value": "window_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Window size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_66": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_67": {
                "name": {
                    "value": "frames",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "List of frames to use. automatically generated.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_69": {
                "name": {
                    "value": "total_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Total number of epochs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_70": {
                "name": {
                    "value": "save_iterations",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations to save the network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_73": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_74": {
                "name": {
                    "value": "frame",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "side or front.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_78": {
                "name": {
                    "value": "max_workers",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Max number of workers.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_79": {
                "name": {
                    "value": "max_queue",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum queue length.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_80": {
                "name": {
                    "value": "out_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Output directory path.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_81": {
                "name": {
                    "value": "train_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Train data filename (hdf5).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_82": {
                "name": {
                    "value": "display_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "display dir.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_83": {
                "name": {
                    "value": "video_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "video dir.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_84": {
                "name": {
                    "value": "hantman_mini_batch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "video dir.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_347": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "endpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([labels, np.zeros((num_rows, 1))], axis=1)",
                            "Call"
                        ],
                        [
                            "all_labels[0, j, :]",
                            "Subscript"
                        ],
                        [
                            "augment_labels(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_356": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=endpoint, labels=labels)",
                            "Call"
                        ],
                        [
                            "label_weights * cost",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cost)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "cost + out[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_verbosity_190": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_353": {
                "variable": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labels * weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_358": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_361": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_378": {
                "msg": {
                    "value": "RGB data loaded, shape=%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "str(rgb_sample.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_489": {
                "main": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_237": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_240": {
                "variable": {
                    "value": "org_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, NUM_CLASSES)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_244": {
                "variable": {
                    "value": "new_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_282": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_286": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_289": {
                "variable": {
                    "value": "org_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, NUM_CLASSES)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_293": {
                "variable": {
                    "value": "new_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 7)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_323": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_246": {
                "name_or_scope": {
                    "value": "RGB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_254": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_295": {
                "name_or_scope": {
                    "value": "Flow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_302": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_336": {
                "msg": {
                    "value": "Flow checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "i3d/train_i3d_rgb_hantman.py": {
        "tensorflow": {
            "DEFINE_string_62": {
                "name": {
                    "value": "eval_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "rgb, rgb600, flow, or joint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_64": {
                "name": {
                    "value": "filelist",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Text file with list of experiments.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_66": {
                "name": {
                    "value": "window_start",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "-12",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Offset from the desired frame.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_67": {
                "name": {
                    "value": "window_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Window size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_68": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_69": {
                "name": {
                    "value": "frames",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "List of frames to use. automatically generated.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_71": {
                "name": {
                    "value": "total_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Total number of epochs.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_72": {
                "name": {
                    "value": "save_iterations",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of iterations to save the network.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_75": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_76": {
                "name": {
                    "value": "frame",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "side or front.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_80": {
                "name": {
                    "value": "max_workers",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Max number of workers.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_81": {
                "name": {
                    "value": "max_queue",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Maximum queue length.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_82": {
                "name": {
                    "value": "out_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Output directory path.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_83": {
                "name": {
                    "value": "train_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "Train data filename (hdf5).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_84": {
                "name": {
                    "value": "display_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "display dir.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_85": {
                "name": {
                    "value": "video_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "video dir.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_86": {
                "name": {
                    "value": "hantman_mini_batch",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "video dir.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_431": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "endpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate([labels, np.zeros((num_rows, 1))], axis=1)",
                            "Call"
                        ],
                        [
                            "batch[1]",
                            "Subscript"
                        ],
                        [
                            "augment_labels(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_440": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=endpoint, labels=labels)",
                            "Call"
                        ],
                        [
                            "label_weights * cost",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cost)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "cost + out[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_verbosity_275": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_437": {
                "variable": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labels * weight",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_444": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fid.readline().strip()",
                            "Call"
                        ],
                        [
                            "fid.readline().strip()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_447": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_464": {
                "msg": {
                    "value": "RGB data loaded, shape=%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "str(rgb_sample.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_573": {
                "main": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_331": {
                "variable": {
                    "value": "rgb_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, window_size, _IMAGE_SIZE, _IMAGE_SIZE, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_334": {
                "variable": {
                    "value": "org_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, NUM_CLASSES)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_338": {
                "variable": {
                    "value": "new_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, len(g_label_names) + 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_376": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_424": {
                "variable": {
                    "value": "rgb_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "rgb_variable_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "reshape": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_418": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_340": {
                "name_or_scope": {
                    "value": "RGB",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_348": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_405": {
                "msg": {
                    "value": "RGB checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_412": {
                "msg": {
                    "value": "Flow checkpoint restored",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "cached_thumos_matching.py": {
        "torch": {
            "Adam_161": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_190": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_266": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([opts['eps']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_287": {
                "variable": {
                    "value": "cdf_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "temp_y / y_sum",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_288": {
                "variable": {
                    "value": "cdf_yhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "temp_yhat / (yhat_sum + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_328": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_329": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_456": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_457": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_167": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_291": {
                "input": {
                    "value": "cdf_y - cdf_yhat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_583": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "check_epoch.py": {
        "torch": {
            "Adam_121": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_402": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_680": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_352": {},
            "Tensor_441": {}
        }
    },
    "dataparallel_test.py": {
        "torch": {
            "Adam_118": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_101": {
                "variable": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hantman_hungarian.HantmanHungarianConcat(input_dims=opts['feat_dims'], hidden_dim=opts['flags'].lstm_hidden_dim, output_dim=num_classes, label_weight=label_weight)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(network, device_ids=[0, 2])",
                            "Call"
                        ],
                        [
                            "hantman_hungarian.HantmanHungarianSum(input_dims=opts['feat_dims'], hidden_dim=opts['flags'].lstm_hidden_dim, output_dim=num_classes, label_weight=label_weight)",
                            "Call"
                        ],
                        [
                            "hantman_hungarian.HantmanHungarianBidirConcat(input_dims=opts['feat_dims'], hidden_dim=opts['flags'].lstm_hidden_dim, output_dim=num_classes, label_weight=label_weight)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_device_624": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_351": {},
            "Tensor_434": {}
        }
    },
    "eval_hungarian_mouse.py": {
        "torch": {
            "Adam_154": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_183": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_184": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_259": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([opts['eps']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_278": {
                "variable": {
                    "value": "cdf_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "temp_y / (y_sum + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_279": {
                "variable": {
                    "value": "cdf_yhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "temp_yhat / (yhat_sum + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_293": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_416": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_417": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_160": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_150": {
                "f": {
                    "value": "opts['flags'].model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_282": {
                "input": {
                    "value": "cdf_y - cdf_yhat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_538": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "extras/common.py": {
        "torch": {}
    },
    "extras/opt_flow.py": {
        "torch": {}
    },
    "extras/video.py": {
        "torch": {}
    },
    "feedforward.py": {
        "torch": {
            "Adam_161": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_167": {
                "variable": {
                    "value": "label_weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "NLLLoss_168": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "label_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / np.mean(label_mat, axis=0)",
                            "BinOp"
                        ],
                        [
                            "[5, 5, 5, 5, 5, 5, 0.01]",
                            "List"
                        ],
                        [
                            "torch.Tensor(label_weight)",
                            "Call"
                        ],
                        [
                            "_get_label_weight(opts, train_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_271": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_407": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_507": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_255": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "feedforward_eval.py": {
        "torch": {
            "Adam_163": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_169": {
                "variable": {
                    "value": "label_weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "NLLLoss_170": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "label_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / np.mean(label_mat, axis=0)",
                            "BinOp"
                        ],
                        [
                            "[5, 5, 5, 5, 5, 5, 0.01]",
                            "List"
                        ],
                        [
                            "torch.Tensor(label_weight)",
                            "Call"
                        ],
                        [
                            "_get_label_weight(opts, train_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_132": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opts['flags'].load_network",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_352": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_475": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "feedforward_jigsaw.py": {
        "torch": {
            "zeros_240": {
                "variable": {
                    "value": "feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat1_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_319": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_322": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_136": {
                "variable": {
                    "value": "(boo, cow)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_136": {
                "variable": {
                    "value": "(boo, cow)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_220": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_387": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "hantman_3dconv.py": {
        "torch": {
            "Adam_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_120": {
                "variable": {
                    "value": "label_weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "NLLLoss_121": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "label_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(label_weight)",
                            "Call"
                        ],
                        [
                            "1.0 / np.mean(label_mat, axis=0)",
                            "BinOp"
                        ],
                        [
                            "[5, 5, 5, 5, 5, 5, 0.01]",
                            "List"
                        ],
                        [
                            "_get_label_weight(opts, train_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_533": {
                "variable": {
                    "value": "feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(frames)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_534": {
                "variable": {
                    "value": "feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(frames)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_579": {
                "variable": {
                    "value": "feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat1_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_580": {
                "variable": {
                    "value": "feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat2_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_224": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_376": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_622": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "hantman_3dconv_eval.py": {
        "torch": {
            "Adam_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_125": {
                "variable": {
                    "value": "label_weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "NLLLoss_126": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "label_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(label_weight)",
                            "Call"
                        ],
                        [
                            "1.0 / np.mean(label_mat, axis=0)",
                            "BinOp"
                        ],
                        [
                            "[5, 5, 5, 5, 5, 5, 0.01]",
                            "List"
                        ],
                        [
                            "_get_label_weight(opts, train_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_213": {
                "variable": {
                    "value": "feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(frames)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_214": {
                "variable": {
                    "value": "feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(frames)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat1_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat2_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_117": {
                "variable": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opts['flags'].model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_192": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_306": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "helpers/convert_state_dict.py": {
        "torch": {
            "load_7": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "saved",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/nrs/branson/kwaki/outputs/20180205_3dconv/networks/53200/network.pt'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "helpers/feedforward_bak.py": {
        "torch": {
            "Adam_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_140": {
                "variable": {
                    "value": "label_weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "NLLLoss_141": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "label_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / np.mean(label_mat, axis=0)",
                            "BinOp"
                        ],
                        [
                            "[5, 5, 5, 5, 5, 5, 0.01]",
                            "List"
                        ],
                        [
                            "torch.Tensor(label_weight)",
                            "Call"
                        ],
                        [
                            "_get_label_weight(opts, train_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_239": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_312": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_321": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_304": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "helpers/general.py": {
        "torch": {}
    },
    "helpers/hantman_sampler.py": {
        "torch": {
            "zeros_234": {
                "variable": {
                    "value": "temp_feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._pos_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_235": {
                "variable": {
                    "value": "temp_feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._pos_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_256": {
                "variable": {
                    "value": "pos_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._pos_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_278": {
                "variable": {
                    "value": "temp_feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._neg_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_279": {
                "variable": {
                    "value": "temp_feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._neg_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "neg_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._neg_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_labels, neg_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_522": {
                "variable": {
                    "value": "temp_feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['org_labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, 1500)",
                            "Call"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, 1500)",
                            "Call"
                        ],
                        [
                            "self.data['exps'][exp_name]['labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, self.seq_len)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_523": {
                "variable": {
                    "value": "temp_feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['org_labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, 1500)",
                            "Call"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, 1500)",
                            "Call"
                        ],
                        [
                            "self.data['exps'][exp_name]['labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, self.seq_len)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_535": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value",
                            "Attribute"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value",
                            "Attribute"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['labels'].value[:num_frames, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_924": {
                "variable": {
                    "value": "feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_925": {
                "variable": {
                    "value": "feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_962": {
                "variable": {
                    "value": "temp_feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._pos_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_963": {
                "variable": {
                    "value": "temp_feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._pos_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_980": {
                "variable": {
                    "value": "pos_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._pos_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1002": {
                "variable": {
                    "value": "temp_feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._neg_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1003": {
                "variable": {
                    "value": "temp_feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._neg_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1020": {
                "variable": {
                    "value": "neg_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._neg_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1038": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_labels, neg_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1069": {
                "variable": {
                    "value": "relabel",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_labels, relabel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1331": {
                "variable": {
                    "value": "temp_feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['org_labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, 1500)",
                            "Call"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, 1500)",
                            "Call"
                        ],
                        [
                            "self.data['exps'][exp_name]['labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, self.seq_len)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1332": {
                "variable": {
                    "value": "temp_feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['org_labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, 1500)",
                            "Call"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, 1500)",
                            "Call"
                        ],
                        [
                            "self.data['exps'][exp_name]['labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, self.seq_len)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_1344": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value",
                            "Attribute"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value",
                            "Attribute"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['labels'].value[:num_frames, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_1553": {
                "variable": {
                    "value": "temp_feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._pos_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1554": {
                "variable": {
                    "value": "temp_feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._pos_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1575": {
                "variable": {
                    "value": "pos_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._pos_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1597": {
                "variable": {
                    "value": "temp_feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._neg_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1598": {
                "variable": {
                    "value": "temp_feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._neg_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1620": {
                "variable": {
                    "value": "neg_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._neg_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1646": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_labels, neg_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_264": {
                "variable": {
                    "value": "pos_labels[sample_i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value",
                            "Attribute"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value",
                            "Attribute"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['labels'].value[:num_frames, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_988": {
                "variable": {
                    "value": "pos_labels[sample_i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value",
                            "Attribute"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value",
                            "Attribute"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['labels'].value[:num_frames, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_1583": {
                "variable": {
                    "value": "pos_labels[sample_i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value",
                            "Attribute"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value",
                            "Attribute"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['labels'].value[:num_frames, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_1854": {
                "variable": {
                    "value": "temp_feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['org_labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, 1500)",
                            "Call"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, 1500)",
                            "Call"
                        ],
                        [
                            "self.data['exps'][exp_name]['labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, self.seq_len)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1855": {
                "variable": {
                    "value": "temp_feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['org_labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, 1500)",
                            "Call"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, 1500)",
                            "Call"
                        ],
                        [
                            "self.data['exps'][exp_name]['labels'].shape[0]",
                            "Subscript"
                        ],
                        [
                            "min(num_frames, self.seq_len)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_324": {
                "tensors": {
                    "value": "[pos, neg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1035": {
                "tensors": {
                    "value": "[pos, neg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1643": {
                "tensors": {
                    "value": "[pos, neg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_1876": {
                "ndarray": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value",
                            "Attribute"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value",
                            "Attribute"
                        ],
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['labels'].value[:num_frames, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_1880": {
                "ndarray": {
                    "value": "org_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['org_labels'].value[:num_frames, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "helpers/videosampler.py": {
        "torch": {
            "tensor_139": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "labels.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "labels.cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_size, self.label_dims)",
                            "Call"
                        ],
                        [
                            "torch.cat([pos_labels, neg_labels])",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.seq_len, self.label_dims)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_frames, self.label_dims)",
                            "Call"
                        ],
                        [
                            "cur_labels",
                            "Name"
                        ],
                        [
                            "torch.zeros(num_frames, self.label_dims)",
                            "Call"
                        ],
                        [
                            "cur_labels",
                            "Name"
                        ],
                        [
                            "torch.zeros(batch_size, self.label_dims)",
                            "Call"
                        ],
                        [
                            "torch.cat([pos_labels, neg_labels])",
                            "Call"
                        ],
                        [
                            "torch.tensor(labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "labels.cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_size, self.label_dims)",
                            "Call"
                        ],
                        [
                            "torch.cat([pos_labels, neg_labels])",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_140": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(masks, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "masks.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(masks, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "masks.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(masks, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "masks.cuda()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "variable": {
                    "value": "proc_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "proc_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(proc_labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "proc_labels.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(proc_labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "proc_labels.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(proc_labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "proc_labels.cuda()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_313": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "labels.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "labels.cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_size, self.label_dims)",
                            "Call"
                        ],
                        [
                            "torch.cat([pos_labels, neg_labels])",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.seq_len, self.label_dims)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_frames, self.label_dims)",
                            "Call"
                        ],
                        [
                            "cur_labels",
                            "Name"
                        ],
                        [
                            "torch.zeros(num_frames, self.label_dims)",
                            "Call"
                        ],
                        [
                            "cur_labels",
                            "Name"
                        ],
                        [
                            "torch.zeros(batch_size, self.label_dims)",
                            "Call"
                        ],
                        [
                            "torch.cat([pos_labels, neg_labels])",
                            "Call"
                        ],
                        [
                            "torch.tensor(labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "labels.cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_size, self.label_dims)",
                            "Call"
                        ],
                        [
                            "torch.cat([pos_labels, neg_labels])",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_314": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(masks, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "masks.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(masks, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "masks.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(masks, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "masks.cuda()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_315": {
                "variable": {
                    "value": "proc_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "proc_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(proc_labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "proc_labels.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(proc_labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "proc_labels.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(proc_labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "proc_labels.cuda()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_664": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.label_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_722": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_labels, neg_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1040": {
                "variable": {
                    "value": "frames1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ],
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ],
                        [
                            "numpy.min([num_frames, self.seq_len])",
                            "Call"
                        ],
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ],
                        [
                            "numpy.min([num_frames, np_labels.shape[0], self.seq_len])",
                            "Call"
                        ],
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1042": {
                "variable": {
                    "value": "frames2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ],
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ],
                        [
                            "numpy.min([num_frames, self.seq_len])",
                            "Call"
                        ],
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ],
                        [
                            "numpy.min([num_frames, np_labels.shape[0], self.seq_len])",
                            "Call"
                        ],
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1044": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ],
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ],
                        [
                            "numpy.min([num_frames, self.seq_len])",
                            "Call"
                        ],
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ],
                        [
                            "numpy.min([num_frames, np_labels.shape[0], self.seq_len])",
                            "Call"
                        ],
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.label_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1199": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.label_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1264": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_labels, neg_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1480": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "labels.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "labels.cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_size, self.label_dims)",
                            "Call"
                        ],
                        [
                            "torch.cat([pos_labels, neg_labels])",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.seq_len, self.label_dims)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_frames, self.label_dims)",
                            "Call"
                        ],
                        [
                            "cur_labels",
                            "Name"
                        ],
                        [
                            "torch.zeros(num_frames, self.label_dims)",
                            "Call"
                        ],
                        [
                            "cur_labels",
                            "Name"
                        ],
                        [
                            "torch.zeros(batch_size, self.label_dims)",
                            "Call"
                        ],
                        [
                            "torch.cat([pos_labels, neg_labels])",
                            "Call"
                        ],
                        [
                            "torch.tensor(labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "labels.cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_size, self.label_dims)",
                            "Call"
                        ],
                        [
                            "torch.cat([pos_labels, neg_labels])",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_1481": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(masks, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "masks.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(masks, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "masks.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(masks, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "masks.cuda()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_1482": {
                "variable": {
                    "value": "proc_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "proc_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(proc_labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "proc_labels.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(proc_labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "proc_labels.cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(proc_labels, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "proc_labels.cuda()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_1797": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.label_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1846": {
                "variable": {
                    "value": "pos_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pos_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(pos_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_1847": {
                "variable": {
                    "value": "neg_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "neg_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(neg_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1851": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_labels, neg_labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_652": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_660": {
                "variable": {
                    "value": "temp_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_662": {
                "variable": {
                    "value": "temp_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(self.frames)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_681": {
                "variable": {
                    "value": "labels[sample_i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['labels'][frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['labels'][frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.all_labels[frame_id, movie_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_907": {
                "variable": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_909": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.label_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_912": {
                "variable": {
                    "value": "frames",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ],
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ],
                        [
                            "numpy.min([num_frames, self.seq_len])",
                            "Call"
                        ],
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ],
                        [
                            "numpy.min([num_frames, np_labels.shape[0], self.seq_len])",
                            "Call"
                        ],
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_914": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_frames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ],
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ],
                        [
                            "numpy.min([num_frames, self.seq_len])",
                            "Call"
                        ],
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ],
                        [
                            "numpy.min([num_frames, np_labels.shape[0], self.seq_len])",
                            "Call"
                        ],
                        [
                            "int(cap.get(cv2.CAP_PROP_FRAME_COUNT))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.label_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1193": {
                "variable": {
                    "value": "frames1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1194": {
                "variable": {
                    "value": "frames2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1196": {
                "variable": {
                    "value": "frames1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(self.frames)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1197": {
                "variable": {
                    "value": "frames2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(self.frames)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_1216": {
                "variable": {
                    "value": "labels[sample_i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['labels'][frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['labels'][frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.all_labels[frame_id, movie_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_1806": {
                "variable": {
                    "value": "labels[sample_i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['labels'][frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['labels'][frame_i, :]",
                            "Subscript"
                        ],
                        [
                            "self.all_labels[frame_id, movie_id]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_137": {
                "data": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_311": {
                "data": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_720": {
                "tensors": {
                    "value": "[pos_features, neg_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_932": {
                "ndarray": {
                    "value": "np_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['labels'][()]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['labels'][()]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_1046": {
                "ndarray": {
                    "value": "np_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.data['exps'][exp_name]['labels'][()]",
                            "Subscript"
                        ],
                        [
                            "self.data['exps'][exp_name]['labels'][()]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_1258": {
                "tensors": {
                    "value": "[pos, neg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_1478": {
                "data": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_1849": {
                "tensors": {
                    "value": "[pos_features, neg_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1183": {
                "tensors": {
                    "value": "preproc_imgs1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1184": {
                "tensors": {
                    "value": "preproc_imgs2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "hungarian_lstm.py": {
        "torch": {
            "MSELoss_188": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_374": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_198": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "blob['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "blob['masks']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_211": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "blob['masks']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_217": {
                "variable": {
                    "value": "conv_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smooth_data(opts, blob['labels'])",
                            "Call"
                        ],
                        [
                            "conv_labels * mask",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(conv_labels, requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_device_400": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "data": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "((blob['features'][j] - means[j]) / stds[j]).astype('float32')",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "hungarianmouse.py": {
        "torch": {
            "Adam_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_430": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_698": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_380": {},
            "Tensor_464": {}
        }
    },
    "hungarianmouse_diff.py": {
        "torch": {
            "Adam_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_593": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_339": {},
            "Tensor_421": {}
        }
    },
    "hungarianmouse_image.py": {
        "torch": {
            "Adam_124": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_553": {
                "*size": {
                    "value": "opts['flags'].seq_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opts['mini_batch_size']",
                            "Subscript"
                        ],
                        [
                            "opts['flags'].hantman_mini_batch",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "224 * 224",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_device_648": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_353": {},
            "Tensor_435": {}
        }
    },
    "image_lstm.py": {
        "torch": {
            "Adam_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_164": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "load_hungarian_mouse.py": {
        "torch": {
            "Adam_161": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_190": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_266": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([opts['eps']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_286": {
                "variable": {
                    "value": "cdf_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "temp_y / y_sum",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_287": {
                "variable": {
                    "value": "cdf_yhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "temp_yhat / (yhat_sum + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_300": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_301": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_428": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_429": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_167": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_290": {
                "input": {
                    "value": "cdf_y - cdf_yhat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_559": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/example_lstm.py": {
        "torch": {
            "Linear_22": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sum(input_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_23": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_27": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_32": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "both",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/hantman_3dconv.py": {
        "torch": {
            "Conv3d_11": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv3d(1, 64, kernel_size=(3, 3, 3), padding=(1, 1, 1))), ('relu1', nn.ReLU(True)), ('maxpool1', nn.MaxPool3d(kernel_size=(1, 2, 2), stride=(1, 2, 2))), ('conv2', nn.Conv3d(64, 128, kernel_size=(3, 3, 3), padding=(1, 1, 1))), ('relu2', nn.ReLU(True)), ('maxpool2', nn.MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2))), ('conv3a', nn.Conv3d(128, 256, kernel_size=(3, 3, 3), padding=(1, 1, 1))), ('relu3a', nn.ReLU(True)), ('conv3b', nn.Conv3d(256, 256, kernel_size=(3, 3, 3), padding=(1, 1, 1))), ('relu3b', nn.ReLU(True)), ('maxpool3', nn.MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2))), ('conv4a', nn.Conv3d(256, 512, kernel_size=(3, 3, 3), padding=(1, 1, 1))), ('relu4a', nn.ReLU(True)), ('conv4b', nn.Conv3d(512, 512, kernel_size=(3, 3, 3), padding=(1, 1, 1))), ('relu4b', nn.ReLU(True)), ('maxpool4', nn.MaxPool3d(kernel_size=(2, 2, 2), stride=(2, 2, 2)))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 100352",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LogSoftmax_62": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "both",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input1, input2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_22": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_24": {
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_26": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_28": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_30": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_32": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_34": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_42": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_44": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_46": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/hantman_feedforward.py": {
        "torch": {
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_38": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * 512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * 512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.fc_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_62": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "both",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input1, input2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * 512 * 7 * 7, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 7 * 7, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "both",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input1, input2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "in_features": {
                    "value": "2 * 512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_134": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_136": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_139": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_152": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/hantman_hungarian.py": {
        "torch": {
            "tensor_209": {
                "variable": {
                    "value": "tp_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tp_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(tp_weight, requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "variable": {
                    "value": "fp_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "fp_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(fp_weight, requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_211": {
                "variable": {
                    "value": "tp_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tp_weight > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sum(self.input_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_60": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_65": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.is_bidir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_73": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "both",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_147": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_148": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(input_dim, hidden_dim) for input_dim in input_dims]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_151": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_152": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_156": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_161": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_346": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sum(self.input_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_347": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_349": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_350": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_354": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_359": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_361": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_391": {
                "variable": {
                    "value": "both",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_426": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_436": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100352 // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_437": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_442": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_445": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_447": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_488": {
                "variable": {
                    "value": "seq1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img1s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_522": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_532": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100352",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_533": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_538": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_541": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_543": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_584": {
                "variable": {
                    "value": "seq1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img1s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_617": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_618": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(input_dim, hidden_dim) for input_dim in input_dims]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_621": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_622": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_626": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_629": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_631": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_692": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sum(self.input_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_693": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_695": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_696": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_700": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_705": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogSoftmax_708": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_738": {
                "variable": {
                    "value": "both",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_773": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sum(self.input_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_774": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_776": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_777": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_781": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_786": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogSoftmax_789": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_819": {
                "variable": {
                    "value": "both",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_427": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_428": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_429": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_430": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_431": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_432": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_433": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_434": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_435": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_523": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_524": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_525": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_526": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_527": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_528": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_529": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_530": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_531": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_169": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_369": {
                "*size": {
                    "value": "2 * self.n_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_372": {
                "*size": {
                    "value": "2 * self.n_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_455": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_458": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_551": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_554": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_619": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_639": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_642": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_716": {
                "*size": {
                    "value": "2 * self.n_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_719": {
                "*size": {
                    "value": "2 * self.n_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_797": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_800": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "2 * self.n_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "*size": {
                    "value": "2 * self.n_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/hantman_lstm_parallel.py": {
        "torch": {
            "Linear_41": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sum(input_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_42": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_47": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_52": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "both",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_115": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_116": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(input_dim, hidden_dim) for input_dim in input_dims]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_120": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_124": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_129": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_276": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sum(self.input_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_277": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_283": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_288": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_290": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "both",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_355": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_365": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100352 // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_366": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_371": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_374": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_376": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_417": {
                "variable": {
                    "value": "seq1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img1s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_451": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_461": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100352",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_462": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_467": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_470": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_472": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_513": {
                "variable": {
                    "value": "seq1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img1s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_356": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_357": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_358": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_359": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_360": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_361": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_362": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_363": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_364": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_452": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_453": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_454": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_455": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_456": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_457": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_458": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_459": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_460": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_137": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_298": {
                "*size": {
                    "value": "2 * self.n_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "*size": {
                    "value": "2 * self.n_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_384": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_387": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_480": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_483": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/jigsaw_2dconv.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/jigsaw_3dconv.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv3d(3, 64, kernel_size=(3, 3, 3), stride=2, padding=1)), ('bn1', nn.BatchNorm3d(64)), ('relu1', nn.ReLU(inplace=True)), ('maxpool1', nn.MaxPool3d(kernel_size=3, stride=2, padding=1)), ('conv2', nn.Conv3d(64, 128, kernel_size=3, stride=2, padding=1)), ('bn2', nn.BatchNorm3d(128)), ('relu2', nn.ReLU(inplace=True)), ('maxpool2', nn.MaxPool3d(kernel_size=3, stride=2, padding=1)), ('conv3', nn.Conv3d(128, 256, kernel_size=3, stride=2, padding=1)), ('bn3', nn.BatchNorm3d(256)), ('relu3', nn.ReLU(inplace=True)), ('maxpool3', nn.MaxPool3d(kernel_size=3, stride=2, padding=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc1', nn.Linear(4096, 4096)), ('relu1', nn.ReLU(True)), ('drop1', nn.Dropout()), ('fc3', nn.Linear(4096, 16)), ('sigmoid', nn.LogSoftmax())])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_17": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_18": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_20": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_21": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_22": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_24": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_25": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_26": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool3d_28": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/lstm_conv2d.py": {
        "torch": {
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_44": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_49": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * 512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * 512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "both",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input1, input2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_139": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_144": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "both",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embed.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embed.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/mpii_model.py": {
        "torch": {
            "Linear_41": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sum(input_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_42": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_47": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_52": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "both",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_114": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_115": {
                "variable": {
                    "value": "self.fcs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(input_dim, hidden_dim) for input_dim in input_dims]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_119": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_123": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_128": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_279": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sum(self.input_dims)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_280": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_282": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_283": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_287": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_292": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_294": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "both",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_359": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_369": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100352 // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_370": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_375": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_378": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_380": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_421": {
                "variable": {
                    "value": "seq1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img1s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_455": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_465": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100352",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_466": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_471": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_474": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_476": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_517": {
                "variable": {
                    "value": "seq1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "img1s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_360": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_361": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_362": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_363": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_364": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_365": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_366": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_367": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_368": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_456": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_457": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_458": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_459": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_460": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_461": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_462": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_463": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_464": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_136": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_302": {
                "*size": {
                    "value": "2 * self.n_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_305": {
                "*size": {
                    "value": "2 * self.n_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_388": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_391": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_484": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_487": {
                "*size": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ],
                        [
                            "inputs[0].size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/test_example.py": {
        "torch": {
            "Adam_33": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_37": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_82": {
                "variable": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "network",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "example_lstm.HantmanHungarianConcat(input_dims=[4096, 4096], hidden_dim=64, output_dim=output_dim)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(network, device_ids=[0, 2], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(labels).float()",
                            "Call"
                        ],
                        [
                            "labels.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_79": {
                "device": {
                    "value": "FLAGS.cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_98": {
                "ndarray": {
                    "value": "feats[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "ndarray": {
                    "value": "feats[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mpii.py": {
        "torch": {
            "Adam_129": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_405": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_668": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_352": {},
            "Tensor_439": {}
        }
    },
    "no_nms.py": {
        "torch": {
            "Adam_121": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_477": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_744": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_427": {},
            "Tensor_511": {}
        }
    },
    "no_struct_mouse.py": {
        "torch": {
            "MSELoss_87": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_398": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_666": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_355": {},
            "Tensor_432": {}
        }
    },
    "threaded_hungarian.py": {
        "torch": {
            "Adam_164": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_241": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "threaded_hungarian_mouse.py": {
        "torch": {
            "Adam_148": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_253": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([opts['eps']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_272": {
                "variable": {
                    "value": "cdf_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "temp_y / (y_sum + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_273": {
                "variable": {
                    "value": "cdf_yhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "temp_yhat / (yhat_sum + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_286": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_287": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_410": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_411": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_154": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_276": {
                "input": {
                    "value": "cdf_y - cdf_yhat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_527": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "threaded_hungarian_mouse2.py": {
        "torch": {
            "Adam_148": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_253": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([opts['eps']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_272": {
                "variable": {
                    "value": "cdf_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "temp_y / (y_sum + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_273": {
                "variable": {
                    "value": "cdf_yhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "temp_yhat / (yhat_sum + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_286": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_287": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_410": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_411": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_154": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_276": {
                "input": {
                    "value": "cdf_y - cdf_yhat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_527": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "threaded_hungarian_mouse_test.py": {
        "torch": {
            "Adam_144": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_251": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([opts['eps']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_270": {
                "variable": {
                    "value": "cdf_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "temp_y / (y_sum + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_271": {
                "variable": {
                    "value": "cdf_yhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "temp_yhat / (yhat_sum + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_284": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_285": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_407": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_408": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_152": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_274": {
                "input": {
                    "value": "cdf_y - cdf_yhat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_521": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "timed_hantman_3dconv.py": {
        "torch": {
            "Adam_102": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_105": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_174": {
                "variable": {
                    "value": "feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "feat1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat1_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "feat2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat2_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_250": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_345": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "timed_hungarianmouse.py": {
        "torch": {
            "Adam_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_509": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_802": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_394": {},
            "Tensor_560": {}
        }
    },
    "train.py": {
        "torch": {
            "save_189": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_516": {
                "variable": {
                    "value": "conv_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "blob['proc_labels']",
                            "Subscript"
                        ],
                        [
                            "conv_labels * mask",
                            "BinOp"
                        ],
                        [
                            "conv_labels.cuda()",
                            "Call"
                        ],
                        [
                            "blob['proc_labels']",
                            "Subscript"
                        ],
                        [
                            "conv_labels * frame_mask",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(conv_labels, requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train2.py": {
        "torch": {
            "save_198": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_536": {
                "variable": {
                    "value": "conv_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "blob['proc_labels']",
                            "Subscript"
                        ],
                        [
                            "conv_labels * mask",
                            "BinOp"
                        ],
                        [
                            "conv_labels.cuda()",
                            "Call"
                        ],
                        [
                            "blob['proc_labels']",
                            "Subscript"
                        ],
                        [
                            "conv_labels * frame_mask",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(conv_labels, requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_174": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_eval.py": {
        "torch": {
            "save_155": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_487": {
                "variable": {
                    "value": "conv_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "blob['proc_labels']",
                            "Subscript"
                        ],
                        [
                            "conv_labels * mask",
                            "BinOp"
                        ],
                        [
                            "conv_labels.cuda()",
                            "Call"
                        ],
                        [
                            "blob['proc_labels']",
                            "Subscript"
                        ],
                        [
                            "conv_labels * frame_mask",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(conv_labels, requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_thumos.py": {
        "torch": {
            "save_197": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_524": {
                "variable": {
                    "value": "conv_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "blob['proc_labels']",
                            "Subscript"
                        ],
                        [
                            "conv_labels * mask",
                            "BinOp"
                        ],
                        [
                            "conv_labels.cuda()",
                            "Call"
                        ],
                        [
                            "blob['proc_labels']",
                            "Subscript"
                        ],
                        [
                            "conv_labels * frame_mask",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(conv_labels, requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_173": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "out_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(out_dir, 'network.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "wasserstein_mouse.py": {
        "torch": {
            "Adam_144": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts['flags'].learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_251": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([opts['eps']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_255": {
                "variable": {
                    "value": "y_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "temp_y.sum(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y_sum == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "variable": {
                    "value": "yhat_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "temp_yhat.sum(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_264": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "yhat_sum == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_267": {
                "variable": {
                    "value": "cdf_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "temp_y / (y_sum + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_268": {
                "variable": {
                    "value": "cdf_yhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yhat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "temp_yhat / (yhat_sum + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_282": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_405": {
                "variable": {
                    "value": "neg_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_406": {
                "variable": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label_weights[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_152": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_271": {
                "input": {
                    "value": "cdf_y - cdf_yhat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_519": {
                "device": {
                    "value": "opts['flags'].cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}