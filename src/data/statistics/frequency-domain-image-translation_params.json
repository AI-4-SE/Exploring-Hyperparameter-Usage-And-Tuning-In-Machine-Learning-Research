{
    "Image2StlyleGAN/dnnlib/tflib/autosummary.py": {
        "tensorflow": {}
    },
    "Image2StlyleGAN/dnnlib/tflib/network.py": {
        "tensorflow": {}
    },
    "Image2StlyleGAN/dnnlib/tflib/optimizer.py": {
        "tensorflow": {
            "convert_to_tensor_52": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_default_graph_54": {
                "variable": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_90": {
                "name": {
                    "value": "self.id + '_grad'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_90": {
                "device_name": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "group_180": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "TrainingOp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_194": {
                "variable": {
                    "value": "self._dev_ls_var[device]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.float32(self.loss_scaling_init)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_scaling_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.apply_loss_scaling(tf.cast(loss, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_193": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "name_scope_117": {
                "name": {
                    "value": "'ProcessGrads%d' % dev_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_117": {
                "device_name": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "name_scope_130": {
                "name": {
                    "value": "SumAcrossGPUs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_130": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "name_scope_142": {
                "name": {
                    "value": "'ApplyGrads%d' % dev_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_142": {
                "device_name": {
                    "value": "dev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_all_152": {
                "input_tensor": {
                    "value": "tf.is_finite(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_99": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_146": {
                "variable": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.float32(1.0 / total_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "coef",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_151": {
                "name": {
                    "value": "CheckOverflow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_155": {
                "name": {
                    "value": "UpdateWeights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_122": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[dev_grads[dev][var_idx][0] for dev in devices]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for (g, v) in gv]",
                            "ListComp"
                        ],
                        [
                            "g[0] if len(g) == 1 else tf.add_n(g)",
                            "IfExp"
                        ],
                        [
                            "nccl_ops.all_sum(g)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_123": {
                "inputs": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[dev_grads[dev][var_idx][0] for dev in devices]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for (g, v) in gv]",
                            "ListComp"
                        ],
                        [
                            "g[0] if len(g) == 1 else tf.add_n(g)",
                            "IfExp"
                        ],
                        [
                            "nccl_ops.all_sum(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_145": {
                "name": {
                    "value": "Scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_152": {
                "values": {
                    "value": "[tf.reduce_all(tf.is_finite(g)) for (g, v) in grads]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_169": {
                "name": {
                    "value": "Statistics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_161": {
                "pred": {
                    "value": "grad_ok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([tf.reduce_all(tf.is_finite(g)) for (g, v) in grads]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : opt.apply_gradients(grads)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_163": {
                "pred": {
                    "value": "grad_ok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([tf.reduce_all(tf.is_finite(g)) for (g, v) in grads]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.group(tf.assign_add(ls_var, self.loss_scaling_inc), opt.apply_gradients(grads))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.group(tf.assign_sub(ls_var, self.loss_scaling_dec))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "where_171": {
                "condition": {
                    "value": "grad_ok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([tf.reduce_all(tf.is_finite(g)) for (g, v) in grads]))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_finite_152": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[dev_grads[dev][var_idx][0] for dev in devices]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for (g, v) in gv]",
                            "ListComp"
                        ],
                        [
                            "g[0] if len(g) == 1 else tf.add_n(g)",
                            "IfExp"
                        ],
                        [
                            "nccl_ops.all_sum(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_164": {
                "*inputs": {
                    "value": "tf.assign_add(ls_var, self.loss_scaling_inc)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "opt.apply_gradients(grads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_165": {
                "*inputs": {
                    "value": "tf.assign_sub(ls_var, self.loss_scaling_dec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_add_164": {
                "ref": {
                    "value": "ls_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_loss_scaling_var(dev)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.loss_scaling_inc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_sub_165": {
                "ref": {
                    "value": "ls_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_loss_scaling_var(dev)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.loss_scaling_dec",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Image2StlyleGAN/dnnlib/tflib/tfutil.py": {
        "tensorflow": {}
    },
    "Image2StlyleGAN/encode_image_freq.py": {
        "torch": {
            "Sequential_45": {
                "variable": {
                    "value": "g_all",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('g_mapping', G_mapping()), ('g_synthesis', G_synthesis(resolution=args.resolution))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_64": {
                "variable": {
                    "value": "MSE_Loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_67": {
                "variable": {
                    "value": "upsample2d",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "256 / args.resolution",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "dlatent",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 18, 512)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Adam_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "{dlatent}",
                    "type": "Set",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l1_loss_117": {
                "variable": {
                    "value": "loss_rec_blur",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_rec2_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_freq.find_fake_freq(synth_img, gauss_kernel)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x_real_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_freq.find_fake_freq(img, gauss_kernel)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_54": {
                "f": {
                    "value": "args.weight_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "Image2StlyleGAN/encode_image_freq_batch.py": {
        "torch": {
            "Sequential_46": {
                "variable": {
                    "value": "g_all",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('g_mapping', G_mapping()), ('g_synthesis', G_synthesis(resolution=args.resolution))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l1_loss_112": {
                "variable": {
                    "value": "loss_rec_blur",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_rec2_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_freq.find_fake_freq(synth_img, gauss_kernel)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x_real_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils_freq.find_fake_freq(img, gauss_kernel)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_68": {
                "variable": {
                    "value": "MSE_Loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_71": {
                "variable": {
                    "value": "upsample2d",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "256 / args.resolution",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "dlatent",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 18, 512)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Adam_76": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "{dlatent}",
                    "type": "Set",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_55": {
                "f": {
                    "value": "args.weight_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "Image2StlyleGAN/perceptual_model.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.slice0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Image2StlyleGAN/stylegan_layers.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(output_size, input_size) * init_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(output_channels, input_channels, kernel_size, kernel_size) * init_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_113": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(kernel, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "kernel[:, None] * kernel[None, :]",
                            "BinOp"
                        ],
                        [
                            "kernel[None, None]",
                            "Subscript"
                        ],
                        [
                            "kernel / kernel.sum()",
                            "BinOp"
                        ],
                        [
                            "kernel[:, :, ::-1, ::-1]",
                            "Subscript"
                        ],
                        [
                            "self.kernel.expand(x.size(1), -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_165": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "x * (style[:, 0] + 1.0) + style[:, 1]",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "self.style_mod(x, dlatents_in_slice)",
                            "Call"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.dense(dlatents_in_range[:, 0]).view(batch_size, self.nf, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "m(dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "m(x, dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "x * self.gain",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(kernel, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "kernel[:, None] * kernel[None, :]",
                            "BinOp"
                        ],
                        [
                            "kernel[None, None]",
                            "Subscript"
                        ],
                        [
                            "kernel / kernel.sum()",
                            "BinOp"
                        ],
                        [
                            "kernel[:, :, ::-1, ::-1]",
                            "Subscript"
                        ],
                        [
                            "self.kernel.expand(x.size(1), -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((self.kernel.size(2) - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "groups": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "lerp_233": {
                "variable": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.avg_latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "x * (style[:, 0] + 1.0) + style[:, 1]",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "self.style_mod(x, dlatents_in_slice)",
                            "Call"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.dense(dlatents_in_range[:, 0]).view(batch_size, self.nf, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "m(dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "m(x, dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "x * self.gain",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_249": {
                "variable": {
                    "value": "self.top_epi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleDict_369": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "OrderedDict(blocks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_402": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(output_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_33": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "x * (style[:, 0] + 1.0) + style[:, 1]",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "self.style_mod(x, dlatents_in_slice)",
                            "Call"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.dense(dlatents_in_range[:, 0]).view(batch_size, self.nf, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "m(dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "m(x, dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "x * self.gain",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.w_mul",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.b_mul",
                            "BinOp"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.b_mul",
                            "BinOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(output_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_76": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv_transpose2d_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "x * (style[:, 0] + 1.0) + style[:, 1]",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "self.style_mod(x, dlatents_in_slice)",
                            "Call"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.dense(dlatents_in_range[:, 0]).view(batch_size, self.nf, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "m(dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "m(x, dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "x * self.gain",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(w.size(-1) - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_87": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_90": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "x * (style[:, 0] + 1.0) + style[:, 1]",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "self.style_mod(x, dlatents_in_slice)",
                            "Call"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.dense(dlatents_in_range[:, 0]).view(batch_size, self.nf, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "m(dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "m(x, dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "x * self.gain",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "w.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]",
                            "BinOp"
                        ],
                        [
                            "self.weight * self.w_mul",
                            "BinOp"
                        ],
                        [
                            "F.pad(w, (1, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "(w[:, :, 1:, 1:] + w[:, :, :-1, 1:] + w[:, :, 1:, :-1] + w[:, :, :-1, :-1]) * 0.25",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(w.size(-1) - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_118": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_235": {
                "condition": {
                    "value": "do_trunc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.arange(x.size(1)) < self.max_layer).view(1, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "interp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.lerp(self.avg_latent, x, self.threshold)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "x * (style[:, 0] + 1.0) + style[:, 1]",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "self.style_mod(x, dlatents_in_slice)",
                            "Call"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.dense(dlatents_in_range[:, 0]).view(batch_size, self.nf, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "m(dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "m(x, dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "x * self.gain",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_270": {
                "variable": {
                    "value": "self.const",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, nf, 4, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_271": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_433": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "x * (style[:, 0] + 1.0) + style[:, 1]",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "self.style_mod(x, dlatents_in_slice)",
                            "Call"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.dense(dlatents_in_range[:, 0]).view(batch_size, self.nf, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "m(dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "m(x, dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "x * self.gain",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_98": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "x * (style[:, 0] + 1.0) + style[:, 1]",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "self.style_mod(x, dlatents_in_slice)",
                            "Call"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.dense(dlatents_in_range[:, 0]).view(batch_size, self.nf, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "m(dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "m(x, dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "x * self.gain",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.w_mul",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.b_mul",
                            "BinOp"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "bias * self.b_mul",
                            "BinOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_100": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.view(shape[0], shape[1], shape[2], 1, shape[3], 1).expand(-1, -1, -1, factor, -1, factor)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(shape[0], shape[1], factor * shape[2], factor * shape[3])",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "self.upscale(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, stride=2, padding=(w.size(-1) - 1) // 2)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight * self.w_mul, None, padding=self.kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "intermediate(x)",
                            "Call"
                        ],
                        [
                            "x + bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x + self.weight.view(1, -1, 1, 1) * noise",
                            "BinOp"
                        ],
                        [
                            "x * (style[:, 0] + 1.0) + style[:, 1]",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, kernel, stride=self.stride, padding=int((self.kernel.size(2) - 1) / 2), groups=x.size(1))",
                            "Call"
                        ],
                        [
                            "super().forward(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1).expand(-1, 18, -1)",
                            "Call"
                        ],
                        [
                            "self.top_epi(x)",
                            "Call"
                        ],
                        [
                            "self.style_mod(x, dlatents_in_slice)",
                            "Call"
                        ],
                        [
                            "self.const.expand(batch_size, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "x + self.bias.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.dense(dlatents_in_range[:, 0]).view(batch_size, self.nf, 4, 4)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "self.conv0_up(x)",
                            "Call"
                        ],
                        [
                            "self.epi1(x, dlatents_in_range[:, 0])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.epi2(x, dlatents_in_range[:, 1])",
                            "Call"
                        ],
                        [
                            "m(dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "m(x, dlatents_in[:, 2 * i:2 * i + 2])",
                            "Call"
                        ],
                        [
                            "x * self.gain",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.w_mul",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "*size": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf(res - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_146": {
                "input": {
                    "value": "torch.mean(x ** 2, dim=1, keepdim=True) + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_22": {
                "*size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_56": {
                "*size": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_270": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_271": {
                "*size": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_146": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_197": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_234": {
                "start": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_248": {
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf(res - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_351": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_490": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "StarGANv2/core/checkpoint.py": {
        "torch": {
            "save_30": {
                "obj": {
                    "value": "outdict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fname_template.format(step)",
                            "Call"
                        ],
                        [
                            "self.fname_template.format(step)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_37": {
                "variable": {
                    "value": "module_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fname_template.format(step)",
                            "Call"
                        ],
                        [
                            "self.fname_template.format(step)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_39": {
                "variable": {
                    "value": "module_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fname_template.format(step)",
                            "Call"
                        ],
                        [
                            "self.fname_template.format(step)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_39": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "StarGANv2/core/data_loader.py": {
        "torch": {
            "WeightedRandomSampler_85": {
                "weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_weights[labels]",
                            "Subscript"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "len(weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_115": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ],
                        [
                            "ReferenceDataset(root, transform)",
                            "Call"
                        ],
                        [
                            "DefaultDataset(root, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_make_balanced_sampler(dataset.targets)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_144": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ],
                        [
                            "ReferenceDataset(root, transform)",
                            "Call"
                        ],
                        [
                            "DefaultDataset(root, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_163": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ],
                        [
                            "ReferenceDataset(root, transform)",
                            "Call"
                        ],
                        [
                            "DefaultDataset(root, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_178": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ],
                        [
                            "ReferenceDataset(root, transform)",
                            "Call"
                        ],
                        [
                            "DefaultDataset(root, transform=transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_190": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randn_213": {
                "variable": {
                    "value": "z_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_214": {
                "variable": {
                    "value": "z_trg2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StarGANv2/core/model.py": {
        "torch": {
            "AdaptiveAvgPool2d_27": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_88": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "style_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "chunk_94": {
                "variable": {
                    "value": "(gamma, beta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(s)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), h.size(1), 1, 1)",
                            "Call"
                        ],
                        [
                            "self.shared(z)",
                            "Call"
                        ],
                        [
                            "self.shared(x)",
                            "Call"
                        ],
                        [
                            "h.view(h.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "variable": {
                    "value": "self.from_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_159": {
                "variable": {
                    "value": "self.encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_160": {
                "variable": {
                    "value": "self.decode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "self.to_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.InstanceNorm2d(dim_in, affine=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_216": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_218": {
                "variable": {
                    "value": "self.unshared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_233": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._residual(x, s)",
                            "Call"
                        ],
                        [
                            "(out + self._shortcut(x)) / math.sqrt(2)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "out + [layer(h)]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(out, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "out[idx, y]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_257": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_259": {
                "variable": {
                    "value": "self.unshared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_269": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._residual(x, s)",
                            "Call"
                        ],
                        [
                            "(out + self._shortcut(x)) / math.sqrt(2)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "out + [layer(h)]",
                            "BinOp"
                        ],
                        [
                            "torch.stack(out, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.main(x)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "out[idx, y]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_292": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LeakyReLU_42": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_55": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_56": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm2(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self._shortcut(x) + self._residual(x)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm2(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "block(x, s)",
                            "Call"
                        ],
                        [
                            "x + self.hpf(mask * cache[x.size(2)])",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm2(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self._shortcut(x) + self._residual(x)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm2(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "block(x, s)",
                            "Call"
                        ],
                        [
                            "x + self.hpf(mask * cache[x.size(2)])",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_100": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm2(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self._shortcut(x) + self._residual(x)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm2(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "block(x, s)",
                            "Call"
                        ],
                        [
                            "x + self.hpf(mask * cache[x.size(2)])",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_127": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm2(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self._shortcut(x) + self._residual(x)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm2(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "block(x, s)",
                            "Call"
                        ],
                        [
                            "x + self.hpf(mask * cache[x.size(2)])",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_150": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "self.norm2(x)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self._shortcut(x) + self._residual(x)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1x1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm2(x, s)",
                            "Call"
                        ],
                        [
                            "self.actv(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.from_rgb(x)",
                            "Call"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "block(x, s)",
                            "Call"
                        ],
                        [
                            "x + self.hpf(mask * cache[x.size(2)])",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter.unsqueeze(0).unsqueeze(1).repeat(x.size(1), 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_187": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_144": {
                "data": {
                    "value": "[[-1, -1, -1], [-1, 8.0, -1], [-1, -1, -1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_162": {
                "num_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_163": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_202": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks[0] if x.size(2) in [32] else masks[1]",
                            "IfExp"
                        ],
                        [
                            "F.interpolate(mask, size=x.size(2), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_211": {
                "in_features": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_244": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_254": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_255": {
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_256": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_280": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ],
                        [
                            "2 ** 14 // img_size",
                            "BinOp"
                        ],
                        [
                            "dim_out",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_288": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_289": {
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_290": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_291": {
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_domains",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_214": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "*args": {
                    "value": "nn.Linear(512, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_261": {
                "in_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ],
                        [
                            "min(dim_in * 2, max_conv_dim)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "style_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_220": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_222": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_224": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_226": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "style_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "StarGANv2/core/solver.py": {
        "torch": {
            "mean_266": {
                "variable": {
                    "value": "loss_sty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(s_pred - s_trg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_275": {
                "variable": {
                    "value": "loss_ds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x_fake - x_fake2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_281": {
                "variable": {
                    "value": "loss_cyc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x_rec - x_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_285": {
                "variable": {
                    "value": "loss_recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x_rec2 - x_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l1_loss_290": {
                "variable": {
                    "value": "loss_rec_blur",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_rec2_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "find_fake_freq(x_rec2, gauss_kernel)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "x_real_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "find_fake_freq(x_real, gauss_kernel)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_like_312": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_313": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full_like(logits, fill_value=target)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_36": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SummaryWriter_88": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.tb_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "lerp_307": {
                "variable": {
                    "value": "param_test.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "param_test.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.999",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_266": {
                "input": {
                    "value": "s_pred - s_trg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_275": {
                "input": {
                    "value": "x_fake - x_fake2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_281": {
                "input": {
                    "value": "x_rec - x_real",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_285": {
                "input": {
                    "value": "x_rec2 - x_real",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_320": {
                "outputs": {
                    "value": "d_out.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "self.optims[net]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "self.nets[net].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.f_lr if net == 'mapping_network' else args.lr",
                    "type": "IfExp",
                    "possible_values": []
                },
                "betas": {
                    "value": "[args.beta1, args.beta2]",
                    "type": "List",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StarGANv2/core/utils.py": {
        "torch": {
            "cat_86": {
                "variable": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_src, x_ref, x_fake, x_rec]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ],
                        [
                            "[x_src]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ],
                        [
                            "x_concat + [x_fake_with_ref]",
                            "BinOp"
                        ],
                        [
                            "[x_src_with_wb]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_src, x_ref, x_fake, x_rec]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ],
                        [
                            "[x_src]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ],
                        [
                            "x_concat + [x_fake_with_ref]",
                            "BinOp"
                        ],
                        [
                            "[x_src_with_wb]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_118": {
                "variable": {
                    "value": "wb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "x_src_with_wb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wb, x_src]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_src, x_ref, x_fake, x_rec]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ],
                        [
                            "[x_src]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ],
                        [
                            "x_concat + [x_fake_with_ref]",
                            "BinOp"
                        ],
                        [
                            "[x_src_with_wb]",
                            "List"
                        ],
                        [
                            "torch.cat(x_concat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_149": {
                "variable": {
                    "value": "z_trg_list",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_outs_per_domain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(frames)",
                            "Call"
                        ],
                        [
                            "torch.cat([slided, interpolated], dim=3).cpu()",
                            "Call"
                        ],
                        [
                            "interpolate(nets, args, x_src, s_prev, s_next).cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_203": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "entries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x_src.cpu(), x_fake.cpu()], dim=2)",
                            "Call"
                        ],
                        [
                            "[x_prev, x_next]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_292": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images * 0.5 + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_99": {
                "variable": {
                    "value": "z_many",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_trg_list[0].size(1)",
                            "Call"
                        ],
                        [
                            "z_list[0].size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_102": {
                "variable": {
                    "value": "s_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_many",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nets.mapping_network(z_many, y_many)",
                            "Call"
                        ],
                        [
                            "nets.mapping_network(z_many, y_many)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "x_fake_with_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_ref[i:i + 1], x_fake]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lerp_181": {
                "variable": {
                    "value": "s_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "s_next",
                            "variable"
                        ],
                        [
                            "s_next",
                            "variable"
                        ],
                        [
                            "s_next",
                            "variable"
                        ]
                    ]
                },
                "end": {
                    "value": "s_next",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alphas",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_183": {
                "variable": {
                    "value": "entries",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_src.cpu(), x_fake.cpu()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[slided, interpolated]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_246": {
                "variable": {
                    "value": "z_many",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_trg_list[0].size(1)",
                            "Call"
                        ],
                        [
                            "z_list[0].size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_249": {
                "variable": {
                    "value": "s_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_many",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nets.mapping_network(z_many, y_many)",
                            "Call"
                        ],
                        [
                            "nets.mapping_network(z_many, y_many)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "lerp_107": {
                "variable": {
                    "value": "s_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(s_many, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "s_avg.repeat(N, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(s_many, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "s_avg.repeat(x_src.size(0), 1)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "s_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nets.mapping_network(z_trg, y_trg)",
                            "Call"
                        ],
                        [
                            "torch.lerp(s_avg, s_trg, psi)",
                            "Call"
                        ],
                        [
                            "nets.mapping_network(z_trg, y_trg)",
                            "Call"
                        ],
                        [
                            "torch.lerp(s_avg, s_trg, psi)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "psi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.7, 1.0]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_147": {
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_202": {
                "*size": {
                    "value": "(T, C, H * 2, W + margin)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_237": {
                "tensors": {
                    "value": "video",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tensor2ndarray255(torch.cat(video))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tensor2ndarray255(torch.cat(video))",
                            "Call"
                        ]
                    ]
                }
            },
            "lerp_254": {
                "variable": {
                    "value": "s_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(s_many, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "s_avg.repeat(N, 1)",
                            "Call"
                        ],
                        [
                            "torch.mean(s_many, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "s_avg.repeat(x_src.size(0), 1)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "s_trg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nets.mapping_network(z_trg, y_trg)",
                            "Call"
                        ],
                        [
                            "torch.lerp(s_avg, s_trg, psi)",
                            "Call"
                        ],
                        [
                            "nets.mapping_network(z_trg, y_trg)",
                            "Call"
                        ],
                        [
                            "torch.lerp(s_avg, s_trg, psi)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "psi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.5, 0.7, 1.0]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_272": {
                "tensors": {
                    "value": "video",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tensor2ndarray255(torch.cat(video))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tensor2ndarray255(torch.cat(video))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StarGANv2/core/wing.py": {
        "torch": {
            "max_28": {
                "variable": {
                    "value": "(max, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "hm.view(hm.size(0), hm.size(1), hm.size(2) * hm.size(3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_464": {
                "variable": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "abs(N)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_465": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "H - N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_475": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[head, tail]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_512": {
                "variable": {
                    "value": "zero_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(0, index_map.chin.start), torch.arange(index_map.chin.end, 33), torch.LongTensor([index_map.eyebrowsedges.start, index_map.eyebrowsedges.end, index_map.lipedges.start, index_map.lipedges.end])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_535": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform(image).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "truncate(x)",
                            "Call"
                        ],
                        [
                            "normalize(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x), True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(self.conv2(x), 2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=256, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_536": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x2, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_72": {
                "variable": {
                    "value": "low1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_82": {
                "variable": {
                    "value": "up2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "low3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "low2",
                            "variable"
                        ],
                        [
                            "self._modules['b3_' + str(level)](low3)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_96": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "x_and_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels + 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_154": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_157": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(out_planes / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_159": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "int(out_planes / 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_172": {
                "variable": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(out1, True)",
                            "Call"
                        ],
                        [
                            "self.conv1(out1)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_176": {
                "variable": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn2(out1)",
                            "Call"
                        ],
                        [
                            "F.relu(out2, True)",
                            "Call"
                        ],
                        [
                            "self.conv2(out2)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_180": {
                "variable": {
                    "value": "out3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn3(out2)",
                            "Call"
                        ],
                        [
                            "F.relu(out3, True)",
                            "Call"
                        ],
                        [
                            "self.conv3(out3)",
                            "Call"
                        ],
                        [
                            "torch.cat((out1, out2, out3), 1)",
                            "Call"
                        ],
                        [
                            "out3 + residual",
                            "BinOp"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "out3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out1, out2, out3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_200": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_227": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_228": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_237": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._modules['bn_end0'](self._modules['conv_last0'](ll))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_251": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform(image).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "truncate(x)",
                            "Call"
                        ],
                        [
                            "normalize(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x), True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(self.conv2(x), 2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=256, mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_292": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "where_451": {
                "condition": {
                    "value": "x < thres",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform(image).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "truncate(x)",
                            "Call"
                        ],
                        [
                            "normalize(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x), True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(self.conv2(x), 2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=256, mode='bilinear')",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_469": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "abs(N)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_472": {
                "variable": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "H - N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_99": {
                "variable": {
                    "value": "x_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_99": {
                "variable": {
                    "value": "x_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_100": {
                "variable": {
                    "value": "y_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_100": {
                "variable": {
                    "value": "y_coords",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_103": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_coords, y_coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_121": {
                "variable": {
                    "value": "boundary_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmap[:, -1:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_122": {
                "variable": {
                    "value": "zero_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.x_coords",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_123": {
                "variable": {
                    "value": "xx_boundary_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "boundary_channel > 0.05",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.x_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "zero_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(self.x_coords)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_124": {
                "variable": {
                    "value": "yy_boundary_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "boundary_channel > 0.05",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "zero_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(self.x_coords)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_125": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coords, xx_boundary_channel, yy_boundary_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_planes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_217": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnames",
                            "variable"
                        ]
                    ]
                }
            },
            "load_219": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnames",
                            "variable"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_243": {
                "variable": {
                    "value": "tmp_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._modules['l0'](ll)",
                            "Call"
                        ],
                        [
                            "F.relu(tmp_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_257": {
                "variable": {
                    "value": "heatmaps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[-1][:, :-1, :, :]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(heatmaps, scale_factor=scale_factor, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "preprocess(heatmaps)",
                            "Call"
                        ],
                        [
                            "self.get_heatmap(x, b_preprocess=False)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(2) // heatmaps.size(2)",
                            "BinOp"
                        ],
                        [
                            "x.size(2) // heatmaps.size(2)",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_442": {
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(N * C, -1)",
                            "Call"
                        ],
                        [
                            "(x_ - min_val) / (max_val - min_val + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_443": {
                "input": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(N * C, -1)",
                            "Call"
                        ],
                        [
                            "(x_ - min_val) / (max_val - min_val + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_451": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform(image).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "truncate(x)",
                            "Call"
                        ],
                        [
                            "normalize(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x), True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(self.conv2(x), 2, stride=2)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=256, mode='bilinear')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_106": {
                "variable": {
                    "value": "rr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.pow(x_coords, 2) + torch.pow(y_coords, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coords, rr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_209": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_landmarks + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_271": {
                "tensors": {
                    "value": "landmarks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "landmarks + np.array([W // 4, H // 4])",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(landmarks) * scale_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_468": {
                "start": {
                    "value": "H - N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_471": {
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "abs(N)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_512": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "index_map.chin.start",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_513": {
                "start": {
                    "value": "index_map.chin.end",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "33",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_164": {
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_165": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "permute_287": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_219": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_106": {
                "input": {
                    "value": "y_coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(width).unsqueeze(0).expand(height, width).float()",
                            "Call"
                        ],
                        [
                            "y_coords / (width - 1) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_107": {
                "input": {
                    "value": "rr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(torch.pow(x_coords, 2) + torch.pow(y_coords, 2))",
                            "Call"
                        ],
                        [
                            "(rr / torch.max(rr)).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "StarGANv2/main.py": {
        "torch": {
            "manual_seed_36": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "StarGANv2/metrics/eval.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "y_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[trg_idx] * N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_72": {
                "variable": {
                    "value": "z_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_src.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "StarGANv2/metrics/eval_hair.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "y_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[trg_idx] * N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_73": {
                "variable": {
                    "value": "z_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_src.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "s_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s_trg, s_trg_hair)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "StarGANv2/metrics/eval_new.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "y_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[trg_idx] * N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_73": {
                "variable": {
                    "value": "z_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_src.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "s_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s_trg, s_trg_hair)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "StarGANv2/metrics/fid.py": {
        "torch": {
            "device_65": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "inception.Conv2d_1a_3x3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "inception.Conv2d_3b_1x1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "inception.Mixed_5b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "inception.Mixed_7a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "actvs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actvs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(actvs, dim=0).cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_34": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_37": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_46": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "StarGANv2/metrics/lpips.py": {
        "torch": {
            "device_88": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "mean_97": {
                "variable": {
                    "value": "lpips_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(lpips_values, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "self.lpips_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.03, -0.088, -0.188]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.458, 0.448, 0.45]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rsqrt_17": {
                "input": {
                    "value": "torch.sum(x ** 2, dim=1, keepdim=True) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_64": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "metrics/lpips_weights.ckpt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "metrics/lpips_weights.ckpt",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_97": {
                "tensors": {
                    "value": "lpips_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_42": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "conv1x1((x_fmap - y_fmap) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_17": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_67": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/eval.py": {
        "torch": {
            "stack_80": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(imgs, 0).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_83": {
                "variable": {
                    "value": "ckpt_freq",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "img_a",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(img)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_70": {
                "variable": {
                    "value": "img_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_70": {
                "variable": {
                    "value": "img_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/metrics/eval.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "y_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[trg_idx] * N",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_73": {
                "variable": {
                    "value": "z_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_src.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "s_trg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(s_trg, s_trg_hair)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/metrics/fid.py": {
        "torch": {
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "inception.Conv2d_1a_3x3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "inception.Conv2d_3b_1x1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "inception.Mixed_5b",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "inception.Mixed_7a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "actvs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actvs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(actvs, dim=0).cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_36": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_39": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_48": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/metrics/lpips.py": {
        "torch": {
            "device_88": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "mean_97": {
                "variable": {
                    "value": "lpips_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(lpips_values, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "self.lpips_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[-0.03, -0.088, -0.188]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.458, 0.448, 0.45]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rsqrt_17": {
                "input": {
                    "value": "torch.sum(x ** 2, dim=1, keepdim=True) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_64": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "metrics/lpips_weights.ckpt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "metrics/lpips_weights.ckpt",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_97": {
                "tensors": {
                    "value": "lpips_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_42": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "conv1x1((x_fmap - y_fmap) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_17": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_67": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/model.py": {
        "torch": {
            "AdaptiveAvgPool2d_13": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(in_channel, out_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv_transpose2d_48": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_264": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*stem",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_266": {
                "variable": {
                    "value": "self.se_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SELayer(in_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_271": {
                "variable": {
                    "value": "self.structure",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResBlock(in_channel, out_channel, downsample=True, padding='reflect')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_276": {
                "variable": {
                    "value": "self.texture",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResBlock(in_channel, out_channel, downsample=True, padding='reflect')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_289": {
                "variable": {
                    "value": "texture",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.texture(out_texture)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_307": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_361": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_364": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "EqualLinear(channels[4] * 4 * 4, channels[4], activation='fused_lrelu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_404": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*encoder",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_406": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "EqualLinear(channel * 12 * 2 * feat_size, channel * 32, activation='fused_lrelu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_423": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_input, ref_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_424": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv_transpose2d(input, self.weight * self.scale, bias=self.bias, stride=self.stride, padding=self.padding)",
                            "Call"
                        ],
                        [
                            "self.conv1(input, style, noise)",
                            "Call"
                        ],
                        [
                            "self.conv2(out, style, noise)",
                            "Call"
                        ],
                        [
                            "self.conv1(input)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.stem(input)",
                            "Call"
                        ],
                        [
                            "structure",
                            "variable"
                        ],
                        [
                            "layer(out, texture, noise)",
                            "Call"
                        ],
                        [
                            "self.to_rgb(out)",
                            "Call"
                        ],
                        [
                            "self.convs(input)",
                            "Call"
                        ],
                        [
                            "self.final_conv(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.final_linear(out)",
                            "Call"
                        ],
                        [
                            "torch.cat((out_input, ref_input), 1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * channel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_34": {
                "*size": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "variable"
                        ],
                        [
                            "ch",
                            "variable"
                        ],
                        [
                            "channels[size]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel * 2 ** 4",
                            "BinOp"
                        ],
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "interpolate_188": {
                "variable": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "skip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.skip(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "F.interpolate(skip, scale_factor=2, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.skip(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_280": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_281": {
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel * 2 ** 4",
                            "BinOp"
                        ],
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_121": {
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "'zero'",
                            "Method Argument"
                        ],
                        [
                            "'zero'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/calc_inception.py": {
        "torch": {
            "cat_71": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_77": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_91": {
                "variable": {
                    "value": "inception",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "inception",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_patched_inception_v3()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(inception).eval().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform=transform, resolution=args.size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/convert_weight.py": {
        "torch": {
            "from_numpy_52": {
                "variable": {
                    "value": "dic_torch[target_name + f.{start}.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_230": {
                "variable": {
                    "value": "latent_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g_ema.vars['dlatent_avg'].value().eval()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_267": {
                "variable": {
                    "value": "img_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_tf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g_ema.run(z, None, **Gs_kwargs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_tf).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_273": {
                "variable": {
                    "value": "img_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_tf, img_pt, img_diff)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "dic_torch[target_name + . + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flip_35": {
                "variable": {
                    "value": "dic_torch[target_name + .conv.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "dic_torch[target_name + '.conv.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "dic_torch[target_name + f.{start + 1}.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['bias']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "dic_torch[target_name + . + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "dic_torch[target_name + . + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_247": {
                "obj": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'g_ema': state_dict, 'latent_avg': latent_avg}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "name + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "ndarray": {
                    "value": "vars['G_synthesis/4x4/Const/const'].value().eval()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_191": {
                "ndarray": {
                    "value": "vars[f'G_synthesis/noise{i}'].value().eval()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_258": {
                "ndarray": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.RandomState(0).randn(n_sample, 512).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/dataset.py": {
        "torch": {}
    },
    "swapping-autoencoder/stylegan2/distributed.py": {
        "torch": {
            "cat_91": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_118": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(losses, 0)",
                            "Call"
                        ],
                        [
                            "losses / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/fid.py": {
        "torch": {
            "cat_29": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "extract_feature_from_samples(g, inception, args.truncation, mean_latent, args.batch, args.n_sample, device).numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_75": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_79": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Generator(args.size, 512, 8).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_89": {
                "variable": {
                    "value": "inception",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "load_patched_inception_v3()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_24": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm(batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/generate.py": {
        "torch": {
            "load_45": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_12": {
                "variable": {
                    "value": "sample_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/inception.py": {
        "torch": {
            "ModuleList_77": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_210": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_238": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_271": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_306": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "variable"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_215": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_89": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_122": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/lpips/__init__.py": {
        "torch": {
            "sqrt_43": {
                "variable": {
                    "value": "norm_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(in_feat ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "in_feat ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/lpips/base_model.py": {
        "torch": {
            "save_41": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_48": {
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(path, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/lpips/dist_model.py": {
        "torch": {
            "Adam_94": {
                "variable": {
                    "value": "self.optimizer_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.old_lr - lrd",
                            "BinOp"
                        ],
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_100": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_163": {
                "input": {
                    "value": "self.loss_total",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "backward_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_130": {
                "variable": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_73": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.abspath(os.path.join(inspect.getfile(self.initialize), '..', 'weights/v%s/%s.pth' % (version, net)))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/lpips/networks_basic.py": {
        "torch": {
            "Sequential_111": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BCELoss_136": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_24": {
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 * out_H / in_H",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_157": {
                "input": {
                    "value": "(in0 - in1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "chn_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chn_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_120": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "in_channels": {
                    "value": "chn_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "chn_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_122": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "chn_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "(d0, d1, d0 - d1, d0 / (d1 + eps), d1 / (d0 + eps))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/lpips/pretrained_networks.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_11": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.slice6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.slice7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/model.py": {
        "torch": {
            "tensor_24": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(k, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "k[None, :] * k[:, None]",
                            "BinOp"
                        ],
                        [
                            "k / k.sum()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_116": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_139": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_dim, in_dim).div_(lr_mul)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_177": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_223": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_285": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_299": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, channel, size, size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_353": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_392": {
                "variable": {
                    "value": "self.style",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_415": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_416": {
                "variable": {
                    "value": "self.upsamples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_417": {
                "variable": {
                    "value": "self.to_rgbs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Module_418": {
                "variable": {
                    "value": "self.noises",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_465": {
                "variable": {
                    "value": "latent_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_latent",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.style_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.input.input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_660": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_666": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "EqualLinear(channels[4] * 4 * 4, channels[4], activation='fused_lrelu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_679": {
                "variable": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stddev.var(0, unbiased=False) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_682": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, stddev]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_142": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_dim).fill_(bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_154": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_158": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias * self.lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_244": {
                "variable": {
                    "value": "demod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.pow(2).sum([2, 3, 4]) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv_transpose2d_259": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_529": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent, latent2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rsqrt_20": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=1, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_102": {
                "*size": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[4]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "channels[size]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_139": {
                "*size": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_224": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[4]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "channels[size]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_268": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_274": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_285": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_299": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_353": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_456": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input.input.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_531": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(latent, latent)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "*size": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_142": {
                "*size": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_425": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mean_20": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_460": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input.input.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/model_stylegan2.py": {
        "torch": {
            "tensor_24": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(k, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "k[None, :] * k[:, None]",
                            "BinOp"
                        ],
                        [
                            "k / k.sum()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_116": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_139": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_dim, in_dim).div_(lr_mul)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_177": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_223": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_285": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_299": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, channel, size, size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_353": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_392": {
                "variable": {
                    "value": "self.style",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_415": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_416": {
                "variable": {
                    "value": "self.upsamples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_417": {
                "variable": {
                    "value": "self.to_rgbs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Module_418": {
                "variable": {
                    "value": "self.noises",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_465": {
                "variable": {
                    "value": "latent_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_latent",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.style_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.input.input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_664": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_670": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "EqualLinear(channels[4] * 4 * 4, channels[4], activation='fused_lrelu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_683": {
                "variable": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stddev.var(0, unbiased=False) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_686": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, stddev]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_142": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_dim).fill_(bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_154": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_158": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias * self.lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_244": {
                "variable": {
                    "value": "demod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.pow(2).sum([2, 3, 4]) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv_transpose2d_259": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_533": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent, latent2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rsqrt_20": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=1, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_102": {
                "*size": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[4]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "channels[size]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_139": {
                "*size": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_224": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[4]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ],
                        [
                            "channels[size]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_268": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_274": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_285": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_299": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_353": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_456": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input.input.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_110": {
                "*size": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ],
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_142": {
                "*size": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_425": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mean_20": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_460": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input.input.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/non_leaking.py": {
        "torch": {
            "eye_28": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_28": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_29": {
                "variable": {
                    "value": "translate",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t_x, t_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_38": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_38": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_39": {
                "variable": {
                    "value": "sin_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cos_40": {
                "variable": {
                    "value": "cos_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_41": {
                "variable": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cos_t, -sin_t, sin_t, cos_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_50": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_50": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_60": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_60": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "translate",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t_x, t_y, t_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_72": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "cross",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(0, -u_z, u_y), (u_z, 0, -u_x), (-u_y, u_x, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "cross",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "outer",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "sin_77": {
                "variable": {
                    "value": "sin_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cos_78": {
                "variable": {
                    "value": "cos_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_82": {
                "variable": {
                    "value": "eye_4",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_82": {
                "variable": {
                    "value": "eye_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_91": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_91": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_102": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_102": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "variable": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "axis + (0,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_112": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_112": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "axis + (0,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ger_114": {
                "variable": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                },
                "vec2": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "category",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "categories",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randint_126": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "high": {
                    "value": "len(categories)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_152": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_152": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_211": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_211": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_246": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_247": {
                "variable": {
                    "value": "grid[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "end": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_248": {
                "variable": {
                    "value": "grid[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "end": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_248": {
                "variable": {
                    "value": "grid[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_265": {
                "variable": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(width, height)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_tensor_321": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "antialiasing_kernel",
                            "variable"
                        ],
                        [
                            "torch.as_tensor(kernel)",
                            "Call"
                        ],
                        [
                            "torch.ger(kernel, kernel).to(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "ger_322": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "antialiasing_kernel",
                            "variable"
                        ],
                        [
                            "torch.as_tensor(kernel)",
                            "Call"
                        ],
                        [
                            "torch.ger(kernel, kernel).to(img)",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "antialiasing_kernel",
                            "variable"
                        ],
                        [
                            "torch.as_tensor(kernel)",
                            "Call"
                        ],
                        [
                            "torch.ger(kernel, kernel).to(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_323": {
                "variable": {
                    "value": "kernel_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "antialiasing_kernel",
                            "variable"
                        ],
                        [
                            "torch.as_tensor(kernel)",
                            "Call"
                        ],
                        [
                            "torch.ger(kernel, kernel).to(img)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grid_sample_355": {
                "variable": {
                    "value": "img_affine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_2x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upfirdn2d(img_pad, kernel_flip, up=2)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(n, h, w, 3, device=device)",
                            "Call"
                        ],
                        [
                            "make_grid(img_2x.shape, -2 * p_ux1 / w_o - 1, 2 * (w_p - p_ux1) / w_o - 1, -2 * p_uy1 / h_o - 1, 2 * (h_p - p_uy1) / h_o - 1, device=img_2x.device).to(img_2x)",
                            "Call"
                        ],
                        [
                            "affine_grid(grid, torch.inverse(G)[:, :2, :].to(img_2x))",
                            "Call"
                        ],
                        [
                            "grid * torch.tensor([w_o / w_p, h_o / h_p], device=grid.device) + torch.tensor([(w_o + 2 * p_ux1) / w_p - 1, (h_o + 2 * p_uy1) / h_p - 1], device=grid.device)",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_121": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor((width, height))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_132": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor((width, height))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_136": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor((width, height))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_140": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor((width, height))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_157": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor((width, height))",
                            "Call"
                        ]
                    ]
                }
            },
            "round_169": {
                "input": {
                    "value": "param * height",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_170": {
                "input": {
                    "value": "param * width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "data": {
                    "value": "[(-1.0, -1, 1), (-1, 1, 1), (1, -1, 1), (1, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "t_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_302": {
                "variable": {
                    "value": "img_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_down[:, :, pad_y1:end_y, pad_x1:end_x]",
                            "Subscript"
                        ],
                        [
                            "img.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "img @ mat_mul + mat_add",
                            "BinOp"
                        ],
                        [
                            "img.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "apply_color(img, C.to(img))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad_x1 + pad_k, pad_x2 + pad_k, pad_y1 + pad_k, pad_y2 + pad_k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_351": {
                "data": {
                    "value": "[(w_o + 2 * p_ux1) / w_p - 1, (h_o + 2 * p_uy1) / h_p - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "grid.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ger_104": {
                "input": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                },
                "vec2": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "inverse_298": {
                "input": {
                    "value": "G_try",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G",
                            "variable"
                        ],
                        [
                            "sample_affine(p, batch, height, width)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_349": {
                "data": {
                    "value": "[w_o / w_p, h_o / h_p]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "grid.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_348": {
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(3).unsqueeze(0).repeat(size, 1, 1)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p_rot, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p_rot, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "random_mat_apply(p, Gc, G, eye)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/op/fused_act.py": {
        "torch": {
            "load_11": {
                "variable": {
                    "value": "fused",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fused",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(module_path, 'fused_bias_act.cpp'), os.path.join(module_path, 'fused_bias_act_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "*size": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_90": {
                "input": {
                    "value": "input + bias.view(1, bias.shape[0], *rest_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/op/upfirdn2d.py": {
        "torch": {
            "load_10": {
                "variable": {
                    "value": "upfirdn2d_op",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "upfirdn2d",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(module_path, 'upfirdn2d.cpp'), os.path.join(module_path, 'upfirdn2d_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_169": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, up, up, down, down, pad[0], pad[1], pad[0], pad[1])",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_172": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, up, up, down, down, pad[0], pad[1], pad[0], pad[1])",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_186": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_187": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, up, up, down, down, pad[0], pad[1], pad[0], pad[1])",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, (up, up), (down, down), (pad[0], pad[1], pad[0], pad[1]))",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(kernel, [0, 1]).view(1, 1, kernel_h, kernel_w)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_101": {
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/ppl.py": {
        "torch": {
            "load_48": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_13": {
                "input": {
                    "value": "x.pow(2).sum(-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_20": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(a * b).sum(-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a * torch.cos(p) + c * torch.sin(p)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_68": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch * 2, latent_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "rand_69": {
                "variable": {
                    "value": "lerp_t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm(batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "cos_22": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t * torch.acos(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_22": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t * torch.acos(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_76": {
                "variable": {
                    "value": "latent_e",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent_e0, latent_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_87": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(image, size=(256, 256), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/projector.py": {
        "torch": {
            "stack_113": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(imgs, 0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_146": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[latent_in] + noises",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_121": {
                "variable": {
                    "value": "noise_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_mean_latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "mse_loss_172": {
                "variable": {
                    "value": "mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_gen.reshape(batch, channel, height // factor, factor, width // factor, factor)",
                            "Call"
                        ],
                        [
                            "img_gen.mean([3, 5])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(imgs, 0).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_214": {
                "obj": {
                    "value": "result_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.splitext(os.path.basename(args.files[0]))[0] + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_56": {
                "input": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_116": {
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "roll_26": {
                "input": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noises_single",
                            "variable"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "noise.reshape([-1, 1, size // 2, 2, size // 2, 2])",
                            "Call"
                        ],
                        [
                            "noise.mean([3, 5])",
                            "Call"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "torch.randn_like(latent) * strength",
                            "BinOp"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roll_25": {
                "input": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noises_single",
                            "variable"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "noise.reshape([-1, 1, size // 2, 2, size // 2, 2])",
                            "Call"
                        ],
                        [
                            "noise.mean([3, 5])",
                            "Call"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "torch.randn_like(latent) * strength",
                            "BinOp"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/projector_2.py": {
        "torch": {
            "stack_115": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(imgs, 0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_148": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[latent_in] + noises",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "final",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(latent_path[-1][1].unsqueeze(0), latent_path[-1][0].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_123": {
                "variable": {
                    "value": "noise_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_mean_latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "mse_loss_174": {
                "variable": {
                    "value": "mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_gen.reshape(batch, channel, height // factor, factor, width // factor, factor)",
                            "Call"
                        ],
                        [
                            "img_gen.mean([3, 5])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(imgs, 0).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_243": {
                "obj": {
                    "value": "result_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.splitext(os.path.basename(args.files[0]))[0] + '.pt'",
                            "BinOp"
                        ],
                        [
                            "os.path.splitext(os.path.basename(args.files[0]))[0] + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_57": {
                "input": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_118": {
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "roll_27": {
                "input": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noises_single",
                            "variable"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "noise.reshape([-1, 1, size // 2, 2, size // 2, 2])",
                            "Call"
                        ],
                        [
                            "noise.mean([3, 5])",
                            "Call"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "torch.randn_like(latent) * strength",
                            "BinOp"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roll_26": {
                "input": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noises_single",
                            "variable"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "noise.reshape([-1, 1, size // 2, 2, size // 2, 2])",
                            "Call"
                        ],
                        [
                            "noise.mean([3, 5])",
                            "Call"
                        ],
                        [
                            "noises",
                            "variable"
                        ],
                        [
                            "torch.randn_like(latent) * strength",
                            "BinOp"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/stylegan2/train.py": {
        "torch": {
            "softplus_64": {
                "variable": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-real_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_65": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(fake_img)",
                            "Call"
                        ],
                        [
                            "discriminator(fake_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_71": {
                "variable": {
                    "value": "(grad_real,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "real_pred.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "real_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(loader)",
                            "Call"
                        ],
                        [
                            "real_img.to(device)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softplus_80": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-fake_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_80": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_89": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "(fake_img * noise).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "latents",
                    "type": "variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_92": {
                "variable": {
                    "value": "path_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad.pow(2).sum(2).mean(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_105": {
                "variable": {
                    "value": "noises",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loader",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "unbind_105": {
                "variable": {
                    "value": "noises",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "r1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "path_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "path_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "ada_augment",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "randn_156": {
                "variable": {
                    "value": "sample_z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.n_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "Adam_395": {
                "variable": {
                    "value": "g_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * g_reg_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0 ** g_reg_ratio, 0.99 ** g_reg_ratio)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_400": {
                "variable": {
                    "value": "d_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * d_reg_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0 ** d_reg_ratio, 0.99 ** d_reg_ratio)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_449": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler(dataset, shuffle=True, distributed=args.distributed)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_409": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_426": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Generator(args.size, args.latent, args.n_mlp, channel_multiplier=args.channel_multiplier).to(device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(generator, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_433": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(args.size, channel_multiplier=args.channel_multiplier).to(device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(discriminator, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_35": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_38": {
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_41": {
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_86": {
                "input": {
                    "value": "fake_img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_103": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loader",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "latent_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "set_device_371": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "data": {
                    "value": "(torch.sign(real_pred).sum().item(), real_pred.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "save_325": {
                "obj": {
                    "value": "{'g': g_module.state_dict(), 'd': d_module.state_dict(), 'g_ema': g_ema.state_dict(), 'g_optim': g_optim.state_dict(), 'd_optim': d_optim.state_dict(), 'args': args, 'ada_aug_p': ada_aug_p}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "f'checkpoint/{str(i).zfill(6)}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "sign_196": {
                "input": {
                    "value": "real_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(real_img_aug)",
                            "Call"
                        ],
                        [
                            "discriminator(real_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "swapping-autoencoder/train.py": {
        "torch": {
            "softplus_86": {
                "variable": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-real_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_87": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(torch.cat((fake_img1, fake_img2), 0))",
                            "Call"
                        ],
                        [
                            "discriminator(torch.cat((fake_img1, fake_img2), 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_93": {
                "variable": {
                    "value": "(grad_real,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "real_pred.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "real_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(loader)",
                            "Call"
                        ],
                        [
                            "real_img.to(device)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softplus_102": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-fake_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_102": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(patches, 1).view(-1, channel, target_h, target_w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "r1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "str"
                        ]
                    ]
                }
            },
            "Adam_446": {
                "variable": {
                    "value": "g_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(encoder.parameters()) + list(generator.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_451": {
                "variable": {
                    "value": "d_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(discriminator.parameters()) + list(cooccur.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * d_reg_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0 ** d_reg_ratio, 0.99 ** d_reg_ratio)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_135": {
                "variable": {
                    "value": "cropped",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cropped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img[:, :, c_y:c_y + c_h, c_x:c_x + c_w]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(cropped, size=(target_h, target_w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(target_h, target_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "l1_loss_284": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator(structure1, texture1)",
                            "Call"
                        ],
                        [
                            "generator(structure1, texture1)",
                            "Call"
                        ],
                        [
                            "g_ema(structure1, texture1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "real_img1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "l1_loss_298": {
                "variable": {
                    "value": "recon_freq_loss_img1_low",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_img1_freq[:, :3, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "real_img_freq1[:, :3, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "l1_loss_299": {
                "variable": {
                    "value": "recon_freq_loss_img1_high",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_img1_freq[:, 3:6, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "real_img_freq1[:, 3:6, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "l1_loss_303": {
                "variable": {
                    "value": "recon_freq_loss_img2_structure",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_img2_freq[:, 3:6, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "real_img_freq1[:, 3:6, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_460": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_481": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Encoder(args.channel).to(device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(encoder, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_488": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Generator(args.channel).to(device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(generator, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_495": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Discriminator(args.size, channel_multiplier=args.channel_multiplier).to(device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(discriminator, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_502": {
                "variable": {
                    "value": "cooccur",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "cooccur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CooccurDiscriminator(args.channel, size=args.size).to(device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(cooccur, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_524": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data.ConcatDataset(datasets)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler(dataset, shuffle=True, distributed=args.distributed)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_534": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data.ConcatDataset(datasets)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler(dataset, shuffle=True, distributed=args.distributed)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_tensor_45": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pbar",
                            "variable"
                        ],
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_57": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(args.dataset_txt, transform)",
                            "Call"
                        ],
                        [
                            "MultiResolutionDataset(path, transform, args.size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RandomSampler_60": {
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(args.dataset_txt, transform)",
                            "Call"
                        ],
                        [
                            "MultiResolutionDataset(path, transform, args.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_63": {
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(args.dataset_txt, transform)",
                            "Call"
                        ],
                        [
                            "MultiResolutionDataset(path, transform, args.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_420": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_114": {
                "*size": {
                    "value": "n_crop",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_115": {
                "*size": {
                    "value": "n_crop",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_220": {
                "tensors": {
                    "value": "(fake_img1, fake_img2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_286": {
                "tensors": {
                    "value": "(fake_img1, fake_img2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConcatDataset_525": {
                "datasets": {
                    "value": "datasets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ConcatDataset_535": {
                "datasets": {
                    "value": "datasets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_356": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_img1, real_img2, fake_img1, fake_img2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_367": {
                "obj": {
                    "value": "{'e': e_module.state_dict(), 'g': g_module.state_dict(), 'd': d_module.state_dict(), 'cooccur': c_module.state_dict(), 'e_ema': e_ema.state_dict(), 'g_ema': g_ema.state_dict(), 'g_optim': g_optim.state_dict(), 'd_optim': d_optim.state_dict(), 'args': args}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "f'checkpoint_{str(args.name)}/{str(i).zfill(6)}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "no_grad_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils_freq/freq_fourier_loss.py": {
        "torch": {
            "rfft_9": {
                "variable": {
                    "value": "fft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_10": {
                "variable": {
                    "value": "fft_mag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 + torch.sqrt(fft[..., 0] ** 2 + fft[..., 1] ** 2 + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "L1Loss_15": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_27": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_39": {
                "variable": {
                    "value": "criterion_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, L, L)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_10": {
                "input": {
                    "value": "fft[..., 0] ** 2 + fft[..., 1] ** 2 + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_54": {
                "*size": {
                    "value": "(N, L, L)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "utils_freq/freq_pixel_loss.py": {
        "torch": {
            "pad_9": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (padding, padding, padding, padding), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (padding, padding, padding, padding), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding, padding, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (padding, padding, padding, padding), mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (padding, padding, padding, padding), mode='constant', value=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding, padding, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_29": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.getGaussianKernel(size, 0).dot(cv2.getGaussianKernel(size, 0).T)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(kernel).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(data=kernel, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_12": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_40": {
                "tensors": {
                    "value": "(low_freq, im_gray - low_gray)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_11": {
                "input": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.split(1, 1)",
                            "Call"
                        ],
                        [
                            "x.split(1, 1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_24": {
                "input": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.split(1, 1)",
                            "Call"
                        ],
                        [
                            "x.split(1, 1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}