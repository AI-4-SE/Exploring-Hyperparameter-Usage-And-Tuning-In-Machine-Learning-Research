{
    "REL/entity_disambiguation.py": {
        "sklearn": {
            "LogisticRegression_423": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "f1_score_438": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.__create_dataset_LR(datasets, predictions, 'aida_train')",
                            "Call"
                        ],
                        [
                            "self.__create_dataset_LR(datasets, predictions, dname)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "decisions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(preds >= threshold).astype(int)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_41": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_196": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in self.model.parameters() if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_814": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.embeddings['{}_voca'.format(emb_name)].size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.config['emb_dims']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_817": {
                "variable": {
                    "value": "layer.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((self.embeddings['{}_embeddings'.format(emb_name)].weight, embs))",
                            "Call"
                        ],
                        [
                            "embs",
                            "variable"
                        ]
                    ]
                }
            },
            "argmax_592": {
                "variable": {
                    "value": "pred_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.forward(token_ids, token_mask, entity_ids, entity_mask, p_e_m, self.embeddings, gold=true_pos.view(-1, 1))",
                            "Call"
                        ],
                        [
                            "[float(x) for x in pred['scores']]",
                            "ListComp"
                        ],
                        [
                            "self.model.forward(token_ids, token_mask, entity_ids, entity_mask, p_e_m, self.embeddings, gold=true_pos.view(-1, 1))",
                            "Call"
                        ],
                        [
                            "scores.cpu().data.numpy()",
                            "Call"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_807": {
                "variable": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.embeddings['{}_embeddings'.format(emb_name)].weight, embs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "EmbeddingBag_821": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.embeddings['{}_voca'.format(emb_name)].size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.config['emb_dims']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_825": {
                "variable": {
                    "value": "layer.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((self.embeddings['{}_embeddings'.format(emb_name)].weight, embs))",
                            "Call"
                        ],
                        [
                            "embs",
                            "variable"
                        ]
                    ]
                }
            },
            "save_1093": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}.state_dict'.format(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_735": {
                "variable": {
                    "value": "(_, top_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prerank_model.forward(token_ids, token_offsets, entity_ids, self.embeddings, self.emb)",
                            "Call"
                        ],
                        [
                            "(log_probs * entity_mask).add_((entity_mask - 1).mul_(10000000000.0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "k": {
                    "value": "self.config['keep_ctx_ent']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_1053": {
                "variable": {
                    "value": "self.__batch_embs[n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.__batch_embs[n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_1121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_1123": {
                "f": {
                    "value": "'{}{}'.format(self.config['model_path'], '.state_dict')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_1130": {
                "f": {
                    "value": "'{}{}'.format(self.config['model_path'], '.state_dict')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "data": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb.emb(['#{}/UNK#'.format(name.upper())], 'embeddings')[0]",
                            "Subscript"
                        ],
                        [
                            "self.g_emb.emb(['#SND/UNK#'], 'embeddings')[0]",
                            "Subscript"
                        ],
                        [
                            "e in range(self.config['n_epochs'])",
                            "Call"
                        ],
                        [
                            "zip(embs, words_filt)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_181": {
                "data": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb.emb(['#{}/UNK#'.format(name.upper())], 'embeddings')[0]",
                            "Subscript"
                        ],
                        [
                            "self.g_emb.emb(['#SND/UNK#'], 'embeddings')[0]",
                            "Subscript"
                        ],
                        [
                            "e in range(self.config['n_epochs'])",
                            "Call"
                        ],
                        [
                            "zip(embs, words_filt)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_853": {
                "data": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb.emb(['#{}/UNK#'.format(name.upper())], 'embeddings')[0]",
                            "Subscript"
                        ],
                        [
                            "self.g_emb.emb(['#SND/UNK#'], 'embeddings')[0]",
                            "Subscript"
                        ],
                        [
                            "e in range(self.config['n_epochs'])",
                            "Call"
                        ],
                        [
                            "zip(embs, words_filt)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_1125": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "REL/db/generic.py": {
        "torch": {
            "stack_173": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(e) for e in emb.emb(['in', 'the', 'end'], 'embeddings')]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "data": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "REL/mulrel_ranker.py": {
        "torch": {
            "bmm_37": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings['entity_embeddings'](entity_ids)",
                            "Call"
                        ],
                        [
                            "embeddings['entity_embeddings'](entity_ids)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sent_vecs.view(batchsize, dims, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_40": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(entity_vecs, sent_vecs.view(batchsize, dims, 1))",
                            "Call"
                        ],
                        [
                            "scores.view(batchsize, n_entities)",
                            "Call"
                        ],
                        [
                            "self.score_combine_linear_2(hidden).view(batchsize, n_entities)",
                            "Call"
                        ],
                        [
                            "ent_ctx_scores",
                            "variable"
                        ],
                        [
                            "(scores * entity_mask).add_((entity_mask - 1).mul_(10000000000.0))",
                            "Call"
                        ],
                        [
                            "self.score_combine(inputs).view(n_ments, n_cands)",
                            "Call"
                        ],
                        [
                            "self.score_combine(inputs).view(n_ments, n_cands)",
                            "Call"
                        ],
                        [
                            "scores[:-1]",
                            "Subscript"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.att_mat_diag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.config['emb_dims'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.tok_score_mat_diag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.config['emb_dims'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.score_combine_linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config['hid_dims']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.score_combine_act_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.score_combine_linear_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config['hid_dims']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.ctx_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(self.config['emb_dims'] * 3, self.config['emb_dims'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "variable": {
                    "value": "self.rel_embs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.rel_embs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_99": {
                "variable": {
                    "value": "self.ew_embs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.config['n_rels'], self.config['emb_dims']) * 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.score_combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(2, self.config['hid_dims'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_126": {
                "variable": {
                    "value": "ent_tok_att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_vecs * self.att_mat_diag",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "tok_vecs.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_132": {
                "variable": {
                    "value": "(tok_att_scores, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ent_tok_att_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(entity_vecs * self.att_mat_diag, tok_vecs.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "(ent_tok_att_scores * tok_mask).add_((tok_mask - 1).mul_(10000000000.0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_133": {
                "variable": {
                    "value": "(top_tok_att_scores, top_tok_att_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tok_att_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(ent_tok_att_scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "k": {
                    "value": "min(self.config['tok_top_n'], n_words)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_136": {
                "variable": {
                    "value": "att_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_tok_att_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(tok_att_scores, dim=1, k=min(self.config['tok_top_n'], n_words))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_139": {
                "variable": {
                    "value": "selected_tok_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tok_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings['word_embeddings'](token_ids)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "top_tok_att_ids.view(batchsize, -1, 1).repeat(1, 1, tok_vecs.size(2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_144": {
                "variable": {
                    "value": "ctx_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "selected_tok_vecs * self.tok_score_mat_diag * att_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_149": {
                "variable": {
                    "value": "ent_ctx_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings['entity_embeddings'](entity_ids)",
                            "Call"
                        ],
                        [
                            "embeddings['entity_embeddings'](entity_ids)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ctx_vecs.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "bow_ctx_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[local_lctx_vecs, ment_vecs, local_rctx_vecs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ent_scores.view(n_ments * n_cands, -1), torch.log(p_e_m + 1e-20).view(n_ments * n_cands, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multi_margin_loss_402": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(entity_vecs, sent_vecs.view(batchsize, dims, 1))",
                            "Call"
                        ],
                        [
                            "scores.view(batchsize, n_entities)",
                            "Call"
                        ],
                        [
                            "self.score_combine_linear_2(hidden).view(batchsize, n_entities)",
                            "Call"
                        ],
                        [
                            "ent_ctx_scores",
                            "variable"
                        ],
                        [
                            "(scores * entity_mask).add_((entity_mask - 1).mul_(10000000000.0))",
                            "Call"
                        ],
                        [
                            "self.score_combine(inputs).view(n_ments, n_cands)",
                            "Call"
                        ],
                        [
                            "self.score_combine(inputs).view(n_ments, n_cands)",
                            "Call"
                        ],
                        [
                            "scores[:-1]",
                            "Subscript"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "true_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_pos",
                            "Method Argument"
                        ]
                    ]
                },
                "margin": {
                    "value": "self.config['margin']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normalize_407": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.rel_embs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_421": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ew_embs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_75": {
                "variable": {
                    "value": "self.ent_localctx_comp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.config['emb_dims'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.pad_ent_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, self.config['emb_dims']) * 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_83": {
                "variable": {
                    "value": "self.pad_ctx_vec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, self.config['emb_dims']) * 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ent_ctx_scores.view(batchsize * n_entities, -1), torch.log(p_e_m + 1e-20).view(batchsize * n_entities, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "ent_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ent_vecs, self.pad_ent_emb.view(1, 1, -1).repeat(1, n_cands, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_227": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "n_cands",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entity_ids.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_230": {
                "variable": {
                    "value": "entity_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[entity_mask, tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "p_e_m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_e_m, tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "local_ent_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[local_ent_scores, Variable(torch.zeros(1, n_cands), requires_grad=False).to(self.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Variable(torch.zeros(n_ments * n_cands, 1)).to(self.device), local_ent_scores.view(n_ments * n_cands, -1), torch.log(p_e_m + 1e-20).view(n_ments * n_cands, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_260": {
                "variable": {
                    "value": "ment_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "n_ments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entity_ids.size()",
                            "Call"
                        ],
                        [
                            "n_ments + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_275": {
                "variable": {
                    "value": "rel_ctx_ctx_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_ctx_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m1_ctx_vecs.view(1, n_ments, -1) * self.ew_embs.view(n_rels, 1, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "m2_ctx_vecs.view(1, n_ments, -1).permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_297": {
                "variable": {
                    "value": "rel_ctx_ctx_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_ctx_ctx_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(rel_ctx_vecs, m2_ctx_vecs.view(1, n_ments, -1).permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "rel_ctx_ctx_scores.add_((1 - Variable(dist.float()).to(self.device)).mul_(-10000000000.0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_305": {
                "variable": {
                    "value": "rel_ent_ent_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_ent_vecs.view(n_rels, n_ments, 1, n_cands, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "ent_vecs.view(1, 1, n_ments, n_cands, -1).permute(0, 1, 2, 4, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_316": {
                "variable": {
                    "value": "ent_ent_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_ent_ent_scores * rel_ctx_ctx_weights.view(n_rels, n_ments, 1, n_ments, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_316": {
                "variable": {
                    "value": "ent_ent_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 / n_rels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_350": {
                "variable": {
                    "value": "ent_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ent_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_ent_scores",
                            "variable"
                        ],
                        [
                            "local_ent_scores * 1 + torch.sum(msgs * mask.view(n_ments, 1, n_ments), dim=2)",
                            "BinOp"
                        ],
                        [
                            "F.softmax(ent_scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_419": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(X.view(self.config['n_rels'], 1, -1) - X.view(1, self.config['n_rels'], -1)).pow(2).sum(dim=2).add_(1e-05).sqrt()",
                            "Call"
                        ],
                        [
                            "diff * (diff < 1).float()",
                            "BinOp"
                        ],
                        [
                            "(X.view(self.config['n_rels'], 1, -1) - X.view(1, self.config['n_rels'], -1)).pow(2).sum(dim=2).add_(1e-05).sqrt()",
                            "Call"
                        ],
                        [
                            "diff * (diff < 1).float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_419": {
                "input": {
                    "value": "lamb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_433": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(X.view(self.config['n_rels'], 1, -1) - X.view(1, self.config['n_rels'], -1)).pow(2).sum(dim=2).add_(1e-05).sqrt()",
                            "Call"
                        ],
                        [
                            "diff * (diff < 1).float()",
                            "BinOp"
                        ],
                        [
                            "(X.view(self.config['n_rels'], 1, -1) - X.view(1, self.config['n_rels'], -1)).pow(2).sum(dim=2).add_(1e-05).sqrt()",
                            "Call"
                        ],
                        [
                            "diff * (diff < 1).float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_433": {
                "input": {
                    "value": "lamb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_65": {
                "*size": {
                    "value": "self.config['emb_dims']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_67": {
                "*size": {
                    "value": "self.config['emb_dims']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "in_features": {
                    "value": "self.config['emb_dims'] * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config['emb_dims']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tanh_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_90": {
                "p": {
                    "value": "self.config['dropout_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_94": {
                "*size": {
                    "value": "self.config['n_rels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config['emb_dims']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config['hid_dims']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_107": {
                "in_features": {
                    "value": "self.config['hid_dims']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_137": {
                "input": {
                    "value": "att_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(top_tok_att_scores, dim=1).view(batchsize, -1, 1)",
                            "Call"
                        ],
                        [
                            "att_probs / torch.sum(att_probs, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_206": {
                "input": {
                    "value": "self.s_ltoken_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_212": {
                "input": {
                    "value": "self.s_rtoken_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_218": {
                "input": {
                    "value": "self.s_mtoken_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "ctx_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ctx_vecs, self.pad_ctx_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_290": {
                "variable": {
                    "value": "(topk_values, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_ctx_ctx_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(rel_ctx_vecs, m2_ctx_vecs.view(1, n_ments, -1).permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "rel_ctx_ctx_scores.add_((1 - Variable(dist.float()).to(self.device)).mul_(-10000000000.0))",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "min(self.ent_top_n, n_ments)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_338": {
                "variable": {
                    "value": "(msgs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ent_ent_votes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ent_ent_scores + local_ent_scores * 1 + torch.sum(prev_msgs.view(1, n_ments, n_cands, n_ments) * mask.view(n_ments, 1, 1, n_ments), dim=3).view(n_ments, 1, n_ments, n_cands)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_76": {
                "*size": {
                    "value": "self.config['emb_dims']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_96": {
                "*size": {
                    "value": "self.config['emb_dims']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_100": {
                "*size": {
                    "value": "self.config['n_rels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config['emb_dims']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_347": {
                "input": {
                    "value": "msgs * mask.view(n_ments, 1, n_ments)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_356": {
                "input": {
                    "value": "p_e_m + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_81": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config['emb_dims']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_84": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config['emb_dims']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_158": {
                "input": {
                    "value": "p_e_m + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_248": {
                "input": {
                    "value": "p_e_m + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_332": {
                "input": {
                    "value": "prev_msgs.view(1, n_ments, n_cands, n_ments) * mask.view(n_ments, 1, 1, n_ments)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_199": {
                "*size": {
                    "value": "n_ments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entity_ids.size()",
                            "Call"
                        ],
                        [
                            "n_ments + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "n_cands",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entity_ids.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_325": {
                "*size": {
                    "value": "n_ments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entity_ids.size()",
                            "Call"
                        ],
                        [
                            "n_ments + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "n_cands",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entity_ids.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "n_ments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entity_ids.size()",
                            "Call"
                        ],
                        [
                            "n_ments + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_340": {
                "input": {
                    "value": "msgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(ent_ent_votes, dim=3)",
                            "Call"
                        ],
                        [
                            "(F.softmax(msgs, dim=1).mul(self.config['dropout_rate']) + prev_msgs.exp().mul(1 - self.config['dropout_rate'])).log()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_340": {
                "input": {
                    "value": "self.config['dropout_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_346": {
                "n": {
                    "value": "n_ments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entity_ids.size()",
                            "Call"
                        ],
                        [
                            "n_ments + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_235": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "n_cands",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entity_ids.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_246": {
                "*size": {
                    "value": "n_ments * n_cands",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_282": {
                "n": {
                    "value": "n_ments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entity_ids.size()",
                            "Call"
                        ],
                        [
                            "n_ments + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_328": {
                "n": {
                    "value": "n_ments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entity_ids.size()",
                            "Call"
                        ],
                        [
                            "n_ments + 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/code_tutorials/batch_EL.py": {
        "torch": {}
    },
    "scripts/code_tutorials/run_server_temp.py": {
        "torch": {
            "Dropout_99": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.embedding2nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings.embedding_length",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "rnn_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings.embedding_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(tag_dictionary)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embeddings.embedding_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(tag_dictionary)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_162": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.tagset_size, self.tagset_size).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_136": {
                "variable": {
                    "value": "self.lstm_init_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.nlayers * num_directions, self.hidden_size).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_143": {
                "variable": {
                    "value": "self.lstm_init_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.nlayers * num_directions, self.hidden_size).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "*size": {
                    "value": "self.tagset_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.tagset_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "*size": {
                    "value": "self.nlayers * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "*size": {
                    "value": "self.nlayers * num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/efficiency_test.py": {
        "torch": {
            "device_61": {
                "variable": {
                    "value": "flair.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_instantiation.py": {
        "torch": {
            "device_49": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}