{
    "preprocess/cross_val_splits.py": {
        "sklearn": {
            "KFold_13": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "precision_recall_curve_195": {
                "variable": {
                    "value": "(precision, recall, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "y_pred_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_recall_curve_228": {
                "variable": {
                    "value": "(precision, recall, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "y_pred_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_115": {
                "y_true": {
                    "value": "y_true_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_157": {
                "y_true": {
                    "value": "y_true_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_170": {
                "y_true": {
                    "value": "y_true_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_230": {
                "y_true": {
                    "value": "y_true_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.delete(y_true_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_true, dtype=np.long)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred_arr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.delete(y_pred_arr, bad_cols, axis=1)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ],
                        [
                            "np.asarray(self.y_pred)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "auc_231": {
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "auc_209": {
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_309": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_291": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint, 'icd_last.pth.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint, 'last.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "evaluate.py": {
        "torch": {
            "is_available_420": {
                "variable": {
                    "value": "params.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_504": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:0' if params.cuda else sys.exit('gpu unavailable')",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCELoss_523": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_430": {
                "seed": {
                    "value": "230",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_519": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.CNN_Text(data_loader.weights_w2v, params)",
                            "Call"
                        ],
                        [
                            "models.CNN_Text_Attn_Phen(data_loader.weights_w2v, params)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "models.LSTM_Attn(data_loader.weights_w2v, params)",
                            "Call"
                        ],
                        [
                            "models.CNN_Text_Attn(data_loader.weights_w2v, params)",
                            "Call"
                        ],
                        [
                            "models.lr_baseline(params)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_434": {
                "seed": {
                    "value": "230",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_517": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_518": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/data_loader.py": {
        "torch": {
            "tensor_185": {
                "variable": {
                    "value": "batch_icd",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_icd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([data['icds'][idx] for idx in order[i * params.batch_size:(i + 1) * params.batch_size]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(batch_icd, dtype=torch.float, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_188": {
                "variable": {
                    "value": "batch_w2v_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_w2v_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([data['mask_w2v'][idx] for idx in order[i * params.batch_size:(i + 1) * params.batch_size]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(batch_w2v_mask, dtype=torch.float, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_190": {
                "variable": {
                    "value": "batch_bool_w2v_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_bool_w2v_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([data['bool_mask_w2v'][idx] for idx in order[i * params.batch_size:(i + 1) * params.batch_size]])",
                            "Call"
                        ],
                        [
                            "torch.tensor(batch_bool_w2v_mask, dtype=torch.bool, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_183": {
                "data": {
                    "value": "batch_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([data['labels'][idx] for idx in order[i * params.batch_size:(i + 1) * params.batch_size]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "model/models.py": {
        "torch": {
            "Embedding_24": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[0]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[0]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[0]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(emb_dim, filters, K) for K in Ks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len(Ks) * filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.n_out",
                            "Attribute"
                        ],
                        [
                            "params.n_out",
                            "Attribute"
                        ],
                        [
                            "params.n_out",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.args.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(x)",
                            "Call"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in h]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "layer(padding(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "layer(padding(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(text))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(x)",
                            "Call"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in h]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "layer(padding(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "layer(padding(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(text))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_76": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[0]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[0]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[0]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_78": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(emb_dim, filters, K) for K in Ks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.filters",
                            "Attribute"
                        ],
                        [
                            "params.filters",
                            "Attribute"
                        ],
                        [
                            "params.filters",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.filters",
                            "Attribute"
                        ],
                        [
                            "params.filters",
                            "Attribute"
                        ],
                        [
                            "params.filters",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.n_out",
                            "Attribute"
                        ],
                        [
                            "params.n_out",
                            "Attribute"
                        ],
                        [
                            "params.n_out",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_85": {
                "variable": {
                    "value": "self.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.args.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.args.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ConstantPad1d((0, K - 1), 0) for K in Ks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "leaky_relu_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(x)",
                            "Call"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in h]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "layer(padding(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "layer(padding(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(text))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_109": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Note[1]] * len(self.convs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.fc_layer(x, self.convs[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(Note)",
                            "Call"
                        ],
                        [
                            "[self.fc_layer(x, self.convs[i], self.padding[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(text)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "h.transpose(1, 2).matmul(F.softmax(alpha, dim=1)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "[self.fc_layer(x, self.convs[i], self.padding[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(text)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "h.transpose(1, 2).matmul(alpha).squeeze(2)",
                            "Call"
                        ],
                        [
                            "params.h",
                            "Attribute"
                        ],
                        [
                            "output.transpose(1, 2).matmul(attn).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_112": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_114": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.U(h / self.args.filters ** 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "attn_mask.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_141": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[0]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[0]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[0]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_142": {
                "variable": {
                    "value": "self.embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_143": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(emb_dim, filters, K) for K in Ks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.filters",
                            "Attribute"
                        ],
                        [
                            "params.filters",
                            "Attribute"
                        ],
                        [
                            "params.filters",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "params.num_phenotypes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.phen_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "params.filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params.num_phenotypes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.final_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "params.num_phenotypes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_150": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_151": {
                "variable": {
                    "value": "self.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.args.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_152": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.args.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_154": {
                "variable": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ConstantPad1d((0, K - 1), 0) for K in Ks]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "leaky_relu_159": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(x)",
                            "Call"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in h]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "layer(padding(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "layer(padding(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(text))",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_173": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_174": {
                "variable": {
                    "value": "self.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Note[1]] * len(self.convs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.fc_layer(x, self.convs[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(Note)",
                            "Call"
                        ],
                        [
                            "[self.fc_layer(x, self.convs[i], self.padding[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(text)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "h.transpose(1, 2).matmul(F.softmax(alpha, dim=1)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "[self.fc_layer(x, self.convs[i], self.padding[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(text)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "h.transpose(1, 2).matmul(alpha).squeeze(2)",
                            "Call"
                        ],
                        [
                            "params.h",
                            "Attribute"
                        ],
                        [
                            "output.transpose(1, 2).matmul(attn).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_191": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_193": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.add(self.U(h / self.args.filters ** 0.5), attn_mask.unsqueeze(2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_220": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "params.num_phenotypes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_239": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[0]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[0]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[0]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_240": {
                "variable": {
                    "value": "self.embed.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_242": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.fc_layer(x, self.convs[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(Note)",
                            "Call"
                        ],
                        [
                            "[self.fc_layer(x, self.convs[i], self.padding[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(text)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "h.transpose(1, 2).matmul(F.softmax(alpha, dim=1)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "[self.fc_layer(x, self.convs[i], self.padding[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(text)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "h.transpose(1, 2).matmul(alpha).squeeze(2)",
                            "Call"
                        ],
                        [
                            "params.h",
                            "Attribute"
                        ],
                        [
                            "output.transpose(1, 2).matmul(attn).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_244": {
                "variable": {
                    "value": "self.attn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.fc_layer(x, self.convs[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(Note)",
                            "Call"
                        ],
                        [
                            "[self.fc_layer(x, self.convs[i], self.padding[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(text)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "h.transpose(1, 2).matmul(F.softmax(alpha, dim=1)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "[self.fc_layer(x, self.convs[i], self.padding[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(text)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "h.transpose(1, 2).matmul(alpha).squeeze(2)",
                            "Call"
                        ],
                        [
                            "params.h",
                            "Attribute"
                        ],
                        [
                            "output.transpose(1, 2).matmul(attn).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_245": {
                "variable": {
                    "value": "self.attn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.fc_layer(x, self.convs[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(Note)",
                            "Call"
                        ],
                        [
                            "[self.fc_layer(x, self.convs[i], self.padding[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(text)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "h.transpose(1, 2).matmul(F.softmax(alpha, dim=1)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "[self.fc_layer(x, self.convs[i], self.padding[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(text)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "h.transpose(1, 2).matmul(alpha).squeeze(2)",
                            "Call"
                        ],
                        [
                            "params.h",
                            "Attribute"
                        ],
                        [
                            "output.transpose(1, 2).matmul(attn).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_247": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_248": {
                "variable": {
                    "value": "self.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.args.embed_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_267": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.add(attn2, attn_mask.unsqueeze(2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_57": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(x)",
                            "Call"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in h]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "layer(padding(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "layer(padding(x))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.embed(x)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.embed_dropout(self.embed(text))",
                            "Call"
                        ]
                    ]
                }
            },
            "unbind_204": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_223": {
                "input": {
                    "value": "self.proj(codes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_251": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.n_out",
                            "Attribute"
                        ],
                        [
                            "params.n_out",
                            "Attribute"
                        ],
                        [
                            "params.n_out",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_253": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.fc_layer(x, self.convs[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(Note)",
                            "Call"
                        ],
                        [
                            "[self.fc_layer(x, self.convs[i], self.padding[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(text)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "h.transpose(1, 2).matmul(F.softmax(alpha, dim=1)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "[self.fc_layer(x, self.convs[i], self.padding[i]) for i in range(len(self.convs))]",
                            "ListComp"
                        ],
                        [
                            "self.encoder(text)",
                            "Call"
                        ],
                        [
                            "torch.cat(h, 2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "h.transpose(1, 2).matmul(alpha).squeeze(2)",
                            "Call"
                        ],
                        [
                            "params.h",
                            "Attribute"
                        ],
                        [
                            "output.transpose(1, 2).matmul(attn).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.n_out",
                            "Attribute"
                        ],
                        [
                            "params.n_out",
                            "Attribute"
                        ],
                        [
                            "params.n_out",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sigmoid_273": {
                "input": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(h)",
                            "Call"
                        ],
                        [
                            "self.final_proj(phen_scores)",
                            "Call"
                        ],
                        [
                            "self.fc(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_25": {
                "ndarray": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool1d_51": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "i.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_51": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "ndarray": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "input": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(h)",
                            "Call"
                        ],
                        [
                            "self.final_proj(phen_scores)",
                            "Call"
                        ],
                        [
                            "self.fc(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_142": {
                "ndarray": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_193": {
                "input": {
                    "value": "self.U(h / self.args.filters ** 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "attn_mask.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_240": {
                "ndarray": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_267": {
                "input": {
                    "value": "attn2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn2(attn1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attn_mask.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_27": {
                "in_channels": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.filters",
                            "Attribute"
                        ],
                        [
                            "params.filters",
                            "Attribute"
                        ],
                        [
                            "params.filters",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_78": {
                "in_channels": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.filters",
                            "Attribute"
                        ],
                        [
                            "params.filters",
                            "Attribute"
                        ],
                        [
                            "params.filters",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConstantPad1d_88": {
                "padding": {
                    "value": "(0, K - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_121": {
                "input": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(h)",
                            "Call"
                        ],
                        [
                            "self.final_proj(phen_scores)",
                            "Call"
                        ],
                        [
                            "self.fc(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_143": {
                "in_channels": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ],
                        [
                            "embedding.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.filters",
                            "Attribute"
                        ],
                        [
                            "params.filters",
                            "Attribute"
                        ],
                        [
                            "params.filters",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConstantPad1d_154": {
                "padding": {
                    "value": "(0, K - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_206": {
                "input": {
                    "value": "phen_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phen_proj.weight.mul(h.transpose(1, 2)).sum(dim=2).add(self.phen_proj.bias)",
                            "Call"
                        ],
                        [
                            "self.dropout(phen_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_209": {
                "input": {
                    "value": "phen_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phen_proj.weight.mul(h.transpose(1, 2)).sum(dim=2).add(self.phen_proj.bias)",
                            "Call"
                        ],
                        [
                            "self.dropout(phen_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_115": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(self.U(h / self.args.filters ** 0.5), attn_mask.unsqueeze(2))",
                            "Call"
                        ],
                        [
                            "F.softmax(torch.add(self.U(h / self.args.filters ** 0.5), attn_mask.unsqueeze(2)), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unbind(alpha.squeeze(), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_213": {
                "input": {
                    "value": "y_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc(h)",
                            "Call"
                        ],
                        [
                            "self.final_proj(phen_scores)",
                            "Call"
                        ],
                        [
                            "self.fc(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_211": {
                "input": {
                    "value": "phen_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phen_proj.weight.mul(h.transpose(1, 2)).sum(dim=2).add(self.phen_proj.bias)",
                            "Call"
                        ],
                        [
                            "self.dropout(phen_scores)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "is_available_266": {
                "variable": {
                    "value": "params.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_353": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:0' if params.cuda else sys.exit('gpu unavailable')",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "AdamW_367": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_370": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_num_threads_258": {
                "int": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_269": {
                "seed": {
                    "value": "230",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_276": {
                "seed": {
                    "value": "230",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_273": {
                "seed": {
                    "value": "230",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_280": {
                "seed": {
                    "value": "230",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}