{
    "processing/utils/gaze/dataset.py": {
        "sklearn": {
            "MinMaxScaler_66": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "[0, self.feature_max]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "processing/model/gaze/tester.py": {
        "torch": {
            "MSELoss_22": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "losses_metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.criterion_metric.d_report",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "processing/model/gaze/trainer.py": {
        "torch": {
            "MSELoss_20": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_norm__36": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "processing/model/model.py": {
        "torch": {
            "L1Loss_58": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.d_report",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "processing/model/trainer.py": {
        "torch": {
            "SummaryWriter_25": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "processing/utils/dataset.py": {
        "torch": {
            "tensor_114": {
                "variable": {
                    "value": "b_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(b_inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "b_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(b_masks)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "processing/utils/early_stopping.py": {
        "torch": {
            "save_46": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.dir, 'model-' + cf.model_pretrained + '-' + str(cf.full_finetuning) + '-' + str(RANDOM_STATE) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "processing/utils/gaze/dataloader.py": {
        "torch": {
            "TensorDataset_11": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.as_tensor(input_numpy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_11": {
                "data": {
                    "value": "input_numpy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_12": {
                "data": {
                    "value": "target_numpy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_13": {
                "data": {
                    "value": "mask_numpy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RandomSampler_14": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(torch.as_tensor(input_numpy), torch.as_tensor(target_numpy), torch.as_tensor(mask_numpy))",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_14": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(torch.as_tensor(input_numpy), torch.as_tensor(target_numpy), torch.as_tensor(mask_numpy))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "processing/utils/utils.py": {
        "torch": {
            "where_14": {
                "variable": {
                    "value": "active_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b_target.view(-1, d_out) == target_pad",
                            "Compare"
                        ],
                        [
                            "b_target.view(-1) == target_pad",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "active_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b_output.view(-1, d_out)",
                            "Call"
                        ],
                        [
                            "b_output.view(-1, d_out)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b_target.view(-1, d_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_26": {
                "variable": {
                    "value": "active_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "active_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b_target.view(-1, d_out) == target_pad",
                            "Compare"
                        ],
                        [
                            "b_target.view(-1) == target_pad",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "torch.tensor(criterion.ignore_index).type_as(b_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "b_target.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "criterion.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/gaze/test.py": {
        "torch": {
            "load_42": {
                "f": {
                    "value": "os.path.join(results_task_dir, 'model-' + cf.model_pretrained + '-' + str(cf.full_finetuning) + '-' + str(RANDOM_STATE) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "settings.py": {
        "torch": {
            "device_7": {
                "variable": {
                    "value": "DEVICE",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_18": {
                "seed": {
                    "value": "RANDOM_STATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}