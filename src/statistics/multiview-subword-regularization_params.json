{
    "third_party/transformers/examples/mm-imdb/run_mmimdb.py": {
        "sklearn": {
            "f1_score_321": {
                "y_true": {
                    "value": "out_label_ids",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "labels.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.append(out_label_ids, labels.detach().cpu().numpy(), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.sigmoid(logits).detach().cpu().numpy() > 0.5",
                            "Compare"
                        ],
                        [
                            "np.append(preds, torch.sigmoid(logits).detach().cpu().numpy() > 0.5, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "possible_values": []
                }
            },
            "f1_score_322": {
                "y_true": {
                    "value": "out_label_ids",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "labels.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.append(out_label_ids, labels.detach().cpu().numpy(), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.sigmoid(logits).detach().cpu().numpy() > 0.5",
                            "Compare"
                        ],
                        [
                            "np.append(preds, torch.sigmoid(logits).detach().cpu().numpy() > 0.5, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_103": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                }
            },
            "SequentialSampler_275": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_276": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "possible_values": []
                }
            },
            "manual_seed_91": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "SummaryWriter_99": {
                "variable": {
                    "value": "tb_writer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataParallel_140": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_144": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_282": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ],
                        [
                            "MMBTForClassification(config, transformer, img_encoder)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_494": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_495": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_498": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_561": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "label_weights",
                    "possible_values": [
                        [
                            "(torch.tensor(label_frequences, device=args.device, dtype=torch.float) / len(train_dataset)) ** (-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_93": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_102": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_102": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_497": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "save_577": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.output_dir, WEIGHTS_NAME)",
                    "possible_values": []
                }
            },
            "save_581": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "no_grad_296": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_585": {
                "f": {
                    "value": "os.path.join(args.output_dir, WEIGHTS_NAME)",
                    "possible_values": []
                }
            },
            "sigmoid_312": {
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_559": {
                "data": {
                    "value": "label_frequences",
                    "possible_values": [
                        [
                            "train_dataset.get_label_frequencies()",
                            "Call"
                        ],
                        [
                            "[label_frequences[l] for l in labels]",
                            "ListComp"
                        ]
                    ]
                },
                "device": {
                    "value": "args.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "load_604": {
                "f": {
                    "value": "checkpoint",
                    "possible_values": [
                        [
                            "checkpoints",
                            "Name"
                        ]
                    ]
                }
            },
            "clip_grad_norm__199": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__201": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "save_236": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, WEIGHTS_NAME)",
                    "possible_values": []
                }
            },
            "save_237": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "sigmoid_315": {
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_494": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/data/metrics/__init__.py": {
        "sklearn": {
            "f1_score_37": {
                "variable": {
                    "value": "f1",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": []
                }
            },
            "matthews_corrcoef_56": {
                "y_true": {
                    "value": "labels",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/utils_lareqa.py": {
        "sklearn": {
            "average_precision_score_368": {
                "y_true": {
                    "value": "y_true",
                    "possible_values": [
                        [
                            "np.zeros(scores.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "np.squeeze(scores)",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/processors/lareqa.py": {
        "tensorflow": {},
        "torch": {
            "tensor_153": {
                "variable": {
                    "value": "q_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.q_input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "q_attention_masks",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.q_attention_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "q_token_type_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.q_token_type_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "variable": {
                    "value": "a_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.a_input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "a_attention_masks",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.a_attention_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "a_token_type_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.a_token_type_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "arange_161": {
                "variable": {
                    "value": "all_example_index",
                    "possible_values": []
                },
                "start": {
                    "value": "q_input_ids.size(0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_162": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "q_input_ids",
                    "possible_values": []
                }
            },
            "TensorDataset_172": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "q_input_ids",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/processors/squad.py": {
        "tensorflow": {
            "TensorShape_403": {
                "dims": {
                    "value": "[None]",
                    "possible_values": []
                }
            },
            "TensorShape_404": {
                "dims": {
                    "value": "[None]",
                    "possible_values": []
                }
            },
            "TensorShape_405": {
                "dims": {
                    "value": "[None]",
                    "possible_values": []
                }
            },
            "TensorShape_408": {
                "dims": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "TensorShape_409": {
                "dims": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "TensorShape_410": {
                "dims": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "TensorShape_411": {
                "dims": {
                    "value": "[None]",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_348": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_349": {
                "variable": {
                    "value": "all_attention_masks",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_350": {
                "variable": {
                    "value": "all_token_type_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_351": {
                "variable": {
                    "value": "all_cls_index",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.cls_index for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_352": {
                "variable": {
                    "value": "all_p_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.p_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "tensor_353": {
                "variable": {
                    "value": "all_langs",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.langs for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "arange_356": {
                "variable": {
                    "value": "all_example_index",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_357": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "tensor_361": {
                "variable": {
                    "value": "all_start_positions",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.start_position for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_362": {
                "variable": {
                    "value": "all_end_positions",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.end_position for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_363": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/benchmarks.py": {
        "tensorflow": {
            "set_experimental_options_266": {
                "options": {
                    "value": "{'auto_mixed_precision': True}",
                    "possible_values": []
                }
            },
            "stack_403": {
                "variable": {
                    "value": "sequence",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.squeeze(tf.constant(tokenized_sequence[:slice_size])[None, :])] * batch_size",
                    "possible_values": []
                }
            },
            "squeeze_404": {
                "input": {
                    "value": "tf.constant(tokenized_sequence[:slice_size])[None, :]",
                    "possible_values": []
                }
            },
            "constant_404": {
                "value": {
                    "value": "tokenized_sequence[:slice_size]",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_272": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_355": {
                "variable": {
                    "value": "sequence",
                    "possible_values": []
                },
                "data": {
                    "value": "tokenized_sequence[:slice_size]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda' if gpu and torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "trace_359": {
                "variable": {
                    "value": "inference",
                    "possible_values": []
                },
                "input": {
                    "value": "model",
                    "possible_values": [
                        [
                            "AutoModel.from_pretrained(model_name, config=config)",
                            "Call"
                        ],
                        [
                            "TFAutoModel.from_pretrained(model_name, config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_371": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_417": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/hans/hans_processors.py": {
        "tensorflow": {
            "TensorShape_165": {
                "dims": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "TensorShape_161": {
                "dims": {
                    "value": "[None]",
                    "possible_values": []
                }
            },
            "TensorShape_162": {
                "dims": {
                    "value": "[None]",
                    "possible_values": []
                }
            },
            "TensorShape_163": {
                "dims": {
                    "value": "[None]",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/run_tf_glue.py": {
        "tensorflow": {
            "Adam_59": {
                "variable": {
                    "value": "opt",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "3e-05",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-08",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_70": {
                "variable": {
                    "value": "metric",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "possible_values": []
                }
            },
            "set_experimental_options_36": {
                "options": {
                    "value": "{'auto_mixed_precision': USE_AMP}",
                    "possible_values": []
                }
            },
            "LossScaleOptimizer_62": {
                "variable": {
                    "value": "opt",
                    "possible_values": []
                }
            },
            "MeanSquaredError_66": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_68": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/run_tf_ner.py": {
        "tensorflow": {
            "create_file_writer_167": {
                "variable": {
                    "value": "writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "/tmp/mylogs",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_325": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "possible_values": []
                }
            },
            "TFRecordDataset_388": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "filenames": {
                    "value": "cached_file",
                    "possible_values": []
                }
            },
            "TFRecordWriter_396": {
                "variable": {
                    "value": "writer",
                    "possible_values": []
                },
                "path": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args['data_dir'], 'cached_{}_{}_{}.tf_record'.format(mode, list(filter(None, args['model_name_or_path'].split('/'))).pop(), str(args['max_seq_length'])))",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseCategoricalCrossentropy_170": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "possible_values": []
                }
            },
            "Mean_176": {
                "variable": {
                    "value": "loss_metric",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "parse_single_example_380": {
                "variable": {
                    "value": "example",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "possible_values": []
                },
                "features": {
                    "value": "name_to_features",
                    "possible_values": [
                        [
                            "{'input_ids': tf.io.FixedLenFeature([max_seq_length], tf.int64), 'input_mask': tf.io.FixedLenFeature([max_seq_length], tf.int64), 'segment_ids': tf.io.FixedLenFeature([max_seq_length], tf.int64), 'label_ids': tf.io.FixedLenFeature([max_seq_length], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Example_412": {
                "variable": {
                    "value": "tf_example",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=record_feature)",
                    "possible_values": []
                }
            },
            "TPUClusterResolver_487": {
                "variable": {
                    "value": "resolver",
                    "possible_values": []
                },
                "tpu": {
                    "value": "args['tpu']",
                    "possible_values": [
                        [
                            "flags.FLAGS.flag_values_dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "TPUStrategy_490": {
                "variable": {
                    "value": "strategy",
                    "possible_values": []
                },
                "tpu_cluster_resolver": {
                    "value": "resolver",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(tpu=args['tpu'])",
                            "Call"
                        ]
                    ]
                }
            },
            "LossScaleOptimizer_174": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                }
            },
            "reshape_342": {
                "variable": {
                    "value": "tmp_logits",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "model(train_features['input_ids'], **inputs)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(logits, (-1, len(labels) + 1))",
                            "Call"
                        ],
                        [
                            "model(eval_features['input_ids'], **inputs)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, len(labels) + 1)",
                    "possible_values": []
                }
            },
            "reshape_343": {
                "variable": {
                    "value": "active_loss",
                    "possible_values": []
                },
                "tensor": {
                    "value": "eval_features['input_mask']",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "possible_values": []
                }
            },
            "boolean_mask_344": {
                "variable": {
                    "value": "active_logits",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_logits",
                    "possible_values": [
                        [
                            "tf.reshape(logits, (-1, len(labels) + 1))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "active_loss",
                    "possible_values": [
                        [
                            "tf.reshape(train_features['input_mask'], (-1,))",
                            "Call"
                        ],
                        [
                            "tf.reshape(eval_features['input_mask'], (-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_345": {
                "variable": {
                    "value": "tmp_eval_labels",
                    "possible_values": []
                },
                "tensor": {
                    "value": "eval_labels",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "possible_values": []
                }
            },
            "boolean_mask_346": {
                "variable": {
                    "value": "active_labels",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tmp_eval_labels",
                    "possible_values": [
                        [
                            "tf.reshape(eval_labels, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "active_loss",
                    "possible_values": [
                        [
                            "tf.reshape(train_features['input_mask'], (-1,))",
                            "Call"
                        ],
                        [
                            "tf.reshape(eval_features['input_mask'], (-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "FixedLenFeature_373": {
                "shape": {
                    "value": "[max_seq_length]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_374": {
                "shape": {
                    "value": "[max_seq_length]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_375": {
                "shape": {
                    "value": "[max_seq_length]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "FixedLenFeature_376": {
                "shape": {
                    "value": "[max_seq_length]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "Feature_403": {
                "variable": {
                    "value": "f",
                    "possible_values": []
                },
                "int64_list": {
                    "value": "tf.train.Int64List(value=list(values))",
                    "possible_values": []
                }
            },
            "set_experimental_options_484": {
                "options": {
                    "value": "{'auto_mixed_precision': True}",
                    "possible_values": []
                }
            },
            "experimental_connect_to_cluster_488": {
                "cluster_spec_or_resolver": {
                    "value": "resolver",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(tpu=args['tpu'])",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_tpu_system_489": {
                "enable_coordination_service": {
                    "value": "resolver",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(tpu=args['tpu'])",
                            "Call"
                        ]
                    ]
                }
            },
            "MirroredStrategy_494": {
                "variable": {
                    "value": "strategy",
                    "possible_values": []
                },
                "devices": {
                    "value": "[f'/gpu:{gpu}' for gpu in args['gpus'].split(',')]",
                    "possible_values": []
                }
            },
            "reshape_218": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "model(train_features['input_ids'], **inputs)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(logits, (-1, len(labels) + 1))",
                            "Call"
                        ],
                        [
                            "model(eval_features['input_ids'], **inputs)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, len(labels) + 1)",
                    "possible_values": []
                }
            },
            "reshape_219": {
                "variable": {
                    "value": "active_loss",
                    "possible_values": []
                },
                "tensor": {
                    "value": "train_features['input_mask']",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "possible_values": []
                }
            },
            "boolean_mask_220": {
                "variable": {
                    "value": "active_logits",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "model(train_features['input_ids'], **inputs)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(logits, (-1, len(labels) + 1))",
                            "Call"
                        ],
                        [
                            "model(eval_features['input_ids'], **inputs)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mask": {
                    "value": "active_loss",
                    "possible_values": [
                        [
                            "tf.reshape(train_features['input_mask'], (-1,))",
                            "Call"
                        ],
                        [
                            "tf.reshape(eval_features['input_mask'], (-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_221": {
                "variable": {
                    "value": "train_labels",
                    "possible_values": []
                },
                "tensor": {
                    "value": "train_labels",
                    "possible_values": [
                        [
                            "tf.reshape(train_labels, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "possible_values": []
                }
            },
            "boolean_mask_222": {
                "variable": {
                    "value": "active_labels",
                    "possible_values": []
                },
                "tensor": {
                    "value": "train_labels",
                    "possible_values": [
                        [
                            "tf.reshape(train_labels, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "active_loss",
                    "possible_values": [
                        [
                            "tf.reshape(train_features['input_mask'], (-1,))",
                            "Call"
                        ],
                        [
                            "tf.reshape(eval_features['input_mask'], (-1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "OneDeviceStrategy_497": {
                "variable": {
                    "value": "strategy",
                    "possible_values": []
                },
                "device": {
                    "value": "/cpu:0",
                    "possible_values": []
                }
            },
            "OneDeviceStrategy_500": {
                "variable": {
                    "value": "strategy",
                    "possible_values": []
                },
                "device": {
                    "value": "'/gpu:' + args['gpus'].split(',')[0]",
                    "possible_values": []
                }
            },
            "GFile_599": {
                "name": {
                    "value": "output_eval_file",
                    "possible_values": [
                        [
                            "os.path.join(args['output_dir'], 'eval_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "possible_values": []
                }
            },
            "GFile_625": {
                "name": {
                    "value": "output_test_results_file",
                    "possible_values": [
                        [
                            "os.path.join(args['output_dir'], 'test_results.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "possible_values": []
                }
            },
            "GFile_633": {
                "name": {
                    "value": "output_test_predictions_file",
                    "possible_values": [
                        [
                            "os.path.join(args['output_dir'], 'test_predictions.txt')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "possible_values": []
                }
            },
            "GradientTape_216": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reduce_sum_348": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "possible_values": [
                        [
                            "loss_fct(active_labels, active_logits)",
                            "Call"
                        ],
                        [
                            "loss_fct(active_labels, active_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_412": {
                "feature": {
                    "value": "record_feature",
                    "possible_values": [
                        [
                            "collections.OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_634": {
                "name": {
                    "value": "os.path.join(args['data_dir'], 'test.txt')",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "possible_values": []
                }
            },
            "reduce_sum_224": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "possible_values": [
                        [
                            "loss_fct(active_labels, active_logits)",
                            "Call"
                        ],
                        [
                            "loss_fct(active_labels, active_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_403": {
                "value": {
                    "value": "list(values)",
                    "possible_values": []
                }
            },
            "scalar_293": {
                "name": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_metric.result()",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_285": {
                "name": {
                    "value": "lr",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "lr(step)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_286": {
                "name": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "(loss_metric.result() - logging_loss) / args['logging_steps']",
                    "possible_values": []
                },
                "step": {
                    "value": "global_step",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_276": {
                "name": {
                    "value": "eval_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "eval_loss",
                    "possible_values": []
                },
                "step": {
                    "value": "global_step",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_277": {
                "name": {
                    "value": "precision",
                    "possible_values": []
                },
                "data": {
                    "value": "precision",
                    "possible_values": [
                        [
                            "metrics.precision_score(y_true, y_pred)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_278": {
                "name": {
                    "value": "recall",
                    "possible_values": []
                },
                "data": {
                    "value": "recall",
                    "possible_values": [
                        [
                            "metrics.recall_score(y_true, y_pred)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "scalar_279": {
                "name": {
                    "value": "f1",
                    "possible_values": []
                },
                "data": {
                    "value": "f1",
                    "possible_values": [
                        [
                            "metrics.f1_score(y_true, y_pred)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "global_step + 1",
                            "BinOp"
                        ],
                        [
                            "checkpoint.split('-')[-1] if re.match('.*checkpoint-[0-9]', checkpoint) else 'final'",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/src/transformers/convert_bert_pytorch_checkpoint_to_original_tf.py": {
        "tensorflow": {
            "as_dtype_70": {
                "variable": {
                    "value": "tf_dtype",
                    "possible_values": []
                },
                "type_value": {
                    "value": "tensor.dtype",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "tf_var",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "possible_values": [
                        [
                            "tf.dtypes.as_dtype(tensor.dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tensor.shape",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "name.replace(patt, repl)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "possible_values": []
                }
            },
            "reset_default_graph_76": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Saver_88": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "possible_values": []
                }
            },
            "Session_77": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "variables_initializer_72": {
                "var_list": {
                    "value": "[tf_var]",
                    "possible_values": []
                }
            },
            "trainable_variables_88": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_initializer_71": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_104": {
                "f": {
                    "value": "args.pytorch_model_path",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/data/processors/glue.py": {
        "tensorflow": {
            "cardinality_87": {
                "variable": {
                    "value": "len_examples",
                    "possible_values": []
                },
                "dataset": {
                    "value": "examples",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorShape_162": {
                "dims": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "TensorShape_158": {
                "dims": {
                    "value": "[None]",
                    "possible_values": []
                }
            },
            "TensorShape_159": {
                "dims": {
                    "value": "[None]",
                    "possible_values": []
                }
            },
            "TensorShape_160": {
                "dims": {
                    "value": "[None]",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/data/processors/squad.py": {
        "tensorflow": {
            "TensorShape_383": {
                "dims": {
                    "value": "[None]",
                    "possible_values": []
                }
            },
            "TensorShape_384": {
                "dims": {
                    "value": "[None]",
                    "possible_values": []
                }
            },
            "TensorShape_385": {
                "dims": {
                    "value": "[None]",
                    "possible_values": []
                }
            },
            "TensorShape_388": {
                "dims": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "TensorShape_389": {
                "dims": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "TensorShape_390": {
                "dims": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "TensorShape_391": {
                "dims": {
                    "value": "[None]",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_330": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_331": {
                "variable": {
                    "value": "all_attention_masks",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "variable": {
                    "value": "all_token_type_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_333": {
                "variable": {
                    "value": "all_cls_index",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.cls_index for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "all_p_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.p_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "arange_337": {
                "variable": {
                    "value": "all_example_index",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_338": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "tensor_342": {
                "variable": {
                    "value": "all_start_positions",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.start_position for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_343": {
                "variable": {
                    "value": "all_end_positions",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.end_position for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_344": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/data/processors/utils.py": {
        "tensorflow": {
            "TensorShape_334": {
                "dims": {
                    "value": "[None]",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_343": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_344": {
                "variable": {
                    "value": "all_attention_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_350": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "tensor_346": {
                "variable": {
                    "value": "all_labels",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_348": {
                "variable": {
                    "value": "all_labels",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/file_utils.py": {
        "tensorflow": {},
        "torch": {}
    },
    "third_party/transformers/src/transformers/modeling_albert.py": {
        "tensorflow": {
            "list_variables_62": {
                "variable": {
                    "value": "init_vars",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_67": {
                "variable": {
                    "value": "array",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "name.replace('module/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('ffn_1', 'ffn')",
                            "Call"
                        ],
                        [
                            "name.replace('bert/', 'albert/')",
                            "Call"
                        ],
                        [
                            "name.replace('attention_1', 'attention')",
                            "Call"
                        ],
                        [
                            "name.replace('transform/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('LayerNorm_1', 'full_layer_layer_norm')",
                            "Call"
                        ],
                        [
                            "name.replace('LayerNorm', 'attention/LayerNorm')",
                            "Call"
                        ],
                        [
                            "name.replace('transformer/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('intermediate/dense/', '')",
                            "Call"
                        ],
                        [
                            "name.replace('ffn/intermediate/output/dense/', 'ffn_output/')",
                            "Call"
                        ],
                        [
                            "name.replace('/output/', '/')",
                            "Call"
                        ],
                        [
                            "name.replace('/self/', '/')",
                            "Call"
                        ],
                        [
                            "name.replace('pooler/dense', 'pooler')",
                            "Call"
                        ],
                        [
                            "name.replace('cls/predictions', 'predictions')",
                            "Call"
                        ],
                        [
                            "name.replace('predictions/attention', 'predictions')",
                            "Call"
                        ],
                        [
                            "name.replace('embeddings/attention', 'embeddings')",
                            "Call"
                        ],
                        [
                            "name.replace('inner_group_', 'albert_layers/')",
                            "Call"
                        ],
                        [
                            "name.replace('group_', 'albert_layer_groups/')",
                            "Call"
                        ],
                        [
                            "'classifier/' + name",
                            "BinOp"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "AlbertLayer_259": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.config": {
                    "value": "config",
                    "possible_values": []
                },
                "LayerNorm_264": {
                    "variable": {
                        "value": "self.full_layer_layer_norm",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "config.layer_norm_eps",
                        "possible_values": []
                    }
                },
                "Linear_266": {
                    "variable": {
                        "value": "self.ffn",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.intermediate_size",
                        "possible_values": []
                    }
                },
                "Linear_267": {
                    "variable": {
                        "value": "self.ffn_output",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.intermediate_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                }
            },
            "AlbertLayerGroup_280": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_286": {
                    "variable": {
                        "value": "self.albert_layers",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[AlbertLayer(config) for _ in range(config.inner_group_num)]",
                        "possible_values": []
                    }
                }
            },
            "AlbertTransformer_310": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.config": {
                    "value": "config",
                    "possible_values": []
                },
                "Linear_317": {
                    "variable": {
                        "value": "self.embedding_hidden_mapping_in",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.embedding_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "ModuleList_318": {
                    "variable": {
                        "value": "self.albert_layer_groups",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[AlbertLayerGroup(config) for _ in range(config.num_hidden_groups)]",
                        "possible_values": []
                    }
                }
            },
            "AlbertMLMHead_572": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "LayerNorm_576": {
                    "variable": {
                        "value": "self.LayerNorm",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "config.embedding_size",
                        "possible_values": []
                    }
                },
                "Parameter_577": {
                    "variable": {
                        "value": "self.bias",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(config.vocab_size)",
                        "possible_values": []
                    }
                },
                "Linear_578": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.embedding_size",
                        "possible_values": []
                    }
                },
                "Linear_579": {
                    "variable": {
                        "value": "self.decoder",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.embedding_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.vocab_size",
                        "possible_values": []
                    }
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "pointer.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_172": {
                "variable": {
                    "value": "self.word_embeddings",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Embedding_173": {
                "variable": {
                    "value": "self.position_embeddings",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "possible_values": []
                }
            },
            "Embedding_174": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_size",
                    "possible_values": []
                }
            },
            "LayerNorm_175": {
                "variable": {
                    "value": "self.LayerNorm",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.embedding_size",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "possible_values": []
                }
            },
            "Dropout_186": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.dense",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                }
            },
            "LayerNorm_188": {
                "variable": {
                    "value": "self.LayerNorm",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "possible_values": []
                }
            },
            "ones_194": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_attention_heads",
                    "possible_values": []
                },
                "out": {
                    "value": "self.attention_head_size",
                    "possible_values": []
                }
            },
            "matmul_224": {
                "variable": {
                    "value": "attention_scores",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "possible_values": []
                }
            },
            "matmul_241": {
                "variable": {
                    "value": "context_layer",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_479": {
                "variable": {
                    "value": "self.pooler",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                }
            },
            "Tanh_480": {
                "variable": {
                    "value": "self.pooler_activation",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dropout_713": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Linear_714": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "possible_values": []
                }
            },
            "Linear_811": {
                "variable": {
                    "value": "self.qa_outputs",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "ones_536": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_538": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_663": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_855": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_231": {
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "einsum_253": {
                "equation": {
                    "value": "bfnd,ndh->bfh",
                    "possible_values": []
                },
                "*operands": {
                    "value": "context_layer",
                    "possible_values": [
                        [
                            "torch.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "context_layer.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_577": {
                "*size": {
                    "value": "config.vocab_size",
                    "possible_values": []
                }
            },
            "MSELoss_748": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_751": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "arange_201": {
                "start": {
                    "value": "len(mask)",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_bert.py": {
        "tensorflow": {
            "list_variables_75": {
                "variable": {
                    "value": "init_vars",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_80": {
                "variable": {
                    "value": "array",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "BertEmbeddings_158": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Embedding_165": {
                    "variable": {
                        "value": "self.word_embeddings",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "config.vocab_size",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "padding_idx": {
                        "value": "0",
                        "possible_values": []
                    }
                },
                "Embedding_170": {
                    "variable": {
                        "value": "self.position_embeddings",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "config.max_position_embeddings",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Embedding_171": {
                    "variable": {
                        "value": "self.token_type_embeddings",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "config.type_vocab_size",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Dropout_176": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                }
            },
            "BertSelfAttention_209": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_223": {
                    "variable": {
                        "value": "self.query",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.all_head_size",
                        "possible_values": []
                    }
                },
                "Linear_224": {
                    "variable": {
                        "value": "self.key",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.all_head_size",
                        "possible_values": []
                    }
                },
                "Linear_225": {
                    "variable": {
                        "value": "self.value",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.all_head_size",
                        "possible_values": []
                    }
                },
                "Dropout_227": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.attention_probs_dropout_prob",
                        "possible_values": []
                    }
                }
            },
            "BertSelfOutput_288": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_291": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Dropout_293": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                }
            },
            "BertAttention_302": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "BertIntermediate_348": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_351": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.intermediate_size",
                        "possible_values": []
                    }
                }
            },
            "BertOutput_363": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_366": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.intermediate_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Dropout_368": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                }
            },
            "BertLayer_377": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "BertEncoder_412": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_417": {
                    "variable": {
                        "value": "self.layer",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                        "possible_values": []
                    }
                }
            },
            "BertPooler_453": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_456": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Tanh_457": {
                    "variable": {
                        "value": "self.activation",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "BertPredictionHeadTransform_468": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_471": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                }
            },
            "BertLMPredictionHead_485": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_492": {
                    "variable": {
                        "value": "self.decoder",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.vocab_size",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "BertOnlyMLMHead_506": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "BertOnlyNSPHead_516": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_519": {
                    "variable": {
                        "value": "self.seq_relationship",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "2",
                        "possible_values": []
                    }
                }
            },
            "BertPreTrainingHeads_526": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_530": {
                    "variable": {
                        "value": "self.seq_relationship",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "2",
                        "possible_values": []
                    }
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "pointer.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_261": {
                "variable": {
                    "value": "attention_scores",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "possible_values": []
                }
            },
            "matmul_278": {
                "variable": {
                    "value": "context_layer",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores / self.attention_t)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_312": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.self.num_attention_heads",
                    "possible_values": []
                },
                "out": {
                    "value": "self.self.attention_head_size",
                    "possible_values": []
                }
            },
            "Dropout_1158": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Linear_1159": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "possible_values": []
                }
            },
            "Dropout_1249": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Linear_1250": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_1337": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Linear_1338": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "Dropout_1432": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Linear_1433": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "Linear_1589": {
                "variable": {
                    "value": "self.qa_outputs",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "sigmoid_145": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_149": {
                "input": {
                    "value": "nn.functional.softplus(x)",
                    "possible_values": []
                }
            },
            "arange_190": {
                "variable": {
                    "value": "position_ids",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_193": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_734": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_736": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_919": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1031": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1108": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1289": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Parameter_1344": {
                "variable": {
                    "value": "self.classifier.weight",
                    "possible_values": []
                },
                "data": {
                    "value": "weight / torch.norm(weight, dim=0)",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1375": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1478": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1486": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1521": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1633": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_134": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "possible_values": []
                }
            },
            "tanh_141": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "possible_values": []
                }
            },
            "softplus_149": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_268": {
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "ones_777": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "encoder_hidden_shape",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1018": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1023": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MSELoss_1194": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1198": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_748": {
                "variable": {
                    "value": "seq_ids",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "arange_319": {
                "start": {
                    "value": "len(mask)",
                    "possible_values": []
                }
            },
            "norm_1344": {
                "input": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "self.classifier.weight",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "pow_141": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_gpt2.py": {
        "tensorflow": {
            "list_variables_58": {
                "variable": {
                    "value": "init_vars",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_63": {
                "variable": {
                    "value": "array",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "possible_values": [
                        [
                            "os.path.abspath(gpt2_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "name[6:]",
                            "Subscript"
                        ],
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Attention_102": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "n_state": {
                    "value": "nx",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "self.split_size": {
                    "value": "n_state",
                    "possible_values": [
                        [
                            "nx",
                            "Name"
                        ]
                    ]
                },
                "self.scale": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "Dropout_117": {
                    "variable": {
                        "value": "self.attn_dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.attn_pdrop",
                        "possible_values": []
                    }
                },
                "Dropout_118": {
                    "variable": {
                        "value": "self.resid_dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.resid_pdrop",
                        "possible_values": []
                    }
                }
            },
            "MLP_203": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.act": {
                    "value": "gelu",
                    "possible_values": []
                },
                "Dropout_210": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.resid_pdrop",
                        "possible_values": []
                    }
                }
            },
            "Block_218": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "LayerNorm_222": {
                    "variable": {
                        "value": "self.ln_1",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "nx",
                        "possible_values": [
                            [
                                "config.n_embd",
                                "Attribute"
                            ],
                            [
                                "config.n_embd",
                                "Attribute"
                            ]
                        ]
                    },
                    "eps": {
                        "value": "config.layer_norm_epsilon",
                        "possible_values": []
                    }
                },
                "LayerNorm_224": {
                    "variable": {
                        "value": "self.ln_2",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "nx",
                        "possible_values": [
                            [
                                "config.n_embd",
                                "Attribute"
                            ],
                            [
                                "config.n_embd",
                                "Attribute"
                            ]
                        ]
                    },
                    "eps": {
                        "value": "config.layer_norm_epsilon",
                        "possible_values": []
                    }
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "pointer.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_124": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_head",
                    "possible_values": []
                },
                "out": {
                    "value": "self.split_size // self.n_head",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "index_attn",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index, index + self.split_size, index + 2 * self.split_size]",
                    "possible_values": []
                }
            },
            "matmul_144": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "possible_values": []
                },
                "other": {
                    "value": "k",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_190": {
                "variable": {
                    "value": "present",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(key.transpose(-2, -1), value)",
                    "possible_values": []
                }
            },
            "Embedding_363": {
                "variable": {
                    "value": "self.wte",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "possible_values": []
                }
            },
            "Embedding_364": {
                "variable": {
                    "value": "self.wpe",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "possible_values": []
                }
            },
            "Dropout_365": {
                "variable": {
                    "value": "self.drop",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "possible_values": []
                }
            },
            "ModuleList_366": {
                "variable": {
                    "value": "self.h",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "possible_values": []
                }
            },
            "LayerNorm_367": {
                "variable": {
                    "value": "self.ln_f",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "possible_values": []
                }
            },
            "Linear_555": {
                "variable": {
                    "value": "self.lm_head",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Linear_684": {
                "variable": {
                    "value": "self.lm_head",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "key",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_key, key)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "value",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_value, value)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "possible_values": []
                }
            },
            "arange_416": {
                "variable": {
                    "value": "position_ids",
                    "possible_values": []
                },
                "start": {
                    "value": "past_length",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "past[0][0].size(-2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "input_shape[-1] + past_length",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_601": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_722": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_728": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tanh_99": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "possible_values": []
                }
            },
            "tril_110": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "possible_values": []
                }
            },
            "Softmax_155": {
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_162": {
                "input": {
                    "value": "w",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "possible_values": []
                }
            },
            "arange_131": {
                "start": {
                    "value": "len(mask)",
                    "possible_values": []
                }
            },
            "ones_110": {
                "*size": {
                    "value": "n_ctx",
                    "possible_values": []
                },
                "out": {
                    "value": "n_ctx",
                    "possible_values": []
                }
            },
            "pow_99": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_t5.py": {
        "tensorflow": {
            "list_variables_69": {
                "variable": {
                    "value": "init_vars",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_74": {
                "variable": {
                    "value": "array",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "txt_name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "T5LayerNorm_140": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_146": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.ones(hidden_size)",
                        "possible_values": []
                    }
                },
                "self.variance_epsilon": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "1e-06",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "T5DenseReluDense_155": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_158": {
                    "variable": {
                        "value": "self.wi",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.d_model",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.d_ff",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Linear_159": {
                    "variable": {
                        "value": "self.wo",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.d_ff",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.d_model",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Dropout_160": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.dropout_rate",
                        "possible_values": []
                    }
                }
            },
            "T5LayerFF_170": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Dropout_175": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.dropout_rate",
                        "possible_values": []
                    }
                }
            },
            "T5Attention_184": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.has_relative_attention_bias": {
                    "value": "has_relative_attention_bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "Linear_202": {
                    "variable": {
                        "value": "self.q",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "self.d_model",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.inner_dim",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Linear_203": {
                    "variable": {
                        "value": "self.k",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "self.d_model",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.inner_dim",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Linear_204": {
                    "variable": {
                        "value": "self.v",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "self.d_model",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.inner_dim",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Linear_205": {
                    "variable": {
                        "value": "self.o",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "self.inner_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.d_model",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "T5LayerSelfAttention_364": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Dropout_369": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.dropout_rate",
                        "possible_values": []
                    }
                }
            },
            "T5LayerCrossAttention_382": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Dropout_387": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.dropout_rate",
                        "possible_values": []
                    }
                }
            },
            "T5Block_400": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_404": {
                    "variable": {
                        "value": "self.layer",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "pointer.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array.astype(np.float32)",
                    "possible_values": []
                }
            },
            "relu_164": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.wi(hidden_states)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.dropout(h)",
                            "Call"
                        ],
                        [
                            "self.wo(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_214": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_kv",
                    "possible_values": []
                }
            },
            "min_274": {
                "variable": {
                    "value": "val_if_large",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_334": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnqd,bnkd->bnqk",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "possible_values": [
                        [
                            "shape(self.q(input))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_344": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.float()",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "dropout_345": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "matmul_351": {
                "variable": {
                    "value": "context",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "possible_values": [
                        [
                            "shape(self.v(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v(v))",
                            "Call"
                        ],
                        [
                            "torch.cat([v_, v], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_460": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "DUMMY_INPUTS",
                    "possible_values": []
                }
            },
            "tensor_461": {
                "variable": {
                    "value": "input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "DUMMY_MASK",
                    "possible_values": []
                }
            },
            "ModuleList_509": {
                "variable": {
                    "value": "self.block",
                    "possible_values": []
                },
                "modules": {
                    "value": "[T5Block(config, has_relative_attention_bias=bool(i == 0)) for i in range(config.num_layers)]",
                    "possible_values": []
                }
            },
            "Dropout_513": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "possible_values": []
                }
            },
            "Embedding_728": {
                "variable": {
                    "value": "self.shared",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "possible_values": []
                }
            },
            "Embedding_836": {
                "variable": {
                    "value": "self.shared",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "possible_values": []
                }
            },
            "Linear_845": {
                "variable": {
                    "value": "self.lm_head",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Embedding_208": {
                "variable": {
                    "value": "self.relative_attention_bias",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.relative_attention_num_buckets",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.n_heads",
                    "possible_values": []
                }
            },
            "abs_261": {
                "variable": {
                    "value": "n",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_263": {
                "variable": {
                    "value": "n",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_276": {
                "condition": {
                    "value": "is_small",
                    "possible_values": [
                        [
                            "n < max_exact",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "n",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "val_if_large",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_528": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "seq_length",
                    "possible_values": []
                }
            },
            "ones_531": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "encoder_seq_length",
                    "possible_values": [
                        [
                            "encoder_hidden_states.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_909": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "possible_values": []
                }
            },
            "ones_146": {
                "*size": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "sqrt_151": {
                "input": {
                    "value": "variance + self.variance_epsilon",
                    "possible_values": []
                }
            },
            "full_like_274": {
                "input": {
                    "value": "val_if_large",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "num_buckets - 1",
                    "possible_values": []
                }
            },
            "arange_281": {
                "start": {
                    "value": "qlen",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "arange_282": {
                "start": {
                    "value": "klen",
                    "possible_values": [
                        [
                            "qlen if cache is None else cache['slen'] + qlen",
                            "IfExp"
                        ],
                        [
                            "kv.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "zeros_like_263": {
                "input": {
                    "value": "n",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_327": {
                "variable": {
                    "value": "k",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k_, k]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_, v]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "arange_542": {
                "variable": {
                    "value": "seq_ids",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden_states.device",
                    "possible_values": []
                }
            },
            "arange_220": {
                "start": {
                    "value": "len(mask)",
                    "possible_values": []
                }
            },
            "log_272": {
                "input": {
                    "value": "n.float() / max_exact",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_tf_albert.py": {
        "tensorflow": {
            "TFAlbertEmbeddings_43": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.config": {
                    "value": "config",
                    "possible_values": []
                },
                "Embedding_51": {
                    "variable": {
                        "value": "self.position_embeddings",
                        "possible_values": []
                    },
                    "input_dim": {
                        "value": "config.max_position_embeddings",
                        "possible_values": []
                    },
                    "output_dim": {
                        "value": "config.embedding_size",
                        "possible_values": []
                    },
                    "embeddings_initializer": {
                        "value": "get_initializer(self.config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "position_embeddings",
                        "possible_values": []
                    }
                },
                "Embedding_57": {
                    "variable": {
                        "value": "self.token_type_embeddings",
                        "possible_values": []
                    },
                    "input_dim": {
                        "value": "config.type_vocab_size",
                        "possible_values": []
                    },
                    "output_dim": {
                        "value": "config.embedding_size",
                        "possible_values": []
                    },
                    "embeddings_initializer": {
                        "value": "get_initializer(self.config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "token_type_embeddings",
                        "possible_values": []
                    }
                },
                "LayerNormalization_66": {
                    "variable": {
                        "value": "self.LayerNorm",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_eps",
                        "possible_values": []
                    },
                    "name": {
                        "value": "LayerNorm",
                        "possible_values": []
                    }
                },
                "Dropout_67": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                }
            },
            "TFAlbertSelfAttention_142": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dense_157": {
                    "variable": {
                        "value": "self.query",
                        "possible_values": []
                    },
                    "units": {
                        "value": "self.all_head_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "query",
                        "possible_values": []
                    }
                },
                "Dense_160": {
                    "variable": {
                        "value": "self.key",
                        "possible_values": []
                    },
                    "units": {
                        "value": "self.all_head_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "key",
                        "possible_values": []
                    }
                },
                "Dense_163": {
                    "variable": {
                        "value": "self.value",
                        "possible_values": []
                    },
                    "units": {
                        "value": "self.all_head_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "value",
                        "possible_values": []
                    }
                },
                "Dropout_167": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.attention_probs_dropout_prob",
                        "possible_values": []
                    }
                }
            },
            "TFAlbertSelfOutput_218": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dense_221": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "dense",
                        "possible_values": []
                    }
                },
                "LayerNormalization_224": {
                    "variable": {
                        "value": "self.LayerNorm",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_eps",
                        "possible_values": []
                    },
                    "name": {
                        "value": "LayerNorm",
                        "possible_values": []
                    }
                },
                "Dropout_225": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                }
            },
            "TFAlbertLayer_304": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dense_309": {
                    "variable": {
                        "value": "self.ffn",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.intermediate_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "ffn",
                        "possible_values": []
                    }
                },
                "Dense_318": {
                    "variable": {
                        "value": "self.ffn_output",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "ffn_output",
                        "possible_values": []
                    }
                },
                "LayerNormalization_321": {
                    "variable": {
                        "value": "self.full_layer_layer_norm",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_eps",
                        "possible_values": []
                    },
                    "name": {
                        "value": "full_layer_layer_norm",
                        "possible_values": []
                    }
                },
                "Dropout_324": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                }
            },
            "TFAlbertLayerGroup_342": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                }
            },
            "TFAlbertTransformer_377": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.config": {
                    "value": "config",
                    "possible_values": []
                },
                "Dense_384": {
                    "variable": {
                        "value": "self.embedding_hidden_mapping_in",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "embedding_hidden_mapping_in",
                        "possible_values": []
                    }
                }
            },
            "TFAlbertMLMHead_446": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dense_451": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.embedding_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "dense",
                        "possible_values": []
                    }
                },
                "LayerNormalization_459": {
                    "variable": {
                        "value": "self.LayerNorm",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_eps",
                        "possible_values": []
                    },
                    "name": {
                        "value": "LayerNorm",
                        "possible_values": []
                    }
                },
                "self.decoder": {
                    "value": "input_embeddings",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.config.embedding_size]",
                    "possible_values": []
                }
            },
            "matmul_138": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.config.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.word_embeddings",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.config.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.num_attention_heads, self.attention_head_size)",
                    "possible_values": []
                }
            },
            "matmul_187": {
                "variable": {
                    "value": "attention_scores",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cast_189": {
                "variable": {
                    "value": "dk",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(key_layer)[-1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "softmax_197": {
                "variable": {
                    "value": "attention_probs",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_207": {
                "variable": {
                    "value": "context_layer",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_209": {
                "variable": {
                    "value": "context_layer",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "possible_values": []
                }
            },
            "reshape_210": {
                "variable": {
                    "value": "context_layer",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.all_head_size)",
                    "possible_values": []
                }
            },
            "Dense_241": {
                "variable": {
                    "value": "self.dense",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "possible_values": []
                }
            },
            "LayerNormalization_244": {
                "variable": {
                    "value": "self.LayerNorm",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "possible_values": []
                },
                "name": {
                    "value": "LayerNorm",
                    "possible_values": []
                }
            },
            "matmul_264": {
                "variable": {
                    "value": "attention_scores",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cast_266": {
                "variable": {
                    "value": "dk",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(key_layer)[-1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "softmax_274": {
                "variable": {
                    "value": "attention_probs",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_284": {
                "variable": {
                    "value": "context_layer",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_286": {
                "variable": {
                    "value": "context_layer",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "possible_values": []
                }
            },
            "reshape_287": {
                "variable": {
                    "value": "context_layer",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ],
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.all_head_size)",
                    "possible_values": []
                }
            },
            "Dense_604": {
                "variable": {
                    "value": "self.pooler",
                    "possible_values": []
                },
                "units": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "possible_values": []
                },
                "name": {
                    "value": "pooler",
                    "possible_values": []
                }
            },
            "cast_680": {
                "variable": {
                    "value": "extended_attention_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "extended_attention_mask",
                    "possible_values": [
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(extended_attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - extended_attention_mask) * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "Dropout_793": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Dense_794": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "possible_values": []
                }
            },
            "fill_116": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "gather_119": {
                "variable": {
                    "value": "inputs_embeds",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_139": {
                "tensor": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.config.vocab_size]",
                    "possible_values": []
                }
            },
            "transpose_171": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.config.embedding_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "possible_values": []
                }
            },
            "fill_663": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "fill_665": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "name_scope_71": {
                "name": {
                    "value": "word_embeddings",
                    "possible_values": []
                }
            },
            "sqrt_190": {
                "x": {
                    "value": "dk",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_267": {
                "x": {
                    "value": "dk",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_114": {
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_tf_bert.py": {
        "tensorflow": {
            "TFBertEmbeddings_91": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Embedding_101": {
                    "variable": {
                        "value": "self.position_embeddings",
                        "possible_values": []
                    },
                    "input_dim": {
                        "value": "config.max_position_embeddings",
                        "possible_values": []
                    },
                    "output_dim": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "embeddings_initializer": {
                        "value": "get_initializer(self.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "position_embeddings",
                        "possible_values": []
                    }
                },
                "Embedding_107": {
                    "variable": {
                        "value": "self.token_type_embeddings",
                        "possible_values": []
                    },
                    "input_dim": {
                        "value": "config.type_vocab_size",
                        "possible_values": []
                    },
                    "output_dim": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "embeddings_initializer": {
                        "value": "get_initializer(self.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "token_type_embeddings",
                        "possible_values": []
                    }
                },
                "LayerNormalization_116": {
                    "variable": {
                        "value": "self.LayerNorm",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_eps",
                        "possible_values": []
                    },
                    "name": {
                        "value": "LayerNorm",
                        "possible_values": []
                    }
                },
                "Dropout_117": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                }
            },
            "TFBertSelfAttention_194": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dense_209": {
                    "variable": {
                        "value": "self.query",
                        "possible_values": []
                    },
                    "units": {
                        "value": "self.all_head_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "query",
                        "possible_values": []
                    }
                },
                "Dense_212": {
                    "variable": {
                        "value": "self.key",
                        "possible_values": []
                    },
                    "units": {
                        "value": "self.all_head_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "key",
                        "possible_values": []
                    }
                },
                "Dense_215": {
                    "variable": {
                        "value": "self.value",
                        "possible_values": []
                    },
                    "units": {
                        "value": "self.all_head_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "value",
                        "possible_values": []
                    }
                },
                "Dropout_219": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.attention_probs_dropout_prob",
                        "possible_values": []
                    }
                }
            },
            "TFBertSelfOutput_270": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dense_273": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "dense",
                        "possible_values": []
                    }
                },
                "LayerNormalization_276": {
                    "variable": {
                        "value": "self.LayerNorm",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_eps",
                        "possible_values": []
                    },
                    "name": {
                        "value": "LayerNorm",
                        "possible_values": []
                    }
                },
                "Dropout_277": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                }
            },
            "TFBertAttention_288": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                }
            },
            "TFBertIntermediate_306": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dense_309": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.intermediate_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "dense",
                        "possible_values": []
                    }
                }
            },
            "TFBertOutput_323": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dense_326": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "dense",
                        "possible_values": []
                    }
                },
                "LayerNormalization_329": {
                    "variable": {
                        "value": "self.LayerNorm",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_eps",
                        "possible_values": []
                    },
                    "name": {
                        "value": "LayerNorm",
                        "possible_values": []
                    }
                },
                "Dropout_330": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                }
            },
            "TFBertLayer_341": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                }
            },
            "TFBertEncoder_359": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                }
            },
            "TFBertPooler_393": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dense_396": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "activation": {
                        "value": "tanh",
                        "possible_values": []
                    },
                    "name": {
                        "value": "dense",
                        "possible_values": []
                    }
                }
            },
            "TFBertPredictionHeadTransform_411": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dense_414": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "dense",
                        "possible_values": []
                    }
                },
                "LayerNormalization_421": {
                    "variable": {
                        "value": "self.LayerNorm",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_eps",
                        "possible_values": []
                    },
                    "name": {
                        "value": "LayerNorm",
                        "possible_values": []
                    }
                }
            },
            "TFBertLMPredictionHead_430": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.input_embeddings": {
                    "value": "input_embeddings",
                    "possible_values": []
                }
            },
            "TFBertMLMHead_451": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                }
            },
            "TFBertNSPHead_461": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dense_464": {
                    "variable": {
                        "value": "self.seq_relationship",
                        "possible_values": []
                    },
                    "units": {
                        "value": "2",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "seq_relationship",
                        "possible_values": []
                    }
                }
            },
            "TFBertMainLayer_473": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                }
            },
            "Activation_84": {
                "activation": {
                    "value": "gelu",
                    "possible_values": []
                }
            },
            "Activation_86": {
                "activation": {
                    "value": "swish",
                    "possible_values": []
                }
            },
            "Activation_87": {
                "activation": {
                    "value": "gelu_new",
                    "possible_values": []
                }
            },
            "reshape_188": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.hidden_size]",
                    "possible_values": []
                }
            },
            "matmul_189": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.word_embeddings",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reshape_222": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.num_attention_heads, self.attention_head_size)",
                    "possible_values": []
                }
            },
            "matmul_238": {
                "variable": {
                    "value": "attention_scores",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_key_layer, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cast_241": {
                "variable": {
                    "value": "dk",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(key_layer)[-1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "softmax_249": {
                "variable": {
                    "value": "attention_probs",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention_scores / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "attention_scores + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_259": {
                "variable": {
                    "value": "context_layer",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs, training=training)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_261": {
                "variable": {
                    "value": "context_layer",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "possible_values": []
                }
            },
            "reshape_262": {
                "variable": {
                    "value": "context_layer",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, (batch_size, -1, self.all_head_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.all_head_size)",
                    "possible_values": []
                }
            },
            "cast_551": {
                "variable": {
                    "value": "extended_attention_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "extended_attention_mask",
                    "possible_values": [
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(extended_attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - extended_attention_mask) * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "Dropout_910": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Dense_911": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "possible_values": []
                }
            },
            "Dropout_966": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Dense_967": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "possible_values": []
                }
            },
            "reshape_1027": {
                "variable": {
                    "value": "reshaped_logits",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_choices)",
                    "possible_values": []
                }
            },
            "Dropout_1071": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Dense_1072": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "possible_values": []
                }
            },
            "Dense_1128": {
                "variable": {
                    "value": "self.qa_outputs",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "possible_values": []
                }
            },
            "split_1138": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "squeeze_1139": {
                "variable": {
                    "value": "start_logits",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "squeeze_1140": {
                "variable": {
                    "value": "end_logits",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sigmoid_80": {
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_166": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "gather_169": {
                "variable": {
                    "value": "inputs_embeds",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_191": {
                "tensor": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.vocab_size]",
                    "possible_values": []
                }
            },
            "transpose_223": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "possible_values": []
                }
            },
            "fill_534": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "fill_536": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ],
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "erf_62": {
                "x": {
                    "value": "x / tf.math.sqrt(2.0)",
                    "possible_values": []
                }
            },
            "tanh_75": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "possible_values": []
                }
            },
            "name_scope_121": {
                "name": {
                    "value": "word_embeddings",
                    "possible_values": []
                }
            },
            "sqrt_242": {
                "x": {
                    "value": "dk",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(key_layer)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1007": {
                "tensor": {
                    "value": "input_ids",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "possible_values": []
                }
            },
            "reshape_1008": {
                "tensor": {
                    "value": "attention_mask",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.fill(input_shape, 1)",
                            "Call"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "possible_values": []
                }
            },
            "reshape_1009": {
                "tensor": {
                    "value": "token_type_ids",
                    "possible_values": [
                        [
                            "tf.fill(input_shape, 0)",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.fill(input_shape, 0)",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "possible_values": []
                }
            },
            "reshape_1010": {
                "tensor": {
                    "value": "position_ids",
                    "possible_values": [
                        [
                            "tf.range(seq_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "possible_values": []
                }
            },
            "range_164": {
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "sqrt_62": {
                "x": {
                    "value": "2.0",
                    "possible_values": []
                }
            },
            "pow_75": {
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_attention_heads, self.attention_head_size))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_tf_ctrl.py": {
        "tensorflow": {
            "TFMultiHeadAttention_76": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.output_attentions": {
                    "value": "output_attentions",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_heads": {
                    "value": "num_heads",
                    "possible_values": []
                },
                "self.d_model_size": {
                    "value": "d_model_size",
                    "possible_values": []
                },
                "Dense_85": {
                    "variable": {
                        "value": "self.Wq",
                        "possible_values": []
                    },
                    "units": {
                        "value": "d_model_size",
                        "possible_values": []
                    },
                    "name": {
                        "value": "Wq",
                        "possible_values": []
                    }
                },
                "Dense_86": {
                    "variable": {
                        "value": "self.Wk",
                        "possible_values": []
                    },
                    "units": {
                        "value": "d_model_size",
                        "possible_values": []
                    },
                    "name": {
                        "value": "Wk",
                        "possible_values": []
                    }
                },
                "Dense_87": {
                    "variable": {
                        "value": "self.Wv",
                        "possible_values": []
                    },
                    "units": {
                        "value": "d_model_size",
                        "possible_values": []
                    },
                    "name": {
                        "value": "Wv",
                        "possible_values": []
                    }
                },
                "Dense_89": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "units": {
                        "value": "d_model_size",
                        "possible_values": []
                    },
                    "name": {
                        "value": "dense",
                        "possible_values": []
                    }
                }
            },
            "TFEncoderLayer_131": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "LayerNormalization_142": {
                    "variable": {
                        "value": "self.layernorm1",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "layer_norm_epsilon",
                        "possible_values": [
                            [
                                "1e-06",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "name": {
                        "value": "layernorm1",
                        "possible_values": []
                    }
                },
                "LayerNormalization_143": {
                    "variable": {
                        "value": "self.layernorm2",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "layer_norm_epsilon",
                        "possible_values": [
                            [
                                "1e-06",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "name": {
                        "value": "layernorm2",
                        "possible_values": []
                    }
                },
                "Dropout_145": {
                    "variable": {
                        "value": "self.dropout1",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "rate",
                        "possible_values": [
                            [
                                "0.1",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "Dropout_146": {
                    "variable": {
                        "value": "self.dropout2",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "rate",
                        "possible_values": [
                            [
                                "0.1",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "TFCTRLMainLayer_167": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dropout_183": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.embd_pdrop",
                        "possible_values": []
                    }
                },
                "LayerNormalization_196": {
                    "variable": {
                        "value": "self.layernorm",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_epsilon",
                        "possible_values": []
                    },
                    "name": {
                        "value": "layernorm",
                        "possible_values": []
                    }
                }
            },
            "TFCTRLLMHead_454": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.input_embeddings": {
                    "value": "input_embeddings",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "pos_encoding",
                    "possible_values": []
                },
                "x": {
                    "value": "np.concatenate([sines, cosines], axis=-1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "variable": {
                    "value": "matmul_qk",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "possible_values": [
                        [
                            "self.Wq(q)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(q, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "possible_values": [
                        [
                            "self.Wk(k)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(k, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.concat((past_key, k), dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cast_55": {
                "variable": {
                    "value": "dk",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(k)[-1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "attention_weights",
                    "possible_values": []
                },
                "logits": {
                    "value": "scaled_attention_logits",
                    "possible_values": [
                        [
                            "matmul_qk / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + mask * -10000.0",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_weights",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scaled_attention_logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "attention_weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "possible_values": [
                        [
                            "self.Wv(v)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(v, batch_size)",
                            "Call"
                        ],
                        [
                            "tf.concat((past_value, v), dim=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.num_heads, self.depth)",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "present",
                    "possible_values": []
                },
                "values": {
                    "value": "(k, v)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_113": {
                "variable": {
                    "value": "scaled_attention",
                    "possible_values": []
                },
                "a": {
                    "value": "output[0]",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "original_size_attention",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scaled_attention",
                    "possible_values": [
                        [
                            "tf.transpose(output[0], perm=[0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.d_model_size)",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "layers": {
                    "value": "[tf.keras.layers.Dense(dff, activation='relu', name='0'), tf.keras.layers.Dense(d_model_size, name='2')]",
                    "possible_values": []
                },
                "name": {
                    "value": "ffn",
                    "possible_values": []
                }
            },
            "reshape_296": {
                "variable": {
                    "value": "position_ids",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_ids",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(position_ids, [input_shape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(position_ids)[-1]]",
                    "possible_values": []
                }
            },
            "gather_305": {
                "variable": {
                    "value": "pos_embeds",
                    "possible_values": []
                },
                "params": {
                    "value": "self.pos_encoding",
                    "possible_values": []
                },
                "indices": {
                    "value": "position_ids",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(position_ids, [input_shape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_328": {
                "variable": {
                    "value": "hidden_states",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "possible_values": [
                        [
                            "inputs_embeds + pos_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.dropout(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.layernorm(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "self.input_embeddings(hidden_states, mode='linear')",
                            "Call"
                        ],
                        [
                            "hidden_states + self.bias",
                            "BinOp"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_56": {
                "x": {
                    "value": "dk",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_93": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "possible_values": []
                }
            },
            "unstack_107": {
                "variable": {
                    "value": "(past_key, past_value)",
                    "possible_values": []
                },
                "value": {
                    "value": "layer_past",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "concat_108": {
                "variable": {
                    "value": "k",
                    "possible_values": []
                },
                "values": {
                    "value": "(past_key, k)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "possible_values": []
                }
            },
            "concat_109": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "values": {
                    "value": "(past_value, v)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "possible_values": []
                }
            },
            "tile_259": {
                "variable": {
                    "value": "position_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "position_ids",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(position_ids, [input_shape[0], 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[input_shape[0], 1]",
                    "possible_values": []
                }
            },
            "cast_276": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reshape_291": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(token_type_ids)[-1]]",
                    "possible_values": []
                }
            },
            "sqrt_303": {
                "x": {
                    "value": "tf.cast(self.d_model_size, tf.float32)",
                    "possible_values": []
                }
            },
            "Dense_126": {
                "units": {
                    "value": "d_model_size",
                    "possible_values": []
                },
                "name": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reshape_246": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "possible_values": []
                }
            },
            "sqrt_293": {
                "x": {
                    "value": "tf.cast(self.d_model_size, tf.float32)",
                    "possible_values": []
                }
            },
            "band_part_301": {
                "input": {
                    "value": "tf.ones((seq_len, seq_len))",
                    "possible_values": []
                },
                "num_lower": {
                    "value": "-1",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cast_303": {
                "x": {
                    "value": "self.d_model_size",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "range_258": {
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "cast_293": {
                "x": {
                    "value": "self.d_model_size",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "ones_301": {
                "shape": {
                    "value": "(seq_len, seq_len)",
                    "possible_values": []
                }
            },
            "reshape_340": {
                "tensor": {
                    "value": "t",
                    "possible_values": []
                },
                "shape": {
                    "value": "attention_output_shape",
                    "possible_values": [
                        [
                            "input_shape[:-1] + [-1] + shape_list(all_attentions[0])[-2:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_317": {
                "tensor": {
                    "value": "hidden_states",
                    "possible_values": [
                        [
                            "inputs_embeds + pos_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.dropout(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.layernorm(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "self.input_embeddings(hidden_states, mode='linear')",
                            "Call"
                        ],
                        [
                            "hidden_states + self.bias",
                            "BinOp"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_tf_distilbert.py": {
        "tensorflow": {
            "TFEmbeddings_66": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Embedding_75": {
                    "variable": {
                        "value": "self.position_embeddings",
                        "possible_values": []
                    },
                    "input_dim": {
                        "value": "config.max_position_embeddings",
                        "possible_values": []
                    },
                    "output_dim": {
                        "value": "config.dim",
                        "possible_values": []
                    },
                    "embeddings_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "position_embeddings",
                        "possible_values": []
                    }
                },
                "LayerNormalization_84": {
                    "variable": {
                        "value": "self.LayerNorm",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "1e-12",
                        "possible_values": []
                    },
                    "name": {
                        "value": "LayerNorm",
                        "possible_values": []
                    }
                },
                "Dropout_85": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.dropout",
                        "possible_values": []
                    }
                }
            },
            "TFMultiHeadSelfAttention_170": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dropout_176": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.attention_dropout",
                        "possible_values": []
                    }
                },
                "Dense_181": {
                    "variable": {
                        "value": "self.q_lin",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.dim",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "q_lin",
                        "possible_values": []
                    }
                },
                "Dense_184": {
                    "variable": {
                        "value": "self.k_lin",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.dim",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "k_lin",
                        "possible_values": []
                    }
                },
                "Dense_187": {
                    "variable": {
                        "value": "self.v_lin",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.dim",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "v_lin",
                        "possible_values": []
                    }
                },
                "Dense_190": {
                    "variable": {
                        "value": "self.out_lin",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.dim",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "out_lin",
                        "possible_values": []
                    }
                }
            },
            "TFFFN_260": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dropout_263": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.dropout",
                        "possible_values": []
                    }
                },
                "Dense_264": {
                    "variable": {
                        "value": "self.lin1",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.hidden_dim",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "lin1",
                        "possible_values": []
                    }
                },
                "Dense_267": {
                    "variable": {
                        "value": "self.lin2",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.dim",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "lin2",
                        "possible_values": []
                    }
                }
            },
            "TFTransformerBlock_285": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dropout_292": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.dropout",
                        "possible_values": []
                    }
                },
                "LayerNormalization_299": {
                    "variable": {
                        "value": "self.sa_layer_norm",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "1e-12",
                        "possible_values": []
                    },
                    "name": {
                        "value": "sa_layer_norm",
                        "possible_values": []
                    }
                },
                "LayerNormalization_302": {
                    "variable": {
                        "value": "self.output_layer_norm",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "1e-12",
                        "possible_values": []
                    },
                    "name": {
                        "value": "output_layer_norm",
                        "possible_values": []
                    }
                }
            },
            "TFTransformer_339": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                }
            },
            "TFDistilBertMainLayer_400": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                }
            },
            "TFDistilBertLMHead_580": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.input_embeddings": {
                    "value": "input_embeddings",
                    "possible_values": []
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.dim]",
                    "possible_values": []
                }
            },
            "matmul_165": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.word_embeddings",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "matmul_238": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "possible_values": [
                        [
                            "shape(self.q_lin(query))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "possible_values": [
                        [
                            "shape(self.k_lin(key))",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reshape_239": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "tf.reshape(mask, mask_reshape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "mask_reshape",
                    "possible_values": [
                        [
                            "[bs, 1, 1, k_length]",
                            "List"
                        ]
                    ]
                }
            },
            "softmax_243": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "scores - 1e+30 * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_250": {
                "variable": {
                    "value": "context",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights, training=training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "possible_values": [
                        [
                            "shape(self.v_lin(value))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_444": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.ones(input_shape)",
                            "Call"
                        ],
                        [
                            "tf.cast(attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "Dense_637": {
                "variable": {
                    "value": "self.vocab_transform",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "vocab_transform",
                    "possible_values": []
                }
            },
            "Activation_640": {
                "variable": {
                    "value": "self.act",
                    "possible_values": []
                },
                "activation": {
                    "value": "gelu",
                    "possible_values": []
                }
            },
            "LayerNormalization_641": {
                "variable": {
                    "value": "self.vocab_layer_norm",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "possible_values": []
                },
                "name": {
                    "value": "vocab_layer_norm",
                    "possible_values": []
                }
            },
            "Dense_697": {
                "variable": {
                    "value": "self.pre_classifier",
                    "possible_values": []
                },
                "units": {
                    "value": "config.dim",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "possible_values": []
                },
                "name": {
                    "value": "pre_classifier",
                    "possible_values": []
                }
            },
            "Dense_703": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "possible_values": []
                }
            },
            "Dropout_706": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.seq_classif_dropout",
                    "possible_values": []
                }
            },
            "Dropout_754": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.dropout",
                    "possible_values": []
                }
            },
            "Dense_755": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "possible_values": []
                }
            },
            "Dense_810": {
                "variable": {
                    "value": "self.qa_outputs",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "possible_values": []
                }
            },
            "Dropout_814": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.qa_dropout",
                    "possible_values": []
                }
            },
            "split_822": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "squeeze_823": {
                "variable": {
                    "value": "start_logits",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "squeeze_824": {
                "variable": {
                    "value": "end_logits",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "gather_146": {
                "variable": {
                    "value": "inputs_embeds",
                    "possible_values": []
                },
                "params": {
                    "value": "self.word_embeddings",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                }
            },
            "reshape_167": {
                "tensor": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.word_embeddings, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.vocab_size]",
                    "possible_values": []
                }
            },
            "ones_443": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "shape_list(input_ids)",
                            "Call"
                        ],
                        [
                            "shape_list(inputs_embeds)[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "erf_49": {
                "x": {
                    "value": "x / tf.math.sqrt(2.0)",
                    "possible_values": []
                }
            },
            "tanh_62": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "possible_values": []
                }
            },
            "name_scope_89": {
                "name": {
                    "value": "word_embeddings",
                    "possible_values": []
                }
            },
            "transpose_227": {
                "a": {
                    "value": "tf.reshape(x, (bs, -1, self.n_heads, dim_per_head))",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "possible_values": []
                }
            },
            "reshape_231": {
                "tensor": {
                    "value": "tf.transpose(x, perm=(0, 2, 1, 3))",
                    "possible_values": []
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads * dim_per_head)",
                    "possible_values": []
                }
            },
            "Activation_274": {
                "activation": {
                    "value": "gelu",
                    "possible_values": []
                }
            },
            "range_143": {
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "reshape_227": {
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads, dim_per_head)",
                    "possible_values": []
                }
            },
            "transpose_231": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "possible_values": []
                }
            },
            "sqrt_49": {
                "x": {
                    "value": "2.0",
                    "possible_values": []
                }
            },
            "pow_62": {
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, self.dim])",
                            "Call"
                        ],
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_tf_gpt2.py": {
        "tensorflow": {
            "TFAttention_59": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "n_state": {
                    "value": "nx",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "self.n_ctx": {
                    "value": "n_ctx",
                    "possible_values": []
                },
                "self.split_size": {
                    "value": "n_state",
                    "possible_values": [
                        [
                            "nx",
                            "Name"
                        ]
                    ]
                },
                "self.scale": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "Dropout_74": {
                    "variable": {
                        "value": "self.attn_dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.attn_pdrop",
                        "possible_values": []
                    }
                },
                "Dropout_75": {
                    "variable": {
                        "value": "self.resid_dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.resid_pdrop",
                        "possible_values": []
                    }
                }
            },
            "TFMLP_158": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.act": {
                    "value": "gelu",
                    "possible_values": []
                },
                "Dropout_165": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.resid_pdrop",
                        "possible_values": []
                    }
                }
            },
            "TFBlock_174": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "LayerNormalization_178": {
                    "variable": {
                        "value": "self.ln_1",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_epsilon",
                        "possible_values": []
                    },
                    "name": {
                        "value": "ln_1",
                        "possible_values": []
                    }
                },
                "LayerNormalization_180": {
                    "variable": {
                        "value": "self.ln_2",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_epsilon",
                        "possible_values": []
                    },
                    "name": {
                        "value": "ln_2",
                        "possible_values": []
                    }
                }
            },
            "TFGPT2MainLayer_199": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Embedding_211": {
                    "variable": {
                        "value": "self.wpe",
                        "possible_values": []
                    },
                    "input_dim": {
                        "value": "config.n_positions",
                        "possible_values": []
                    },
                    "output_dim": {
                        "value": "config.n_embd",
                        "possible_values": []
                    },
                    "embeddings_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "wpe",
                        "possible_values": []
                    }
                },
                "Dropout_217": {
                    "variable": {
                        "value": "self.drop",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.embd_pdrop",
                        "possible_values": []
                    }
                },
                "LayerNormalization_219": {
                    "variable": {
                        "value": "self.ln_f",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_epsilon",
                        "possible_values": []
                    },
                    "name": {
                        "value": "ln_f",
                        "possible_values": []
                    }
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "possible_values": []
                },
                "b": {
                    "value": "k",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "possible_values": [
                        [
                            "self.causal_attention_mask(nd, ns, dtype=w.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, 1, nd, ns])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, nd, ns]",
                    "possible_values": []
                }
            },
            "softmax_109": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "logits": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "transpose_122": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_137": {
                "variable": {
                    "value": "(query, key, value)",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "stack_145": {
                "variable": {
                    "value": "present",
                    "possible_values": []
                },
                "values": {
                    "value": "[key, value]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "reshape_313": {
                "variable": {
                    "value": "position_ids",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_ids",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(position_ids)[-1]]",
                    "possible_values": []
                }
            },
            "reshape_345": {
                "variable": {
                    "value": "hidden_states",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.ln_f(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_671": {
                "variable": {
                    "value": "hidden_states",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.ln_f(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shapes + shape_list(hidden_states)[-1:]",
                    "possible_values": []
                }
            },
            "squeeze_676": {
                "variable": {
                    "value": "mc_logits",
                    "possible_values": []
                },
                "input": {
                    "value": "mc_logits",
                    "possible_values": [
                        [
                            "self.multiple_choice_head([hidden_states, mc_token_ids], training=training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(mc_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cast_89": {
                "x": {
                    "value": "m",
                    "possible_values": [
                        [
                            "i >= j - ns + nd",
                            "Compare"
                        ],
                        [
                            "self.ln_2(x)",
                            "Call"
                        ],
                        [
                            "self.mlp(m, training=training)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                }
            },
            "cast_96": {
                "variable": {
                    "value": "dk",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(k)[-1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_131": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "possible_values": []
                }
            },
            "unstack_142": {
                "variable": {
                    "value": "(past_key, past_value)",
                    "possible_values": []
                },
                "value": {
                    "value": "layer_past",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "concat_143": {
                "variable": {
                    "value": "key",
                    "possible_values": []
                },
                "values": {
                    "value": "[past_key, key]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "possible_values": []
                }
            },
            "concat_144": {
                "variable": {
                    "value": "value",
                    "possible_values": []
                },
                "values": {
                    "value": "[past_value, value]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "possible_values": []
                }
            },
            "cast_297": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reshape_319": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(token_type_ids)[-1]]",
                    "possible_values": []
                }
            },
            "tanh_55": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "possible_values": []
                }
            },
            "range_86": {},
            "matmul_116": {
                "a": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "possible_values": []
                }
            },
            "reshape_269": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "possible_values": []
                }
            },
            "reshape_653": {
                "tensor": {
                    "value": "input_ids",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "possible_values": []
                }
            },
            "reshape_654": {
                "tensor": {
                    "value": "attention_mask",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "possible_values": []
                }
            },
            "reshape_655": {
                "tensor": {
                    "value": "token_type_ids",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "possible_values": []
                }
            },
            "reshape_656": {
                "tensor": {
                    "value": "position_ids",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(past_length, input_shape[-1] + past_length, dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[4] if len(inputs) > 4 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "possible_values": []
                }
            },
            "sqrt_97": {
                "x": {
                    "value": "dk",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_281": {
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "reshape_356": {
                "tensor": {
                    "value": "t",
                    "possible_values": []
                },
                "shape": {
                    "value": "attention_output_shape",
                    "possible_values": [
                        [
                            "input_shape[:-1] + [-1] + shape_list(all_attentions[0])[-2:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_333": {
                "tensor": {
                    "value": "hidden_states",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "self.ln_f(hidden_states)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_55": {
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ],
                        [
                            "x + a",
                            "BinOp"
                        ],
                        [
                            "x + m",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_tf_openai.py": {
        "tensorflow": {
            "TFAttention_67": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "n_state": {
                    "value": "nx",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "self.n_ctx": {
                    "value": "n_ctx",
                    "possible_values": []
                },
                "self.split_size": {
                    "value": "n_state",
                    "possible_values": [
                        [
                            "nx",
                            "Name"
                        ]
                    ]
                },
                "self.scale": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "Dropout_82": {
                    "variable": {
                        "value": "self.attn_dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.attn_pdrop",
                        "possible_values": []
                    }
                },
                "Dropout_83": {
                    "variable": {
                        "value": "self.resid_dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.resid_pdrop",
                        "possible_values": []
                    }
                }
            },
            "TFMLP_161": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.act": {
                    "value": "gelu",
                    "possible_values": []
                },
                "Dropout_168": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.resid_pdrop",
                        "possible_values": []
                    }
                }
            },
            "TFBlock_177": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "LayerNormalization_182": {
                    "variable": {
                        "value": "self.ln_1",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_epsilon",
                        "possible_values": []
                    },
                    "name": {
                        "value": "ln_1",
                        "possible_values": []
                    }
                },
                "LayerNormalization_184": {
                    "variable": {
                        "value": "self.ln_2",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_epsilon",
                        "possible_values": []
                    },
                    "name": {
                        "value": "ln_2",
                        "possible_values": []
                    }
                }
            },
            "TFOpenAIGPTMainLayer_200": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Embedding_212": {
                    "variable": {
                        "value": "self.positions_embed",
                        "possible_values": []
                    },
                    "input_dim": {
                        "value": "config.n_positions",
                        "possible_values": []
                    },
                    "output_dim": {
                        "value": "config.n_embd",
                        "possible_values": []
                    },
                    "embeddings_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "positions_embed",
                        "possible_values": []
                    }
                },
                "Dropout_218": {
                    "variable": {
                        "value": "self.drop",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.embd_pdrop",
                        "possible_values": []
                    }
                }
            },
            "Activation_61": {
                "activation": {
                    "value": "gelu",
                    "possible_values": []
                }
            },
            "Activation_63": {
                "activation": {
                    "value": "swish",
                    "possible_values": []
                }
            },
            "matmul_102": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "possible_values": []
                },
                "b": {
                    "value": "k",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "possible_values": [
                        [
                            "self.causal_attention_mask(nd, ns, dtype=w.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(b, [1, 1, nd, ns])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, nd, ns]",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "logits": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "transpose_130": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "possible_values": []
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_145": {
                "variable": {
                    "value": "(query, key, value)",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reshape_305": {
                "variable": {
                    "value": "position_ids",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_ids",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(input_shape[-1], dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(position_ids)[-1]]",
                    "possible_values": []
                }
            },
            "reshape_331": {
                "variable": {
                    "value": "hidden_states",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_632": {
                "variable": {
                    "value": "hidden_states",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden_states",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shapes + shape_list(hidden_states)[-1:]",
                    "possible_values": []
                }
            },
            "squeeze_637": {
                "variable": {
                    "value": "mc_logits",
                    "possible_values": []
                },
                "input": {
                    "value": "mc_logits",
                    "possible_values": [
                        [
                            "self.multiple_choice_head([hidden_states, mc_token_ids], training=training)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(mc_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sigmoid_57": {
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_97": {
                "x": {
                    "value": "m",
                    "possible_values": [
                        [
                            "i >= j - ns + nd",
                            "Compare"
                        ],
                        [
                            "self.mlp(n, training=training)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                }
            },
            "cast_104": {
                "variable": {
                    "value": "dk",
                    "possible_values": []
                },
                "x": {
                    "value": "shape_list(k)[-1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_x_shape",
                    "possible_values": [
                        [
                            "x_shape[:-2] + [x_shape[-2] * x_shape[-1]]",
                            "BinOp"
                        ],
                        [
                            "x_shape[:-1] + [self.n_head, x_shape[-1] // self.n_head]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_139": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "possible_values": []
                }
            },
            "cast_289": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "reshape_311": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, shape_list(token_type_ids)[-1]]",
                    "possible_values": []
                }
            },
            "tanh_52": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "possible_values": []
                }
            },
            "range_94": {},
            "matmul_124": {
                "a": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "w / tf.math.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "w * b - 10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w, training=training)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "possible_values": []
                }
            },
            "reshape_266": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[-1]]",
                    "possible_values": []
                }
            },
            "reshape_615": {
                "tensor": {
                    "value": "input_ids",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(input_ids, [-1, input_shape[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "possible_values": []
                }
            },
            "reshape_616": {
                "tensor": {
                    "value": "attention_mask",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - attention_mask) * -10000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "possible_values": []
                }
            },
            "reshape_617": {
                "tensor": {
                    "value": "token_type_ids",
                    "possible_values": [
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_ids, [-1, shape_list(token_type_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[2] if len(inputs) > 2 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "possible_values": []
                }
            },
            "reshape_618": {
                "tensor": {
                    "value": "position_ids",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "tf.range(input_shape[-1], dtype=tf.int32)[tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(position_ids, [-1, shape_list(position_ids)[-1]])",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else position_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('position_ids', position_ids)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, seq_length)",
                    "possible_values": []
                }
            },
            "sqrt_105": {
                "x": {
                    "value": "dk",
                    "possible_values": [
                        [
                            "tf.cast(shape_list(k)[-1], tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_273": {
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "reshape_342": {
                "tensor": {
                    "value": "t",
                    "possible_values": []
                },
                "shape": {
                    "value": "attention_output_shape",
                    "possible_values": [
                        [
                            "input_shape[:-1] + [-1] + shape_list(all_attentions[0])[-2:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_324": {
                "tensor": {
                    "value": "hidden_states",
                    "possible_values": [
                        [
                            "inputs_embeds + position_embeds + token_type_embeds",
                            "BinOp"
                        ],
                        [
                            "self.drop(hidden_states, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(hidden_states, output_shape)",
                            "Call"
                        ],
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(hidden_states, input_shapes + shape_list(hidden_states)[-1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "possible_values": [
                        [
                            "input_shape + [shape_list(hidden_states)[-1]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_52": {
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_tf_pytorch_utils.py": {
        "tensorflow": {},
        "torch": {
            "load_89": {
                "variable": {
                    "value": "pt_state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_path",
                    "possible_values": [
                        [
                            "os.path.abspath(pytorch_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "from_numpy_311": {
                "variable": {
                    "value": "new_pt_params_dict[pt_weight_name]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "possible_values": [
                        [
                            "pt_state_dict[name].numpy()",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_312": {
                "variable": {
                    "value": "loaded_pt_weights_data_ptr[pt_weight.data_ptr()]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "possible_values": [
                        [
                            "pt_state_dict[name].numpy()",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ],
                        [
                            "numpy.transpose(array)",
                            "Call"
                        ],
                        [
                            "numpy.squeeze(array)",
                            "Call"
                        ],
                        [
                            "numpy.expand_dims(array, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_tf_roberta.py": {
        "tensorflow": {
            "TFRobertaLMHead_243": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dense_249": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "dense",
                        "possible_values": []
                    }
                },
                "LayerNormalization_252": {
                    "variable": {
                        "value": "self.layer_norm",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_eps",
                        "possible_values": []
                    },
                    "name": {
                        "value": "layer_norm",
                        "possible_values": []
                    }
                },
                "Activation_253": {
                    "variable": {
                        "value": "self.act",
                        "possible_values": []
                    },
                    "activation": {
                        "value": "gelu",
                        "possible_values": []
                    }
                },
                "self.decoder": {
                    "value": "input_embeddings",
                    "possible_values": []
                }
            },
            "TFRobertaClassificationHead_325": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dense_330": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "activation": {
                        "value": "tanh",
                        "possible_values": []
                    },
                    "name": {
                        "value": "dense",
                        "possible_values": []
                    }
                },
                "Dropout_336": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                },
                "Dense_337": {
                    "variable": {
                        "value": "self.out_proj",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.num_labels",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "out_proj",
                        "possible_values": []
                    }
                }
            },
            "cast_55": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.not_equal(x, self.padding_idx)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "Dropout_438": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Dense_439": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "possible_values": []
                }
            },
            "not_equal_55": {
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x, mode='linear') + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.padding_idx",
                    "possible_values": []
                }
            },
            "cumsum_56": {
                "x": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.not_equal(x, self.padding_idx), dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "range_67": {
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_tf_t5.py": {
        "tensorflow": {
            "TFT5LayerNorm_48": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.variance_epsilon": {
                    "value": "epsilon",
                    "possible_values": [
                        [
                            "1e-06",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TFT5DenseReluDense_67": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dense_70": {
                    "variable": {
                        "value": "self.wi",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.d_ff",
                        "possible_values": []
                    },
                    "use_bias": {
                        "value": "False",
                        "possible_values": []
                    },
                    "name": {
                        "value": "wi",
                        "possible_values": []
                    }
                },
                "Dense_71": {
                    "variable": {
                        "value": "self.wo",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.d_model",
                        "possible_values": []
                    },
                    "use_bias": {
                        "value": "False",
                        "possible_values": []
                    },
                    "name": {
                        "value": "wo",
                        "possible_values": []
                    }
                },
                "Dropout_72": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.dropout_rate",
                        "possible_values": []
                    }
                }
            },
            "TFT5LayerFF_83": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dropout_88": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.dropout_rate",
                        "possible_values": []
                    }
                }
            },
            "TFT5Attention_97": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.has_relative_attention_bias": {
                    "value": "has_relative_attention_bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "Dense_114": {
                    "variable": {
                        "value": "self.q",
                        "possible_values": []
                    },
                    "units": {
                        "value": "self.inner_dim",
                        "possible_values": []
                    },
                    "use_bias": {
                        "value": "False",
                        "possible_values": []
                    },
                    "name": {
                        "value": "q",
                        "possible_values": []
                    }
                },
                "Dense_115": {
                    "variable": {
                        "value": "self.k",
                        "possible_values": []
                    },
                    "units": {
                        "value": "self.inner_dim",
                        "possible_values": []
                    },
                    "use_bias": {
                        "value": "False",
                        "possible_values": []
                    },
                    "name": {
                        "value": "k",
                        "possible_values": []
                    }
                },
                "Dense_116": {
                    "variable": {
                        "value": "self.v",
                        "possible_values": []
                    },
                    "units": {
                        "value": "self.inner_dim",
                        "possible_values": []
                    },
                    "use_bias": {
                        "value": "False",
                        "possible_values": []
                    },
                    "name": {
                        "value": "v",
                        "possible_values": []
                    }
                },
                "Dense_117": {
                    "variable": {
                        "value": "self.o",
                        "possible_values": []
                    },
                    "units": {
                        "value": "self.d_model",
                        "possible_values": []
                    },
                    "use_bias": {
                        "value": "False",
                        "possible_values": []
                    },
                    "name": {
                        "value": "o",
                        "possible_values": []
                    }
                },
                "Dropout_118": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.dropout_rate",
                        "possible_values": []
                    }
                }
            },
            "TFT5LayerSelfAttention_260": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dropout_267": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.dropout_rate",
                        "possible_values": []
                    }
                }
            },
            "TFT5LayerCrossAttention_280": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dropout_287": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.dropout_rate",
                        "possible_values": []
                    }
                }
            },
            "TFT5Block_300": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                }
            },
            "TFT5MainLayer_362": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.config": {
                    "value": "config",
                    "possible_values": []
                },
                "Dropout_376": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.dropout_rate",
                        "possible_values": []
                    }
                }
            },
            "reduce_mean_62": {
                "variable": {
                    "value": "variance",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.square(x)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "less_164": {
                "variable": {
                    "value": "is_small",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_exact",
                    "possible_values": [
                        [
                            "num_buckets // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "minimum_171": {
                "variable": {
                    "value": "val_if_large",
                    "possible_values": []
                },
                "x": {
                    "value": "val_if_large",
                    "possible_values": [
                        [
                            "max_exact + tf.dtypes.cast(tf.math.log(tf.dtypes.cast(n, tf.float32) / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact), tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.math.minimum(val_if_large, num_buckets - 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_buckets - 1",
                    "possible_values": []
                }
            },
            "expand_dims_184": {
                "variable": {
                    "value": "values",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.transpose(values, [2, 0, 1])",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "einsum_228": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnqd,bnkd->bnqk",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q",
                    "possible_values": [
                        [
                            "shape(self.q(input))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "k",
                    "possible_values": [
                        [
                            "shape(self.k(input))",
                            "Call"
                        ],
                        [
                            "shape(self.k(k))",
                            "Call"
                        ],
                        [
                            "tf.concat([k_, k], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_240": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "tf.einsum('bnqd,bnkd->bnqk', q, k)",
                            "Call"
                        ],
                        [
                            "scores + position_bias",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_247": {
                "variable": {
                    "value": "context",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights, training=training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "possible_values": [
                        [
                            "shape(self.v(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v(v))",
                            "Call"
                        ],
                        [
                            "tf.concat([v_, v], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_403": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_mask",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, seq_length), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "constant_526": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "value": {
                    "value": "DUMMY_INPUTS",
                    "possible_values": []
                }
            },
            "constant_527": {
                "variable": {
                    "value": "input_mask",
                    "possible_values": []
                },
                "value": {
                    "value": "DUMMY_MASK",
                    "possible_values": []
                }
            },
            "Embedding_121": {
                "variable": {
                    "value": "self.relative_attention_bias",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.relative_attention_num_buckets",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.n_heads",
                    "possible_values": []
                },
                "name": {
                    "value": "relative_attention_bias",
                    "possible_values": []
                }
            },
            "abs_159": {
                "variable": {
                    "value": "n",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_161": {
                "variable": {
                    "value": "n",
                    "possible_values": []
                },
                "x": {
                    "value": "n",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "where_172": {
                "condition": {
                    "value": "is_small",
                    "possible_values": [
                        [
                            "tf.math.less(n, max_exact)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "n",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "val_if_large",
                    "possible_values": [
                        [
                            "max_exact + tf.dtypes.cast(tf.math.log(tf.dtypes.cast(n, tf.float32) / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact), tf.int32)",
                            "BinOp"
                        ],
                        [
                            "tf.math.minimum(val_if_large, num_buckets - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_396": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "dims": {
                    "value": "(batch_size, seq_length)",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "fill_399": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "possible_values": []
                },
                "dims": {
                    "value": "(batch_size, encoder_seq_length)",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cast_437": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_attention_mask",
                    "possible_values": [
                        [
                            "tf.fill((batch_size, encoder_seq_length), 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(encoder_attention_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "square_62": {
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rsqrt_63": {
                "x": {
                    "value": "variance + self.variance_epsilon",
                    "possible_values": []
                }
            },
            "cast_165": {
                "x": {
                    "value": "tf.math.log(tf.dtypes.cast(n, tf.float32) / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "transpose_184": {
                "a": {
                    "value": "values",
                    "possible_values": [
                        [
                            "self.relative_attention_bias(rp_bucket)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.transpose(values, [2, 0, 1]), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "possible_values": []
                }
            },
            "transpose_201": {
                "a": {
                    "value": "tf.reshape(x, (bs, -1, self.n_heads, self.d_kv))",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "possible_values": []
                }
            },
            "reshape_205": {
                "tensor": {
                    "value": "tf.transpose(x, perm=(0, 2, 1, 3))",
                    "possible_values": []
                },
                "shape": {
                    "value": "(bs, -1, self.inner_dim)",
                    "possible_values": []
                }
            },
            "cast_158": {
                "x": {
                    "value": "tf.math.less(n, 0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "reshape_201": {
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads, self.d_kv)",
                    "possible_values": []
                }
            },
            "transpose_205": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x * tf.math.rsqrt(variance + self.variance_epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "possible_values": []
                }
            },
            "concat_220": {
                "variable": {
                    "value": "k",
                    "possible_values": []
                },
                "values": {
                    "value": "[k_, k]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "concat_221": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_, v]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "range_412": {
                "variable": {
                    "value": "seq_ids",
                    "possible_values": []
                }
            },
            "less_equal_413": {
                "variable": {
                    "value": "causal_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(seq_ids[None, None, :], (batch_size, seq_length, 1))",
                    "possible_values": []
                },
                "y": {
                    "value": "seq_ids[None, :, None]",
                    "possible_values": []
                }
            },
            "cast_416": {
                "variable": {
                    "value": "causal_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "causal_mask",
                    "possible_values": [
                        [
                            "tf.less_equal(tf.tile(seq_ids[None, None, :], (batch_size, seq_length, 1)), seq_ids[None, :, None])",
                            "Call"
                        ],
                        [
                            "tf.cast(causal_mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "less_158": {
                "x": {
                    "value": "n",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "log_166": {
                "x": {
                    "value": "tf.dtypes.cast(n, tf.float32) / max_exact",
                    "possible_values": []
                }
            },
            "tile_414": {
                "input": {
                    "value": "seq_ids[None, None, :]",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(batch_size, seq_length, 1)",
                    "possible_values": []
                }
            },
            "cast_166": {
                "x": {
                    "value": "n",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "tf.math.abs(n)",
                            "Call"
                        ],
                        [
                            "tf.math.maximum(n, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_tf_transfo_xl.py": {
        "tensorflow": {
            "TFPositionalEmbedding_37": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                }
            },
            "TFPositionwiseFF_53": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.d_model": {
                    "value": "d_model",
                    "possible_values": []
                },
                "self.d_inner": {
                    "value": "d_inner",
                    "possible_values": []
                },
                "self.dropout": {
                    "value": "dropout",
                    "possible_values": []
                },
                "Dense_61": {
                    "variable": {
                        "value": "self.layer_1",
                        "possible_values": []
                    },
                    "units": {
                        "value": "d_inner",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(init_std)",
                        "possible_values": []
                    },
                    "activation": {
                        "value": "tf.nn.relu",
                        "possible_values": []
                    },
                    "name": {
                        "value": "CoreNet_._0",
                        "possible_values": []
                    }
                },
                "Dropout_64": {
                    "variable": {
                        "value": "self.drop_1",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "dropout",
                        "possible_values": []
                    }
                },
                "Dense_65": {
                    "variable": {
                        "value": "self.layer_2",
                        "possible_values": []
                    },
                    "units": {
                        "value": "d_model",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(init_std)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "CoreNet_._3",
                        "possible_values": []
                    }
                },
                "Dropout_66": {
                    "variable": {
                        "value": "self.drop_2",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "dropout",
                        "possible_values": []
                    }
                },
                "LayerNormalization_68": {
                    "variable": {
                        "value": "self.layer_norm",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "layer_norm_epsilon",
                        "possible_values": [
                            [
                                "1e-05",
                                "MethodArgument"
                            ],
                            [
                                "1e-05",
                                "MethodArgument"
                            ],
                            [
                                "1e-05",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "name": {
                        "value": "layer_norm",
                        "possible_values": []
                    }
                },
                "self.pre_lnorm": {
                    "value": "pre_lnorm",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TFRelPartialLearnableMultiHeadAttn_96": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.output_attentions": {
                    "value": "output_attentions",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.n_head": {
                    "value": "n_head",
                    "possible_values": []
                },
                "self.d_model": {
                    "value": "d_model",
                    "possible_values": []
                },
                "self.d_head": {
                    "value": "d_head",
                    "possible_values": []
                },
                "self.dropout": {
                    "value": "dropout",
                    "possible_values": []
                },
                "Dense_123": {
                    "variable": {
                        "value": "self.qkv_net",
                        "possible_values": []
                    },
                    "units": {
                        "value": "3 * n_head * d_head",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(init_std)",
                        "possible_values": []
                    },
                    "use_bias": {
                        "value": "False",
                        "possible_values": []
                    },
                    "name": {
                        "value": "qkv_net",
                        "possible_values": []
                    }
                },
                "Dropout_127": {
                    "variable": {
                        "value": "self.drop",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "dropout",
                        "possible_values": []
                    }
                },
                "Dropout_128": {
                    "variable": {
                        "value": "self.dropatt",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "dropatt",
                        "possible_values": [
                            [
                                "0",
                                "MethodArgument"
                            ],
                            [
                                "0.0",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "Dense_129": {
                    "variable": {
                        "value": "self.o_net",
                        "possible_values": []
                    },
                    "units": {
                        "value": "d_model",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(init_std)",
                        "possible_values": []
                    },
                    "use_bias": {
                        "value": "False",
                        "possible_values": []
                    },
                    "name": {
                        "value": "o_net",
                        "possible_values": []
                    }
                },
                "LayerNormalization_133": {
                    "variable": {
                        "value": "self.layer_norm",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "layer_norm_epsilon",
                        "possible_values": [
                            [
                                "1e-05",
                                "MethodArgument"
                            ],
                            [
                                "1e-05",
                                "MethodArgument"
                            ],
                            [
                                "1e-05",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "name": {
                        "value": "layer_norm",
                        "possible_values": []
                    }
                },
                "self.pre_lnorm": {
                    "value": "pre_lnorm",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "Dense_146": {
                    "variable": {
                        "value": "self.r_net",
                        "possible_values": []
                    },
                    "units": {
                        "value": "self.n_head * self.d_head",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(init_std)",
                        "possible_values": []
                    },
                    "use_bias": {
                        "value": "False",
                        "possible_values": []
                    },
                    "name": {
                        "value": "r_net",
                        "possible_values": []
                    }
                }
            },
            "TFRelPartialLearnableDecoderLayer_250": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                }
            },
            "TFAdaptiveEmbedding_309": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.n_token": {
                    "value": "n_token",
                    "possible_values": []
                },
                "self.d_embed": {
                    "value": "d_embed",
                    "possible_values": []
                },
                "self.init_std": {
                    "value": "init_std",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.div_val": {
                    "value": "div_val",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.d_proj": {
                    "value": "d_proj",
                    "possible_values": []
                }
            },
            "TFTransfoXLMainLayer_381": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dropout_405": {
                    "variable": {
                        "value": "self.drop",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.dropout",
                        "possible_values": []
                    }
                }
            },
            "einsum_44": {
                "variable": {
                    "value": "sinusoid_inp",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,j->ij",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "pos_seq",
                    "possible_values": [
                        [
                            "tf.range(klen - 1, -1, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(pos_seq, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.inv_freq",
                    "possible_values": []
                }
            },
            "concat_45": {
                "variable": {
                    "value": "pos_emb",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "pad_163": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0], [0, 0]]",
                    "possible_values": []
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x_size[1] + 1, x_size[0], x_size[2], x_size[3]]",
                    "possible_values": []
                }
            },
            "slice_165": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[1, 0, 0, 0]",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, -1]",
                    "possible_values": []
                }
            },
            "reshape_166": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.pad(x, [[0, 0], [1, 0], [0, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_size[1] + 1, x_size[0], x_size[2], x_size[3]])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [1, 0, 0, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, x_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_size",
                    "possible_values": [
                        [
                            "shape_list(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_195": {
                "variable": {
                    "value": "w_head_q",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_head_q",
                    "possible_values": [
                        [
                            "w_head_q[-qlen:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(w_head_q, (qlen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(qlen, bsz, self.n_head, self.d_head)",
                    "possible_values": []
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "w_head_k",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_head_k",
                    "possible_values": [
                        [
                            "tf.reshape(w_head_k, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(klen, bsz, self.n_head, self.d_head)",
                    "possible_values": []
                }
            },
            "reshape_197": {
                "variable": {
                    "value": "w_head_v",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_head_v",
                    "possible_values": [
                        [
                            "tf.reshape(w_head_v, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(klen, bsz, self.n_head, self.d_head)",
                    "possible_values": []
                }
            },
            "reshape_199": {
                "variable": {
                    "value": "r_head_k",
                    "possible_values": []
                },
                "tensor": {
                    "value": "r_head_k",
                    "possible_values": [
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r_head_k, (rlen, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(rlen, self.n_head, self.d_head)",
                    "possible_values": []
                }
            },
            "einsum_203": {
                "variable": {
                    "value": "AC",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "rw_head_q",
                    "possible_values": [
                        [
                            "w_head_q + self.r_w_bias",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w_head_k",
                    "possible_values": [
                        [
                            "tf.reshape(w_head_k, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_206": {
                "variable": {
                    "value": "BD",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "rr_head_q",
                    "possible_values": [
                        [
                            "w_head_q + self.r_r_bias",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "r_head_k",
                    "possible_values": [
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "self.r_net(r)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r_head_k, (rlen, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_219": {
                "variable": {
                    "value": "attn_prob",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn_score",
                    "possible_values": [
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score * (1 - attn_mask_t) - 1e+30 * attn_mask_t",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "einsum_227": {
                "variable": {
                    "value": "attn_vec",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_prob",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attn_score, axis=1)",
                            "Call"
                        ],
                        [
                            "self.dropatt(attn_prob, training=training)",
                            "Call"
                        ],
                        [
                            "attn_prob * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "w_head_v",
                    "possible_values": [
                        [
                            "tf.reshape(w_head_v, (klen, bsz, self.n_head, self.d_head))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_231": {
                "variable": {
                    "value": "attn_vec",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attn_vec",
                    "possible_values": [
                        [
                            "tf.einsum('ijbn,jbnd->ibnd', attn_prob, w_head_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(attn_vec, (attn_vec_sizes[0], attn_vec_sizes[1], self.n_head * self.d_head))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(attn_vec_sizes[0], attn_vec_sizes[1], self.n_head * self.d_head)",
                    "possible_values": []
                }
            },
            "ones_562": {
                "variable": {
                    "value": "attn_mask",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, qlen]",
                    "possible_values": []
                }
            },
            "band_part_563": {
                "variable": {
                    "value": "mask_u",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "possible_values": [
                        [
                            "tf.ones([qlen, qlen])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "band_part_564": {
                "variable": {
                    "value": "mask_dia",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "possible_values": [
                        [
                            "tf.ones([qlen, qlen])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_565": {
                "variable": {
                    "value": "attn_mask_pad",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, mlen]",
                    "possible_values": []
                }
            },
            "concat_566": {
                "variable": {
                    "value": "dec_attn_mask",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask_pad, mask_u - mask_dia]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "concat_175": {
                "variable": {
                    "value": "cat",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems, w]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "split_182": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "possible_values": []
                },
                "value": {
                    "value": "w_heads",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "split_191": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "possible_values": []
                },
                "value": {
                    "value": "w_heads",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "reshape_359": {
                "variable": {
                    "value": "inp_flat",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "possible_values": []
                }
            },
            "zeros_360": {
                "variable": {
                    "value": "emb_flat",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape_list(inp_flat)[0], self.d_proj]",
                    "possible_values": []
                }
            },
            "reshape_374": {
                "variable": {
                    "value": "embed",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_flat",
                    "possible_values": [
                        [
                            "tf.zeros([shape_list(inp_flat)[0], self.d_proj])",
                            "Call"
                        ],
                        [
                            "emb_flat + tf.scatter_nd(mask_idx, emb_i, tf.cast(shape_list(emb_flat), dtype=tf.int64))",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "embed_shape",
                    "possible_values": [
                        [
                            "shape_list(inp) + [self.d_proj]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_506": {
                "variable": {
                    "value": "cat",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems[i], hids[i]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "band_part_568": {
                "variable": {
                    "value": "mask_l",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "possible_values": [
                        [
                            "tf.ones([qlen, qlen])",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "-1",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_569": {
                "variable": {
                    "value": "dec_attn_mask",
                    "possible_values": []
                },
                "values": {
                    "value": "[dec_attn_mask[:, :qlen] + mask_l - mask_dia, dec_attn_mask[:, qlen:]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tile_48": {
                "input": {
                    "value": "pos_emb[:, None, :]",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, bsz, 1]",
                    "possible_values": []
                }
            },
            "einsum_368": {
                "variable": {
                    "value": "emb_i",
                    "possible_values": []
                },
                "equation": {
                    "value": "id,de->ie",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "emb_i",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "tf.einsum('id,de->ie', emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.emb_projs[i]",
                    "possible_values": []
                }
            },
            "cast_370": {
                "variable": {
                    "value": "mask_idx",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(mask_i)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "zeros_481": {
                "variable": {
                    "value": "empty",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.mem_len, bsz, self.d_model]",
                    "possible_values": []
                }
            },
            "stop_gradient_507": {
                "input": {
                    "value": "cat",
                    "possible_values": [
                        [
                            "tf.concat([mems, w], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([mems[i], hids[i]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_533": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "a": {
                    "value": "input_ids",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.transpose(input_ids, perm=(1, 0))",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "possible_values": []
                }
            },
            "minimum_589": {
                "variable": {
                    "value": "pos_seq",
                    "possible_values": []
                },
                "x": {
                    "value": "pos_seq",
                    "possible_values": [
                        [
                            "tf.range(klen - 1, -1, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.minimum(pos_seq, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.clamp_len",
                    "possible_values": []
                }
            },
            "transpose_610": {
                "a": {
                    "value": "core_out",
                    "possible_values": [
                        [
                            "self.layer_norm(inp)",
                            "Call"
                        ],
                        [
                            "self.layer_1(core_out)",
                            "Call"
                        ],
                        [
                            "self.drop_1(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_2(core_out)",
                            "Call"
                        ],
                        [
                            "self.drop_2(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_1(inp)",
                            "Call"
                        ],
                        [
                            "self.drop_1(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_2(core_out)",
                            "Call"
                        ],
                        [
                            "self.drop_2(core_out, training=training)",
                            "Call"
                        ],
                        [
                            "self.drop(word_emb, training=training)",
                            "Call"
                        ],
                        [
                            "layer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.drop(core_out, training=training)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "sin_45": {
                "x": {
                    "value": "sinusoid_inp",
                    "possible_values": [
                        [
                            "tf.einsum('i,j->ij', pos_seq, self.inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_45": {
                "x": {
                    "value": "sinusoid_inp",
                    "possible_values": [
                        [
                            "tf.einsum('i,j->ij', pos_seq, self.inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_nd_371": {
                "indices": {
                    "value": "mask_idx",
                    "possible_values": [
                        [
                            "tf.cast(tf.where(mask_i), dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "emb_i",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "tf.einsum('id,de->ie', emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.cast(shape_list(emb_flat), dtype=tf.int64)",
                    "possible_values": []
                }
            },
            "transpose_536": {
                "variable": {
                    "value": "inputs_embeds",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs_embeds",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs_embeds, perm=(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "inputs[3] if len(inputs) > 3 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "range_41": {},
            "Embedding_334": {
                "input_dim": {
                    "value": "r_idx - l_idx",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "d_emb_i",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ],
                        [
                            "self.d_embed // self.div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "embeddings_initializer": {
                    "value": "get_initializer(init_std)",
                    "possible_values": []
                },
                "name": {
                    "value": "'emb_layers_._{}'.format(i)",
                    "possible_values": []
                }
            },
            "boolean_mask_366": {
                "tensor": {
                    "value": "inp_flat",
                    "possible_values": [
                        [
                            "tf.reshape(inp, (-1,))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask_i",
                    "possible_values": [
                        [
                            "(inp_flat >= l_idx) & (inp_flat < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_370": {
                "condition": {
                    "value": "mask_i",
                    "possible_values": [
                        [
                            "(inp_flat >= l_idx) & (inp_flat < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_371": {
                "x": {
                    "value": "shape_list(emb_flat)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            },
            "transpose_614": {
                "a": {
                    "value": "t",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "transpose_618": {
                "a": {
                    "value": "t",
                    "possible_values": []
                },
                "perm": {
                    "value": "(2, 3, 0, 1)",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_tf_transfo_xl_utilities.py": {
        "tensorflow": {
            "TFAdaptiveSoftmaxMask_25": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.vocab_size": {
                    "value": "vocab_size",
                    "possible_values": []
                },
                "self.d_embed": {
                    "value": "d_embed",
                    "possible_values": []
                },
                "self.d_proj": {
                    "value": "d_proj",
                    "possible_values": []
                },
                "self.div_val": {
                    "value": "div_val",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.keep_order": {
                    "value": "keep_order",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "range_113": {
                "variable": {
                    "value": "r",
                    "possible_values": []
                }
            },
            "stack_114": {
                "variable": {
                    "value": "idx",
                    "possible_values": []
                },
                "values": {
                    "value": "[r, target]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "einsum_107": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibd,ed->ibe",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "y",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.einsum('ibd,ed->ibe', y, proj)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "proj",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_nd_115": {
                "params": {
                    "value": "logprob",
                    "possible_values": []
                },
                "indices": {
                    "value": "idx",
                    "possible_values": [
                        [
                            "tf.stack([r, target], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_124": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "possible_values": [
                        [
                            "self._logit(hidden, self.out_layers[0][0], self.out_layers[0][1], self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "shape": {
                    "value": "hidden_sizes[:2]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "concat_166": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "values": {
                    "value": "out",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.log_softmax(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat(out, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "einsum_108": {
                "equation": {
                    "value": "ibd,nd->ibn",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "y",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.einsum('ibd,ed->ibe', y, proj)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "W",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_123": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "labels": {
                    "value": "target",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "possible_values": [
                        [
                            "self._logit(hidden, self.out_layers[0][0], self.out_layers[0][1], self.out_projs[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_170": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "tf.zeros(hidden_sizes[:2], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=target, logits=output)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + tf.scatter_nd(mask_idx, -cur_logprob, tf.cast(shape_list(loss), dtype=tf.int64))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_133": {
                "variable": {
                    "value": "mask_idx",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_144": {
                "variable": {
                    "value": "cur_W",
                    "possible_values": []
                },
                "values": {
                    "value": "[cur_W, self.cluster_weight]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_145": {
                "variable": {
                    "value": "cur_b",
                    "possible_values": []
                },
                "values": {
                    "value": "[cur_b, self.cluster_bias]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "log_softmax_148": {
                "variable": {
                    "value": "head_logprob",
                    "possible_values": []
                },
                "logits": {
                    "value": "head_logit",
                    "possible_values": [
                        [
                            "self._logit(hidden, cur_W, cur_b, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_155": {
                "variable": {
                    "value": "tail_logprob",
                    "possible_values": []
                },
                "logits": {
                    "value": "tail_logit",
                    "possible_values": [
                        [
                            "self._logit(hidden, cur_W, cur_b, self.out_projs[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_151": {
                "variable": {
                    "value": "cur_head_logprob",
                    "possible_values": []
                },
                "tensor": {
                    "value": "head_logprob",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.nn.log_softmax(head_logit)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "boolean_mask_160": {
                "variable": {
                    "value": "cur_head_logprob",
                    "possible_values": []
                },
                "tensor": {
                    "value": "head_logprob",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.nn.log_softmax(head_logit)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "boolean_mask_161": {
                "variable": {
                    "value": "cur_tail_logprob",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tail_logprob",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(tail_logit)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scatter_nd_165": {
                "indices": {
                    "value": "mask_idx",
                    "possible_values": [
                        [
                            "tf.where(mask)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "-cur_logprob",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.cast(shape_list(loss), dtype=tf.int64)",
                    "possible_values": []
                }
            },
            "boolean_mask_134": {
                "tensor": {
                    "value": "target",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "(target >= l_idx) & (target < r_idx)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_165": {
                "x": {
                    "value": "shape_list(loss)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_tf_utils.py": {
        "tensorflow": {
            "TFPreTrainedModel_50": {
                "base_class_0": {
                    "value": "tensorflow.keras.Model",
                    "possible_values": []
                },
                "self.config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "kwargs.pop('config', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFConv1D_383": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.nf": {
                    "value": "nf",
                    "possible_values": []
                },
                "self.nx": {
                    "value": "nx",
                    "possible_values": []
                },
                "self.initializer_range": {
                    "value": "initializer_range",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TFSharedEmbeddings_410": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.vocab_size": {
                    "value": "vocab_size",
                    "possible_values": []
                },
                "self.hidden_size": {
                    "value": "hidden_size",
                    "possible_values": []
                }
            },
            "TFSequenceSummary_471": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                }
            },
            "shape_581": {
                "variable": {
                    "value": "dynamic",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_402": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.nx]",
                    "possible_values": []
                }
            },
            "reshape_405": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bz, sl, self.nf]",
                    "possible_values": []
                }
            },
            "reshape_465": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.hidden_size]",
                    "possible_values": []
                }
            },
            "matmul_466": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "TruncatedNormal_592": {
                "stddev": {
                    "value": "initializer_range",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_454": {
                "params": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_ids",
                    "possible_values": []
                }
            },
            "reshape_468": {
                "tensor": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.weight, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "first_dims + [self.vocab_size]",
                    "possible_values": []
                }
            },
            "Dense_503": {
                "variable": {
                    "value": "self.summary",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "get_initializer(initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "summary",
                    "possible_values": []
                }
            },
            "Dropout_513": {
                "variable": {
                    "value": "self.first_dropout",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.summary_first_dropout",
                    "possible_values": []
                }
            },
            "Dropout_517": {
                "variable": {
                    "value": "self.last_dropout",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.summary_last_dropout",
                    "possible_values": []
                }
            },
            "constant_78": {
                "value": {
                    "value": "DUMMY_INPUTS",
                    "possible_values": []
                }
            },
            "matmul_403": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.nx])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.weight) + self.bias",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [bz, sl, self.nf])",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.weight",
                    "possible_values": []
                }
            },
            "zeros_initializer_397": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reduce_mean_542": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "hidden_states",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('hidden_states')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_556": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "params": {
                    "value": "hidden_states",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('hidden_states')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "cls_index",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "inputs[1] if len(inputs) > 1 else None",
                            "IfExp"
                        ],
                        [
                            "inputs.get('cls_index', None)",
                            "Call"
                        ],
                        [
                            "tf.fill(hidden_shape[:-2], hidden_shape[-2] - 1)",
                            "Call"
                        ],
                        [
                            "cls_index[..., tf.newaxis]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_dims": {
                    "value": "len(hidden_shape) - 2",
                    "possible_values": []
                }
            },
            "squeeze_557": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "hidden_states[:, -1]",
                            "Subscript"
                        ],
                        [
                            "hidden_states[:, 0]",
                            "Subscript"
                        ],
                        [
                            "self.first_dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(hidden_states, axis=1)",
                            "Call"
                        ],
                        [
                            "self.summary(output)",
                            "Call"
                        ],
                        [
                            "self.activation(output)",
                            "Call"
                        ],
                        [
                            "self.last_dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "tf.gather(hidden_states, cls_index, batch_dims=len(hidden_shape) - 2)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=len(hidden_shape) - 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "len(hidden_shape) - 2",
                    "possible_values": []
                }
            },
            "fill_546": {
                "variable": {
                    "value": "cls_index",
                    "possible_values": []
                },
                "dims": {
                    "value": "hidden_shape[:-2]",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden_shape[-2] - 1",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_tf_xlm.py": {
        "tensorflow": {
            "TFMultiHeadAttention_95": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.dim": {
                    "value": "dim",
                    "possible_values": []
                },
                "self.n_heads": {
                    "value": "n_heads",
                    "possible_values": [
                        [
                            "self.n_heads",
                            "Attribute"
                        ]
                    ]
                },
                "Dense_107": {
                    "variable": {
                        "value": "self.q_lin",
                        "possible_values": []
                    },
                    "units": {
                        "value": "dim",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.init_std)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "q_lin",
                        "possible_values": []
                    }
                },
                "Dense_108": {
                    "variable": {
                        "value": "self.k_lin",
                        "possible_values": []
                    },
                    "units": {
                        "value": "dim",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.init_std)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "k_lin",
                        "possible_values": []
                    }
                },
                "Dense_109": {
                    "variable": {
                        "value": "self.v_lin",
                        "possible_values": []
                    },
                    "units": {
                        "value": "dim",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.init_std)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "v_lin",
                        "possible_values": []
                    }
                },
                "Dense_110": {
                    "variable": {
                        "value": "self.out_lin",
                        "possible_values": []
                    },
                    "units": {
                        "value": "dim",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.init_std)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "out_lin",
                        "possible_values": []
                    }
                },
                "Dropout_111": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.attention_dropout",
                        "possible_values": []
                    }
                }
            },
            "TFTransformerFFN_183": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dense_186": {
                    "variable": {
                        "value": "self.lin1",
                        "possible_values": []
                    },
                    "units": {
                        "value": "dim_hidden",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.init_std)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "lin1",
                        "possible_values": []
                    }
                },
                "Dense_187": {
                    "variable": {
                        "value": "self.lin2",
                        "possible_values": []
                    },
                    "units": {
                        "value": "out_dim",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.init_std)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "lin2",
                        "possible_values": []
                    }
                },
                "Dropout_189": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.dropout",
                        "possible_values": []
                    }
                }
            },
            "TFXLMMainLayer_199": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dropout_233": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.dropout",
                        "possible_values": []
                    }
                },
                "Dropout_234": {
                    "variable": {
                        "value": "self.attention_dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.attention_dropout",
                        "possible_values": []
                    }
                },
                "Embedding_236": {
                    "variable": {
                        "value": "self.position_embeddings",
                        "possible_values": []
                    },
                    "input_dim": {
                        "value": "config.max_position_embeddings",
                        "possible_values": []
                    },
                    "output_dim": {
                        "value": "self.dim",
                        "possible_values": []
                    },
                    "embeddings_initializer": {
                        "value": "get_initializer(config.embed_init_std)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "position_embeddings",
                        "possible_values": []
                    }
                },
                "LayerNormalization_255": {
                    "variable": {
                        "value": "self.layer_norm_emb",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_eps",
                        "possible_values": []
                    },
                    "name": {
                        "value": "layer_norm_emb",
                        "possible_values": []
                    }
                }
            },
            "TFXLMPredLayer_619": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                }
            },
            "constant_49": {
                "variable": {
                    "value": "out[:, 0::2]",
                    "possible_values": []
                },
                "value": {
                    "value": "np.sin(position_enc[:, 0::2])",
                    "possible_values": []
                }
            },
            "constant_50": {
                "variable": {
                    "value": "out[:, 1::2]",
                    "possible_values": []
                },
                "value": {
                    "value": "np.cos(position_enc[:, 1::2])",
                    "possible_values": []
                }
            },
            "cast_89": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "padding_mask",
                            "Name"
                        ],
                        [
                            "tf.math.less(alen, lengths[:, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, mask_reshape)",
                            "Call"
                        ],
                        [
                            "mask[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_90": {
                "variable": {
                    "value": "attn_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_mask",
                    "possible_values": [
                        [
                            "tf.less_equal(tf.tile(alen[tf.newaxis, tf.newaxis, :], (bs, slen, 1)), alen[tf.newaxis, :, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "mask",
                            "Name"
                        ],
                        [
                            "tf.cast(attn_mask, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "less_74": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "x": {
                    "value": "alen",
                    "possible_values": [
                        [
                            "tf.range(slen)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lengths[:, tf.newaxis]",
                    "possible_values": []
                }
            },
            "less_equal_78": {
                "variable": {
                    "value": "attn_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tile(alen[tf.newaxis, tf.newaxis, :], (bs, slen, 1))",
                    "possible_values": []
                },
                "y": {
                    "value": "alen[tf.newaxis, :, tf.newaxis]",
                    "possible_values": []
                }
            },
            "assert_equal_86": {
                "x": {
                    "value": "shape_list(mask)",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "possible_values": []
                }
            },
            "matmul_162": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "possible_values": [
                        [
                            "shape(self.q_lin(input))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "possible_values": [
                        [
                            "shape(self.k_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.k_lin(k))",
                            "Call"
                        ],
                        [
                            "tf.concat([k_, k], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "padding_mask",
                            "Name"
                        ],
                        [
                            "tf.math.less(alen, lengths[:, tf.newaxis])",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, mask_reshape)",
                            "Call"
                        ],
                        [
                            "mask[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "mask_reshape",
                    "possible_values": [
                        [
                            "(bs, 1, qlen, klen) if len(shape_list(mask)) == 3 else (bs, 1, 1, klen)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "softmax_167": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "logits": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "scores - 1e+30 * (1.0 - mask)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_174": {
                "variable": {
                    "value": "context",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scores, axis=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights, training=training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "possible_values": [
                        [
                            "shape(self.v_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v_lin(v))",
                            "Call"
                        ],
                        [
                            "tf.concat([v_, v], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_478": {
                "variable": {
                    "value": "inputs_list",
                    "possible_values": []
                },
                "value": {
                    "value": "[[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]]",
                    "possible_values": []
                }
            },
            "constant_479": {
                "variable": {
                    "value": "attns_list",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "possible_values": []
                }
            },
            "Dense_789": {
                "variable": {
                    "value": "self.qa_outputs",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.init_std)",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "possible_values": []
                }
            },
            "split_799": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "self.sequence_summary(output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "squeeze_800": {
                "variable": {
                    "value": "start_logits",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "squeeze_801": {
                "variable": {
                    "value": "end_logits",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Embedding_246": {
                "variable": {
                    "value": "self.lang_embeddings",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.n_langs",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.dim",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "get_initializer(config.embed_init_std)",
                    "possible_values": []
                },
                "name": {
                    "value": "lang_embeddings",
                    "possible_values": []
                }
            },
            "assert_equal_359": {
                "x": {
                    "value": "shape_list(lengths)[0]",
                    "possible_values": []
                },
                "y": {
                    "value": "bs",
                    "possible_values": [
                        [
                            "shape_list(lengths)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_374": {
                "variable": {
                    "value": "position_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(slen)",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "constant_481": {
                "variable": {
                    "value": "langs_list",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "possible_values": []
                }
            },
            "erf_60": {
                "x": {
                    "value": "x / tf.math.sqrt(2.0)",
                    "possible_values": []
                }
            },
            "tile_79": {
                "input": {
                    "value": "alen[tf.newaxis, tf.newaxis, :]",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(bs, slen, 1)",
                    "possible_values": []
                }
            },
            "transpose_136": {
                "a": {
                    "value": "tf.reshape(x, (bs, -1, self.n_heads, dim_per_head))",
                    "possible_values": []
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "tensor": {
                    "value": "tf.transpose(x, perm=(0, 2, 1, 3))",
                    "possible_values": []
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads * dim_per_head)",
                    "possible_values": []
                }
            },
            "Activation_188": {
                "activation": {
                    "value": "gelu",
                    "possible_values": []
                }
            },
            "reduce_sum_352": {
                "variable": {
                    "value": "lengths",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.not_equal(input_ids, self.pad_index), dtype=tf.int32)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "convert_to_tensor_354": {
                "variable": {
                    "value": "lengths",
                    "possible_values": []
                },
                "value": {
                    "value": "[slen] * bs",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "assert_equal_377": {
                "x": {
                    "value": "shape_list(position_ids)",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "possible_values": []
                }
            },
            "assert_equal_383": {
                "x": {
                    "value": "shape_list(langs)",
                    "possible_values": []
                },
                "y": {
                    "value": "[bs, slen]",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(bs, -1, self.n_heads, dim_per_head)",
                    "possible_values": []
                }
            },
            "transpose_140": {
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1, 3)",
                    "possible_values": []
                }
            },
            "concat_155": {
                "variable": {
                    "value": "k",
                    "possible_values": []
                },
                "values": {
                    "value": "[k_, k]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "concat_156": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_, v]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "LayerNormalization_271": {
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "possible_values": []
                },
                "name": {
                    "value": "'layer_norm1_._{}'.format(i)",
                    "possible_values": []
                }
            },
            "LayerNormalization_280": {
                "epsilon": {
                    "value": "config.layer_norm_eps",
                    "possible_values": []
                },
                "name": {
                    "value": "'layer_norm2_._{}'.format(i)",
                    "possible_values": []
                }
            },
            "range_374": {},
            "sqrt_60": {
                "x": {
                    "value": "2.0",
                    "possible_values": []
                }
            },
            "cast_352": {
                "x": {
                    "value": "tf.not_equal(input_ids, self.pad_index)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "not_equal_352": {
                "x": {
                    "value": "input_ids",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "input_ids[:, -_slen:]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "self.pad_index",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_tf_xlnet.py": {
        "tensorflow": {
            "TFXLNetRelativeAttention_58": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "LayerNormalization_75": {
                    "variable": {
                        "value": "self.layer_norm",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_eps",
                        "possible_values": []
                    },
                    "name": {
                        "value": "layer_norm",
                        "possible_values": []
                    }
                },
                "Dropout_76": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.dropout",
                        "possible_values": []
                    }
                }
            },
            "TFXLNetFeedForward_281": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "LayerNormalization_284": {
                    "variable": {
                        "value": "self.layer_norm",
                        "possible_values": []
                    },
                    "epsilon": {
                        "value": "config.layer_norm_eps",
                        "possible_values": []
                    },
                    "name": {
                        "value": "layer_norm",
                        "possible_values": []
                    }
                },
                "Dense_285": {
                    "variable": {
                        "value": "self.layer_1",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.d_inner",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "layer_1",
                        "possible_values": []
                    }
                },
                "Dense_288": {
                    "variable": {
                        "value": "self.layer_2",
                        "possible_values": []
                    },
                    "units": {
                        "value": "config.d_model",
                        "possible_values": []
                    },
                    "kernel_initializer": {
                        "value": "get_initializer(config.initializer_range)",
                        "possible_values": []
                    },
                    "name": {
                        "value": "layer_2",
                        "possible_values": []
                    }
                },
                "Dropout_291": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.dropout",
                        "possible_values": []
                    }
                }
            },
            "TFXLNetLayer_308": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dropout_313": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.dropout",
                        "possible_values": []
                    }
                }
            },
            "TFXLNetLMHead_327": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.input_embeddings": {
                    "value": "input_embeddings",
                    "possible_values": []
                }
            },
            "TFXLNetMainLayer_345": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "Dropout_367": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "rate": {
                        "value": "config.dropout",
                        "possible_values": []
                    }
                }
            },
            "Activation_52": {
                "activation": {
                    "value": "gelu",
                    "possible_values": []
                }
            },
            "Activation_54": {
                "activation": {
                    "value": "swish",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x_size[1], x_size[0], x_size[2], x_size[3])",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                    "possible_values": []
                }
            },
            "einsum_130": {
                "variable": {
                    "value": "ac",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + self.r_w_bias",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "k_head_h",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.k)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.k)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_133": {
                "variable": {
                    "value": "bd",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + self.r_r_bias",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "k_head_r",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', r, self.r)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ibh,hnd->ibnd', r, self.r)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_153": {
                "variable": {
                    "value": "attn_prob",
                    "possible_values": []
                },
                "logits": {
                    "value": "attn_score",
                    "possible_values": [
                        [
                            "(ac + bd + ef) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 65500 * attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * attn_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "einsum_162": {
                "variable": {
                    "value": "attn_vec",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_prob",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attn_score, axis=1)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob, training=training)",
                            "Call"
                        ],
                        [
                            "attn_prob * head_mask",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "v_head_h",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.v)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ibh,hnd->ibnd', cat, self.v)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_174": {
                "variable": {
                    "value": "attn_out",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,hnd->ibh",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_vec",
                    "possible_values": [
                        [
                            "tf.einsum('ijbn,jbnd->ibnd', attn_prob, v_head_h)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core([q_head_h, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_h, head_mask], training=training)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.o",
                    "possible_values": []
                }
            },
            "ones_403": {
                "variable": {
                    "value": "attn_mask",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, qlen]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_406": {
                "variable": {
                    "value": "attn_mask_pad",
                    "possible_values": []
                },
                "shape": {
                    "value": "[qlen, mlen]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_407": {
                "variable": {
                    "value": "ret",
                    "possible_values": []
                },
                "values": {
                    "value": "[attn_mask_pad, mask_u - mask_dia]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "einsum_427": {
                "variable": {
                    "value": "sinusoid_inp",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,d->id",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "pos_seq",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "inv_freq",
                    "possible_values": [
                        [
                            "1 / 10000 ** (freq_seq / self.d_model)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_428": {
                "variable": {
                    "value": "pos_emb",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "range_438": {
                "variable": {
                    "value": "freq_seq",
                    "possible_values": []
                }
            },
            "Dense_950": {
                "variable": {
                    "value": "self.logits_proj",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "logits_proj",
                    "possible_values": []
                }
            },
            "Dense_1008": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "possible_values": []
                }
            },
            "Dense_1063": {
                "variable": {
                    "value": "self.qa_outputs",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "possible_values": []
                }
            },
            "split_1073": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "self.lm_loss(hidden_state)",
                            "Call"
                        ],
                        [
                            "self.logits_proj(output)",
                            "Call"
                        ],
                        [
                            "self.classifier(output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "squeeze_1074": {
                "variable": {
                    "value": "start_logits",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "squeeze_1075": {
                "variable": {
                    "value": "end_logits",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sigmoid_48": {
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_140": {
                "variable": {
                    "value": "ef",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,snd->ibns",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head + self.r_s_bias",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.seg_embed",
                    "possible_values": []
                }
            },
            "einsum_141": {
                "variable": {
                    "value": "ef",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbs,ibns->ijbn",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "seg_mat",
                    "possible_values": [
                        [
                            "tf.cast(tf.logical_not(tf.equal(token_type_ids[:, None], cat_ids[None, :])), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(seg_mat, 2, dtype=dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "ef",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "tf.einsum('ibnd,snd->ibns', q_head + self.r_s_bias, self.seg_embed)",
                            "Call"
                        ],
                        [
                            "tf.einsum('ijbs,ibns->ijbn', seg_mat, ef)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_196": {
                "variable": {
                    "value": "k_head_h",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.k",
                    "possible_values": []
                }
            },
            "einsum_199": {
                "variable": {
                    "value": "v_head_h",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.v",
                    "possible_values": []
                }
            },
            "einsum_202": {
                "variable": {
                    "value": "k_head_r",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "r",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.r",
                    "possible_values": []
                }
            },
            "einsum_206": {
                "variable": {
                    "value": "q_head_h",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "h",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.q",
                    "possible_values": []
                }
            },
            "einsum_221": {
                "variable": {
                    "value": "q_head_g",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "g",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.q",
                    "possible_values": []
                }
            },
            "einsum_256": {
                "variable": {
                    "value": "q_head_h",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "h",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.q",
                    "possible_values": []
                }
            },
            "einsum_257": {
                "variable": {
                    "value": "k_head_h",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.k",
                    "possible_values": []
                }
            },
            "einsum_258": {
                "variable": {
                    "value": "v_head_h",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "cat",
                    "possible_values": [
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "tf.concat([mems, h], axis=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "self.v",
                    "possible_values": []
                }
            },
            "einsum_261": {
                "variable": {
                    "value": "k_head_r",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "r",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.r",
                    "possible_values": []
                }
            },
            "concat_410": {
                "variable": {
                    "value": "ret",
                    "possible_values": []
                },
                "values": {
                    "value": "[ret[:, :qlen] + mask_l - mask_dia, ret[:, qlen:]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stop_gradient_423": {
                "input": {
                    "value": "new_mem",
                    "possible_values": [
                        [
                            "curr_out[-self.mem_len:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([prev_mem, curr_out], 0)[-self.mem_len:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_432": {
                "variable": {
                    "value": "pos_emb",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_emb",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(sinusoid_inp), tf.cos(sinusoid_inp)], axis=-1)",
                            "Call"
                        ],
                        [
                            "pos_emb[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(pos_emb, [1, bsz, 1])",
                            "Call"
                        ],
                        [
                            "self.positional_embedding(fwd_pos_seq, inv_freq, bsz)",
                            "Call"
                        ],
                        [
                            "tf.concat([fwd_pos_emb, bwd_pos_emb], axis=1)",
                            "Call"
                        ],
                        [
                            "self.relative_positional_encoding(qlen, klen, bsz=bsz, dtype=dtype_float)",
                            "Call"
                        ],
                        [
                            "self.dropout(pos_emb, training=training)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, bsz, 1]",
                    "possible_values": []
                }
            },
            "cast_440": {
                "variable": {
                    "value": "freq_seq",
                    "possible_values": []
                },
                "x": {
                    "value": "freq_seq",
                    "possible_values": [
                        [
                            "tf.range(0, self.d_model, 2.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(freq_seq, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "range_453": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "possible_values": []
                }
            },
            "range_454": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "possible_values": []
                }
            },
            "concat_473": {
                "variable": {
                    "value": "pos_emb",
                    "possible_values": []
                },
                "values": {
                    "value": "[fwd_pos_emb, bwd_pos_emb]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "range_475": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "possible_values": []
                }
            },
            "zeros_576": {
                "variable": {
                    "value": "mems_mask",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape_list(data_mask)[0], mlen, bsz]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_577": {
                "variable": {
                    "value": "data_mask",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems_mask, data_mask]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cast_584": {
                "variable": {
                    "value": "attn_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_mask > 0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_588": {
                "variable": {
                    "value": "non_tgt_mask",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([qlen, mlen], dtype=dtype_float), non_tgt_mask]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cast_589": {
                "variable": {
                    "value": "non_tgt_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "attn_mask + non_tgt_mask[:, :, None, None] > 0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tile_600": {
                "variable": {
                    "value": "word_emb_q",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mask_emb",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[shape_list(target_mapping)[0], bsz, 1]",
                    "possible_values": []
                }
            },
            "zeros_611": {
                "variable": {
                    "value": "mem_pad",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mlen, bsz]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "concat_612": {
                "variable": {
                    "value": "cat_ids",
                    "possible_values": []
                },
                "values": {
                    "value": "[mem_pad, token_type_ids]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cast_615": {
                "variable": {
                    "value": "seg_mat",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_not(tf.equal(token_type_ids[:, None], cat_ids[None, :]))",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                }
            },
            "one_hot_616": {
                "variable": {
                    "value": "seg_mat",
                    "possible_values": []
                },
                "indices": {
                    "value": "seg_mat",
                    "possible_values": [
                        [
                            "tf.cast(tf.logical_not(tf.equal(token_type_ids[:, None], cat_ids[None, :])), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(seg_mat, 2, dtype=dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "tanh_43": {
                "x": {
                    "value": "np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3))",
                    "possible_values": []
                }
            },
            "concat_191": {
                "variable": {
                    "value": "cat",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems, h]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "einsum_225": {
                "variable": {
                    "value": "q_head_g",
                    "possible_values": []
                },
                "equation": {
                    "value": "mbnd,mlb->lbnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "q_head_g",
                    "possible_values": [
                        [
                            "tf.einsum('ibh,hnd->ibnd', g, self.q)",
                            "Call"
                        ],
                        [
                            "tf.einsum('mbnd,mlb->lbnd', q_head_g, target_mapping)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "target_mapping",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else target_mapping",
                            "IfExp"
                        ],
                        [
                            "inputs.get('target_mapping', target_mapping)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_mapping, perm=(1, 2, 0)) if target_mapping is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_233": {
                "variable": {
                    "value": "attn_vec_g",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbnd,mlb->mbnd",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "attn_vec_g",
                    "possible_values": [
                        [
                            "self.rel_attn_core([q_head_g, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_g, head_mask], training=training)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core([q_head_g, k_head_h, v_head_h, k_head_r, seg_mat, attn_mask_g, head_mask], training=training)",
                            "Call"
                        ],
                        [
                            "tf.einsum('lbnd,mlb->mbnd', attn_vec_g, target_mapping)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "target_mapping",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else target_mapping",
                            "IfExp"
                        ],
                        [
                            "inputs.get('target_mapping', target_mapping)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_mapping, perm=(1, 2, 0)) if target_mapping is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_251": {
                "variable": {
                    "value": "cat",
                    "possible_values": []
                },
                "values": {
                    "value": "[mems, h]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cast_457": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "possible_values": []
                },
                "x": {
                    "value": "fwd_pos_seq",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_458": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "possible_values": []
                },
                "x": {
                    "value": "bwd_pos_seq",
                    "possible_values": [
                        [
                            "tf.range(-beg, -end, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(bwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(bwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_461": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "possible_values": []
                },
                "t": {
                    "value": "fwd_pos_seq",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.clamp_len",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clamp_len",
                    "possible_values": []
                }
            },
            "clip_by_value_462": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "possible_values": []
                },
                "t": {
                    "value": "bwd_pos_seq",
                    "possible_values": [
                        [
                            "tf.range(-beg, -end, 1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(bwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(bwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.clamp_len",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clamp_len",
                    "possible_values": []
                }
            },
            "cast_477": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "possible_values": []
                },
                "x": {
                    "value": "fwd_pos_seq",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_479": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "possible_values": []
                },
                "t": {
                    "value": "fwd_pos_seq",
                    "possible_values": [
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.range(beg, end, -1.0)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(fwd_pos_seq, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(fwd_pos_seq, -self.clamp_len, self.clamp_len)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-self.clamp_len",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "self.clamp_len",
                    "possible_values": []
                }
            },
            "transpose_529": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "a": {
                    "value": "input_ids",
                    "possible_values": [
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.get('input_ids')",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.transpose(input_ids, perm=(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "possible_values": []
                }
            },
            "transpose_537": {
                "a": {
                    "value": "token_type_ids",
                    "possible_values": [
                        [
                            "inputs[5] if len(inputs) > 5 else token_type_ids",
                            "IfExp"
                        ],
                        [
                            "inputs.get('token_type_ids', token_type_ids)",
                            "Call"
                        ],
                        [
                            "tf.transpose(token_type_ids, perm=(1, 0)) if token_type_ids is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "possible_values": []
                }
            },
            "transpose_538": {
                "a": {
                    "value": "input_mask",
                    "possible_values": [
                        [
                            "inputs[6] if len(inputs) > 6 else input_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('input_mask', input_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(input_mask, perm=(1, 0)) if input_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "1.0 - tf.cast(attention_mask, dtype=dtype_float)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "possible_values": []
                }
            },
            "transpose_539": {
                "a": {
                    "value": "attention_mask",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(attention_mask, perm=(1, 0)) if attention_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0)",
                    "possible_values": []
                }
            },
            "transpose_540": {
                "a": {
                    "value": "perm_mask",
                    "possible_values": [
                        [
                            "inputs[3] if len(inputs) > 3 else perm_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('perm_mask', perm_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(perm_mask, perm=(1, 2, 0)) if perm_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 0)",
                    "possible_values": []
                }
            },
            "transpose_541": {
                "a": {
                    "value": "target_mapping",
                    "possible_values": [
                        [
                            "inputs[4] if len(inputs) > 4 else target_mapping",
                            "IfExp"
                        ],
                        [
                            "inputs.get('target_mapping', target_mapping)",
                            "Call"
                        ],
                        [
                            "tf.transpose(target_mapping, perm=(1, 2, 0)) if target_mapping is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 2, 0)",
                    "possible_values": []
                }
            },
            "transpose_669": {
                "a": {
                    "value": "output",
                    "possible_values": [
                        [
                            "self.layer_norm(attn_out)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "self.layer_1(output)",
                            "Call"
                        ],
                        [
                            "self.activation_function(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output, training=training)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(output + inp)",
                            "Call"
                        ],
                        [
                            "self.dropout(output_g if output_g is not None else output_h, training=training)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.sequence_summary(output)",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "concat_421": {
                "values": {
                    "value": "[prev_mem, curr_out]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sin_428": {
                "x": {
                    "value": "sinusoid_inp",
                    "possible_values": [
                        [
                            "tf.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_428": {
                "x": {
                    "value": "sinusoid_inp",
                    "possible_values": [
                        [
                            "tf.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_532": {
                "variable": {
                    "value": "inputs_embeds",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs_embeds",
                    "possible_values": [
                        [
                            "inputs[8] if len(inputs) > 8 else inputs_embeds",
                            "IfExp"
                        ],
                        [
                            "inputs.get('inputs_embeds', inputs_embeds)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs_embeds, perm=(1, 0, 2))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "cast_564": {
                "x": {
                    "value": "attention_mask",
                    "possible_values": [
                        [
                            "inputs[1] if len(inputs) > 1 else attention_mask",
                            "IfExp"
                        ],
                        [
                            "inputs.get('attention_mask', attention_mask)",
                            "Call"
                        ],
                        [
                            "tf.transpose(attention_mask, perm=(1, 0)) if attention_mask is not None else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "eye_587": {
                "num_rows": {
                    "value": "qlen",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "logical_not_615": {
                "x": {
                    "value": "tf.equal(token_type_ids[:, None], cat_ids[None, :])",
                    "possible_values": []
                }
            },
            "zeros_588": {
                "shape": {
                    "value": "[qlen, mlen]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype_float",
                    "possible_values": [
                        [
                            "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "equal_615": {
                "x": {
                    "value": "token_type_ids[:, None]",
                    "possible_values": []
                },
                "y": {
                    "value": "cat_ids[None, :]",
                    "possible_values": []
                }
            },
            "transpose_681": {
                "a": {
                    "value": "t",
                    "possible_values": []
                },
                "perm": {
                    "value": "(2, 3, 0, 1)",
                    "possible_values": []
                }
            },
            "transpose_676": {
                "a": {
                    "value": "h",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "transpose_678": {
                "a": {
                    "value": "hs",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 0, 2)",
                    "possible_values": []
                }
            },
            "pow_43": {
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, (x_size[1], x_size[0], x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(x, (x_size[0], x_size[1] - 1, x_size[2], x_size[3]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:klen, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_transfo_xl.py": {
        "tensorflow": {
            "list_variables_124": {
                "variable": {
                    "value": "init_vars",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "possible_values": []
                }
            },
            "load_variable_128": {
                "variable": {
                    "value": "array",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "PositionalEmbedding_166": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.demb": {
                    "value": "demb",
                    "possible_values": []
                }
            },
            "PositionwiseFF_185": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.d_model": {
                    "value": "d_model",
                    "possible_values": []
                },
                "self.d_inner": {
                    "value": "d_inner",
                    "possible_values": []
                },
                "self.dropout": {
                    "value": "dropout",
                    "possible_values": []
                },
                "Sequential_193": {
                    "variable": {
                        "value": "self.CoreNet",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(d_model, d_inner)",
                        "possible_values": []
                    }
                },
                "LayerNorm_201": {
                    "variable": {
                        "value": "self.layer_norm",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "d_model",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "layer_norm_epsilon",
                        "possible_values": [
                            [
                                "1e-05",
                                "MethodArgument"
                            ],
                            [
                                "1e-05",
                                "MethodArgument"
                            ],
                            [
                                "1e-05",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "self.pre_lnorm": {
                    "value": "pre_lnorm",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RelPartialLearnableMultiHeadAttn_222": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.output_attentions": {
                    "value": "output_attentions",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.n_head": {
                    "value": "n_head",
                    "possible_values": []
                },
                "self.d_model": {
                    "value": "d_model",
                    "possible_values": []
                },
                "self.d_head": {
                    "value": "d_head",
                    "possible_values": []
                },
                "self.dropout": {
                    "value": "dropout",
                    "possible_values": []
                },
                "Linear_247": {
                    "variable": {
                        "value": "self.qkv_net",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "d_model",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "3 * n_head * d_head",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Dropout_249": {
                    "variable": {
                        "value": "self.drop",
                        "possible_values": []
                    },
                    "p": {
                        "value": "dropout",
                        "possible_values": []
                    }
                },
                "Dropout_250": {
                    "variable": {
                        "value": "self.dropatt",
                        "possible_values": []
                    },
                    "p": {
                        "value": "dropatt",
                        "possible_values": [
                            [
                                "0",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "Linear_251": {
                    "variable": {
                        "value": "self.o_net",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "n_head * d_head",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "d_model",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "LayerNorm_253": {
                    "variable": {
                        "value": "self.layer_norm",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "d_model",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "layer_norm_epsilon",
                        "possible_values": [
                            [
                                "1e-05",
                                "MethodArgument"
                            ],
                            [
                                "1e-05",
                                "MethodArgument"
                            ],
                            [
                                "1e-05",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "self.pre_lnorm": {
                    "value": "pre_lnorm",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "Linear_266": {
                    "variable": {
                        "value": "self.r_net",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "self.d_model",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.n_head * self.d_head",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "RelPartialLearnableDecoderLayer_369": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "AdaptiveEmbedding_390": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.n_token": {
                    "value": "n_token",
                    "possible_values": []
                },
                "self.d_embed": {
                    "value": "d_embed",
                    "possible_values": []
                },
                "self.div_val": {
                    "value": "div_val",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.d_proj": {
                    "value": "d_proj",
                    "possible_values": []
                },
                "ModuleList_405": {
                    "variable": {
                        "value": "self.emb_layers",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ParameterList_406": {
                    "variable": {
                        "value": "self.emb_projs",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "ger_176": {
                "variable": {
                    "value": "sinusoid_inp",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "possible_values": [
                        [
                            "torch.arange(klen - 1, -1, -1.0, device=word_emb.device, dtype=word_emb.dtype)",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "pos_emb",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_270": {
                "variable": {
                    "value": "zero_pad",
                    "possible_values": []
                },
                "*size": {
                    "value": "zero_pad_shape",
                    "possible_values": [
                        [
                            "(x.size(0), 1) + x.size()[2:]",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "x_padded",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_pad, x]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "einsum_312": {
                "variable": {
                    "value": "AC",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->ijbn",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rw_head_q, w_head_k)",
                    "possible_values": []
                }
            },
            "einsum_315": {
                "variable": {
                    "value": "BD",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jnd->ijbn",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(rr_head_q, r_head_k)",
                    "possible_values": []
                }
            },
            "softmax_339": {
                "variable": {
                    "value": "attn_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "possible_values": [
                        [
                            "AC + BD",
                            "BinOp"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -65000).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[None, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -65000).type_as(attn_score)",
                            "Call"
                        ],
                        [
                            "attn_score.float().masked_fill(attn_mask[:, :, :, None], -1e+30).type_as(attn_score)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "einsum_347": {
                "variable": {
                    "value": "attn_vec",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbn,jbnd->ibnd",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(attn_prob, w_head_v)",
                    "possible_values": []
                }
            },
            "Dropout_605": {
                "variable": {
                    "value": "self.drop",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "possible_values": []
                }
            },
            "ModuleList_620": {
                "variable": {
                    "value": "self.layers",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "pointer.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_260": {
                "variable": {
                    "value": "self.r_r_bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "possible_values": []
                }
            },
            "Parameter_261": {
                "variable": {
                    "value": "self.r_w_bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "cat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, w]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "chunk_291": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "chunk_300": {
                "variable": {
                    "value": "(w_head_q, w_head_k, w_head_v)",
                    "possible_values": []
                },
                "input": {
                    "value": "w_heads",
                    "possible_values": [
                        [
                            "self.qkv_net(self.layer_norm(cat))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(cat)",
                            "Call"
                        ],
                        [
                            "self.qkv_net(self.layer_norm(w))",
                            "Call"
                        ],
                        [
                            "self.qkv_net(w)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_426": {
                "variable": {
                    "value": "emb_flat",
                    "possible_values": []
                },
                "*size": {
                    "value": "[inp_flat.size(0), self.d_proj]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "possible_values": []
                }
            },
            "Parameter_617": {
                "variable": {
                    "value": "self.r_w_bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "possible_values": []
                }
            },
            "Parameter_618": {
                "variable": {
                    "value": "self.r_r_bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.n_head, self.d_head)",
                    "possible_values": []
                }
            },
            "arange_765": {
                "variable": {
                    "value": "pos_seq",
                    "possible_values": []
                },
                "start": {
                    "value": "klen - 1",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "device": {
                    "value": "word_emb.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "word_emb.dtype",
                    "possible_values": []
                }
            },
            "Linear_853": {
                "variable": {
                    "value": "self.out_layer",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "p_i.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_194": {
                "in_features": {
                    "value": "d_model",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_inner",
                    "possible_values": []
                }
            },
            "ReLU_195": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_196": {
                "p": {
                    "value": "dropout",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "in_features": {
                    "value": "d_inner",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "possible_values": []
                }
            },
            "Dropout_198": {
                "p": {
                    "value": "dropout",
                    "possible_values": []
                }
            },
            "sum_323": {
                "input": {
                    "value": "attn_mask",
                    "possible_values": [
                        [
                            "attn_mask == 1",
                            "Compare"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linear_422": {
                "variable": {
                    "value": "embed",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "possible_values": [
                        [
                            "self.emb_layers[0](inp)",
                            "Call"
                        ],
                        [
                            "F.linear(embed, self.emb_projs[0])",
                            "Call"
                        ],
                        [
                            "emb_flat.view(embed_shape)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[0]",
                    "possible_values": []
                }
            },
            "linear_438": {
                "variable": {
                    "value": "emb_i",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_i",
                    "possible_values": [
                        [
                            "self.emb_layers[i](inp_i)",
                            "Call"
                        ],
                        [
                            "F.linear(emb_i, self.emb_projs[i])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.emb_projs[i]",
                    "possible_values": []
                }
            },
            "zeros_677": {
                "variable": {
                    "value": "empty",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.mem_len",
                    "possible_values": []
                },
                "out": {
                    "value": "bsz",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "param.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "possible_values": []
                }
            },
            "no_grad_697": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_703": {
                "variable": {
                    "value": "cat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems[i], hids[i]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Embedding_408": {
                "num_embeddings": {
                    "value": "n_token",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_embed",
                    "possible_values": []
                },
                "sparse": {
                    "value": "sample_softmax > 0",
                    "possible_values": []
                }
            },
            "triu_758": {
                "input": {
                    "value": "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "possible_values": []
                }
            },
            "arange_172": {
                "start": {
                    "value": "0.0",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "possible_values": []
                }
            },
            "Parameter_410": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_embed)",
                    "possible_values": []
                }
            },
            "Embedding_415": {
                "num_embeddings": {
                    "value": "r_idx - l_idx",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d_emb_i",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_416": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_emb_i)",
                    "possible_values": []
                }
            },
            "triu_756": {
                "input": {
                    "value": "all_ones",
                    "possible_values": [
                        [
                            "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1 + mlen",
                    "possible_values": []
                }
            },
            "tril_756": {
                "input": {
                    "value": "all_ones",
                    "possible_values": [
                        [
                            "word_emb.new_ones((qlen, klen), dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-mask_shift_len",
                    "possible_values": []
                }
            },
            "log_softmax_910": {
                "input": {
                    "value": "logit",
                    "possible_values": [
                        [
                            "sample_logits(self.transformer.word_emb, self.out_layer.bias, labels, pred_hid, self.sampler)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Parameter_879": {
                "variable": {
                    "value": "self.crit.out_projs[i]",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transformer.word_emb.emb_projs[0].clone()",
                    "possible_values": []
                }
            },
            "Parameter_884": {
                "variable": {
                    "value": "self.crit.out_projs[i]",
                    "possible_values": []
                },
                "data": {
                    "value": "self.transformer.word_emb.emb_projs[i].clone()",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_xlnet.py": {
        "tensorflow": {
            "list_variables_137": {
                "variable": {
                    "value": "init_vars",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "possible_values": []
                }
            },
            "load_variable_141": {
                "variable": {
                    "value": "array",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "XLNetRelativeAttention_205": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_221": {
                    "variable": {
                        "value": "self.q",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                        "possible_values": []
                    }
                },
                "Parameter_222": {
                    "variable": {
                        "value": "self.k",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                        "possible_values": []
                    }
                },
                "Parameter_223": {
                    "variable": {
                        "value": "self.v",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                        "possible_values": []
                    }
                },
                "Parameter_224": {
                    "variable": {
                        "value": "self.o",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                        "possible_values": []
                    }
                },
                "Parameter_225": {
                    "variable": {
                        "value": "self.r",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.FloatTensor(config.d_model, self.n_head, self.d_head)",
                        "possible_values": []
                    }
                },
                "Parameter_227": {
                    "variable": {
                        "value": "self.r_r_bias",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.FloatTensor(self.n_head, self.d_head)",
                        "possible_values": []
                    }
                },
                "Parameter_228": {
                    "variable": {
                        "value": "self.r_s_bias",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.FloatTensor(self.n_head, self.d_head)",
                        "possible_values": []
                    }
                },
                "Parameter_229": {
                    "variable": {
                        "value": "self.r_w_bias",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.FloatTensor(self.n_head, self.d_head)",
                        "possible_values": []
                    }
                },
                "Parameter_230": {
                    "variable": {
                        "value": "self.seg_embed",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.FloatTensor(2, self.n_head, self.d_head)",
                        "possible_values": []
                    }
                },
                "Dropout_233": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.dropout",
                        "possible_values": []
                    }
                }
            },
            "XLNetFeedForward_415": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_419": {
                    "variable": {
                        "value": "self.layer_1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.d_model",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.d_inner",
                        "possible_values": []
                    }
                },
                "Linear_420": {
                    "variable": {
                        "value": "self.layer_2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.d_inner",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.d_model",
                        "possible_values": []
                    }
                },
                "Dropout_421": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.dropout",
                        "possible_values": []
                    }
                }
            },
            "XLNetLayer_438": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Dropout_443": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.dropout",
                        "possible_values": []
                    }
                }
            },
            "index_select_247": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[3], x_size[2])",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[2], x_size[3] - 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 3, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(klen, device=x.device, dtype=torch.long)",
                    "possible_values": []
                }
            },
            "index_select_261": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[3], x_size[2])",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[2], x_size[3] - 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 3, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(klen, device=x.device, dtype=torch.long)",
                    "possible_values": []
                }
            },
            "einsum_270": {
                "variable": {
                    "value": "ac",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->bnij",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_w_bias",
                    "possible_values": []
                }
            },
            "einsum_273": {
                "variable": {
                    "value": "bd",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,jbnd->bnij",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_r_bias",
                    "possible_values": []
                }
            },
            "softmax_293": {
                "variable": {
                    "value": "attn_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_score",
                    "possible_values": [
                        [
                            "(ac + bd + ef) * self.scale",
                            "BinOp"
                        ],
                        [
                            "attn_score - 65500 * torch.einsum('ijbn->bnij', attn_mask)",
                            "BinOp"
                        ],
                        [
                            "attn_score - 1e+30 * torch.einsum('ijbn->bnij', attn_mask)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "einsum_301": {
                "variable": {
                    "value": "attn_vec",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnij,jbnd->ibnd",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_prob",
                    "possible_values": [
                        [
                            "F.softmax(attn_score, dim=3)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob)",
                            "Call"
                        ],
                        [
                            "attn_prob * torch.einsum('ijbn->bnij', head_mask)",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "einsum_311": {
                "variable": {
                    "value": "attn_out",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,hnd->ibh",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec",
                    "possible_values": [
                        [
                            "torch.einsum('bnij,jbnd->ibnd', attn_prob, v_head_h)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_h, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_h, head_mask=head_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_648": {
                "variable": {
                    "value": "self.word_embedding",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "possible_values": []
                }
            },
            "Parameter_649": {
                "variable": {
                    "value": "self.mask_emb",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1, 1, config.d_model)",
                    "possible_values": []
                }
            },
            "ModuleList_650": {
                "variable": {
                    "value": "self.layer",
                    "possible_values": []
                },
                "modules": {
                    "value": "[XLNetLayer(config) for _ in range(config.n_layer)]",
                    "possible_values": []
                }
            },
            "Dropout_651": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "possible_values": []
                }
            },
            "ones_683": {
                "variable": {
                    "value": "attn_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, qlen]",
                    "possible_values": []
                }
            },
            "triu_684": {
                "variable": {
                    "value": "mask_up",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_685": {
                "variable": {
                    "value": "attn_mask_pad",
                    "possible_values": []
                },
                "*size": {
                    "value": "[qlen, mlen]",
                    "possible_values": []
                }
            },
            "cat_686": {
                "variable": {
                    "value": "ret",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask_pad, mask_up]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "einsum_708": {
                "variable": {
                    "value": "sinusoid_inp",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,d->id",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_seq",
                    "possible_values": []
                }
            },
            "cat_709": {
                "variable": {
                    "value": "pos_emb",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(sinusoid_inp), torch.cos(sinusoid_inp)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "arange_719": {
                "variable": {
                    "value": "freq_seq",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "self.d_model",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "Linear_1004": {
                "variable": {
                    "value": "self.lm_loss",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_1015": {
                "variable": {
                    "value": "dummy_token",
                    "possible_values": []
                },
                "*size": {
                    "value": "(effective_batch_size, 1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "possible_values": []
                }
            },
            "cat_1016": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, dummy_token]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_1020": {
                "variable": {
                    "value": "perm_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "(effective_batch_size, sequence_length, sequence_length)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "possible_values": []
                }
            },
            "zeros_1026": {
                "variable": {
                    "value": "target_mapping",
                    "possible_values": []
                },
                "*size": {
                    "value": "(effective_batch_size, 1, sequence_length)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "possible_values": []
                }
            },
            "Linear_1127": {
                "variable": {
                    "value": "self.logits_proj",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "Linear_1241": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "Linear_1362": {
                "variable": {
                    "value": "self.logits_proj",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_1470": {
                "variable": {
                    "value": "self.qa_outputs",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "pointer.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "tf_weights[name]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_196": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[3], x_size[2])",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[2], x_size[3] - 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 3, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "einsum_280": {
                "variable": {
                    "value": "ef",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibnd,snd->ibns",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head + self.r_s_bias",
                    "possible_values": []
                }
            },
            "einsum_281": {
                "variable": {
                    "value": "ef",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijbs,ibns->bnij",
                    "possible_values": []
                },
                "*operands": {
                    "value": "seg_mat",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_330": {
                "variable": {
                    "value": "k_head_h",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_333": {
                "variable": {
                    "value": "v_head_h",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_336": {
                "variable": {
                    "value": "k_head_r",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "possible_values": []
                }
            },
            "einsum_340": {
                "variable": {
                    "value": "q_head_h",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "possible_values": []
                }
            },
            "einsum_355": {
                "variable": {
                    "value": "q_head_g",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*operands": {
                    "value": "g",
                    "possible_values": []
                }
            },
            "einsum_390": {
                "variable": {
                    "value": "q_head_h",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*operands": {
                    "value": "h",
                    "possible_values": []
                }
            },
            "einsum_391": {
                "variable": {
                    "value": "k_head_h",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_392": {
                "variable": {
                    "value": "v_head_h",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cat",
                    "possible_values": [
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "torch.cat([mems, h], dim=0)",
                            "Call"
                        ],
                        [
                            "h",
                            "Name"
                        ]
                    ]
                }
            },
            "einsum_395": {
                "variable": {
                    "value": "k_head_r",
                    "possible_values": []
                },
                "equation": {
                    "value": "ibh,hnd->ibnd",
                    "possible_values": []
                },
                "*operands": {
                    "value": "r",
                    "possible_values": []
                }
            },
            "tril_688": {
                "variable": {
                    "value": "mask_lo",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mask",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_689": {
                "variable": {
                    "value": "ret",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ret[:, :qlen] + mask_lo, ret[:, qlen:]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "arange_732": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "possible_values": []
                },
                "end": {
                    "value": "end",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "arange_733": {
                "variable": {
                    "value": "bwd_pos_seq",
                    "possible_values": []
                },
                "start": {
                    "value": "-beg",
                    "possible_values": []
                },
                "end": {
                    "value": "-end",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "cat_746": {
                "variable": {
                    "value": "pos_emb",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fwd_pos_emb, bwd_pos_emb]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "arange_748": {
                "variable": {
                    "value": "fwd_pos_seq",
                    "possible_values": []
                },
                "start": {
                    "value": "beg",
                    "possible_values": []
                },
                "end": {
                    "value": "end",
                    "possible_values": []
                },
                "step": {
                    "value": "-1.0",
                    "possible_values": []
                }
            },
            "one_hot_865": {
                "variable": {
                    "value": "seg_mat",
                    "possible_values": []
                },
                "tensor": {
                    "value": "seg_mat",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(token_type_ids[:, None] != cat_ids[None, :]).long()",
                            "Call"
                        ],
                        [
                            "F.one_hot(seg_mat, num_classes=2).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1070": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1277": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1408": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1520": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1651": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "softmax_1670": {
                "variable": {
                    "value": "start_log_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "possible_values": [
                        [
                            "start_logits.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "topk_1672": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "gather_1676": {
                "variable": {
                    "value": "start_states",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1684": {
                "variable": {
                    "value": "end_log_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "possible_values": [
                        [
                            "end_logits.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "topk_1686": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "einsum_1692": {
                "variable": {
                    "value": "start_states",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple((h.permute(1, 0, 2).contiguous() for hs in hidden_states for h in hs))",
                            "Call"
                        ],
                        [
                            "tuple((hs.permute(1, 0, 2).contiguous() for hs in hidden_states))",
                            "Call"
                        ],
                        [
                            "transformer_outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_169": {
                "variable": {
                    "value": "p_i.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_i",
                    "possible_values": [
                        [
                            "array[i, ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tanh_191": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "possible_values": []
                }
            },
            "arange_247": {
                "start": {
                    "value": "klen",
                    "possible_values": [
                        [
                            "mlen + qlen",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "arange_261": {
                "start": {
                    "value": "klen",
                    "possible_values": [
                        [
                            "mlen + qlen",
                            "BinOp"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "cat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "einsum_359": {
                "variable": {
                    "value": "q_head_g",
                    "possible_values": []
                },
                "equation": {
                    "value": "mbnd,mlb->lbnd",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_head_g",
                    "possible_values": [
                        [
                            "torch.einsum('ibh,hnd->ibnd', g, self.q)",
                            "Call"
                        ],
                        [
                            "torch.einsum('mbnd,mlb->lbnd', q_head_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_367": {
                "variable": {
                    "value": "attn_vec_g",
                    "possible_values": []
                },
                "equation": {
                    "value": "lbnd,mlb->mbnd",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_vec_g",
                    "possible_values": [
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "self.rel_attn_core(q_head_g, k_head_h, v_head_h, k_head_r, seg_mat=seg_mat, attn_mask=attn_mask_g, head_mask=head_mask)",
                            "Call"
                        ],
                        [
                            "torch.einsum('lbnd,mlb->mbnd', attn_vec_g, target_mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_385": {
                "variable": {
                    "value": "cat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems, h]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "pow_720": {
                "input": {
                    "value": "10000",
                    "possible_values": []
                },
                "exponent": {
                    "value": "freq_seq / self.d_model",
                    "possible_values": []
                }
            },
            "zeros_821": {
                "variable": {
                    "value": "mems_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "[data_mask.shape[0], mlen, bsz]",
                    "possible_values": []
                }
            },
            "cat_822": {
                "variable": {
                    "value": "data_mask",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mems_mask, data_mask]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_834": {
                "variable": {
                    "value": "non_tgt_mask",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros([qlen, mlen]).to(attn_mask), non_tgt_mask]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_858": {
                "variable": {
                    "value": "mem_pad",
                    "possible_values": []
                },
                "*size": {
                    "value": "[mlen, bsz]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "next(self.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_859": {
                "variable": {
                    "value": "cat_ids",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mem_pad, token_type_ids]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "MSELoss_1165": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1168": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_1659": {
                "variable": {
                    "value": "loss_fct_cls",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "einsum_298": {
                "equation": {
                    "value": "ijbn->bnij",
                    "possible_values": []
                },
                "*operands": {
                    "value": "head_mask",
                    "possible_values": [
                        [
                            "[None] * self.n_layer",
                            "BinOp"
                        ],
                        [
                            "head_mask.unsqueeze(0).unsqueeze(0).unsqueeze(0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "head_mask.expand(self.n_layer, -1, -1, -1, -1)",
                            "Call"
                        ],
                        [
                            "head_mask.to(dtype=next(self.parameters()).dtype)",
                            "Call"
                        ],
                        [
                            "head_mask.unsqueeze(1).unsqueeze(1).unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_304": {
                "equation": {
                    "value": "bnij->ijbn",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_prob",
                    "possible_values": [
                        [
                            "F.softmax(attn_score, dim=3)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn_prob)",
                            "Call"
                        ],
                        [
                            "attn_prob * torch.einsum('ijbn->bnij', head_mask)",
                            "BinOp"
                        ],
                        [
                            "(attn_prob_h, attn_prob_g)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "cat_702": {
                "tensors": {
                    "value": "[prev_mem, curr_out]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sin_709": {
                "input": {
                    "value": "sinusoid_inp",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_709": {
                "input": {
                    "value": "sinusoid_inp",
                    "possible_values": [
                        [
                            "torch.einsum('i,d->id', pos_seq, inv_freq)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_832": {
                "n": {
                    "value": "qlen",
                    "possible_values": []
                }
            },
            "einsum_288": {
                "equation": {
                    "value": "ijbn->bnij",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_mask",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_290": {
                "equation": {
                    "value": "ijbn->bnij",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn_mask",
                    "possible_values": [
                        [
                            "torch.ones([qlen, qlen])",
                            "Call"
                        ],
                        [
                            "self.create_mask(qlen, mlen)",
                            "Call"
                        ],
                        [
                            "attn_mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(attn_mask > 0).to(dtype_float)",
                            "Call"
                        ],
                        [
                            "data_mask[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "attn_mask + data_mask[:, :, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_834": {
                "*size": {
                    "value": "[qlen, mlen]",
                    "possible_values": []
                }
            },
            "pow_191": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.reshape(x_size[1], x_size[0], x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "x[1:, ...]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1] - 1, x_size[2], x_size[3])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[3], x_size[2])",
                            "Call"
                        ],
                        [
                            "x[:, :, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "x.reshape(x_size[0], x_size[1], x_size[2], x_size[3] - 1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 3, torch.arange(klen, device=x.device, dtype=torch.long))",
                            "Call"
                        ],
                        [
                            "(start_positions, end_positions, cls_index, is_impossible)",
                            "Tuple"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/optimization_tf.py": {
        "tensorflow": {
            "WarmUp_23": {
                "base_class_0": {
                    "value": "tensorflow.keras.optimizers.schedules.LearningRateSchedule",
                    "possible_values": []
                },
                "self.initial_learning_rate": {
                    "value": "initial_learning_rate",
                    "possible_values": []
                },
                "self.warmup_steps": {
                    "value": "warmup_steps",
                    "possible_values": []
                },
                "self.power": {
                    "value": "power",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.decay_schedule_fn": {
                    "value": "decay_schedule_fn",
                    "possible_values": []
                },
                "self.name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'AdamWeightDecay'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdamWeightDecay_80": {
                "base_class_0": {
                    "value": "tensorflow.keras.optimizers.Adam",
                    "possible_values": []
                },
                "self.weight_decay_rate": {
                    "value": "weight_decay_rate",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._include_in_weight_decay": {
                    "value": "include_in_weight_decay",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._exclude_from_weight_decay": {
                    "value": "exclude_from_weight_decay",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PolynomialDecay_62": {
                "variable": {
                    "value": "learning_rate_fn",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "init_lr",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "num_train_steps",
                    "possible_values": []
                },
                "end_learning_rate": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "constant_118": {
                "variable": {
                    "value": "apply_state[weight_decay_rate]",
                    "possible_values": []
                },
                "value": {
                    "value": "self.weight_decay_rate",
                    "possible_values": []
                },
                "name": {
                    "value": "adam_weight_decay_rate",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_130": {
                "variable": {
                    "value": "(grads, _)",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "possible_values": []
                }
            },
            "Variable_187": {
                "variable": {
                    "value": "self._accum_steps",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                },
                "aggregation": {
                    "value": "tf.VariableAggregation.ONLY_FIRST_REPLICA",
                    "possible_values": []
                }
            },
            "cast_38": {
                "variable": {
                    "value": "global_step_float",
                    "possible_values": []
                },
                "x": {
                    "value": "step",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "cast_39": {
                "variable": {
                    "value": "warmup_steps_float",
                    "possible_values": []
                },
                "x": {
                    "value": "self.warmup_steps",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "no_op_126": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "has_strategy_232": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_replica_context_236": {
                "variable": {
                    "value": "replica_context",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "name_scope_35": {
                "name": {
                    "value": "self.name or 'WarmUp'",
                    "possible_values": []
                }
            },
            "cond_42": {
                "pred": {
                    "value": "global_step_float < warmup_steps_float",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : warmup_learning_rate",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.decay_schedule_fn(step)",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'AdamWeightDecay'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "control_dependencies_149": {
                "control_inputs": {
                    "value": "[decay]",
                    "possible_values": []
                }
            },
            "control_dependencies_155": {
                "control_inputs": {
                    "value": "[decay]",
                    "possible_values": []
                }
            },
            "pow_41": {
                "x": {
                    "value": "warmup_percent_done",
                    "possible_values": [
                        [
                            "global_step_float / warmup_steps_float",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.power",
                    "possible_values": []
                }
            },
            "zeros_like_229": {
                "input": {
                    "value": "gradient",
                    "possible_values": [
                        [
                            "self._get_replica_gradients()",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_208": {
                "initial_value": {
                    "value": "tf.zeros_like(gradient)",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "get_strategy_238": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_like_208": {
                "input": {
                    "value": "gradient",
                    "possible_values": [
                        [
                            "self._get_replica_gradients()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/src/transformers/pipelines.py": {
        "tensorflow": {
            "device_385": {
                "device_name": {
                    "value": "'/CPU:0' if self.device == -1 else '/device:GPU:{}'.format(self.device)",
                    "possible_values": []
                }
            },
            "constant_726": {
                "value": {
                    "value": "v",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_338": {
                "type": {
                    "value": "'cpu' if device < 0 else 'cuda:{}'.format(device)",
                    "possible_values": []
                }
            },
            "set_device_389": {
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "no_grad_448": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_544": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_730": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_732": {
                "data": {
                    "value": "v",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/tokenization_utils.py": {
        "tensorflow": {
            "constant_1207": {
                "variable": {
                    "value": "encoded_inputs[input_ids]",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['input_ids']]",
                    "possible_values": []
                }
            },
            "constant_1527": {
                "variable": {
                    "value": "encoding_dict[input_ids]",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoding_dict['input_ids']]",
                    "possible_values": []
                }
            },
            "abs_1028": {
                "variable": {
                    "value": "batch_outputs[attention_mask]",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_outputs['attention_mask'] - 1",
                    "possible_values": []
                }
            },
            "constant_1210": {
                "variable": {
                    "value": "encoded_inputs[token_type_ids]",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['token_type_ids']]",
                    "possible_values": []
                }
            },
            "constant_1213": {
                "variable": {
                    "value": "encoded_inputs[attention_mask]",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoded_inputs['attention_mask']]",
                    "possible_values": []
                }
            },
            "constant_1529": {
                "variable": {
                    "value": "encoding_dict[token_type_ids]",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoding_dict['token_type_ids']]",
                    "possible_values": []
                }
            },
            "constant_1532": {
                "variable": {
                    "value": "encoding_dict[attention_mask]",
                    "possible_values": []
                },
                "value": {
                    "value": "[encoding_dict['attention_mask']]",
                    "possible_values": []
                }
            },
            "constant_1015": {
                "variable": {
                    "value": "batch_outputs[key]",
                    "possible_values": []
                },
                "value": {
                    "value": "padded_value",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "[v + [self.pad_token_id if key == 'input_ids' else 1] * (max_seq_len - len(v)) for v in padded_value]",
                            "ListComp"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "abs_1030": {
                "variable": {
                    "value": "batch_outputs[attention_mask]",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_outputs['attention_mask'] - 1",
                    "possible_values": []
                }
            },
            "tensor_1216": {
                "variable": {
                    "value": "encoded_inputs[input_ids]",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['input_ids']]",
                    "possible_values": []
                }
            },
            "tensor_1535": {
                "variable": {
                    "value": "encoding_dict[input_ids]",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoding_dict['input_ids']]",
                    "possible_values": []
                }
            },
            "tensor_1219": {
                "variable": {
                    "value": "encoded_inputs[token_type_ids]",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['token_type_ids']]",
                    "possible_values": []
                }
            },
            "tensor_1222": {
                "variable": {
                    "value": "encoded_inputs[attention_mask]",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoded_inputs['attention_mask']]",
                    "possible_values": []
                }
            },
            "tensor_1537": {
                "variable": {
                    "value": "encoding_dict[token_type_ids]",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoding_dict['token_type_ids']]",
                    "possible_values": []
                }
            },
            "tensor_1540": {
                "variable": {
                    "value": "encoding_dict[attention_mask]",
                    "possible_values": []
                },
                "data": {
                    "value": "[encoding_dict['attention_mask']]",
                    "possible_values": []
                }
            },
            "tensor_1017": {
                "variable": {
                    "value": "batch_outputs[key]",
                    "possible_values": []
                },
                "data": {
                    "value": "padded_value",
                    "possible_values": [
                        [
                            "value",
                            "Name"
                        ],
                        [
                            "[v + [self.pad_token_id if key == 'input_ids' else 1] * (max_seq_len - len(v)) for v in padded_value]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/templates/adding_a_new_model/modeling_tf_xxx.py": {
        "tensorflow": {
            "TFXxxLayer_70": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                }
            },
            "TFXxxMainLayer_92": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                }
            },
            "cast_146": {
                "variable": {
                    "value": "extended_attention_mask",
                    "possible_values": []
                },
                "x": {
                    "value": "extended_attention_mask",
                    "possible_values": [
                        [
                            "attention_mask[:, tf.newaxis, tf.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(extended_attention_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "(1.0 - extended_attention_mask) * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "Dropout_404": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Dense_405": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "possible_values": []
                }
            },
            "Dropout_459": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "rate": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Dense_460": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "classifier",
                    "possible_values": []
                }
            },
            "Dense_516": {
                "variable": {
                    "value": "self.qa_outputs",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_labels",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "get_initializer(config.initializer_range)",
                    "possible_values": []
                },
                "name": {
                    "value": "qa_outputs",
                    "possible_values": []
                }
            },
            "split_526": {
                "variable": {
                    "value": "(start_logits, end_logits)",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "self.classifier(pooled_output)",
                            "Call"
                        ],
                        [
                            "self.classifier(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.qa_outputs(sequence_output)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "squeeze_527": {
                "variable": {
                    "value": "start_logits",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "possible_values": [
                        [
                            "tf.squeeze(start_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "squeeze_528": {
                "variable": {
                    "value": "end_logits",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "possible_values": [
                        [
                            "tf.squeeze(end_logits, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "fill_129": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "dims": {
                    "value": "shape_list(input_ids)",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "fill_131": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "dims": {
                    "value": "shape_list(input_ids)",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/templates/adding_a_new_model/modeling_xxx.py": {
        "tensorflow": {
            "list_variables_66": {
                "variable": {
                    "value": "init_vars",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_71": {
                "variable": {
                    "value": "array",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "XxxLayer_139": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "pointer.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_432": {
                "variable": {
                    "value": "self.lm_head",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "possible_values": []
                }
            },
            "Dropout_514": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Linear_515": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "possible_values": []
                }
            },
            "Dropout_600": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Linear_601": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "Linear_699": {
                "variable": {
                    "value": "self.qa_outputs",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "ones_344": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_346": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_464": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_632": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_743": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_549": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_552": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/tests/test_modeling_tf_bert.py": {
        "tensorflow": {
            "tile_218": {
                "variable": {
                    "value": "multiple_choice_inputs_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_ids, 1)",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "possible_values": []
                }
            },
            "tile_219": {
                "variable": {
                    "value": "multiple_choice_input_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_mask, 1)",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "possible_values": []
                }
            },
            "tile_220": {
                "variable": {
                    "value": "multiple_choice_token_type_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(token_type_ids, 1)",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "possible_values": []
                }
            },
            "expand_dims_218": {
                "input": {
                    "value": "input_ids",
                    "possible_values": [
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "expand_dims_219": {
                "input": {
                    "value": "input_mask",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], vocab_size=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "expand_dims_220": {
                "input": {
                    "value": "token_type_ids",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.type_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/tests/test_modeling_tf_common.py": {
        "tensorflow": {
            "constant_358": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "value": {
                    "value": "values",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype if dtype is not None else tf.int32",
                    "possible_values": []
                }
            },
            "Adam_162": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "3e-05",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-08",
                    "possible_values": []
                },
                "clipnorm": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_163": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "SparseCategoricalAccuracy_164": {
                "variable": {
                    "value": "metric",
                    "possible_values": []
                },
                "name": {
                    "value": "accuracy",
                    "possible_values": []
                }
            },
            "Input_161": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "(2, 2000)",
                    "possible_values": []
                },
                "name": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "Model_183": {
                "variable": {
                    "value": "extended_model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[input_ids]",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[outputs]",
                    "possible_values": []
                }
            },
            "Input_157": {
                "batch_shape": {
                    "value": "(2, 2000)",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_input_ids",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "Input_158": {
                "batch_shape": {
                    "value": "(2, 2000)",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_input_ids",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "possible_values": []
                }
            },
            "Dense_180": {
                "units": {
                    "value": "2",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "possible_values": []
                },
                "name": {
                    "value": "outputs",
                    "possible_values": []
                }
            },
            "ones_316": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_ids.shape + [self.model_tester.embedding_size]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "possible_values": []
                }
            },
            "ones_318": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_ids.shape + [self.model_tester.hidden_size]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_130": {
                "obj": {
                    "value": "pt_model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_checkpoint_path",
                    "possible_values": [
                        [
                            "os.path.join(tmpdirname, 'pt_model.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_108": {
                "ndarray": {
                    "value": "key.numpy()",
                    "possible_values": []
                }
            },
            "from_numpy_140": {
                "ndarray": {
                    "value": "key.numpy()",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/tests/test_modeling_tf_gpt2.py": {
        "tensorflow": {
            "tile_178": {
                "variable": {
                    "value": "multiple_choice_inputs_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_ids, 1)",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "possible_values": []
                }
            },
            "tile_179": {
                "variable": {
                    "value": "multiple_choice_input_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_mask, 1)",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "possible_values": []
                }
            },
            "tile_180": {
                "variable": {
                    "value": "multiple_choice_token_type_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(token_type_ids, 1)",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "possible_values": []
                }
            },
            "expand_dims_178": {
                "input": {
                    "value": "input_ids",
                    "possible_values": [
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "expand_dims_179": {
                "input": {
                    "value": "input_mask",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], vocab_size=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "expand_dims_180": {
                "input": {
                    "value": "token_type_ids",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.type_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/tests/test_modeling_tf_openai_gpt.py": {
        "tensorflow": {
            "tile_179": {
                "variable": {
                    "value": "multiple_choice_inputs_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_ids, 1)",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "possible_values": []
                }
            },
            "tile_180": {
                "variable": {
                    "value": "multiple_choice_input_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(input_mask, 1)",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "possible_values": []
                }
            },
            "tile_181": {
                "variable": {
                    "value": "multiple_choice_token_type_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(token_type_ids, 1)",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, self.num_choices, 1)",
                    "possible_values": []
                }
            },
            "expand_dims_179": {
                "input": {
                    "value": "input_ids",
                    "possible_values": [
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "expand_dims_180": {
                "input": {
                    "value": "input_mask",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], vocab_size=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "expand_dims_181": {
                "input": {
                    "value": "token_type_ids",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ids_tensor([self.batch_size, self.seq_length], self.type_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/tests/test_modeling_tf_roberta.py": {
        "tensorflow": {
            "constant_215": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "possible_values": []
                }
            },
            "constant_220": {
                "variable": {
                    "value": "expected_slice",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[33.8843, -4.3107, 22.7779], [4.6533, -2.8099, 13.6252], [1.8222, -3.6898, 8.86]]]",
                    "possible_values": []
                }
            },
            "constant_229": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "possible_values": []
                }
            },
            "constant_232": {
                "variable": {
                    "value": "expected_slice",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[-0.0231, 0.0782, 0.0074], [-0.1854, 0.0539, -0.0174], [0.0548, 0.0799, 0.1687]]]",
                    "possible_values": []
                }
            },
            "constant_241": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "possible_values": []
                }
            },
            "constant_245": {
                "variable": {
                    "value": "expected_tensor",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-0.9469, 0.3913, 0.5118]]",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/tests/test_modeling_tf_transfo_xl.py": {
        "tensorflow": {
            "set_seed_112": {
                "seed": {
                    "value": "self.seed",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/tests/test_modeling_tf_xlm.py": {
        "tensorflow": {}
    },
    "third_party/transformers/tests/test_modeling_tf_xlnet.py": {
        "tensorflow": {
            "zeros_111": {
                "variable": {
                    "value": "perm_mask",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.seq_length + 1, self.seq_length)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "ones_112": {
                "variable": {
                    "value": "perm_mask_last",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, self.seq_length + 1, 1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "concat_113": {
                "variable": {
                    "value": "perm_mask",
                    "possible_values": []
                },
                "values": {
                    "value": "[perm_mask, perm_mask_last]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "target_mapping",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, 1, self.seq_length)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "ones_116": {
                "variable": {
                    "value": "target_mapping_last",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.batch_size, 1, 1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "concat_117": {
                "variable": {
                    "value": "target_mapping",
                    "possible_values": []
                },
                "values": {
                    "value": "[target_mapping, target_mapping_last]",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "set_seed_160": {
                "seed": {
                    "value": "self.seed",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/tests/test_optimization_tf.py": {
        "tensorflow": {
            "list_physical_devices_39": {
                "variable": {
                    "value": "physical_devices",
                    "possible_values": []
                },
                "device_type": {
                    "value": "CPU",
                    "possible_values": []
                }
            },
            "list_logical_devices_45": {
                "variable": {
                    "value": "devices",
                    "possible_values": []
                },
                "device_type": {
                    "value": "CPU",
                    "possible_values": []
                }
            },
            "MirroredStrategy_46": {
                "variable": {
                    "value": "strategy",
                    "possible_values": []
                },
                "devices": {
                    "value": "[device.name for device in devices]",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "variable": {
                    "value": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[4.0, 3.0]",
                    "possible_values": []
                }
            },
            "Variable_52": {
                "variable": {
                    "value": "gradient_placeholder",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[0.0, 0.0]",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "constant_24": {
                "value": {
                    "value": "[1.0, 2.0]",
                    "possible_values": []
                }
            },
            "constant_25": {
                "value": {
                    "value": "[-2.0, 1.0]",
                    "possible_values": []
                }
            },
            "constant_26": {
                "value": {
                    "value": "[-1.0, 2.0]",
                    "possible_values": []
                }
            },
            "constant_28": {
                "value": {
                    "value": "[2.0, 2.0]",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/evaluate_retrieval.py": {
        "torch": {
            "device_483": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_484": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_220": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_274": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_200": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_263": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_483": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/roberta.py": {
        "torch": {
            "RobertaLMHead_298": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_303": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Linear_306": {
                    "variable": {
                        "value": "self.decoder",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.vocab_size",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Parameter_307": {
                    "variable": {
                        "value": "self.bias",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(config.vocab_size)",
                        "possible_values": []
                    }
                }
            },
            "RobertaClassificationHead_621": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_626": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Dropout_627": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                },
                "Linear_628": {
                    "variable": {
                        "value": "self.out_proj",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.num_labels",
                        "possible_values": []
                    }
                }
            },
            "Embedding_50": {
                "variable": {
                    "value": "self.word_embeddings",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "possible_values": []
                }
            },
            "Embedding_51": {
                "variable": {
                    "value": "self.position_embeddings",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "possible_values": []
                }
            },
            "arange_89": {
                "variable": {
                    "value": "position_ids",
                    "possible_values": []
                },
                "start": {
                    "value": "self.padding_idx + 1",
                    "possible_values": []
                },
                "end": {
                    "value": "sequence_length + self.padding_idx + 1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs_embeds.device",
                    "possible_values": []
                }
            },
            "Dropout_487": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Linear_488": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_575": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Linear_576": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "tanh_634": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "gelu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x) + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_688": {
                "variable": {
                    "value": "self.qa_outputs",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_291": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_524": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_607": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_730": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_76": {
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "x.ne(self.padding_idx).long()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_307": {
                "*size": {
                    "value": "config.vocab_size",
                    "possible_values": []
                }
            },
            "MSELoss_393": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_396": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/run_classify.py": {
        "torch": {
            "DataLoader_104": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False, language=args.train_lang, lang2id=lang2id, bpe_drop=args.bpe_dropout)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, split=args.train_split, language=args.train_language, lang2id=lang2id, evaluate=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ],
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "tensor_487": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_488": {
                "variable": {
                    "value": "all_attention_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_489": {
                "variable": {
                    "value": "all_token_type_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_574": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_575": {
                "variable": {
                    "value": "all_attention_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_576": {
                "variable": {
                    "value": "all_token_type_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "manual_seed_92": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataParallel_143": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint, config=config, cache_dir=args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_147": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint, config=config, cache_dir=args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "SequentialSampler_335": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, split=split, language=language, lang2id=lang2id, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_336": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, split=split, language=language, lang2id=lang2id, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "load_448": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}{}_drop{}'.format(split, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(language), lc, str(bpe_dropout)))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}{}'.format(split, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(language), lc))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}{}_drop{}'.format(split, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(language), lc, str(bpe_drop)))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}{}'.format(split, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(language), lc))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_491": {
                "variable": {
                    "value": "all_labels",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_496": {
                "variable": {
                    "value": "all_langs",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.langs for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_497": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "TensorDataset_499": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "tensor_578": {
                "variable": {
                    "value": "all_labels",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_583": {
                "variable": {
                    "value": "all_langs",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.langs for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_584": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "TensorDataset_586": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "device_771": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_772": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_775": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_94": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_103": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False, language=args.train_lang, lang2id=lang2id, bpe_drop=args.bpe_dropout)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, split=args.train_split, language=args.train_language, lang2id=lang2id, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_103": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False, language=args.train_lang, lang2id=lang2id, bpe_drop=args.bpe_dropout)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, split=args.train_split, language=args.train_language, lang2id=lang2id, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_193": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False, language=args.train_lang, lang2id=lang2id, bpe_drop=args.bpe_dropout)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, split=args.train_split, language=args.train_language, lang2id=lang2id, evaluate=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ],
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "DataParallel_340": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint, config=config, cache_dir=args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_774": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "save_869": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "load_131": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "load_132": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "save_479": {
                "obj": {
                    "value": "features",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=False, pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=0, lang2id=lang2id, bpe_dropout=bpe_dropout)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=False, pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=0, lang2id=lang2id, bpe_dropout=bpe_drop)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}{}_drop{}'.format(split, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(language), lc, str(bpe_dropout)))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}{}'.format(split, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(language), lc))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}{}_drop{}'.format(split, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(language), lc, str(bpe_drop)))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}{}'.format(split, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(language), lc))",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_192": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False, language=args.train_lang, lang2id=lang2id, bpe_drop=args.bpe_dropout)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, split=args.train_split, language=args.train_language, lang2id=lang2id, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_192": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False, language=args.train_lang, lang2id=lang2id, bpe_drop=args.bpe_dropout)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, split=args.train_split, language=args.train_language, lang2id=lang2id, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_355": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clip_grad_norm__233": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__235": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "is_available_771": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_301": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_304": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "save_305": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "save_284": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_287": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "save_288": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/run_mv_classify.py": {
        "torch": {
            "ConcatDataset_96": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.datasets": {
                    "value": "datasets",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "concat_train_dataset",
                    "possible_values": [
                        [
                            "ConcatDataset(train_dataset, dropped_train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(concat_train_dataset) if args.local_rank == -1 else DistributedSampler(concat_train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "tensor_519": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_520": {
                "variable": {
                    "value": "all_attention_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_521": {
                "variable": {
                    "value": "all_token_type_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_605": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_606": {
                "variable": {
                    "value": "all_attention_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_607": {
                "variable": {
                    "value": "all_token_type_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "manual_seed_91": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "SummaryWriter_110": {
                "variable": {
                    "value": "tb_writer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataParallel_155": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint, config=config, cache_dir=args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_159": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint, config=config, cache_dir=args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "SequentialSampler_369": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, split=split, language=language, lang2id=lang2id, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_370": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, split=split, language=language, lang2id=lang2id, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "load_480": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}{}_drop{}'.format(split, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(language), lc, str(bpe_drop)))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}{}'.format(split, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(language), lc))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}{}_drop{}'.format(split, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(language), lc, str(bpe_drop)))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}{}'.format(split, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(language), lc))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_523": {
                "variable": {
                    "value": "all_labels",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_528": {
                "variable": {
                    "value": "all_langs",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.langs for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_529": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "TensorDataset_531": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "tensor_609": {
                "variable": {
                    "value": "all_labels",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_614": {
                "variable": {
                    "value": "all_langs",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.langs for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_615": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "TensorDataset_617": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "device_804": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_805": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_808": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_93": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_115": {
                "data_source": {
                    "value": "concat_train_dataset",
                    "possible_values": [
                        [
                            "ConcatDataset(train_dataset, dropped_train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_115": {
                "dataset": {
                    "value": "concat_train_dataset",
                    "possible_values": [
                        [
                            "ConcatDataset(train_dataset, dropped_train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_374": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint, config=config, cache_dir=args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_807": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "save_903": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "load_143": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "load_144": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "softmax_241": {
                "variable": {
                    "value": "prob",
                    "possible_values": []
                },
                "input": {
                    "value": "logits / args.kl_t",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_242": {
                "variable": {
                    "value": "dropped_log_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "dropped_logits",
                    "possible_values": [
                        [
                            "dropped_outputs[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "KLDivLoss_247": {
                "variable": {
                    "value": "kl_loss",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "possible_values": []
                }
            },
            "save_511": {
                "obj": {
                    "value": "features",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=False, pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=0, lang2id=lang2id, bpe_dropout=bpe_drop)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=False, pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=0, lang2id=lang2id, bpe_dropout=bpe_drop)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}{}_drop{}'.format(split, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(language), lc, str(bpe_drop)))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}{}'.format(split, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(language), lc))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}{}_drop{}'.format(split, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(language), lc, str(bpe_drop)))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}{}'.format(split, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(language), lc))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_389": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clip_grad_norm__267": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__269": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "is_available_804": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_335": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_338": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "save_339": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "save_318": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_321": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "save_322": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/run_mv_squad.py": {
        "torch": {
            "ConcatDataset_105": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.datasets": {
                    "value": "datasets",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "concat_train_dataset",
                    "possible_values": [
                        [
                            "ConcatDataset(train_dataset, dropped_train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(concat_train_dataset) if args.local_rank == -1 else DistributedSampler(concat_train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "SequentialSampler_358": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "possible_values": []
                }
            },
            "DataLoader_359": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "manual_seed_96": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "SummaryWriter_119": {
                "variable": {
                    "value": "tb_writer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataParallel_164": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir, force_download=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, force_download=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, force_download=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_168": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir, force_download=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, force_download=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, force_download=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_363": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir, force_download=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, force_download=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, force_download=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_512": {
                "variable": {
                    "value": "features_and_dataset",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}_{}_bped{}'.format('dev' if evaluate else 'train', list(filter(None, model_name.split('/'))).pop(), str(args.max_seq_length), str(language), str(bpe_dropout)))",
                            "Call"
                        ],
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, model_name.split('/'))).pop(), str(args.max_seq_length), str(language)))",
                            "Call"
                        ],
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}_{}_bped{}'.format('dev' if evaluate else 'train', list(filter(None, model_name.split('/'))).pop(), str(args.max_seq_length), str(language), str(bpe_dropout)))",
                            "Call"
                        ],
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, model_name.split('/'))).pop(), str(args.max_seq_length), str(language)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_860": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_861": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_864": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_98": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_123": {
                "data_source": {
                    "value": "concat_train_dataset",
                    "possible_values": [
                        [
                            "ConcatDataset(train_dataset, dropped_train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_123": {
                "dataset": {
                    "value": "concat_train_dataset",
                    "possible_values": [
                        [
                            "ConcatDataset(train_dataset, dropped_train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_863": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "save_958": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "load_151": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "load_152": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "softmax_270": {
                "variable": {
                    "value": "start_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits / args.kl_t",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_271": {
                "variable": {
                    "value": "end_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits / args.kl_t",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_272": {
                "variable": {
                    "value": "dropped_start_log_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "dropped_start_logits",
                    "possible_values": [
                        [
                            "dropped_outputs[-2]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_273": {
                "variable": {
                    "value": "dropped_end_log_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "dropped_end_logits",
                    "possible_values": [
                        [
                            "dropped_outputs[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "KLDivLoss_274": {
                "variable": {
                    "value": "kl_loss",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "possible_values": []
                }
            },
            "no_grad_377": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_550": {
                "obj": {
                    "value": "{'features': features, 'dataset': dataset}",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}_{}_bped{}'.format('dev' if evaluate else 'train', list(filter(None, model_name.split('/'))).pop(), str(args.max_seq_length), str(language), str(bpe_dropout)))",
                            "Call"
                        ],
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, model_name.split('/'))).pop(), str(args.max_seq_length), str(language)))",
                            "Call"
                        ],
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}_{}_bped{}'.format('dev' if evaluate else 'train', list(filter(None, model_name.split('/'))).pop(), str(args.max_seq_length), str(language), str(bpe_dropout)))",
                            "Call"
                        ],
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, model_name.split('/'))).pop(), str(args.max_seq_length), str(language)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__298": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__300": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "save_328": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_331": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "save_332": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "is_available_860": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/run_mv_tag.py": {
        "torch": {
            "ConcatDataset_79": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.datasets": {
                    "value": "datasets",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "concat_train_dataset",
                    "possible_values": [
                        [
                            "ConcatDataset(train_dataset, dropped_train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(concat_train_dataset) if args.local_rank == -1 else DistributedSampler(concat_train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "DataLoader_302": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode, lang=lang, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "tensor_432": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_433": {
                "variable": {
                    "value": "all_input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_434": {
                "variable": {
                    "value": "all_segment_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_435": {
                "variable": {
                    "value": "all_label_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_499": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_500": {
                "variable": {
                    "value": "all_input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_501": {
                "variable": {
                    "value": "all_segment_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_502": {
                "variable": {
                    "value": "all_label_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_877": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_878": {
                "variable": {
                    "value": "all_input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_879": {
                "variable": {
                    "value": "all_segment_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_880": {
                "variable": {
                    "value": "all_label_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "manual_seed_75": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataParallel_125": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint, config=config, cache_dir=args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_129": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint, config=config, cache_dir=args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_306": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint, config=config, cache_dir=args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_394": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_drop{}'.format(mode, lang, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), bpe_drop))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format(mode, lang, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_437": {
                "variable": {
                    "value": "all_langs",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.langs for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_439": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "TensorDataset_441": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "load_461": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_drop{}'.format(mode, lang, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), bpe_drop))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format(mode, lang, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_504": {
                "variable": {
                    "value": "all_langs",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.langs for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_506": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "TensorDataset_508": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "device_633": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_634": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_638": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "tensor_882": {
                "variable": {
                    "value": "all_langs",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.langs for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_884": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "TensorDataset_886": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "manual_seed_all_77": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_98": {
                "data_source": {
                    "value": "concat_train_dataset",
                    "possible_values": [
                        [
                            "ConcatDataset(train_dataset, dropped_train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_98": {
                "dataset": {
                    "value": "concat_train_dataset",
                    "possible_values": [
                        [
                            "ConcatDataset(train_dataset, dropped_train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_301": {
                "data_source": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode, lang=lang, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_301": {
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode, lang=lang, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_637": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_660": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_720": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "softmax_198": {
                "variable": {
                    "value": "prob",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[kept_label_mask] / args.kl_t",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_199": {
                "variable": {
                    "value": "dropped_log_prob",
                    "possible_values": []
                },
                "input": {
                    "value": "dropped_logits[dropped_kept_label_mask]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "KLDivLoss_204": {
                "variable": {
                    "value": "kl_loss",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "possible_values": []
                }
            },
            "no_grad_320": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_419": {
                "obj": {
                    "value": "features",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "features[:few_shot]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "features[:few_shot]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_drop{}'.format(mode, lang, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), bpe_drop))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format(mode, lang, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_486": {
                "obj": {
                    "value": "features",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "features[:few_shot]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "features[:few_shot]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_drop{}'.format(mode, lang, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), bpe_drop))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format(mode, lang, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__224": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__226": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "is_available_633": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_280": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_258": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/run_retrieval_qa.py": {
        "torch": {
            "DataLoader_140": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False, language=args.train_lang, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "SequentialSampler_334": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "possible_values": []
                }
            },
            "DataLoader_335": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "matmul_108": {
                "variable": {
                    "value": "similarity",
                    "possible_values": []
                },
                "input": {
                    "value": "a_encodings",
                    "possible_values": [
                        [
                            "self.normalized_cls_token(outputs_a[1])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(b_encodings, 0, 1)",
                    "possible_values": []
                }
            },
            "arange_112": {
                "variable": {
                    "value": "labels",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "list(a_encodings.size())[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "logits.device",
                    "possible_values": []
                }
            },
            "manual_seed_124": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "SummaryWriter_136": {
                "variable": {
                    "value": "tb_writer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataParallel_180": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir, force_download=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, force_download=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_184": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir, force_download=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, force_download=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_339": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir, force_download=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, force_download=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_417": {
                "variable": {
                    "value": "features_and_dataset",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_retrieval_squad_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(language)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_647": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_648": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_651": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_126": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_139": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False, language=args.train_lang, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_139": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False, language=args.train_lang, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_650": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "save_744": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "normalize_71": {
                "input": {
                    "value": "cls_token",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_108": {
                "input": {
                    "value": "b_encodings",
                    "possible_values": [
                        [
                            "self.normalized_cls_token(outputs_b[1])",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_113": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_167": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "load_168": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "no_grad_354": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_444": {
                "obj": {
                    "value": "{'features': features, 'dataset': dataset}",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_retrieval_squad_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(language)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__274": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__276": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "save_304": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_307": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "save_308": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "is_available_647": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/run_squad.py": {
        "torch": {
            "DataLoader_112": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False, output_examples=False, language=args.train_lang, lang2id=lang2id, bpe_dropout=args.bpe_dropout)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False, language=args.train_lang, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ],
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "SequentialSampler_310": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "possible_values": []
                }
            },
            "DataLoader_311": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "manual_seed_96": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataParallel_152": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir, force_download=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, force_download=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, force_download=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_156": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir, force_download=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, force_download=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, force_download=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_315": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir, force_download=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, force_download=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, force_download=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_466": {
                "variable": {
                    "value": "features_and_dataset",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}_{}_bped{}'.format('dev' if evaluate else 'train', list(filter(None, model_name.split('/'))).pop(), str(args.max_seq_length), str(language), str(bpe_dropout)))",
                            "Call"
                        ],
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, model_name.split('/'))).pop(), str(args.max_seq_length), str(language)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_738": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_739": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_742": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_98": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_111": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False, output_examples=False, language=args.train_lang, lang2id=lang2id, bpe_dropout=args.bpe_dropout)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False, language=args.train_lang, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_111": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False, output_examples=False, language=args.train_lang, lang2id=lang2id, bpe_dropout=args.bpe_dropout)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False, language=args.train_lang, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_206": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False, output_examples=False, language=args.train_lang, lang2id=lang2id, bpe_dropout=args.bpe_dropout)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False, language=args.train_lang, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ],
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "set_device_741": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "save_835": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "load_139": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "load_140": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "no_grad_329": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_504": {
                "obj": {
                    "value": "{'features': features, 'dataset': dataset}",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}_{}_bped{}'.format('dev' if evaluate else 'train', list(filter(None, model_name.split('/'))).pop(), str(args.max_seq_length), str(language), str(bpe_dropout)))",
                            "Call"
                        ],
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, model_name.split('/'))).pop(), str(args.max_seq_length), str(language)))",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_205": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False, output_examples=False, language=args.train_lang, lang2id=lang2id, bpe_dropout=args.bpe_dropout)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False, language=args.train_lang, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_205": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_examples(args, tokenizer, evaluate=False, output_examples=False, language=args.train_lang, lang2id=lang2id, bpe_dropout=args.bpe_dropout)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False, language=args.train_lang, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__250": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__252": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "save_280": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_283": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "save_284": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "is_available_738": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/run_tag.py": {
        "torch": {
            "DataLoader_88": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode='train', lang=args.train_langs, lang2id=lang2id, few_shot=args.few_shot)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "DataLoader_257": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode, lang=lang, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "tensor_388": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_389": {
                "variable": {
                    "value": "all_input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_390": {
                "variable": {
                    "value": "all_segment_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_391": {
                "variable": {
                    "value": "all_label_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_443": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_444": {
                "variable": {
                    "value": "all_input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_445": {
                "variable": {
                    "value": "all_segment_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_446": {
                "variable": {
                    "value": "all_label_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "DataParallel_115": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint, config=config, cache_dir=args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_119": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint, config=config, cache_dir=args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_261": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.init_checkpoint, config=config, cache_dir=args.init_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(best_checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_350": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_drop{}'.format(mode, lang, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), bpe_dropout))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format(mode, lang, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_393": {
                "variable": {
                    "value": "all_langs",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.langs for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_395": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "TensorDataset_397": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "tensor_448": {
                "variable": {
                    "value": "all_langs",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.langs for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_450": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "TensorDataset_452": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "device_575": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_576": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_580": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_78": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_87": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode='train', lang=args.train_langs, lang2id=lang2id, few_shot=args.few_shot)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_87": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode='train', lang=args.train_langs, lang2id=lang2id, few_shot=args.few_shot)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_256": {
                "data_source": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode, lang=lang, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_256": {
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode, lang=lang, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_579": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_602": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_661": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "no_grad_275": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_375": {
                "obj": {
                    "value": "features",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "features[:few_shot]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "features[:few_shot]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_drop{}'.format(mode, lang, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), bpe_dropout))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format(mode, lang, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__179": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__181": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "is_available_575": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_235": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_213": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/contrib/run_camembert.py": {
        "torch": {
            "tensor_10": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "tokenizer.encode(masked_input, add_special_tokens=True)",
                    "possible_values": []
                }
            },
            "unsqueeze_10": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/contrib/run_openai_gpt.py": {
        "torch": {
            "device_160": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "device_count_161": {
                "variable": {
                    "value": "n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "TensorDataset_209": {
                "variable": {
                    "value": "train_data",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*train_tensor_dataset",
                    "possible_values": []
                }
            },
            "RandomSampler_210": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_data",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensor_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_211": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "possible_values": [
                        [
                            "TensorDataset(*train_tensor_dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "TensorDataset_213": {
                "variable": {
                    "value": "eval_data",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "*eval_tensor_dataset",
                    "possible_values": []
                }
            },
            "SequentialSampler_214": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_data",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensor_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "possible_values": [
                        [
                            "TensorDataset(*eval_tensor_dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "manual_seed_157": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "manual_seed_all_158": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "save_271": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_160": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_287": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "data": {
                    "value": "t",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/contrib/run_swag.py": {
        "torch": {
            "tensor_266": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_ids')",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_267": {
                "variable": {
                    "value": "all_input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_mask')",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_268": {
                "variable": {
                    "value": "all_segment_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'segment_ids')",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_269": {
                "variable": {
                    "value": "all_label",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "DataLoader_288": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "DataLoader_430": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset) if args.local_rank == -1 else DistributedSampler(dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "manual_seed_231": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "load_252": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_272": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "TensorDataset_274": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "SummaryWriter_284": {
                "variable": {
                    "value": "tb_writer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataParallel_318": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_322": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "device_624": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_625": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_628": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_233": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_287": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_287": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_429": {
                "data_source": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_429": {
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_627": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "save_694": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "features",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, args.max_seq_length, not evaluate)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_443": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clip_grad_norm__371": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__374": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "save_405": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "is_available_624": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/contrib/run_transfo_xl.py": {
        "torch": {
            "device_68": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/distillation/distiller.py": {
        "torch": {
            "DataLoader_70": {
                "variable": {
                    "value": "self.dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "sampler",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "GroupedBatchSampler(sampler=sampler, group_ids=groups, batch_size=params.batch_size)",
                            "Call"
                        ],
                        [
                            "BatchSampler(sampler=sampler, batch_size=params.batch_size, drop_last=False)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.batch_sequences",
                    "possible_values": []
                }
            },
            "KLDivLoss_111": {
                "variable": {
                    "value": "self.ce_loss_fct",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_112": {
                "variable": {
                    "value": "self.lm_loss_fct",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "possible_values": []
                }
            },
            "AdamW_145": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "optimizer_grouped_parameters",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in student.named_parameters() if not any((nd in n for nd in no_decay)) and p.requires_grad], 'weight_decay': params.weight_decay}, {'params': [p for (n, p) in student.named_parameters() if any((nd in n for nd in no_decay)) and p.requires_grad], 'weight_decay': 0.0}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "params.learning_rate",
                    "possible_values": []
                },
                "eps": {
                    "value": "params.adam_epsilon",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "possible_values": []
                }
            },
            "multinomial_216": {
                "variable": {
                    "value": "tgt_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "x_prob / x_prob.sum()",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_tgt",
                    "possible_values": [
                        [
                            "math.ceil(self.mlm_mask_prop * lengths.sum().item())",
                            "Call"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "pred_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs * max_seq_len",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "possible_values": []
                },
                "device": {
                    "value": "token_ids.device",
                    "possible_values": []
                }
            },
            "multinomial_239": {
                "variable": {
                    "value": "probs",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred_probs",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "len(_token_ids_real)",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "masked_select_407": {
                "variable": {
                    "value": "s_logits_slct",
                    "possible_values": []
                },
                "input": {
                    "value": "s_logits",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "(lm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_hidden_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_409": {
                "variable": {
                    "value": "t_logits_slct",
                    "possible_values": []
                },
                "input": {
                    "value": "t_logits",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "(lm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_hidden_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_60": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "possible_values": []
                }
            },
            "DistributedSampler_62": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                }
            },
            "BatchSampler_68": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "GroupedBatchSampler(sampler=sampler, group_ids=groups, batch_size=params.batch_size)",
                            "Call"
                        ],
                        [
                            "BatchSampler(sampler=sampler, batch_size=params.batch_size, drop_last=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "params.batch_size",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "MSELoss_114": {
                "variable": {
                    "value": "self.mse_loss_fct",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "possible_values": []
                }
            },
            "CosineEmbeddingLoss_116": {
                "variable": {
                    "value": "self.cosine_loss_fct",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "possible_values": []
                }
            },
            "SummaryWriter_185": {
                "variable": {
                    "value": "self.tensorboard",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(self.dump_path, 'log', 'train')",
                    "possible_values": []
                }
            },
            "zeros_322": {
                "variable": {
                    "value": "padding_tensor",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs2",
                    "possible_values": [
                        [
                            "8 * (bs1 // 8)",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "pad",
                    "possible_values": [
                        [
                            "8 - ml1 % 8",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, padding_tensor]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "masked_select_443": {
                "variable": {
                    "value": "s_hidden_states_slct",
                    "possible_values": []
                },
                "input": {
                    "value": "s_hidden_states",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "(lm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_hidden_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "masked_select_445": {
                "variable": {
                    "value": "t_hidden_states_slct",
                    "possible_values": []
                },
                "input": {
                    "value": "t_hidden_states",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "(lm_labels > -1).unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_logits)",
                            "Call"
                        ],
                        [
                            "attention_mask.unsqueeze(-1).expand_as(s_hidden_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_603": {
                "obj": {
                    "value": "state_dict",
                    "possible_values": [
                        [
                            "mdl_to_save.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.dump_path, checkpoint_name)",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_170": {
                "variable": {
                    "value": "self.student",
                    "possible_values": []
                },
                "module": {
                    "value": "self.student",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_175": {
                "variable": {
                    "value": "self.student",
                    "possible_values": []
                },
                "module": {
                    "value": "self.student",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[params.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "params.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "arange_209": {
                "start": {
                    "value": "token_ids.size(1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "possible_values": []
                }
            },
            "arange_274": {
                "start": {
                    "value": "token_ids.size(1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "possible_values": []
                }
            },
            "randperm_306": {
                "n": {
                    "value": "bs1",
                    "possible_values": [
                        [
                            "len(lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_387": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_395": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "log_softmax_415": {
                "input": {
                    "value": "s_logits_slct / self.temperature",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "softmax_416": {
                "input": {
                    "value": "t_logits_slct / self.temperature",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "clip_grad_norm__495": {
                "parameters": {
                    "value": "amp.master_params(self.optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.params.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__497": {
                "parameters": {
                    "value": "self.student.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.params.max_grad_norm",
                    "possible_values": []
                }
            },
            "nonzero_232": {
                "input": {
                    "value": "pred_mask",
                    "possible_values": [
                        [
                            "torch.zeros(bs * max_seq_len, dtype=torch.bool, device=token_ids.device)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(bs, max_seq_len)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(-1)",
                            "Call"
                        ],
                        [
                            "pred_mask.view(bs, max_seq_len)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/examples/distillation/grouped_batch_sampler.py": {
        "torch": {
            "GroupedBatchSampler_45": {
                "base_class_0": {
                    "value": "torch.utils.data.BatchSampler",
                    "possible_values": []
                },
                "self.sampler": {
                    "value": "sampler",
                    "possible_values": []
                },
                "self.group_ids": {
                    "value": "group_ids",
                    "possible_values": []
                },
                "self.batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/distillation/lm_seqs_dataset.py": {
        "torch": {
            "LmSeqsDataset_25": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.params": {
                    "value": "params",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "tk_t",
                    "possible_values": []
                },
                "data": {
                    "value": "tk_",
                    "possible_values": [
                        [
                            "[list(t.astype(int)) + [pad_idx] * (max_seq_len_ - len(t)) for t in token_ids]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "lg_t",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "possible_values": [
                        [
                            "[t[1] for t in batch]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/examples/distillation/run_squad_w_distillation.py": {
        "torch": {
            "DataLoader_98": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "SequentialSampler_316": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "possible_values": []
                }
            },
            "DataLoader_317": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "manual_seed_82": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "SummaryWriter_94": {
                "variable": {
                    "value": "tb_writer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataParallel_138": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_142": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_321": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_443": {
                "variable": {
                    "value": "features_and_dataset",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_distillation_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_718": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_719": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_722": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_84": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_97": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_97": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_721": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "save_825": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "load_125": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "load_126": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "KLDivLoss_229": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "possible_values": []
                }
            },
            "no_grad_335": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_477": {
                "obj": {
                    "value": "{'features': features, 'dataset': dataset, 'examples': examples}",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_distillation_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_220": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clip_grad_norm__256": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__258": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "save_287": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_290": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "save_291": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "is_available_718": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "log_softmax_231": {
                "input": {
                    "value": "start_logits_stu / args.temperature",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "softmax_232": {
                "input": {
                    "value": "start_logits_tea / args.temperature",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "log_softmax_235": {
                "input": {
                    "value": "end_logits_stu / args.temperature",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "softmax_236": {
                "input": {
                    "value": "end_logits_tea / args.temperature",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/distillation/scripts/extract.py": {
        "torch": {
            "save_102": {
                "obj": {
                    "value": "compressed_sd",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.dump_checkpoint",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/distillation/scripts/extract_distilbert.py": {
        "torch": {
            "save_92": {
                "obj": {
                    "value": "compressed_sd",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.dump_checkpoint",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/distillation/train.py": {
        "torch": {
            "from_numpy_271": {
                "variable": {
                    "value": "token_probs",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "token_probs",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "np.maximum(counts, 1) ** (-args.mlm_smoothing)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(token_probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_313": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/distillation/utils.py": {
        "torch": {
            "is_available_62": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "set_device_115": {
                "device": {
                    "value": "params.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_130": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "manual_seed_all_132": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/hans/test_hans.py": {
        "torch": {
            "DataLoader_101": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "tensor_356": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_357": {
                "variable": {
                    "value": "all_attention_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_358": {
                "variable": {
                    "value": "all_token_type_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_363": {
                "variable": {
                    "value": "all_pair_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[int(f.pairID) for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_365": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "manual_seed_89": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "SummaryWriter_97": {
                "variable": {
                    "value": "tb_writer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataParallel_132": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_136": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "SequentialSampler_254": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "possible_values": []
                }
            },
            "DataLoader_255": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "load_329": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_360": {
                "variable": {
                    "value": "all_labels",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "device_522": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_523": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_526": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_91": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_100": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": []
                }
            },
            "DistributedSampler_100": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": []
                }
            },
            "DataParallel_259": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_362": {
                "variable": {
                    "value": "all_labels",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "set_device_525": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "save_611": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_350": {
                "obj": {
                    "value": "features",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_273": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clip_grad_norm__186": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__188": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "save_224": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "is_available_522": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/mm-imdb/utils_mmimdb.py": {
        "torch": {
            "ImageEncoder_32": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_37": {
                    "variable": {
                        "value": "self.model",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*modules",
                        "possible_values": []
                    }
                },
                "AdaptiveAvgPool2d_38": {
                    "variable": {
                        "value": "self.pool",
                        "possible_values": []
                    },
                    "output_size": {
                        "value": "POOLING_BREAKDOWN[args.num_image_embeds]",
                        "possible_values": []
                    }
                }
            },
            "JsonlDataset_48": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.tokenizer": {
                    "value": "tokenizer",
                    "possible_values": []
                },
                "self.labels": {
                    "value": "labels",
                    "possible_values": []
                },
                "self.max_seq_length": {
                    "value": "max_seq_length",
                    "possible_values": []
                },
                "self.transforms": {
                    "value": "transforms",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "mask_tensor",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "possible_values": []
                },
                "out": {
                    "value": "max_seq_len",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "text_tensor",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "possible_values": []
                },
                "out": {
                    "value": "max_seq_len",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "stack_99": {
                "variable": {
                    "value": "img_tensor",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row['image'] for row in batch]",
                    "possible_values": []
                }
            },
            "stack_100": {
                "variable": {
                    "value": "tgt_tensor",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row['label'] for row in batch]",
                    "possible_values": []
                }
            },
            "stack_101": {
                "variable": {
                    "value": "img_start_token",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row['image_start_token'] for row in batch]",
                    "possible_values": []
                }
            },
            "stack_102": {
                "variable": {
                    "value": "img_end_token",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[row['image_end_token'] for row in batch]",
                    "possible_values": []
                }
            },
            "flatten_43": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.pool(self.model(x))",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, start_dim=2)",
                            "Call"
                        ],
                        [
                            "out.transpose(1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_classes",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/pplm/pplm_classification_head.py": {
        "torch": {
            "ClassificationHead_4": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.class_size": {
                    "value": "class_size",
                    "possible_values": []
                },
                "self.embed_size": {
                    "value": "embed_size",
                    "possible_values": []
                },
                "Linear_13": {
                    "variable": {
                        "value": "self.mlp",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "embed_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "class_size",
                        "possible_values": []
                    }
                }
            }
        }
    },
    "third_party/transformers/examples/pplm/run_pplm.py": {
        "torch": {
            "ones_146": {
                "variable": {
                    "value": "ones_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "ones_key_val_shape",
                    "possible_values": [
                        [
                            "tuple(past[0].shape[:-2]) + tuple([window_length]) + tuple(past[0].shape[-1:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_150": {
                "variable": {
                    "value": "window_mask",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ones_mask, torch.zeros(zeros_key_val_shape))",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "possible_values": []
                }
            },
            "ones_like_152": {
                "variable": {
                    "value": "window_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "past[0]",
                    "possible_values": []
                }
            },
            "softmax_171": {
                "variable": {
                    "value": "probs",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tensor_317": {
                "variable": {
                    "value": "single_bow",
                    "possible_values": []
                },
                "data": {
                    "value": "single_bow",
                    "possible_values": [
                        [
                            "bow_indices",
                            "Name"
                        ],
                        [
                            "list(filter(lambda x: len(x) <= 1, single_bow))",
                            "Call"
                        ],
                        [
                            "torch.tensor(single_bow).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_319": {
                "variable": {
                    "value": "one_hot_bow",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_words",
                    "possible_values": [
                        [
                            "single_bow.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "tokenizer.vocab_size",
                    "possible_values": []
                }
            },
            "tensor_453": {
                "variable": {
                    "value": "context_t",
                    "possible_values": []
                },
                "data": {
                    "value": "context",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "softmax_528": {
                "variable": {
                    "value": "pert_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_logits",
                    "possible_values": [
                        [
                            "pert_logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_logits, k=top_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "manual_seed_611": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_80": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "where_100": {
                "condition": {
                    "value": "logits < batch_mins",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(logits) * -BIG_CONST",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_184": {
                "variable": {
                    "value": "ce_loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "unsqueeze_187": {
                "variable": {
                    "value": "curr_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "data": {
                    "value": "prediction.shape[0] * [class_label]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "softmax_205": {
                "variable": {
                    "value": "unpert_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "unpert_logits[:, -1, :]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "load_270": {
                "f": {
                    "value": "resolved_archive_file",
                    "possible_values": [
                        [
                            "cached_path(params['url'])",
                            "Call"
                        ],
                        [
                            "params['path']",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_cache_382": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_420": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sum_491": {
                "variable": {
                    "value": "accumulated_hidden",
                    "possible_values": []
                },
                "input": {
                    "value": "accumulated_hidden",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "unpert_last_hidden[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "torch.sum(accumulated_hidden, dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_531": {
                "variable": {
                    "value": "ce_loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_533": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "data": {
                    "value": "[class_label]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ],
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "softmax_542": {
                "variable": {
                    "value": "unpert_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "unpert_logits[:, -1, :]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "softmax_553": {
                "variable": {
                    "value": "pert_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_logits",
                    "possible_values": [
                        [
                            "pert_logits[:, -1, :] / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_logits, k=top_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "multinomial_557": {
                "variable": {
                    "value": "last",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_probs",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "topk_560": {
                "variable": {
                    "value": "(_, last)",
                    "possible_values": []
                },
                "input": {
                    "value": "pert_probs",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "topk_96": {
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "possible_values": []
                }
            },
            "where_99": {
                "condition": {
                    "value": "logits < batch_mins",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(logits) * 0.0",
                    "possible_values": []
                },
                "y": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_131": {
                "start": {
                    "value": "0.0",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0 + SMALL_CONST",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0 / window_length",
                    "possible_values": []
                }
            },
            "sum_168": {
                "input": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "all_hidden[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mm_177": {
                "variable": {
                    "value": "bow_logits",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.t(one_hot_bow)",
                    "possible_values": []
                }
            },
            "matmul_190": {
                "variable": {
                    "value": "inputs_embeds",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_probs",
                    "possible_values": [
                        [
                            "torch.unsqueeze(probs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "wte.weight.data",
                    "possible_values": []
                }
            },
            "from_numpy_250": {
                "ndarray": {
                    "value": "p_",
                    "possible_values": [
                        [
                            "curr_perturbation",
                            "Name"
                        ],
                        [
                            "past",
                            "Name"
                        ]
                    ]
                }
            },
            "cat_563": {
                "tensors": {
                    "value": "(output_so_far, last)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_615": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_like_100": {
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_160": {
                "ndarray": {
                    "value": "p_",
                    "possible_values": [
                        [
                            "curr_perturbation",
                            "Name"
                        ],
                        [
                            "past",
                            "Name"
                        ]
                    ]
                }
            },
            "max_222": {
                "input": {
                    "value": "grad_norms[index]",
                    "possible_values": []
                }
            },
            "mean_532": {
                "input": {
                    "value": "unpert_last_hidden",
                    "possible_values": [
                        [
                            "unpert_all_hidden[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_548": {
                "input": {
                    "value": "pert_probs",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_99": {
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "all_logits[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "t_177": {
                "input": {
                    "value": "one_hot_bow",
                    "possible_values": [
                        [
                            "one_hot_bows_vectors",
                            "Name"
                        ],
                        [
                            "torch.zeros(num_words, tokenizer.vocab_size).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_178": {
                "input": {
                    "value": "torch.sum(bow_logits)",
                    "possible_values": []
                }
            },
            "sum_193": {
                "input": {
                    "value": "curr_hidden",
                    "possible_values": [
                        [
                            "curr_all_hidden[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "norm_222": {
                "input": {
                    "value": "p_.grad * window_mask",
                    "possible_values": []
                }
            },
            "norm_227": {
                "input": {
                    "value": "p_.grad * window_mask",
                    "possible_values": []
                }
            },
            "sum_549": {
                "input": {
                    "value": "pert_probs",
                    "possible_values": [
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs ** gm_scale * unpert_probs ** (1 - gm_scale)",
                            "BinOp"
                        ],
                        [
                            "top_k_filter(pert_probs, k=top_k, probs=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(pert_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "pert_probs / torch.sum(pert_probs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_150": {
                "*size": {
                    "value": "zeros_key_val_shape",
                    "possible_values": [
                        [
                            "tuple(past[0].shape[:-2]) + tuple([curr_length - window_length]) + tuple(past[0].shape[-1:])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_178": {
                "input": {
                    "value": "bow_logits",
                    "possible_values": [
                        [
                            "torch.mm(probs, torch.t(one_hot_bow))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/examples/pplm/run_pplm_discrim_train.py": {
        "torch": {
            "Discriminator_45": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.cached_mode": {
                    "value": "cached_mode",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dataset_84": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.X": {
                    "value": "X",
                    "possible_values": []
                },
                "self.y": {
                    "value": "y",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "manual_seed_38": {
                "seed": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "y_batch",
                    "possible_values": []
                },
                "data": {
                    "value": "item_info['y']",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "x_batch",
                    "possible_values": []
                },
                "tensors": {
                    "value": "item_info['X']",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "y_batch",
                    "possible_values": []
                },
                "data": {
                    "value": "item_info['y']",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "input_t",
                    "possible_values": []
                },
                "data": {
                    "value": "[input_t]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_200": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "possible_values": []
                }
            },
            "DataLoader_212": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Dataset(xs, ys)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "cached_collate_fn",
                    "possible_values": []
                }
            },
            "Adam_448": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "possible_values": []
                }
            },
            "log_softmax_79": {
                "variable": {
                    "value": "probs",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "self.classifier_head(avg_hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "padded_sequences",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "possible_values": []
                }
            },
            "nll_loss_143": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "output_t",
                    "possible_values": [
                        [
                            "discriminator(input_t)",
                            "Call"
                        ],
                        [
                            "discriminator(input_t)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_t",
                    "possible_values": []
                }
            },
            "DataLoader_439": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "Dataset(x, y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "possible_values": []
                }
            },
            "DataLoader_442": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "possible_values": [
                        [
                            "Dataset(test_x, test_y)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "unbind_208": {
                "variable": {
                    "value": "avg_rep_list",
                    "possible_values": []
                },
                "input": {
                    "value": "avg_rep.unsqueeze(1)",
                    "possible_values": []
                }
            },
            "tensor_252": {
                "variable": {
                    "value": "seq",
                    "possible_values": []
                },
                "data": {
                    "value": "[50256] + seq",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "seq",
                    "possible_values": []
                },
                "data": {
                    "value": "[50256] + seq",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "x.ne(0).unsqueeze(2).repeat(1, 1, self.embed_size).float().to(self.device).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "nll_loss_170": {
                "input": {
                    "value": "output_t",
                    "possible_values": [
                        [
                            "discriminator(input_t)",
                            "Call"
                        ],
                        [
                            "discriminator(input_t)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_t",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_230": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_475": {
                "obj": {
                    "value": "discriminator.get_classifier().state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}_classifier_head_epoch_{}.pt'.format(dataset, epoch + 1)",
                    "possible_values": []
                }
            },
            "tensor_300": {
                "variable": {
                    "value": "seq",
                    "possible_values": []
                },
                "data": {
                    "value": "[50256] + seq",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_340": {
                "variable": {
                    "value": "seq",
                    "possible_values": []
                },
                "data": {
                    "value": "[50256] + seq",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_396": {
                "variable": {
                    "value": "seq",
                    "possible_values": []
                },
                "data": {
                    "value": "[50256] + seq",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() and (not no_cuda) else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/run_bertology.py": {
        "torch": {
            "zeros_68": {
                "variable": {
                    "value": "head_importance",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_layers",
                    "possible_values": []
                },
                "out": {
                    "value": "n_heads",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "attn_entropy",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_layers",
                    "possible_values": []
                },
                "out": {
                    "value": "n_heads",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "head_ranks",
                    "possible_values": []
                },
                "*size": {
                    "value": "head_importance.numel()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "possible_values": []
                }
            },
            "arange_133": {
                "variable": {
                    "value": "head_ranks[head_importance.view(-1).sort(descending=True)[1]]",
                    "possible_values": []
                },
                "start": {
                    "value": "head_importance.numel()",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "possible_values": []
                }
            },
            "ones_like_151": {
                "variable": {
                    "value": "new_head_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "head_importance",
                    "possible_values": [
                        [
                            "torch.zeros(n_layers, n_heads).to(args.device)",
                            "Call"
                        ],
                        [
                            "head_importance + head_mask.grad.abs().detach()",
                            "BinOp"
                        ],
                        [
                            "(head_importance - head_importance.min()) / (head_importance.max() - head_importance.min())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_413": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=True)",
                            "Call"
                        ],
                        [
                            "Subset(eval_data, list(range(min(args.data_subset, len(eval_data)))))",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_data) if args.local_rank == -1 else DistributedSampler(eval_data)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                }
            },
            "ones_72": {
                "variable": {
                    "value": "head_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_layers",
                    "possible_values": []
                },
                "out": {
                    "value": "n_heads",
                    "possible_values": []
                }
            },
            "pow_117": {
                "input": {
                    "value": "head_importance",
                    "possible_values": [
                        [
                            "torch.zeros(n_layers, n_heads).to(args.device)",
                            "Call"
                        ],
                        [
                            "head_importance + head_mask.grad.abs().detach()",
                            "BinOp"
                        ],
                        [
                            "(head_importance - head_importance.min()) / (head_importance.max() - head_importance.min())",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "exponent",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "device_340": {
                "variable": {
                    "value": "args.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_341": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_344": {
                "variable": {
                    "value": "args.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_398": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "save_405": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'run_args.bin')",
                    "possible_values": []
                }
            },
            "Subset_411": {
                "variable": {
                    "value": "eval_data",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_data",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=True)",
                            "Call"
                        ],
                        [
                            "Subset(eval_data, list(range(min(args.data_subset, len(eval_data)))))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "list(range(min(args.data_subset, len(eval_data))))",
                    "possible_values": []
                }
            },
            "log_44": {
                "input": {
                    "value": "p",
                    "possible_values": []
                }
            },
            "set_device_343": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "DataParallel_402": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_412": {
                "data_source": {
                    "value": "eval_data",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=True)",
                            "Call"
                        ],
                        [
                            "Subset(eval_data, list(range(min(args.data_subset, len(eval_data)))))",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_412": {
                "dataset": {
                    "value": "eval_data",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=True)",
                            "Call"
                        ],
                        [
                            "Subset(eval_data, list(range(min(args.data_subset, len(eval_data)))))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_117": {
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "is_available_340": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/run_generation.py": {
        "torch": {
            "device_188": {
                "variable": {
                    "value": "args.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_189": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_76": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "manual_seed_all_78": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "is_available_188": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/run_glue.py": {
        "torch": {
            "DataLoader_114": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "tensor_405": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_406": {
                "variable": {
                    "value": "all_attention_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_407": {
                "variable": {
                    "value": "all_token_type_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_413": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "manual_seed_102": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "SummaryWriter_110": {
                "variable": {
                    "value": "tb_writer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataParallel_154": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_158": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "SequentialSampler_304": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_305": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "load_377": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_409": {
                "variable": {
                    "value": "all_labels",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "device_572": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_573": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_576": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_104": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_113": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_113": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_309": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_411": {
                "variable": {
                    "value": "all_labels",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "set_device_575": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "save_661": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "load_142": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "load_143": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "save_399": {
                "obj": {
                    "value": "features",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_323": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clip_grad_norm__230": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__232": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "save_270": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_273": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "save_274": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "is_available_572": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/run_lm_finetuning.py": {
        "torch": {
            "TextDataset_84": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                }
            },
            "full_173": {
                "variable": {
                    "value": "probability_matrix",
                    "possible_values": []
                },
                "size": {
                    "value": "labels.shape",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "args.mlm_probability",
                    "possible_values": []
                }
            },
            "bernoulli_178": {
                "variable": {
                    "value": "masked_indices",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, args.mlm_probability)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_187": {
                "variable": {
                    "value": "random_words",
                    "possible_values": []
                },
                "low": {
                    "value": "len(tokenizer)",
                    "possible_values": []
                },
                "high": {
                    "value": "labels.shape",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "DataLoader_201": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "SequentialSampler_386": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_387": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "exp_413": {
                "variable": {
                    "value": "perplexity",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(eval_loss)",
                    "possible_values": []
                }
            },
            "manual_seed_135": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "SummaryWriter_197": {
                "variable": {
                    "value": "tb_writer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataParallel_240": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_244": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_391": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_598": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_599": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_602": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "self.examples[item]",
                    "possible_values": []
                }
            },
            "manual_seed_all_137": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "tensor_177": {
                "data": {
                    "value": "special_tokens_mask",
                    "possible_values": [
                        [
                            "[tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "possible_values": []
                }
            },
            "bernoulli_182": {
                "input": {
                    "value": "torch.full(labels.shape, 0.8)",
                    "possible_values": []
                }
            },
            "RandomSampler_200": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_200": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_413": {
                "data": {
                    "value": "eval_loss",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "eval_loss / nb_eval_steps",
                            "BinOp"
                        ],
                        [
                            "eval_loss + lm_loss.mean().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_device_601": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "save_686": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "bernoulli_186": {
                "input": {
                    "value": "torch.full(labels.shape, 0.5)",
                    "possible_values": []
                }
            },
            "load_228": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "load_229": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "no_grad_406": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "full_182": {
                "size": {
                    "value": "labels.shape",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.8",
                    "possible_values": []
                }
            },
            "clip_grad_norm__321": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__323": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "save_353": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_358": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "save_359": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "is_available_598": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "full_186": {
                "size": {
                    "value": "labels.shape",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/run_multiple_choice.py": {
        "torch": {
            "DataLoader_90": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "tensor_374": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_ids')",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_375": {
                "variable": {
                    "value": "all_input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'input_mask')",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_376": {
                "variable": {
                    "value": "all_segment_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "select_field(features, 'segment_ids')",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_377": {
                "variable": {
                    "value": "all_label_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_379": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "manual_seed_78": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "SummaryWriter_86": {
                "variable": {
                    "value": "tb_writer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataParallel_120": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_124": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "SequentialSampler_255": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=not test, test=test)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_256": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=not test, test=test)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "load_347": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format(cached_mode, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_537": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_538": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_541": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_80": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_89": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_89": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_260": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_540": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "save_626": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_368": {
                "obj": {
                    "value": "features",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, label_list, args.max_seq_length, tokenizer, pad_on_left=bool(args.model_type in ['xlnet']), pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format(cached_mode, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__173": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__176": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "no_grad_274": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_226": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "is_available_537": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/run_ner.py": {
        "torch": {
            "DataLoader_96": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode='train')",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "DataLoader_270": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset) if args.local_rank == -1 else DistributedSampler(eval_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "tensor_380": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_381": {
                "variable": {
                    "value": "all_input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_382": {
                "variable": {
                    "value": "all_segment_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_383": {
                "variable": {
                    "value": "all_label_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_385": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "manual_seed_84": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "SummaryWriter_92": {
                "variable": {
                    "value": "tb_writer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataParallel_135": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_139": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_274": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_350": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}'.format(mode, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_544": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_545": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_548": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_86": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_95": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode='train')",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_95": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode='train')",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_269": {
                "data_source": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_269": {
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, labels, pad_token_label_id, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_547": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_575": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_629": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "load_123": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "load_124": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "no_grad_288": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_374": {
                "obj": {
                    "value": "features",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, labels, args.max_seq_length, tokenizer, cls_token_at_end=bool(args.model_type in ['xlnet']), cls_token=tokenizer.cls_token, cls_token_segment_id=2 if args.model_type in ['xlnet'] else 0, sep_token=tokenizer.sep_token, sep_token_extra=bool(args.model_type in ['roberta']), pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0, pad_token_label_id=pad_token_label_id)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}'.format(mode, list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__212": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__214": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "save_244": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_247": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "save_248": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "is_available_544": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/run_squad.py": {
        "torch": {
            "DataLoader_106": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "SequentialSampler_299": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "possible_values": []
                }
            },
            "DataLoader_300": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "manual_seed_90": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "SummaryWriter_102": {
                "variable": {
                    "value": "tb_writer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataParallel_146": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_150": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_304": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_439": {
                "variable": {
                    "value": "features_and_dataset",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_704": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_705": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_708": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_92": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_105": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_105": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_707": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "save_794": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "load_133": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "load_134": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "no_grad_318": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_479": {
                "obj": {
                    "value": "{'features': features, 'dataset': dataset, 'examples': examples}",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(input_dir, 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__240": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__242": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "save_270": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_273": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "save_274": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "is_available_704": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/run_xnli.py": {
        "torch": {
            "DataLoader_86": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "tensor_364": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_365": {
                "variable": {
                    "value": "all_attention_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_366": {
                "variable": {
                    "value": "all_token_type_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_372": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "SummaryWriter_82": {
                "variable": {
                    "value": "tb_writer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataParallel_125": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_129": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "SequentialSampler_265": {
                "variable": {
                    "value": "eval_sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_266": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "load_339": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}'.format('test' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(args.train_language if not evaluate and args.train_language is not None else args.language)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_368": {
                "variable": {
                    "value": "all_labels",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "device_532": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_533": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_536": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_76": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_85": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_85": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_270": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_535": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "save_621": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "load_113": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "load_114": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "save_358": {
                "obj": {
                    "value": "features",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=False, pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}_{}'.format('test' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task), str(args.train_language if not evaluate and args.train_language is not None else args.language)))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_284": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clip_grad_norm__200": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__202": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "save_232": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "save_235": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "possible_values": []
                }
            },
            "save_236": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "possible_values": []
                }
            },
            "is_available_532": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/summarization/convert_bertabs_original_pytorch_checkpoint.py": {
        "torch": {
            "load_89": {
                "variable": {
                    "value": "checkpoints",
                    "possible_values": []
                },
                "f": {
                    "value": "path_to_checkpoints",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "encoder_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "encoder_input_ids",
                    "possible_values": [
                        [
                            "tokenizer.encode(\"This is sample \u00e9\u00e0alj'-.\")",
                            "Call"
                        ],
                        [
                            "torch.tensor(encoder_input_ids).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_115": {
                "variable": {
                    "value": "encoder_input_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "decoder_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "decoder_input_ids",
                    "possible_values": [
                        [
                            "tokenizer.encode(\"This is sample 3 \u00e9\u00e0alj'-.\")",
                            "Call"
                        ],
                        [
                            "torch.tensor(decoder_input_ids).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_118": {
                "variable": {
                    "value": "decoder_input_ids",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "max_145": {
                "variable": {
                    "value": "maximum_absolute_difference",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(output_converted_model - output_original_model)",
                    "possible_values": []
                }
            },
            "max_147": {
                "variable": {
                    "value": "maximum_absolute_difference",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(output_converted_generator - output_original_generator)",
                    "possible_values": []
                }
            },
            "allclose_150": {
                "variable": {
                    "value": "are_identical",
                    "possible_values": []
                },
                "input": {
                    "value": "output_converted_model",
                    "possible_values": [
                        [
                            "new_model(encoder_input_ids, decoder_input_ids, token_type_ids, encoder_attention_mask, decoder_attention_mask)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "output_original_model",
                    "possible_values": [
                        [
                            "original(src, tgt, segs, clss, mask_src, mask_tgt, mask_cls)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "save_159": {
                "obj": {
                    "value": "new_model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "bertabs-finetuned-cnndm-extractive-abstractive-summarization-pytorch_model.bin",
                    "possible_values": []
                }
            },
            "device_90": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "device_93": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "max_122": {
                "input": {
                    "value": "torch.abs(original.generator[0].weight - new_model.generator[0].weight)",
                    "possible_values": []
                }
            },
            "abs_122": {
                "input": {
                    "value": "original.generator[0].weight - new_model.generator[0].weight",
                    "possible_values": []
                }
            },
            "abs_145": {
                "input": {
                    "value": "output_converted_model - output_original_model",
                    "possible_values": []
                }
            },
            "abs_147": {
                "input": {
                    "value": "output_converted_generator - output_original_generator",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/summarization/modeling_bertabs.py": {
        "torch": {
            "Bert_120": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "TransformerDecoder_138": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.num_layers": {
                    "value": "num_layers",
                    "possible_values": []
                },
                "self.embeddings": {
                    "value": "embeddings",
                    "possible_values": []
                },
                "ModuleList_163": {
                    "variable": {
                        "value": "self.transformer_layers",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[TransformerDecoderLayer(d_model, heads, d_ff, dropout) for _ in range(num_layers)]",
                        "possible_values": []
                    }
                },
                "LayerNorm_167": {
                    "variable": {
                        "value": "self.layer_norm",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "d_model",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "1e-06",
                        "possible_values": []
                    }
                }
            },
            "PositionalEncoding_256": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "zeros_258": {
                    "variable": {
                        "value": "pe",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "max_len",
                        "possible_values": [
                            [
                                "5000",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "out": {
                        "value": "dim",
                        "possible_values": [
                            [
                                "0",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "arange_259": {
                    "variable": {
                        "value": "position",
                        "possible_values": []
                    },
                    "start": {
                        "value": "0",
                        "possible_values": []
                    },
                    "end": {
                        "value": "max_len",
                        "possible_values": [
                            [
                                "5000",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "unsqueeze_259": {
                    "variable": {
                        "value": "position",
                        "possible_values": []
                    },
                    "input": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "exp_260": {
                    "variable": {
                        "value": "div_term",
                        "possible_values": []
                    },
                    "input": {
                        "value": "torch.arange(0, dim, 2, dtype=torch.float) * -(math.log(10000.0) / dim)",
                        "possible_values": []
                    }
                },
                "sin_261": {
                    "variable": {
                        "value": "pe[:, 0::2]",
                        "possible_values": []
                    },
                    "input": {
                        "value": "position.float() * div_term",
                        "possible_values": []
                    }
                },
                "cos_262": {
                    "variable": {
                        "value": "pe[:, 1::2]",
                        "possible_values": []
                    },
                    "input": {
                        "value": "position.float() * div_term",
                        "possible_values": []
                    }
                },
                "Dropout_266": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "dropout",
                        "possible_values": [
                            [
                                "0.1",
                                "MethodArgument"
                            ],
                            [
                                "0.1",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "self.dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TransformerDecoderLayer_283": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "LayerNorm_302": {
                    "variable": {
                        "value": "self.layer_norm_1",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "d_model",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "1e-06",
                        "possible_values": []
                    }
                },
                "LayerNorm_303": {
                    "variable": {
                        "value": "self.layer_norm_2",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "d_model",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "1e-06",
                        "possible_values": []
                    }
                },
                "Dropout_304": {
                    "variable": {
                        "value": "self.drop",
                        "possible_values": []
                    },
                    "p": {
                        "value": "dropout",
                        "possible_values": [
                            [
                                "0.1",
                                "MethodArgument"
                            ],
                            [
                                "0.1",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "MultiHeadedAttention_366": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.model_dim": {
                    "value": "model_dim",
                    "possible_values": []
                },
                "self.head_count": {
                    "value": "head_count",
                    "possible_values": [
                        [
                            "self.head_count",
                            "Attribute"
                        ]
                    ]
                },
                "Linear_416": {
                    "variable": {
                        "value": "self.linear_keys",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "model_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "head_count * self.dim_per_head",
                        "possible_values": []
                    }
                },
                "Linear_417": {
                    "variable": {
                        "value": "self.linear_values",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "model_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "head_count * self.dim_per_head",
                        "possible_values": []
                    }
                },
                "Linear_418": {
                    "variable": {
                        "value": "self.linear_query",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "model_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "head_count * self.dim_per_head",
                        "possible_values": []
                    }
                },
                "Softmax_419": {
                    "variable": {
                        "value": "self.softmax",
                        "possible_values": []
                    },
                    "dim": {
                        "value": "-1",
                        "possible_values": []
                    }
                },
                "Dropout_420": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "dropout",
                        "possible_values": [
                            [
                                "0.1",
                                "MethodArgument"
                            ],
                            [
                                "0.1",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "self.use_final_linear": {
                    "value": "use_final_linear",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PositionwiseFeedForward_631": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_643": {
                    "variable": {
                        "value": "self.w_1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "d_model",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "d_ff",
                        "possible_values": []
                    }
                },
                "Linear_644": {
                    "variable": {
                        "value": "self.w_2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "d_ff",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "d_model",
                        "possible_values": []
                    }
                },
                "LayerNorm_645": {
                    "variable": {
                        "value": "self.layer_norm",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "d_model",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "1e-06",
                        "possible_values": []
                    }
                },
                "self.actv": {
                    "value": "gelu",
                    "possible_values": []
                },
                "Dropout_647": {
                    "variable": {
                        "value": "self.dropout_1",
                        "possible_values": []
                    },
                    "p": {
                        "value": "dropout",
                        "possible_values": [
                            [
                                "0.1",
                                "MethodArgument"
                            ],
                            [
                                "0.1",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "Dropout_648": {
                    "variable": {
                        "value": "self.dropout_2",
                        "possible_values": []
                    },
                    "p": {
                        "value": "dropout",
                        "possible_values": [
                            [
                                "0.1",
                                "MethodArgument"
                            ],
                            [
                                "0.1",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "Embedding_71": {
                "variable": {
                    "value": "tgt_embeddings",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.bert.model.config.hidden_size",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "LogSoftmax_85": {
                "variable": {
                    "value": "gen_func",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.generator",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(args.dec_hidden_size, args.vocab_size)",
                    "possible_values": []
                }
            },
            "gt_328": {
                "variable": {
                    "value": "dec_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_pad_mask + self.mask[:, :tgt_pad_mask.size(1), :tgt_pad_mask.size(1)]",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "from_numpy_362": {
                "variable": {
                    "value": "subsequent_mask",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "subsequent_mask",
                    "possible_values": [
                        [
                            "np.triu(np.ones(attn_shape), k=1).astype('uint8')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(subsequent_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_507": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "possible_values": [
                        [
                            "self.self_attn(all_input, all_input, input_norm, mask=dec_mask, layer_cache=layer_cache, type='self')",
                            "Call"
                        ],
                        [
                            "self.drop(query) + inputs",
                            "BinOp"
                        ],
                        [
                            "self.linear_query(query)",
                            "Call"
                        ],
                        [
                            "shape(query)",
                            "Call"
                        ],
                        [
                            "query / math.sqrt(dim_per_head)",
                            "BinOp"
                        ],
                        [
                            "self.linear_query(query)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(2, 3)",
                    "possible_values": []
                }
            },
            "arange_822": {
                "variable": {
                    "value": "batch_offset",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "key.size(0)",
                            "Call"
                        ],
                        [
                            "batch.batch_size",
                            "Attribute"
                        ],
                        [
                            "batch.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "key.device",
                            "Attribute"
                        ],
                        [
                            "src_features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_823": {
                "variable": {
                    "value": "beam_offset",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size * beam_size",
                    "possible_values": []
                },
                "step": {
                    "value": "beam_size",
                    "possible_values": [
                        [
                            "self.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "key.device",
                            "Attribute"
                        ],
                        [
                            "src_features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "full_824": {
                "variable": {
                    "value": "alive_seq",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size * beam_size, 1]",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.start_token",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "key.device",
                            "Attribute"
                        ],
                        [
                            "src_features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_827": {
                "variable": {
                    "value": "topk_log_probs",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] + [float('-inf')] * (beam_size - 1)",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "key.device",
                            "Attribute"
                        ],
                        [
                            "src_features.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Embedding_65": {
                "variable": {
                    "value": "my_pos_embeddings",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "args.max_pos",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.bert.model.config.hidden_size",
                    "possible_values": []
                }
            },
            "stack_237": {
                "variable": {
                    "value": "saved_inputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "saved_inputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(saved_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_332": {
                "variable": {
                    "value": "all_input",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(previous_input, input_norm)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_423": {
                "variable": {
                    "value": "self.final_linear",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "possible_values": []
                }
            },
            "cat_521": {
                "variable": {
                    "value": "attn",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn[:, :-1], attn_masked.unsqueeze(1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "matmul_529": {
                "variable": {
                    "value": "context",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_attn",
                    "possible_values": [
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "possible_values": [
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "torch.cat((layer_cache['self_values'].to(device), value), dim=2)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_894": {
                "variable": {
                    "value": "alive_seq",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[alive_seq.index_select(0, select_indices), topk_ids.view(-1, 1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "args.dec_hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.vocab_size",
                    "possible_values": []
                }
            },
            "no_grad_131": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tanh_628": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "possible_values": []
                }
            },
            "no_grad_777": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_796": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_1002": {
                "params": {
                    "value": "model.encoder.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr['encoder']",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta_1, beta_2)",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_1005": {
                "params": {
                    "value": "model.decoder.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr['decoder']",
                    "possible_values": []
                },
                "betas": {
                    "value": "(beta_1, beta_2)",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_260": {
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "matmul_525": {
                "input": {
                    "value": "drop_attn",
                    "possible_values": [
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "possible_values": [
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "torch.cat((layer_cache['self_values'].to(device), value), dim=2)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_473": {
                "variable": {
                    "value": "key",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(layer_cache['self_keys'].to(device), key)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_475": {
                "variable": {
                    "value": "value",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(layer_cache['self_values'].to(device), value)",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sum_519": {
                "input": {
                    "value": "attn_masked",
                    "possible_values": [
                        [
                            "attn[:, -1] * predefined_graph_1",
                            "BinOp"
                        ],
                        [
                            "attn_masked / (torch.sum(attn_masked, 2).unsqueeze(2) + 1e-09)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "unsqueeze_519": {
                "input": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "pow_628": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.permute(perm).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch, -1).transpose(0, 1).repeat(count, 1).transpose(0, 1).contiguous().view(*out_size)",
                            "Call"
                        ],
                        [
                            "x.permute(perm).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/summarization/run_summarization.py": {
        "torch": {
            "SequentialSampler_186": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer)",
                            "Call"
                        ],
                        [
                            "SummarizationDataset(args.documents_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_191": {
                "variable": {
                    "value": "iterator",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer)",
                            "Call"
                        ],
                        [
                            "SummarizationDataset(args.documents_dir)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "possible_values": []
                }
            },
            "tensor_213": {
                "variable": {
                    "value": "encoded_stories",
                    "possible_values": []
                },
                "data": {
                    "value": "[fit_to_block_size(story, block_size, tokenizer.pad_token_id) for (story, _) in encoded_text]",
                    "possible_values": []
                }
            },
            "device_296": {
                "variable": {
                    "value": "args.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "is_available_296": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/summarization/test_utils_summarization.py": {
        "torch": {
            "tensor_80": {
                "variable": {
                    "value": "sequence",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 3, 4]",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "expected",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "sequence",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 2, 3, 4, 23, 23, 23]",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "expected",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 0, 0, 0]",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "sequence",
                    "possible_values": []
                },
                "data": {
                    "value": "[8, 2, 3, 4, 1, 1, 1]",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "variable": {
                    "value": "expected",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 1, 1, 0, 0, 0]",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "batch",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 2, 3, 4, 5, 6], [1, 2, 3, 101, 5, 6], [1, 101, 3, 4, 101, 6]]",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "expected",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1]]",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/examples/summarization/utils_summarization.py": {
        "torch": {
            "SummarizationDataset_13": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                }
            },
            "ones_like_124": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence",
                    "possible_values": [
                        [
                            "batch",
                            "Name"
                        ]
                    ]
                }
            },
            "tensor_167": {
                "data": {
                    "value": "batch_embeddings",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/src/transformers/convert_albert_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/convert_bert_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/convert_gpt2_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_44": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/src/transformers/convert_openai_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_44": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/src/transformers/convert_pytorch_checkpoint_to_tf2.py": {
        "torch": {
            "load_311": {
                "variable": {
                    "value": "state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_checkpoint_path",
                    "possible_values": [
                        [
                            "cached_path(aws_model_maps[pytorch_checkpoint_path], force_download=not use_cached_models)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "no_grad_316": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/convert_roberta_original_pytorch_checkpoint_to_pytorch.py": {
        "torch": {
            "zeros_like_77": {
                "variable": {
                    "value": "model.roberta.embeddings.token_type_embeddings.weight.data",
                    "possible_values": []
                },
                "input": {
                    "value": "model.roberta.embeddings.token_type_embeddings.weight",
                    "possible_values": []
                }
            },
            "max_150": {
                "variable": {
                    "value": "max_absolute_diff",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(our_output - their_output)",
                    "possible_values": []
                }
            },
            "allclose_152": {
                "variable": {
                    "value": "success",
                    "possible_values": []
                },
                "input": {
                    "value": "our_output",
                    "possible_values": [
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "their_output",
                    "possible_values": [
                        [
                            "roberta.model.classification_heads['mnli'](roberta.extract_features(input_ids))",
                            "Call"
                        ],
                        [
                            "roberta.model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "abs_150": {
                "input": {
                    "value": "our_output - their_output",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/convert_t5_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/convert_transfo_xl_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_58": {
                "obj": {
                    "value": "corpus_vocab_dict",
                    "possible_values": [
                        [
                            "corpus.vocab.__dict__",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_vocab_dump_path",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + VOCAB_FILES_NAMES['pretrained_vocab_file']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_64": {
                "obj": {
                    "value": "corpus_dict_no_vocab",
                    "possible_values": [
                        [
                            "corpus.__dict__",
                            "Attribute"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_dataset_dump_path",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + CORPUS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_85": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "possible_values": [
                        [
                            "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/src/transformers/convert_xlm_original_pytorch_checkpoint_to_pytorch.py": {
        "torch": {
            "load_34": {
                "variable": {
                    "value": "chkpt",
                    "possible_values": []
                },
                "f": {
                    "value": "xlm_checkpoint_path",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "save_58": {
                "obj": {
                    "value": "two_levels_state_dict",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "possible_values": [
                        [
                            "pytorch_dump_folder_path + '/' + WEIGHTS_NAME",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/src/transformers/convert_xlnet_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_76": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_weights_dump_path",
                    "possible_values": [
                        [
                            "os.path.join(pytorch_dump_folder_path, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_ctrl.py": {
        "torch": {
            "MultiHeadAttention_82": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.output_attentions": {
                    "value": "output_attentions",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_heads": {
                    "value": "num_heads",
                    "possible_values": []
                },
                "self.d_model_size": {
                    "value": "d_model_size",
                    "possible_values": []
                },
                "Linear_91": {
                    "variable": {
                        "value": "self.Wq",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "d_model_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "d_model_size",
                        "possible_values": []
                    }
                },
                "Linear_92": {
                    "variable": {
                        "value": "self.Wk",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "d_model_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "d_model_size",
                        "possible_values": []
                    }
                },
                "Linear_93": {
                    "variable": {
                        "value": "self.Wv",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "d_model_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "d_model_size",
                        "possible_values": []
                    }
                },
                "Linear_95": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "d_model_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "d_model_size",
                        "possible_values": []
                    }
                }
            },
            "EncoderLayer_133": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "LayerNorm_140": {
                    "variable": {
                        "value": "self.layernorm1",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "d_model_size",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "1e-06",
                        "possible_values": []
                    }
                },
                "LayerNorm_141": {
                    "variable": {
                        "value": "self.layernorm2",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "d_model_size",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "1e-06",
                        "possible_values": []
                    }
                },
                "Dropout_143": {
                    "variable": {
                        "value": "self.dropout1",
                        "possible_values": []
                    },
                    "p": {
                        "value": "rate",
                        "possible_values": [
                            [
                                "0.1",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "Dropout_144": {
                    "variable": {
                        "value": "self.dropout2",
                        "possible_values": []
                    },
                    "p": {
                        "value": "rate",
                        "possible_values": [
                            [
                                "0.1",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "sin_49": {
                "variable": {
                    "value": "sines",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_rads[:, 0::2]",
                    "possible_values": []
                }
            },
            "cos_50": {
                "variable": {
                    "value": "cosines",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_rads[:, 1::2]",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "pos_encoding",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sines, cosines]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "variable": {
                    "value": "matmul_qk",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "self.Wq(q)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(q, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k.permute(0, 1, 3, 2)",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "attention_weights",
                    "possible_values": []
                },
                "input": {
                    "value": "scaled_attention_logits",
                    "possible_values": [
                        [
                            "matmul_qk / np.sqrt(dk)",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + mask[ns - nd:ns, :ns] * -10000.0",
                            "BinOp"
                        ],
                        [
                            "scaled_attention_logits + attention_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights",
                    "possible_values": [
                        [
                            "torch.softmax(scaled_attention_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "attention_weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "possible_values": [
                        [
                            "self.Wv(v)",
                            "Call"
                        ],
                        [
                            "self.split_into_heads(v, batch_size)",
                            "Call"
                        ],
                        [
                            "torch.cat((past_value, v), dim=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_115": {
                "variable": {
                    "value": "present",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(k, v)",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "*args": {
                    "value": "torch.nn.Linear(d_model_size, dff)",
                    "possible_values": []
                }
            },
            "Embedding_287": {
                "variable": {
                    "value": "self.w",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "possible_values": []
                }
            },
            "Dropout_289": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "possible_values": []
                }
            },
            "ModuleList_290": {
                "variable": {
                    "value": "self.h",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderLayer(config.n_embd, config.n_head, config.dff, config.resid_pdrop, config.output_attentions) for _ in range(config.n_layer)]",
                    "possible_values": []
                }
            },
            "LayerNorm_296": {
                "variable": {
                    "value": "self.layernorm",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.n_embd",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_epsilon",
                    "possible_values": []
                }
            },
            "triu_391": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(seq_len + past_length, seq_len + past_length)",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_486": {
                "variable": {
                    "value": "self.lm_head",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "pow_37": {
                "input": {
                    "value": "10000",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2 * (i // 2) / d_model_size",
                    "possible_values": []
                }
            },
            "arange_44": {
                "start": {
                    "value": "position",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "arange_45": {
                "start": {
                    "value": "d_model_size",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": []
                }
            },
            "unsqueeze_45": {
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "k",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_key, k)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(past_value, v)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "in_features": {
                    "value": "dff",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model_size",
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "arange_340": {
                "variable": {
                    "value": "position_ids",
                    "possible_values": []
                },
                "start": {
                    "value": "past_length",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "past[0][0].size(-2)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "input_shape[-1] + past_length",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_534": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_391": {
                "*size": {
                    "value": "seq_len + past_length",
                    "possible_values": []
                },
                "out": {
                    "value": "seq_len + past_length",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_distilbert.py": {
        "torch": {
            "Embeddings_60": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Embedding_63": {
                    "variable": {
                        "value": "self.word_embeddings",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "config.vocab_size",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "config.dim",
                        "possible_values": []
                    },
                    "padding_idx": {
                        "value": "0",
                        "possible_values": []
                    }
                },
                "Embedding_64": {
                    "variable": {
                        "value": "self.position_embeddings",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "config.max_position_embeddings",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "config.dim",
                        "possible_values": []
                    }
                },
                "LayerNorm_70": {
                    "variable": {
                        "value": "self.LayerNorm",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "config.dim",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "1e-12",
                        "possible_values": []
                    }
                },
                "Dropout_71": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.dropout",
                        "possible_values": []
                    }
                }
            },
            "MultiHeadSelfAttention_98": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Dropout_104": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.attention_dropout",
                        "possible_values": []
                    }
                },
                "Linear_109": {
                    "variable": {
                        "value": "self.q_lin",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.dim",
                        "possible_values": []
                    }
                },
                "Linear_110": {
                    "variable": {
                        "value": "self.k_lin",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.dim",
                        "possible_values": []
                    }
                },
                "Linear_111": {
                    "variable": {
                        "value": "self.v_lin",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.dim",
                        "possible_values": []
                    }
                },
                "Linear_112": {
                    "variable": {
                        "value": "self.out_lin",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.dim",
                        "possible_values": []
                    }
                }
            },
            "FFN_196": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Dropout_199": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.dropout",
                        "possible_values": []
                    }
                },
                "Linear_200": {
                    "variable": {
                        "value": "self.lin1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.hidden_dim",
                        "possible_values": []
                    }
                },
                "Linear_201": {
                    "variable": {
                        "value": "self.lin2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.dim",
                        "possible_values": []
                    }
                }
            },
            "TransformerBlock_215": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Dropout_222": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.dropout",
                        "possible_values": []
                    }
                },
                "LayerNorm_229": {
                    "variable": {
                        "value": "self.sa_layer_norm",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "config.dim",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "1e-12",
                        "possible_values": []
                    }
                },
                "LayerNorm_232": {
                    "variable": {
                        "value": "self.output_layer_norm",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "config.dim",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "1e-12",
                        "possible_values": []
                    }
                }
            },
            "Transformer_267": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_275": {
                    "variable": {
                        "value": "self.layer",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[copy.deepcopy(layer) for _ in range(config.n_layers)]",
                        "possible_values": []
                    }
                }
            },
            "arange_86": {
                "variable": {
                    "value": "position_ids",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "possible_values": []
                }
            },
            "ones_120": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "possible_values": []
                },
                "out": {
                    "value": "attention_head_size",
                    "possible_values": [
                        [
                            "self.dim // self.n_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_175": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "shape(self.q_lin(query))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "possible_values": []
                }
            },
            "matmul_186": {
                "variable": {
                    "value": "context",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "possible_values": [
                        [
                            "shape(self.v_lin(value))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_533": {
                "variable": {
                    "value": "self.vocab_transform",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "possible_values": []
                }
            },
            "LayerNorm_534": {
                "variable": {
                    "value": "self.vocab_layer_norm",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.dim",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "possible_values": []
                }
            },
            "Linear_535": {
                "variable": {
                    "value": "self.vocab_projector",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_539": {
                "variable": {
                    "value": "self.mlm_loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_607": {
                "variable": {
                    "value": "self.pre_classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.dim",
                    "possible_values": []
                }
            },
            "Linear_608": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "Dropout_609": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.seq_classif_dropout",
                    "possible_values": []
                }
            },
            "Linear_685": {
                "variable": {
                    "value": "self.qa_outputs",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "Dropout_687": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.qa_dropout",
                    "possible_values": []
                }
            },
            "Dropout_773": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "possible_values": []
                }
            },
            "Linear_774": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "ones_461": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_723": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_791": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "erf_49": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "possible_values": []
                }
            },
            "Softmax_179": {
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "ReLU_205": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_620": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MSELoss_627": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_630": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "arange_126": {
                "start": {
                    "value": "len(mask)",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_encoder_decoder.py": {
        "torch": {
            "PreTrainedEncoderDecoder_30": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.encoder": {
                    "value": "encoder",
                    "possible_values": [
                        [
                            "kwargs_encoder.pop('model', None)",
                            "Call"
                        ],
                        [
                            "AutoModel.from_pretrained(encoder_pretrained_model_name_or_path, *model_args, **kwargs_encoder)",
                            "Call"
                        ]
                    ]
                },
                "self.decoder": {
                    "value": "decoder",
                    "possible_values": [
                        [
                            "kwargs_decoder.pop('model', None)",
                            "Call"
                        ],
                        [
                            "AutoModelWithLMHead.from_pretrained(decoder_pretrained_model_name_or_path, **kwargs_decoder)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_347": {
                "variable": {
                    "value": "kwargs[decoder_model]",
                    "possible_values": []
                },
                "*args": {
                    "value": "kwargs.pop('decoder_config')",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_mmbt.py": {
        "torch": {
            "ModalEmbeddings_31": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.config": {
                    "value": "config",
                    "possible_values": []
                },
                "self.encoder": {
                    "value": "encoder",
                    "possible_values": []
                },
                "Linear_39": {
                    "variable": {
                        "value": "self.proj_embeddings",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.modal_hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Dropout_44": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                }
            },
            "MMBTModel_151": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.config": {
                    "value": "config",
                    "possible_values": []
                },
                "self.transformer": {
                    "value": "transformer",
                    "possible_values": []
                }
            },
            "MMBTForClassification_331": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Dropout_366": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                },
                "Linear_367": {
                    "variable": {
                        "value": "self.classifier",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.num_labels",
                        "possible_values": []
                    }
                }
            },
            "cat_228": {
                "variable": {
                    "value": "embedding_output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[modal_embeddings, txt_embeddings]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "token_embeddings",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_token_embeds.unsqueeze(1), token_embeddings]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "token_embeddings",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[token_embeddings, end_token_embeds.unsqueeze(1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "arange_61": {
                "variable": {
                    "value": "position_ids",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "possible_values": [
                        [
                            "token_embeddings.size(1)",
                            "Call"
                        ],
                        [
                            "seq_length + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "input_modal.device",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "*size": {
                    "value": "(input_modal.size(0), seq_length)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "input_modal.device",
                    "possible_values": []
                }
            },
            "ones_222": {
                "variable": {
                    "value": "token_type_ids",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_txt_shape",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_233": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "embedding_output.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_235": {
                "variable": {
                    "value": "attention_mask",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(input_modal_shape, device=device, dtype=torch.long), attention_mask]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_240": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "embedding_output.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_242": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(input_modal_shape, device=device), encoder_attention_mask]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "arange_257": {
                "variable": {
                    "value": "seq_ids",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "possible_values": [
                        [
                            "token_embeddings.size(1)",
                            "Call"
                        ],
                        [
                            "seq_length + 1",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MSELoss_409": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_412": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_236": {
                "*size": {
                    "value": "input_modal_shape",
                    "possible_values": [
                        [
                            "modal_embeddings.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "ones_243": {
                "*size": {
                    "value": "input_modal_shape",
                    "possible_values": [
                        [
                            "modal_embeddings.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_openai.py": {
        "torch": {
            "Attention_128": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "n_state": {
                    "value": "nx",
                    "possible_values": [
                        [
                            "config.n_embd",
                            "Attribute"
                        ],
                        [
                            "config.n_embd",
                            "Attribute"
                        ]
                    ]
                },
                "self.split_size": {
                    "value": "n_state",
                    "possible_values": [
                        [
                            "nx",
                            "Name"
                        ]
                    ]
                },
                "self.scale": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "Dropout_143": {
                    "variable": {
                        "value": "self.attn_dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.attn_pdrop",
                        "possible_values": []
                    }
                },
                "Dropout_144": {
                    "variable": {
                        "value": "self.resid_dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.resid_pdrop",
                        "possible_values": []
                    }
                }
            },
            "MLP_222": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Dropout_229": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.resid_pdrop",
                        "possible_values": []
                    }
                }
            },
            "Block_237": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "LayerNorm_242": {
                    "variable": {
                        "value": "self.ln_1",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "nx",
                        "possible_values": [
                            [
                                "config.n_embd",
                                "Attribute"
                            ],
                            [
                                "config.n_embd",
                                "Attribute"
                            ]
                        ]
                    },
                    "eps": {
                        "value": "config.layer_norm_epsilon",
                        "possible_values": []
                    }
                },
                "LayerNorm_244": {
                    "variable": {
                        "value": "self.ln_2",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "nx",
                        "possible_values": [
                            [
                                "config.n_embd",
                                "Attribute"
                            ],
                            [
                                "config.n_embd",
                                "Attribute"
                            ]
                        ]
                    },
                    "eps": {
                        "value": "config.layer_norm_epsilon",
                        "possible_values": []
                    }
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "model.tokens_embed.weight.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[1]",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "model.positions_embed.weight.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_params[0]",
                    "possible_values": []
                }
            },
            "from_numpy_113": {
                "variable": {
                    "value": "pointer.data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "possible_values": []
                }
            },
            "ones_150": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_head",
                    "possible_values": []
                },
                "out": {
                    "value": "self.split_size // self.n_head",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "index_attn",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[index, index + self.split_size, index + 2 * self.split_size]",
                    "possible_values": []
                }
            },
            "matmul_167": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "possible_values": []
                },
                "other": {
                    "value": "k",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_366": {
                "variable": {
                    "value": "self.tokens_embed",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "possible_values": []
                }
            },
            "Embedding_367": {
                "variable": {
                    "value": "self.positions_embed",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_positions",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.n_embd",
                    "possible_values": []
                }
            },
            "Dropout_368": {
                "variable": {
                    "value": "self.drop",
                    "possible_values": []
                },
                "p": {
                    "value": "config.embd_pdrop",
                    "possible_values": []
                }
            },
            "ModuleList_369": {
                "variable": {
                    "value": "self.h",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(config.n_ctx, config, scale=True) for _ in range(config.n_layer)]",
                    "possible_values": []
                }
            },
            "Linear_523": {
                "variable": {
                    "value": "self.lm_head",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Linear_630": {
                "variable": {
                    "value": "self.lm_head",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.n_embd",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_408": {
                "variable": {
                    "value": "position_ids",
                    "possible_values": []
                },
                "start": {
                    "value": "input_shape[-1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_557": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_665": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_671": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tanh_118": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "possible_values": []
                }
            },
            "tril_134": {
                "input": {
                    "value": "torch.ones(n_ctx, n_ctx)",
                    "possible_values": []
                }
            },
            "Softmax_179": {
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_186": {
                "input": {
                    "value": "w",
                    "possible_values": [
                        [
                            "torch.matmul(q, k)",
                            "Call"
                        ],
                        [
                            "w / math.sqrt(v.size(-1))",
                            "BinOp"
                        ],
                        [
                            "w * b + -10000.0 * (1 - b)",
                            "BinOp"
                        ],
                        [
                            "w + attention_mask",
                            "BinOp"
                        ],
                        [
                            "nn.Softmax(dim=-1)(w)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(w)",
                            "Call"
                        ],
                        [
                            "w * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "possible_values": []
                }
            },
            "arange_156": {
                "start": {
                    "value": "len(mask)",
                    "possible_values": []
                }
            },
            "ones_134": {
                "*size": {
                    "value": "n_ctx",
                    "possible_values": []
                },
                "out": {
                    "value": "n_ctx",
                    "possible_values": []
                }
            },
            "pow_118": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ],
                        [
                            "self.c_attn(x)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_roberta.py": {
        "torch": {
            "RobertaLMHead_298": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_303": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Linear_306": {
                    "variable": {
                        "value": "self.decoder",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.vocab_size",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Parameter_307": {
                    "variable": {
                        "value": "self.bias",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(config.vocab_size)",
                        "possible_values": []
                    }
                }
            },
            "RobertaClassificationHead_636": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_641": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Dropout_642": {
                    "variable": {
                        "value": "self.dropout",
                        "possible_values": []
                    },
                    "p": {
                        "value": "config.hidden_dropout_prob",
                        "possible_values": []
                    }
                },
                "Linear_643": {
                    "variable": {
                        "value": "self.out_proj",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.num_labels",
                        "possible_values": []
                    }
                }
            },
            "Embedding_50": {
                "variable": {
                    "value": "self.word_embeddings",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "possible_values": []
                }
            },
            "Embedding_51": {
                "variable": {
                    "value": "self.position_embeddings",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "possible_values": []
                }
            },
            "arange_89": {
                "variable": {
                    "value": "position_ids",
                    "possible_values": []
                },
                "start": {
                    "value": "self.padding_idx + 1",
                    "possible_values": []
                },
                "end": {
                    "value": "sequence_length + self.padding_idx + 1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs_embeds.device",
                    "possible_values": []
                }
            },
            "Dropout_490": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Linear_491": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Dropout_578": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Linear_579": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "tanh_649": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "gelu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x) + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_703": {
                "variable": {
                    "value": "self.qa_outputs",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_291": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_527": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_612": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_745": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_76": {
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "x.ne(self.padding_idx).long()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_307": {
                "*size": {
                    "value": "config.vocab_size",
                    "possible_values": []
                }
            },
            "MSELoss_396": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_399": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_transfo_xl_utilities.py": {
        "torch": {
            "ProjectedAdaptiveLogSoftmax_30": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.n_token": {
                    "value": "n_token",
                    "possible_values": []
                },
                "self.d_embed": {
                    "value": "d_embed",
                    "possible_values": []
                },
                "self.d_proj": {
                    "value": "d_proj",
                    "possible_values": []
                },
                "self.div_val": {
                    "value": "div_val",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_50": {
                    "variable": {
                        "value": "self.out_layers",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ParameterList_51": {
                    "variable": {
                        "value": "self.out_projs",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "self.keep_order": {
                    "value": "keep_order",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_301": {
                "variable": {
                    "value": "all_ids",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labels.view(-1), neg_samples]",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[true_logits[:, :, None], sample_logits]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.cluster_weight",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters, self.d_embed)",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.cluster_bias",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_clusters)",
                    "possible_values": []
                }
            },
            "linear_74": {
                "variable": {
                    "value": "logit",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": []
                }
            },
            "linear_77": {
                "variable": {
                    "value": "proj_hid",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "possible_values": []
                },
                "weight": {
                    "value": "proj.t().contiguous()",
                    "possible_values": []
                }
            },
            "linear_78": {
                "variable": {
                    "value": "logit",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_hid",
                    "possible_values": [
                        [
                            "F.linear(hidden, proj.t().contiguous())",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": []
                }
            },
            "log_softmax_134": {
                "variable": {
                    "value": "head_logprob",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_226": {
                "variable": {
                    "value": "head_logprob",
                    "possible_values": []
                },
                "input": {
                    "value": "head_logit",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, head_weight, head_bias, head_proj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "arange_259": {
                "variable": {
                    "value": "log_indices",
                    "possible_values": []
                },
                "start": {
                    "value": "1.0",
                    "possible_values": []
                },
                "end": {
                    "value": "range_max + 2.0",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "multinomial_280": {
                "variable": {
                    "value": "neg_samples",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dist",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_tries",
                    "possible_values": [
                        [
                            "2 * n_sample",
                            "BinOp"
                        ]
                    ]
                },
                "replacement": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "unique_280": {
                "variable": {
                    "value": "neg_samples",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "log_softmax_111": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_like_139": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "labels.view(-1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden.device",
                    "possible_values": []
                }
            },
            "log_softmax_202": {
                "input": {
                    "value": "logit",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "no_grad_257": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_279": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "einsum_312": {
                "equation": {
                    "value": "ijk,ijk->ij",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[true_w, inputs]",
                    "possible_values": []
                }
            },
            "einsum_313": {
                "equation": {
                    "value": "lk,ijk->ijl",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[sample_w, inputs]",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "self.n_clusters",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_embed",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "self.n_clusters",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "d_embed",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_token",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "weight_i",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "bias_i",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "log_softmax_168": {
                "variable": {
                    "value": "tail_logprob_i",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "weight_i",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight_i, self.cluster_weight]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "bias_i",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias_i, self.cluster_bias]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "log_softmax_238": {
                "variable": {
                    "value": "tail_logprob_i",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_logit_i",
                    "possible_values": [
                        [
                            "self._compute_logit(hidden_i, weight_i, bias_i, proj_i)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, weight_i, bias_i, proj_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_emb_i)",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "d_emb_i",
                    "possible_values": [
                        [
                            "d_embed // div_val ** i",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "r_idx - l_idx",
                    "possible_values": []
                }
            },
            "log_softmax_109": {
                "input": {
                    "value": "logit",
                    "possible_values": [
                        [
                            "F.linear(hidden, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "F.linear(proj_hid, weight, bias=bias)",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ],
                        [
                            "self._compute_logit(hidden, self.out_layers[0].weight, self.out_layers[0].bias, self.out_projs[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "gather_109": {
                "input": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "labels.unsqueeze(1)",
                    "possible_values": []
                }
            },
            "squeeze_109": {
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "data": {
                    "value": "torch.FloatTensor(d_proj, d_embed)",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_utils.py": {
        "torch": {
            "PreTrainedModel_69": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "kwargs.pop('config', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1D_1100": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.nf": {
                    "value": "nf",
                    "possible_values": []
                },
                "empty_1107": {
                    "variable": {
                        "value": "w",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "nx",
                        "possible_values": []
                    },
                    "out": {
                        "value": "nf",
                        "possible_values": []
                    }
                },
                "Parameter_1109": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "w",
                        "possible_values": [
                            [
                                "torch.empty(nx, nf)",
                                "Call"
                            ]
                        ]
                    }
                },
                "Parameter_1110": {
                    "variable": {
                        "value": "self.bias",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(nf)",
                        "possible_values": []
                    }
                }
            },
            "PoolerStartLogits_1119": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_1124": {
                    "variable": {
                        "value": "self.dense",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "PoolerEndLogits_1143": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_1149": {
                    "variable": {
                        "value": "self.dense_0",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size * 2",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Tanh_1150": {
                    "variable": {
                        "value": "self.activation",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "LayerNorm_1151": {
                    "variable": {
                        "value": "self.LayerNorm",
                        "possible_values": []
                    },
                    "normalized_shape": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "config.layer_norm_eps",
                        "possible_values": []
                    }
                },
                "Linear_1152": {
                    "variable": {
                        "value": "self.dense_1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "PoolerAnswerClass_1190": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_1195": {
                    "variable": {
                        "value": "self.dense_0",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size * 2",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    }
                },
                "Tanh_1196": {
                    "variable": {
                        "value": "self.activation",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Linear_1197": {
                    "variable": {
                        "value": "self.dense_1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "config.hidden_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "SQuADHead_1237": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "SequenceSummary_1354": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Identity_1380": {
                    "variable": {
                        "value": "self.summary",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Identity_1388": {
                    "variable": {
                        "value": "self.activation",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Identity_1392": {
                    "variable": {
                        "value": "self.first_dropout",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Identity_1396": {
                    "variable": {
                        "value": "self.last_dropout",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "Linear_1446": {
                "variable": {
                    "value": "new_layer",
                    "possible_values": []
                },
                "in_features": {
                    "value": "new_size[1]",
                    "possible_values": []
                },
                "out_features": {
                    "value": "new_size[0]",
                    "possible_values": []
                },
                "bias": {
                    "value": "layer.bias is not None",
                    "possible_values": []
                }
            },
            "Identity_45": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Embedding_221": {
                "variable": {
                    "value": "new_embeddings",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "new_num_tokens",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "old_embedding_dim",
                    "possible_values": []
                }
            },
            "no_grad_566": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_863": {
                "variable": {
                    "value": "beam_scores",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_beams)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "possible_values": []
                }
            },
            "sort_1037": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cumsum_1038": {
                "variable": {
                    "value": "cumulative_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "addmm_1114": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "output_embeddings.weight",
                    "possible_values": []
                },
                "data": {
                    "value": "input_embeddings.weight.clone()",
                    "possible_values": []
                }
            },
            "pad_157": {
                "variable": {
                    "value": "output_embeddings.bias.data",
                    "possible_values": []
                },
                "input": {
                    "value": "output_embeddings.bias.data",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, output_embeddings.weight.shape[0] - output_embeddings.bias.shape[0])",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "save_276": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "possible_values": [
                        [
                            "os.path.join(save_directory, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_708": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "bos_token_id",
                    "possible_values": [
                        [
                            "bos_token_id if bos_token_id is not None else self.config.bos_token_id",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "possible_values": []
                }
            },
            "cat_819": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, tokens_to_add.unsqueeze(-1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_971": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, beam_words.unsqueeze(1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1303": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "softmax_1322": {
                "variable": {
                    "value": "start_log_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "possible_values": [
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "topk_1324": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "gather_1328": {
                "variable": {
                    "value": "start_states",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1336": {
                "variable": {
                    "value": "end_log_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "possible_values": [
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "topk_1338": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "einsum_1344": {
                "variable": {
                    "value": "start_states",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "possible_values": []
                }
            },
            "Linear_1386": {
                "variable": {
                    "value": "self.summary",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tanh_1390": {
                "variable": {
                    "value": "self.activation",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dropout_1394": {
                "variable": {
                    "value": "self.first_dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_first_dropout",
                    "possible_values": []
                }
            },
            "Dropout_1398": {
                "variable": {
                    "value": "self.last_dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_last_dropout",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "data": {
                    "value": "DUMMY_INPUTS",
                    "possible_values": []
                }
            },
            "load_449": {
                "variable": {
                    "value": "state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_archive_file",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "cached_path(archive_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies, resume_download=resume_download)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "multinomial_812": {
                "variable": {
                    "value": "next_token",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(next_token_logits, dim=-1)",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "squeeze_812": {
                "variable": {
                    "value": "next_token",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "argmax_815": {
                "variable": {
                    "value": "next_token",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "multinomial_901": {
                "variable": {
                    "value": "next_words",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(scores, dim=-1)",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "log_softmax_903": {
                "variable": {
                    "value": "_scores",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "scores / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "gather_904": {
                "variable": {
                    "value": "_scores",
                    "possible_values": []
                },
                "input": {
                    "value": "_scores",
                    "possible_values": [
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.gather(_scores, -1, next_words)",
                            "Call"
                        ],
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "_scores.view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "index": {
                    "value": "next_words",
                    "possible_values": [
                        [
                            "torch.multinomial(F.softmax(scores, dim=-1), num_samples=2)",
                            "Call"
                        ],
                        [
                            "next_words.view(batch_size, 2 * num_beams)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_911": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "scores / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "topk_917": {
                "variable": {
                    "value": "(next_scores, next_words)",
                    "possible_values": []
                },
                "input": {
                    "value": "_scores",
                    "possible_values": [
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.gather(_scores, -1, next_words)",
                            "Call"
                        ],
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "_scores.view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2 * num_beams",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "softmax_1038": {
                "input": {
                    "value": "sorted_logits",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_1110": {
                "*size": {
                    "value": "nf",
                    "possible_values": []
                }
            },
            "cat_1176": {
                "tensors": {
                    "value": "[hidden_states, start_states]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_1230": {
                "tensors": {
                    "value": "[start_states, cls_token_state]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_1311": {
                "variable": {
                    "value": "loss_fct_cls",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_980": {
                "variable": {
                    "value": "reordered_layer_past",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reordered_layer_past",
                    "possible_values": [
                        [
                            "[layer_past[:, i].unsqueeze(1).clone().detach() for i in beam_idx]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(reordered_layer_past, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_901": {
                "input": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "scores / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "topk_1033": {
                "input": {
                    "value": "logits",
                    "possible_values": []
                },
                "k": {
                    "value": "top_k",
                    "possible_values": [
                        [
                            "min(max(top_k, min_tokens_to_keep), logits.size(-1))",
                            "Call"
                        ],
                        [
                            "top_k if top_k is not None else self.config.top_k",
                            "IfExp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "full_like_1415": {
                "variable": {
                    "value": "cls_index",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states[..., :1, :]",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "hidden_states.shape[-2] - 1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "softmax_812": {
                "input": {
                    "value": "next_token_logits",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/modeling_xlm.py": {
        "torch": {
            "MultiHeadAttention_94": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "self.n_heads": {
                    "value": "n_heads",
                    "possible_values": [
                        [
                            "self.n_heads",
                            "Attribute"
                        ]
                    ]
                },
                "Linear_107": {
                    "variable": {
                        "value": "self.q_lin",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "dim",
                        "possible_values": [
                            [
                                "config.emb_dim",
                                "Attribute"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "dim",
                        "possible_values": [
                            [
                                "config.emb_dim",
                                "Attribute"
                            ]
                        ]
                    }
                },
                "Linear_108": {
                    "variable": {
                        "value": "self.k_lin",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "dim",
                        "possible_values": [
                            [
                                "config.emb_dim",
                                "Attribute"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "dim",
                        "possible_values": [
                            [
                                "config.emb_dim",
                                "Attribute"
                            ]
                        ]
                    }
                },
                "Linear_109": {
                    "variable": {
                        "value": "self.v_lin",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "dim",
                        "possible_values": [
                            [
                                "config.emb_dim",
                                "Attribute"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "dim",
                        "possible_values": [
                            [
                                "config.emb_dim",
                                "Attribute"
                            ]
                        ]
                    }
                },
                "Linear_110": {
                    "variable": {
                        "value": "self.out_lin",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "dim",
                        "possible_values": [
                            [
                                "config.emb_dim",
                                "Attribute"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "dim",
                        "possible_values": [
                            [
                                "config.emb_dim",
                                "Attribute"
                            ]
                        ]
                    }
                }
            },
            "TransformerFFN_198": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_202": {
                    "variable": {
                        "value": "self.lin1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "in_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "dim_hidden",
                        "possible_values": []
                    }
                },
                "Linear_203": {
                    "variable": {
                        "value": "self.lin2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "dim_hidden",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "out_dim",
                        "possible_values": []
                    }
                }
            },
            "XLMPredLayer_582": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "arange_73": {
                "variable": {
                    "value": "alen",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "lengths.device",
                    "possible_values": []
                }
            },
            "ones_117": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "possible_values": []
                },
                "out": {
                    "value": "attention_head_size",
                    "possible_values": [
                        [
                            "self.dim // self.n_heads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_178": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "possible_values": [
                        [
                            "shape(self.q_lin(input))",
                            "Call"
                        ],
                        [
                            "q / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(2, 3)",
                    "possible_values": []
                }
            },
            "softmax_182": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.float()",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "dropout_183": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "matmul_189": {
                "variable": {
                    "value": "context",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "possible_values": [
                        [
                            "shape(self.v_lin(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v_lin(v))",
                            "Call"
                        ],
                        [
                            "torch.cat([v_, v], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_210": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.lin1(input)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "tensor_229": {
                "variable": {
                    "value": "inputs_list",
                    "possible_values": []
                },
                "data": {
                    "value": "[[7, 6, 0, 0, 1], [1, 2, 3, 0, 0], [0, 0, 0, 4, 5]]",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "variable": {
                    "value": "attns_list",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "possible_values": []
                }
            },
            "Embedding_391": {
                "variable": {
                    "value": "self.position_embeddings",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "possible_values": []
                }
            },
            "Embedding_396": {
                "variable": {
                    "value": "self.embeddings",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_words",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.pad_index",
                    "possible_values": []
                }
            },
            "LayerNorm_397": {
                "variable": {
                    "value": "self.layer_norm_emb",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.dim",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "possible_values": []
                }
            },
            "ModuleList_400": {
                "variable": {
                    "value": "self.attentions",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_401": {
                "variable": {
                    "value": "self.layer_norm1",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_402": {
                "variable": {
                    "value": "self.ffns",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_403": {
                "variable": {
                    "value": "self.layer_norm2",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "dropout_532": {
                "variable": {
                    "value": "tensor",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "inputs_embeds + self.position_embeddings(position_ids).expand_as(inputs_embeds)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.lang_embeddings(langs)",
                            "BinOp"
                        ],
                        [
                            "tensor + self.embeddings(token_type_ids)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm_emb(tensor)",
                            "Call"
                        ],
                        [
                            "F.dropout(tensor, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "tensor * mask.unsqueeze(-1).to(tensor.dtype)",
                            "BinOp"
                        ],
                        [
                            "tensor + attn",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm1[i](tensor)",
                            "Call"
                        ],
                        [
                            "tensor + self.ffns[i](tensor)",
                            "BinOp"
                        ],
                        [
                            "self.layer_norm2[i](tensor)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "full_678": {
                "variable": {
                    "value": "mask_token",
                    "possible_values": []
                },
                "size": {
                    "value": "(effective_batch_size, 1)",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "mask_token_id",
                    "possible_values": [
                        [
                            "self.config.mask_token_id",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "possible_values": []
                }
            },
            "cat_679": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, mask_token]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_862": {
                "variable": {
                    "value": "self.qa_outputs",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "variable": {
                    "value": "langs_list",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 1, 0, 0, 1], [1, 1, 1, 0, 0], [1, 0, 0, 1, 1]]",
                    "possible_values": []
                }
            },
            "Embedding_395": {
                "variable": {
                    "value": "self.lang_embeddings",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_langs",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.dim",
                    "possible_values": []
                }
            },
            "arange_482": {
                "variable": {
                    "value": "position_ids",
                    "possible_values": []
                },
                "start": {
                    "value": "slen",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "dropout_547": {
                "variable": {
                    "value": "attn",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "possible_values": [
                        [
                            "attn_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "F.dropout(attn, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "Linear_595": {
                "variable": {
                    "value": "self.proj",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "config.n_words",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "AdaptiveLogSoftmaxWithLoss_597": {
                "variable": {
                    "value": "self.proj",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "config.emb_dim",
                            "Attribute"
                        ]
                    ]
                },
                "n_classes": {
                    "value": "config.n_words",
                    "possible_values": []
                },
                "cutoffs": {
                    "value": "config.asm_cutoffs",
                    "possible_values": []
                },
                "div_value": {
                    "value": "config.asm_div_value",
                    "possible_values": []
                },
                "head_bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "full_like_681": {
                "variable": {
                    "value": "langs",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "possible_values": [
                        [
                            "input_ids[:, -_slen:]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([input_ids, mask_token], dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "lang_id",
                    "possible_values": [
                        [
                            "self.config.lang_id",
                            "Attribute"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_914": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_66": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "possible_values": []
                }
            },
            "cross_entropy_613": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(-1, self.n_words)",
                    "possible_values": []
                },
                "target": {
                    "value": "y.view(-1)",
                    "possible_values": []
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "possible_values": []
                }
            },
            "MSELoss_798": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_801": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "k",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k_, k]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_, v]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "LayerNorm_410": {
                "normalized_shape": {
                    "value": "self.dim",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "possible_values": []
                }
            },
            "LayerNorm_415": {
                "normalized_shape": {
                    "value": "self.dim",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "possible_values": []
                }
            },
            "arange_123": {
                "start": {
                    "value": "len(mask)",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/optimization.py": {
        "torch": {
            "AdamW_96": {
                "base_class_0": {
                    "value": "torch.optim.Optimizer",
                    "possible_values": []
                }
            },
            "LambdaLR_31": {
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda _: 1",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_44": {
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_59": {
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_74": {
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LambdaLR_93": {
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_144": {
                "variable": {
                    "value": "state[exp_avg]",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            },
            "zeros_like_146": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/src/transformers/sde_embedding.py": {
        "torch": {
            "CharacterNgramEmbedder_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.embedding_dim": {
                    "value": "word_embed_dim",
                    "possible_values": []
                },
                "self.pad_token_id": {
                    "value": "pad_token_id",
                    "possible_values": []
                },
                "last_dim": {
                    "value": "char_embed_dim",
                    "possible_values": []
                }
            },
            "SDE_73": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.pad_token_id": {
                    "value": "pad_token_id",
                    "possible_values": []
                },
                "self.unk_token_id": {
                    "value": "unk_token_id",
                    "possible_values": []
                },
                "self.sep_token_id": {
                    "value": "sep_token_id",
                    "possible_values": []
                },
                "self.cls_token_id": {
                    "value": "cls_token_id",
                    "possible_values": []
                },
                "self.embedding_dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.preset_emb": {
                    "value": "char_emb",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "precalcSDE_136": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.embedding_dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "ngram_to_id['<UNK>']": {
                    "value": "UNK_ID",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "EmbeddingBag_162": {
                    "variable": {
                        "value": "self.ngram_emb",
                        "possible_values": []
                    },
                    "num_embeddings": {
                        "value": "len(ngram_to_id)",
                        "possible_values": []
                    },
                    "embedding_dim": {
                        "value": "dim",
                        "possible_values": [
                            [
                                "128",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "mode": {
                        "value": "ngram_pool_mode",
                        "possible_values": [
                            [
                                "'sum'",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "Parameter_166": {
                    "variable": {
                        "value": "self.latent_mat",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.empty(latent, dim)",
                        "possible_values": []
                    }
                },
                "Parameter_167": {
                    "variable": {
                        "value": "self.special_emb",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.empty(dictionary.nspecial, dim)",
                        "possible_values": []
                    }
                }
            },
            "clamp_63": {
                "variable": {
                    "value": "char_counts",
                    "possible_values": []
                },
                "input": {
                    "value": "non_pad_mask.sum(dim=-1)",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tanh_97": {
                "variable": {
                    "value": "ngram_weight",
                    "possible_values": []
                },
                "input": {
                    "value": "ngram_weight",
                    "possible_values": [
                        [
                            "self.char_ngram_embedder(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(ngram_weight)",
                            "Call"
                        ],
                        [
                            "self.ngram_emb(self.ngram_ids, self.ngram_offsets)",
                            "Call"
                        ],
                        [
                            "torch.tanh(ngram_weight)",
                            "Call"
                        ],
                        [
                            "self.ngram_emb(self.ngram_ids, self.ngram_offsets)",
                            "Call"
                        ],
                        [
                            "torch.tanh(ngram_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_194": {
                "variable": {
                    "value": "ngram_weight",
                    "possible_values": []
                },
                "input": {
                    "value": "ngram_weight",
                    "possible_values": [
                        [
                            "self.char_ngram_embedder(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(ngram_weight)",
                            "Call"
                        ],
                        [
                            "self.ngram_emb(self.ngram_ids, self.ngram_offsets)",
                            "Call"
                        ],
                        [
                            "torch.tanh(ngram_weight)",
                            "Call"
                        ],
                        [
                            "self.ngram_emb(self.ngram_ids, self.ngram_offsets)",
                            "Call"
                        ],
                        [
                            "torch.tanh(ngram_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_200": {
                "variable": {
                    "value": "latent_scores",
                    "possible_values": []
                },
                "input": {
                    "value": "lang_emb",
                    "possible_values": [
                        [
                            "ngram_weight",
                            "Name"
                        ],
                        [
                            "ngram_weight",
                            "Name"
                        ],
                        [
                            "self.language_transformations[lang](lang_indep_emb)",
                            "Call"
                        ],
                        [
                            "torch.tanh(lang_emb)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.latent_mat.transpose(0, 1)",
                    "possible_values": []
                }
            },
            "softmax_201": {
                "variable": {
                    "value": "latent_distribution",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_scores",
                    "possible_values": [
                        [
                            "torch.matmul(lang_emb, self.latent_mat.transpose(0, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(lang_emb, self.latent_mat.transpose(0, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(lang_emb, self.latent_mat.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_202": {
                "variable": {
                    "value": "latent_emb",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_distribution",
                    "possible_values": [
                        [
                            "torch.softmax(latent_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(latent_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(latent_scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.latent_mat",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "emb_weight",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.special_emb, token_emb)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "embedding_208": {
                "variable": {
                    "value": "sde_emb",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "char_embs.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "x / char_counts.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.highway(x)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "emb_weight",
                    "possible_values": [
                        [
                            "torch.cat((self.special_emb, token_emb), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "possible_values": []
                }
            },
            "tanh_226": {
                "variable": {
                    "value": "ngram_weight",
                    "possible_values": []
                },
                "input": {
                    "value": "ngram_weight",
                    "possible_values": [
                        [
                            "self.char_ngram_embedder(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(ngram_weight)",
                            "Call"
                        ],
                        [
                            "self.ngram_emb(self.ngram_ids, self.ngram_offsets)",
                            "Call"
                        ],
                        [
                            "torch.tanh(ngram_weight)",
                            "Call"
                        ],
                        [
                            "self.ngram_emb(self.ngram_ids, self.ngram_offsets)",
                            "Call"
                        ],
                        [
                            "torch.tanh(ngram_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_227": {
                "variable": {
                    "value": "ngram_emb_weight",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.special_emb, ngram_weight)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "embedding_228": {
                "variable": {
                    "value": "lang_indep_emb",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "char_embs.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "x / char_counts.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.highway(x)",
                            "Call"
                        ],
                        [
                            "self.projection(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "ngram_emb_weight",
                    "possible_values": [
                        [
                            "torch.cat((self.special_emb, ngram_weight), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "possible_values": []
                }
            },
            "tanh_231": {
                "variable": {
                    "value": "lang_emb",
                    "possible_values": []
                },
                "input": {
                    "value": "lang_emb",
                    "possible_values": [
                        [
                            "ngram_weight",
                            "Name"
                        ],
                        [
                            "ngram_weight",
                            "Name"
                        ],
                        [
                            "self.language_transformations[lang](lang_indep_emb)",
                            "Call"
                        ],
                        [
                            "torch.tanh(lang_emb)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_233": {
                "variable": {
                    "value": "latent_scores",
                    "possible_values": []
                },
                "input": {
                    "value": "lang_emb",
                    "possible_values": [
                        [
                            "ngram_weight",
                            "Name"
                        ],
                        [
                            "ngram_weight",
                            "Name"
                        ],
                        [
                            "self.language_transformations[lang](lang_indep_emb)",
                            "Call"
                        ],
                        [
                            "torch.tanh(lang_emb)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.latent_mat.transpose(0, 1)",
                    "possible_values": []
                }
            },
            "softmax_234": {
                "variable": {
                    "value": "latent_distribution",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_scores",
                    "possible_values": [
                        [
                            "torch.matmul(lang_emb, self.latent_mat.transpose(0, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(lang_emb, self.latent_mat.transpose(0, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(lang_emb, self.latent_mat.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_235": {
                "variable": {
                    "value": "latent_emb",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_distribution",
                    "possible_values": [
                        [
                            "torch.softmax(latent_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(latent_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(latent_scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.latent_mat",
                    "possible_values": []
                }
            },
            "Embedding_21": {
                "variable": {
                    "value": "self.char_embeddings",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "char_embed_dim",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "vocab.pad()",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.projection",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_dim",
                    "possible_values": [
                        [
                            "char_embed_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "word_embed_dim",
                    "possible_values": []
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.latent_mat",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(latent, dim)",
                    "possible_values": []
                }
            },
            "matmul_105": {
                "variable": {
                    "value": "latent_scores",
                    "possible_values": []
                },
                "input": {
                    "value": "lang_emb",
                    "possible_values": [
                        [
                            "ngram_weight",
                            "Name"
                        ],
                        [
                            "ngram_weight",
                            "Name"
                        ],
                        [
                            "self.language_transformations[lang](lang_indep_emb)",
                            "Call"
                        ],
                        [
                            "torch.tanh(lang_emb)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.latent_mat.transpose(0, 1)",
                    "possible_values": []
                }
            },
            "softmax_106": {
                "variable": {
                    "value": "latent_distribution",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_scores",
                    "possible_values": [
                        [
                            "torch.matmul(lang_emb, self.latent_mat.transpose(0, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(lang_emb, self.latent_mat.transpose(0, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(lang_emb, self.latent_mat.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "matmul_107": {
                "variable": {
                    "value": "latent_emb",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_distribution",
                    "possible_values": [
                        [
                            "torch.softmax(latent_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(latent_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.softmax(latent_scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.latent_mat",
                    "possible_values": []
                }
            },
            "empty_166": {
                "*size": {
                    "value": "latent",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ],
                        [
                            "10000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_167": {
                "*size": {
                    "value": "dictionary.nspecial",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_87": {
                "*size": {
                    "value": "latent",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ],
                        [
                            "10000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/src/transformers/tokenization_transfo_xl.py": {
        "torch": {
            "load_482": {
                "variable": {
                    "value": "corpus_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_corpus_file",
                    "possible_values": [
                        [
                            "cached_path(corpus_file, cache_dir=cache_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_557": {
                "variable": {
                    "value": "corpus",
                    "possible_values": []
                },
                "f": {
                    "value": "fn_pickle",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_108": {
                "variable": {
                    "value": "vocab_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_vocab_file",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_162": {
                "obj": {
                    "value": "self.__dict__",
                    "possible_values": []
                },
                "f": {
                    "value": "vocab_file",
                    "possible_values": [
                        [
                            "os.path.join(vocab_path, VOCAB_FILES_NAMES['pretrained_vocab_file'])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_198": {
                "variable": {
                    "value": "encoded",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_212": {
                "variable": {
                    "value": "encoded",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_487": {
                "variable": {
                    "value": "corpus.train",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.train",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_489": {
                "variable": {
                    "value": "corpus.valid",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.valid",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_491": {
                "variable": {
                    "value": "corpus.test",
                    "possible_values": []
                },
                "data": {
                    "value": "corpus.test",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "save_579": {
                "obj": {
                    "value": "corpus",
                    "possible_values": [
                        [
                            "torch.load(fn_pickle)",
                            "Call"
                        ],
                        [
                            "pickle.load(fp)",
                            "Call"
                        ],
                        [
                            "TransfoXLCorpus(datadir, dataset, **kwargs)",
                            "Call"
                        ],
                        [
                            "cls(*inputs, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "possible_values": [
                        [
                            "os.path.join(datadir, 'cache.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/templates/adding_a_new_example_script/run_xxx.py": {
        "torch": {
            "DataLoader_102": {
                "variable": {
                    "value": "train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                }
            },
            "DataLoader_246": {
                "variable": {
                    "value": "eval_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset) if args.local_rank == -1 else DistributedSampler(dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_373": {
                "variable": {
                    "value": "all_input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_374": {
                "variable": {
                    "value": "all_segment_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_375": {
                "variable": {
                    "value": "all_cls_index",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.cls_index for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_376": {
                "variable": {
                    "value": "all_p_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.p_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "manual_seed_86": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "SummaryWriter_98": {
                "variable": {
                    "value": "tb_writer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataParallel_132": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_136": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_350": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_378": {
                "variable": {
                    "value": "all_example_index",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_379": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "tensor_383": {
                "variable": {
                    "value": "all_start_positions",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.start_position for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_384": {
                "variable": {
                    "value": "all_end_positions",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.end_position for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_385": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "device_594": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "possible_values": []
                }
            },
            "device_count_595": {
                "variable": {
                    "value": "args.n_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_598": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_88": {
                "seed": {
                    "value": "args.seed",
                    "possible_values": []
                }
            },
            "RandomSampler_101": {
                "data_source": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_101": {
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False, output_examples=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_245": {
                "data_source": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_245": {
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_example_index, all_cls_index, all_p_mask)",
                            "Call"
                        ],
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_start_positions, all_end_positions, all_cls_index, all_p_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_597": {
                "device": {
                    "value": "args.local_rank",
                    "possible_values": []
                }
            },
            "save_683": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_366": {
                "obj": {
                    "value": "features",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples=examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=not evaluate)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(input_file), 'cached_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length)))",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__191": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "clip_grad_norm__193": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "possible_values": []
                }
            },
            "save_221": {
                "obj": {
                    "value": "args",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "possible_values": []
                }
            },
            "is_available_594": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/templates/adding_a_new_model/convert_xxx_original_tf_checkpoint_to_pytorch.py": {
        "torch": {
            "save_40": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "pytorch_dump_path",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/tests/test_modeling_common.py": {
        "torch": {
            "tensor_619": {
                "data": {
                    "value": "values",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "possible_values": []
                }
            },
            "tensor_635": {
                "data": {
                    "value": "values",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "possible_values": []
                }
            },
            "ones_270": {
                "variable": {
                    "value": "head_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.model_tester.num_hidden_layers",
                    "possible_values": []
                },
                "out": {
                    "value": "self.model_tester.num_attention_heads",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "possible_values": []
                }
            },
            "trace_216": {
                "variable": {
                    "value": "traced_gpt2",
                    "possible_values": []
                },
                "input": {
                    "value": "model",
                    "possible_values": [
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(tmpdirname)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config=configs_no_init)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(temp_dir_name)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(temp_dir_name)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "BertModel.from_pretrained(model_name)",
                            "Call"
                        ],
                        [
                            "BertModel.from_pretrained(model_name, output_attentions=True, output_hidden_states=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_229": {
                "variable": {
                    "value": "loaded_model",
                    "possible_values": []
                },
                "f": {
                    "value": "pt_file_name",
                    "possible_values": [
                        [
                            "os.path.join(tmp_dir_name, 'traced_model.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_323": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_355": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_382": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_410": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_424": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_436": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_456": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Embedding_519": {
                "num_embeddings": {
                    "value": "10",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "no_grad_599": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_224": {
                "obj": {
                    "value": "traced_gpt2",
                    "possible_values": [
                        [
                            "torch.jit.trace(model, inputs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "pt_file_name",
                    "possible_values": [
                        [
                            "os.path.join(tmp_dir_name, 'traced_model.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_292": {
                "input": {
                    "value": "torch.isnan(t)",
                    "possible_values": []
                }
            },
            "isnan_295": {
                "input": {
                    "value": "t",
                    "possible_values": [
                        [
                            "attentions",
                            "Name"
                        ]
                    ]
                }
            },
            "isnan_292": {
                "input": {
                    "value": "t",
                    "possible_values": [
                        [
                            "attentions",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/tests/test_modeling_roberta.py": {
        "torch": {
            "as_tensor_232": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[[12, 31, 13, model.padding_idx]]",
                    "possible_values": []
                }
            },
            "as_tensor_233": {
                "variable": {
                    "value": "expected_positions",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0 + model.padding_idx + 1, 1 + model.padding_idx + 1, 2 + model.padding_idx + 1, model.padding_idx]]",
                    "possible_values": []
                }
            },
            "Tensor_251": {
                "variable": {
                    "value": "inputs_embeds",
                    "possible_values": []
                }
            },
            "as_tensor_258": {
                "variable": {
                    "value": "expected_positions",
                    "possible_values": []
                },
                "data": {
                    "value": "[expected_single_positions, expected_single_positions]",
                    "possible_values": []
                }
            },
            "tensor_269": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "possible_values": []
                }
            },
            "Tensor_274": {
                "variable": {
                    "value": "expected_slice",
                    "possible_values": []
                }
            },
            "tensor_283": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "possible_values": []
                }
            },
            "Tensor_286": {
                "variable": {
                    "value": "expected_slice",
                    "possible_values": []
                }
            },
            "tensor_295": {
                "variable": {
                    "value": "input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 31414, 232, 328, 740, 1140, 12695, 69, 46078, 1588, 2]]",
                    "possible_values": []
                }
            },
            "Tensor_299": {
                "variable": {
                    "value": "expected_tensor",
                    "possible_values": []
                }
            },
            "all_239": {
                "input": {
                    "value": "torch.eq(position_ids, expected_positions)",
                    "possible_values": []
                }
            },
            "all_261": {
                "input": {
                    "value": "torch.eq(position_ids, expected_positions)",
                    "possible_values": []
                }
            },
            "allclose_277": {
                "input": {
                    "value": "output[:, :3, :3]",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_slice",
                    "possible_values": [
                        [
                            "torch.Tensor([[[33.8843, -4.3107, 22.7779], [4.6533, -2.8099, 13.6252], [1.8222, -3.6898, 8.86]]])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[[-0.0231, 0.0782, 0.0074], [-0.1854, 0.0539, -0.0174], [0.0548, 0.0799, 0.1687]]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "allclose_289": {
                "input": {
                    "value": "output[:, :3, :3]",
                    "possible_values": []
                },
                "other": {
                    "value": "expected_slice",
                    "possible_values": [
                        [
                            "torch.Tensor([[[33.8843, -4.3107, 22.7779], [4.6533, -2.8099, 13.6252], [1.8222, -3.6898, 8.86]]])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([[[-0.0231, 0.0782, 0.0074], [-0.1854, 0.0539, -0.0174], [0.0548, 0.0799, 0.1687]]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "allclose_300": {
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ],
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ],
                        [
                            "model(input_ids)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_tensor",
                    "possible_values": [
                        [
                            "torch.Tensor([[-0.9469, 0.3913, 0.5118]])",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "eq_239": {
                "input": {
                    "value": "position_ids",
                    "possible_values": [
                        [
                            "model.create_position_ids_from_input_ids(input_ids)",
                            "Call"
                        ],
                        [
                            "embeddings.create_position_ids_from_inputs_embeds(inputs_embeds)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_positions",
                    "possible_values": [
                        [
                            "torch.as_tensor([[0 + model.padding_idx + 1, 1 + model.padding_idx + 1, 2 + model.padding_idx + 1, model.padding_idx]])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor([expected_single_positions, expected_single_positions])",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_261": {
                "input": {
                    "value": "position_ids",
                    "possible_values": [
                        [
                            "model.create_position_ids_from_input_ids(input_ids)",
                            "Call"
                        ],
                        [
                            "embeddings.create_position_ids_from_inputs_embeds(inputs_embeds)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "expected_positions",
                    "possible_values": [
                        [
                            "torch.as_tensor([[0 + model.padding_idx + 1, 1 + model.padding_idx + 1, 2 + model.padding_idx + 1, model.padding_idx]])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor([expected_single_positions, expected_single_positions])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/transformers/tests/test_modeling_transfo_xl.py": {
        "torch": {
            "manual_seed_109": {
                "seed": {
                    "value": "self.seed",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/tests/test_modeling_xlnet.py": {
        "torch": {
            "zeros_112": {
                "variable": {
                    "value": "perm_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "self.seq_length + 1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "target_mapping",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "possible_values": []
                }
            },
            "manual_seed_164": {
                "seed": {
                    "value": "self.seed",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/transformers/tests/test_optimization.py": {
        "torch": {
            "tensor_70": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, -0.2, -0.1]",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "target",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.4, 0.2, -0.5]",
                    "possible_values": []
                }
            },
            "MSELoss_72": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "50",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "possible_values": []
                }
            },
            "load_57": {
                "variable": {
                    "value": "state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "possible_values": [
                        [
                            "os.path.join(tmpdirname, 'schedule.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_55": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "possible_values": [
                        [
                            "os.path.join(tmpdirname, 'schedule.bin')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "third_party/utils.py": {
        "torch": {
            "full_16": {
                "variable": {
                    "value": "probability_matrix",
                    "possible_values": []
                },
                "size": {
                    "value": "labels.shape",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "mlm_probability",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.15",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bernoulli_24": {
                "variable": {
                    "value": "masked_indices",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, mlm_probability)",
                            "Call"
                        ],
                        [
                            "torch.full(labels.shape, mlm_probability)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_33": {
                "variable": {
                    "value": "random_words",
                    "possible_values": []
                },
                "low": {
                    "value": "len(tokenizer)",
                    "possible_values": []
                },
                "high": {
                    "value": "labels.shape",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "full_53": {
                "variable": {
                    "value": "probability_matrix",
                    "possible_values": []
                },
                "size": {
                    "value": "labels.shape",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "mlm_probability",
                    "possible_values": [
                        [
                            "0.15",
                            "MethodArgument"
                        ],
                        [
                            "0.15",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bernoulli_61": {
                "variable": {
                    "value": "masked_indices",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, mlm_probability)",
                            "Call"
                        ],
                        [
                            "torch.full(labels.shape, mlm_probability)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_89": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "start": {
                    "value": "max_len",
                    "possible_values": [
                        [
                            "tokens.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "probs",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.mul_(tau)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Categorical_99": {
                "variable": {
                    "value": "num_words",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "possible_values": [
                        [
                            "torch.softmax(logits.mul_(tau), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bernoulli_104": {
                "variable": {
                    "value": "corrupt_pos",
                    "possible_values": []
                },
                "input": {
                    "value": "corrupt_pos",
                    "possible_values": [
                        [
                            "num_words.div_(lengths).unsqueeze(1).expand_as(tokens).contiguous().masked_fill_(sample_mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.bernoulli(corrupt_pos, out=corrupt_pos).byte().bool()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "corrupt_pos",
                    "possible_values": [
                        [
                            "num_words.div_(lengths).unsqueeze(1).expand_as(tokens).contiguous().masked_fill_(sample_mask, 0)",
                            "Call"
                        ],
                        [
                            "torch.bernoulli(corrupt_pos, out=corrupt_pos).byte().bool()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_110": {
                "variable": {
                    "value": "corrupts",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "special_tokens_mask",
                    "possible_values": [
                        [
                            "[tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ],
                        [
                            "[tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "possible_values": []
                }
            },
            "bernoulli_28": {
                "input": {
                    "value": "torch.full(labels.shape, 0.8)",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "special_tokens_mask",
                    "possible_values": [
                        [
                            "[tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ],
                        [
                            "[tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "possible_values": []
                }
            },
            "bernoulli_67": {
                "input": {
                    "value": "torch.full(labels.shape, 0.8)",
                    "possible_values": []
                }
            },
            "bernoulli_32": {
                "input": {
                    "value": "torch.full(labels.shape, 0.5)",
                    "possible_values": []
                }
            },
            "full_28": {
                "size": {
                    "value": "labels.shape",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.8",
                    "possible_values": []
                }
            },
            "full_67": {
                "size": {
                    "value": "labels.shape",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.8",
                    "possible_values": []
                }
            },
            "full_32": {
                "size": {
                    "value": "labels.shape",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "possible_values": []
                }
            }
        }
    },
    "third_party/xlm.py": {
        "torch": {
            "Dropout_43": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_67": {
                "variable": {
                    "value": "loss_fct",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}