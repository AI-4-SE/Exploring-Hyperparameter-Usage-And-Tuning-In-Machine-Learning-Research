{
    "base_module.py": {
        "tensorflow": {
            "concat_36": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_feature, noise]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_113": {
                "variable": {
                    "value": "ld",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ldp23, ldk23]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_12": {
                "name_or_scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "self.name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "tensorflow": {
            "ConfigProto_80": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_85": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "load_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.load_path, model_name)",
                            "Call"
                        ]
                    ]
                },
                "latest_filename": {
                    "value": "checkpoint",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_82": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "layers.py": {
        "tensorflow": {
            "constant_15": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_26": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable(name, shape=[in_dim, num_units])",
                            "Call"
                        ],
                        [
                            "weight_variable(name, shape=[in_dim, num_units])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_36": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable(name, shape=[in_dim, num_units])",
                            "Call"
                        ],
                        [
                            "weight_variable(name, shape=[in_dim, num_units])",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_38": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "layer + b",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "cam",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(cam)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "pose3d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(pose3d)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 3, 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "pose2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matmul(cam, pose3d)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_52": {
                "variable": {
                    "value": "Ct",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [-1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1], [0, 0, 0, 0, -1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(Ct, (tf.shape(pose3d)[0], 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 16, 15)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_72": {
                "variable": {
                    "value": "poses3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(pose3d, [-1, 3, 16])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "poses3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.reshape(pose3d, [-1, 3, 16]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.tile(Ct, (tf.shape(pose3d)[0], 1)), (-1, 16, 15))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "Psi",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(B, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(poses3, C)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_7": {
                "name": {
                    "value": "'W_' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_16": {
                "name": {
                    "value": "'b_' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.0, shape=shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_44": {
                "x": {
                    "value": "cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.to_float(cam), [-1, 2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_45": {
                "x": {
                    "value": "pose3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.to_float(pose3d), [-1, 3, 16])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_46": {
                "a": {
                    "value": "cam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.to_float(cam), [-1, 2, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "pose3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.to_float(pose3d), [-1, 3, 16])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_70": {
                "input": {
                    "value": "Ct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [-1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1], [0, 0, 0, 0, -1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(tf.shape(pose3d)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "tensor": {
                    "value": "pose3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.to_float(pose3d), [-1, 3, 16])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 3, 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_74": {
                "a": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(poses3, C)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_80": {
                "name": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_70": {
                "input": {
                    "value": "pose3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.to_float(pose3d), [-1, 3, 16])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main_mh.py": {
        "tensorflow": {
            "ConfigProto_96": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_99": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mmd.py": {
        "tensorflow": {
            "matmul_8": {
                "variable": {
                    "value": "K_XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_12": {
                "variable": {
                    "value": "K_XX",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_13": {
                "variable": {
                    "value": "K_YY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_23": {
                "variable": {
                    "value": "XX",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_24": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_25": {
                "variable": {
                    "value": "YY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diag_part_27": {
                "variable": {
                    "value": "X_sqnorms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(X, X, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(X, X, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_28": {
                "variable": {
                    "value": "Y_sqnorms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Y, Y, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(Y, Y, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_65": {
                "variable": {
                    "value": "XX",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_66": {
                "variable": {
                    "value": "XY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "variable": {
                    "value": "YY",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "diag_part_69": {
                "variable": {
                    "value": "X_sqnorms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(X, X, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(X, X, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_70": {
                "variable": {
                    "value": "Y_sqnorms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Y, Y, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(Y, Y, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_77": {
                "variable": {
                    "value": "XYsqnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-2.0 * XY + c(X_sqnorms) + r(Y_sqnorms)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_88": {
                "variable": {
                    "value": "XXsqnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-2.0 * XX + c(X_sqnorms) + r(X_sqnorms)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_89": {
                "variable": {
                    "value": "YYsqnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-2.0 * YY + c(Y_sqnorms) + r(Y_sqnorms)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_101": {
                "variable": {
                    "value": "wts",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(wts, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_106": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "K_XX.get_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_107": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "K_YY.get_shape()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_141": {
                "variable": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(safer_norm(gradients, axis=1) - 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_146": {
                "variable": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_147": {
                "variable": {
                    "value": "squares",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tensor)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keep_dims": {
                    "value": "keep_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_4": {
                "x": {
                    "value": "tf.maximum(x + _eps, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_80": {
                "variable": {
                    "value": "logXY",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 + XYsqnorm / (2.0 * alpha)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_92": {
                "variable": {
                    "value": "logXX",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 + XXsqnorm / (2.0 * alpha)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_93": {
                "variable": {
                    "value": "logYY",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 + YYsqnorm / (2.0 * alpha)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_148": {
                "x": {
                    "value": "squares + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_4": {
                "x": {
                    "value": "x + _eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_30": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_31": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "input_tensor": {
                    "value": "wts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(sigmas)",
                            "BinOp"
                        ],
                        [
                            "[1.0] * len(alphas)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(wts, tf.float32))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_72": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_73": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_101": {
                "x": {
                    "value": "wts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * len(sigmas)",
                            "BinOp"
                        ],
                        [
                            "[1.0] * len(alphas)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.cast(wts, tf.float32))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_115": {
                "variable": {
                    "value": "const_diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "const_diagonal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(const_diagonal, tf.float32)",
                            "Call"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trace_119": {
                "variable": {
                    "value": "trace_X",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "K_XX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(X, X, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "K_XX + tf.cast(add_dot, tf.float32) * XX",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trace_120": {
                "variable": {
                    "value": "trace_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "K_YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Y, Y, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "K_YY + tf.cast(add_dot, tf.float32) * YY",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_136": {
                "input_tensor": {
                    "value": "kernel(d_average, yy, K_XY_only=True, add_dot=add_dot)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_139": {
                "ys": {
                    "value": "witness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ekxr - Ekxf",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "[average_sample]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_141": {
                "x": {
                    "value": "safer_norm(gradients, axis=1) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_38": {
                "x": {
                    "value": "-gamma * XYsqnorm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_47": {
                "x": {
                    "value": "-gamma * XXsqnorm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_48": {
                "x": {
                    "value": "-gamma * YYsqnorm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_81": {
                "x": {
                    "value": "-alpha * logXY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_83": {
                "x": {
                    "value": "add_dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_94": {
                "x": {
                    "value": "-alpha * logXX",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_95": {
                "x": {
                    "value": "-alpha * logYY",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "add_dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_98": {
                "x": {
                    "value": "add_dot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_110": {
                "input_tensor": {
                    "value": "K_XX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(X, X, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "K_XX + tf.cast(add_dot, tf.float32) * XX",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_111": {
                "input_tensor": {
                    "value": "K_YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Y, Y, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "K_YY + tf.cast(add_dot, tf.float32) * YY",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_112": {
                "input_tensor": {
                    "value": "K_XY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(X, Y, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "K_XY + tf.cast(add_dot, tf.float32) * XY",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_124": {
                "input_tensor": {
                    "value": "K_XY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(X, Y, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "K_XY + tf.cast(add_dot, tf.float32) * XY",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_122": {
                "input_tensor": {
                    "value": "K_XX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(X, X, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "K_XX + tf.cast(add_dot, tf.float32) * XX",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_123": {
                "input_tensor": {
                    "value": "K_YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Y, Y, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "K_YY + tf.cast(add_dot, tf.float32) * YY",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "mmdgan_mh_enc.py": {
        "tensorflow": {
            "FileWriter_34": {
                "variable": {
                    "value": "self.train_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(summary_dir, 'train')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FileWriter_35": {
                "variable": {
                    "value": "self.test_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(summary_dir, 'test')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.isTraining",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "isTrainingflag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_49": {
                "variable": {
                    "value": "self.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_g",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_60": {
                "variable": {
                    "value": "psi_vec_out",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "psi_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kcs_layer(pose_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_63": {
                "variable": {
                    "value": "psi_vec_real",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "psi_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kcs_layer(discriminator_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_67": {
                "variable": {
                    "value": "psi_average_samples_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "psi_average_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kcs_layer(average_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_96": {
                "variable": {
                    "value": "t_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_99": {
                "variable": {
                    "value": "self.d_optimim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_100": {
                "variable": {
                    "value": "self.g_optimim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "self.beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "scalar_108": {
                "variable": {
                    "value": "self.loss_repro_summ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss/loss_repro",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_reprojection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train', 'test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_109": {
                "variable": {
                    "value": "self.loss_cam_summ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss/loss_cam",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_cam",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train', 'test']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_110": {
                "variable": {
                    "value": "self.loss_gp_summ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss/loss_gp",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_gp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_111": {
                "variable": {
                    "value": "self.loss_d_summ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss/loss_d",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_112": {
                "variable": {
                    "value": "self.loss_g_summ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss/loss_g",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['train']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_113": {
                "variable": {
                    "value": "self.learning_rate_summary_d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_d",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lr_d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_114": {
                "variable": {
                    "value": "self.learning_rate_summary_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_g",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_116": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "generator_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batchsize, self.inputsize]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "generator_in",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "generator_in_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batchsize, self.latent_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "generator_in_noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "discriminator_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batchsize, self.outputsize]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "discriminator_in",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_88": {
                "variable": {
                    "value": "self.loss_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(enc_out - self.generator_in_noise)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "Input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "Generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "Discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_88": {
                "x": {
                    "value": "enc_out - self.generator_in_noise",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ops.py": {
        "tensorflow": {
            "uniform_6": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(realsample)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_12": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(pose2d_gt - pose2d_repro)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_15": {
                "variable": {
                    "value": "weights_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.array([1, 1, 1, 1, 1, 1, 0, 1, 0.1, 0.1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0.1, 0.1, 1, 1, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_18": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(weights_t, (1, 32))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(tf.shape(pose2d_repro)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "multiply_20": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(weights_t, (1, 32)), (tf.shape(pose2d_repro)[0], 1))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(weights_t, (1, 32)), (tf.shape(pose2d_repro)[0], 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.abs(pose2d_gt - pose2d_repro))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.abs(pose2d_gt - pose2d_repro))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_28": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(pose2d_gt - pose2d_repro)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_31": {
                "variable": {
                    "value": "weights_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.array([1, 1, 1, 1, 1, 1, 0, 1, 0.1, 0.1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0.1, 0.1, 1, 1, 1, 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_33": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(weights_t, (1, 32))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(tf.shape(pose2d_repro)[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "multiply_34": {
                "variable": {
                    "value": "weights_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "missing_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.reshape(weights_t, (1, 32)), (tf.shape(pose2d_repro)[0], 1))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.reshape(weights_t, (1, 32)), (tf.shape(pose2d_repro)[0], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_35": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(missing_idx, weights)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.abs(pose2d_gt - pose2d_repro))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.abs(pose2d_gt - pose2d_repro))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_42": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "d_fake - d_real",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cam_param",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "m_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(cam_param, [-1, 2, 3])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(m, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_53": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(loss_mat)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_61": {
                "variable": {
                    "value": "slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(gradients), reduction_indices=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_62": {
                "variable": {
                    "value": "gradient_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(slopes - 1.0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_68": {
                "variable": {
                    "value": "batch_size_h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(g_out)[0] / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_69": {
                "variable": {
                    "value": "pose1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "g_out",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size_h, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_70": {
                "variable": {
                    "value": "pose2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "g_out",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[batch_size_h, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size_h, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_71": {
                "variable": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size_h, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_72": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[batch_size_h, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch_size_h, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "pose_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(pose1 - pose2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "variable": {
                    "value": "z_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(z1 - z2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "1.0 - pose_diff / z_diff",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_24": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tmp, axis=1) / 32",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tmp, axis=1) / 32",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(d_fake - d_real)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.abs(loss_mat), axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(1.0 - pose_diff / z_diff)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_38": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tmp, axis=1) / 32",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tmp, axis=1) / 32",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(d_fake - d_real)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.abs(loss_mat), axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(1.0 - pose_diff / z_diff)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_55": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tmp, axis=1) / 32",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tmp, axis=1) / 32",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(d_fake - d_real)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.abs(loss_mat), axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(1.0 - pose_diff / z_diff)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_77": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tmp, axis=1) / 32",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tmp, axis=1) / 32",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(d_fake - d_real)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.abs(loss_mat), axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(1.0 - pose_diff / z_diff)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_12": {
                "x": {
                    "value": "pose2d_gt - pose2d_repro",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_18": {
                "tensor": {
                    "value": "weights_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(np.array([1, 1, 1, 1, 1, 1, 0, 1, 0.1, 0.1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0.1, 0.1, 1, 1, 1, 1, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(np.array([1, 1, 1, 1, 1, 1, 0, 1, 0.1, 0.1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0.1, 0.1, 1, 1, 1, 1, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_22": {
                "input_tensor": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(weights, diff)",
                            "Call"
                        ],
                        [
                            "tf.multiply(weights_f, diff)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_28": {
                "x": {
                    "value": "pose2d_gt - pose2d_repro",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "tensor": {
                    "value": "weights_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(np.array([1, 1, 1, 1, 1, 1, 0, 1, 0.1, 0.1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0.1, 0.1, 1, 1, 1, 1, 1, 1]))",
                            "Call"
                        ],
                        [
                            "tf.to_float(np.array([1, 1, 1, 1, 1, 1, 0, 1, 0.1, 0.1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0.1, 0.1, 1, 1, 1, 1, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_36": {
                "input_tensor": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(weights, diff)",
                            "Call"
                        ],
                        [
                            "tf.multiply(weights_f, diff)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_49": {
                "a": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(cam_param, [-1, 2, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_51": {
                "num_rows": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_53": {
                "x": {
                    "value": "loss_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(2 / tf.trace(m_sq), [-1, 1, 1]) * m_sq - tf.eye(2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gradients_60": {
                "ys": {
                    "value": "d_out",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "[average_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_61": {
                "input_tensor": {
                    "value": "tf.square(gradients)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_73": {
                "x": {
                    "value": "pose1 - pose2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_74": {
                "x": {
                    "value": "z1 - z2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_51": {
                "tensor": {
                    "value": "2 / tf.trace(m_sq)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_61": {
                "x": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(d_out, [average_samples])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_18": {
                "input": {
                    "value": "pose2d_repro",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_33": {
                "input": {
                    "value": "pose2d_repro",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_68": {
                "input": {
                    "value": "g_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_6": {
                "input": {
                    "value": "realsample",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trace_51": {
                "*args": {
                    "value": "m_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(m, tf.transpose(m, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}