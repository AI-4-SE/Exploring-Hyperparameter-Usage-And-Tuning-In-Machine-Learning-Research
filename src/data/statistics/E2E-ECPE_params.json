{
    "utils/funcs.py": {
        "sklearn": {},
        "torch": {
            "device_9": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "embedding_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.type(torch.LongTensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "word_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_embedding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "doc_len * doc_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_160": {
                "variable": {
                    "value": "(_, true_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "true_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true_y",
                            "Method Argument"
                        ],
                        [
                            "true_y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_161": {
                "variable": {
                    "value": "(_, pred_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_y",
                            "Method Argument"
                        ],
                        [
                            "pred_y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_37": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear1(x_tmp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_41": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha.reshape(-1, 1, self.sen_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear2(u)",
                            "Call"
                        ],
                        [
                            "F.softmax(alpha.reshape(-1, 1, self.sen_len), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.embedding(x.type(torch.LongTensor), word_embedding).to(device)",
                            "Call"
                        ],
                        [
                            "torch.matmul(alpha, x).reshape(-1, self.n_hidden * 2)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.n_hidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_178": {
                "variable": {
                    "value": "(_, true_indices_masked)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "true_y_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getmask(true_y[i].clone(), doc_len[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_179": {
                "variable": {
                    "value": "(_, pred_indices_masked)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getmask(pred_y[i].clone(), doc_len[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_75": {
                "variable": {
                    "value": "y_pred_masked_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred_masked[:, 1][y_true_masked[:, 1] == 1.0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_76": {
                "variable": {
                    "value": "y_pred_masked_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred_masked[:, 0][y_true_masked[:, 0] == 1.0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "doc_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "doc_len",
                            "Method Argument"
                        ],
                        [
                            "doc_len",
                            "Method Argument"
                        ],
                        [
                            "doc_len",
                            "Method Argument"
                        ],
                        [
                            "doc_len",
                            "Method Argument"
                        ],
                        [
                            "doc_len",
                            "Method Argument"
                        ],
                        [
                            "doc_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_100": {
                "variable": {
                    "value": "y_pred_masked_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred_masked[:, 1][y_true_masked[:, 1] == 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_102": {
                "variable": {
                    "value": "y_pred_masked_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred_masked[:, 0][y_true_masked[:, 0] == 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "doc_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "doc_len",
                            "Method Argument"
                        ],
                        [
                            "doc_len",
                            "Method Argument"
                        ],
                        [
                            "doc_len",
                            "Method Argument"
                        ],
                        [
                            "doc_len",
                            "Method Argument"
                        ],
                        [
                            "doc_len",
                            "Method Argument"
                        ],
                        [
                            "doc_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_121": {
                "variable": {
                    "value": "x3_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1[:, i, :], x2[:, j, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_121": {
                "variable": {
                    "value": "x3_tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x3, x3_tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_77": {
                "input": {
                    "value": "y_pred_masked_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(y_pred_masked[:, 1][y_true_masked[:, 1] == 1.0])",
                            "Call"
                        ],
                        [
                            "torch.log(y_pred_masked[:, 1][y_true_masked[:, 1] == 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_101": {
                "input": {
                    "value": "y_pred_masked_ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(y_pred_masked[:, 1][y_true_masked[:, 1] == 1.0])",
                            "Call"
                        ],
                        [
                            "torch.log(y_pred_masked[:, 1][y_true_masked[:, 1] == 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_103": {
                "input": {
                    "value": "y_pred_masked_zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(y_pred_masked[:, 0][y_true_masked[:, 0] == 1.0])",
                            "Call"
                        ],
                        [
                            "torch.log(y_pred_masked[:, 0][y_true_masked[:, 0] == 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_78": {
                "input": {
                    "value": "y_pred_masked_zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(y_pred_masked[:, 0][y_true_masked[:, 0] == 1.0])",
                            "Call"
                        ],
                        [
                            "torch.log(y_pred_masked[:, 0][y_true_masked[:, 0] == 1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/prepare_data.py": {
        "sklearn": {},
        "torch": {}
    },
    "E2E_PextC.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "word_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "word_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_w2v(embedding_dim, embedding_dim_pos, train_file_path, w2v_file)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(word_embedding)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_276": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, max_doc_len, max_sen_len, embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_277": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, max_doc_len * max_doc_len, embedding_dim_pos]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_282": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.005",
                            "float"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "l2_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "Dropout_43": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1 - keep_prob1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_44": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1 - keep_prob2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1 - keep_prob3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.pos_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * n_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "n_class",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.cause_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * n_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "n_class",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.pair_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * n_hidden + embedding_dim_pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.pair_linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "n_class",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_51": {
                "variable": {
                    "value": "self.word_bilstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_52": {
                "variable": {
                    "value": "self.cause_bilstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * n_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_53": {
                "variable": {
                    "value": "self.pos_bilstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * n_hidden + n_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "pred_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pos_linear(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "pred_cause",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cause_linear(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "x_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, distance.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_115": {
                "variable": {
                    "value": "pred_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pair_linear2(self.relu(self.pair_linear1(x_distance)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "s_pred_cause",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s, pred_cause]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_143": {
                "obj": {
                    "value": "word_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_w2v(embedding_dim, embedding_dim_pos, train_file_path, w2v_file)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(word_embedding)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "./save/word_embedding.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_144": {
                "obj": {
                    "value": "word_id_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_w2v(embedding_dim, embedding_dim_pos, train_file_path, w2v_file)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "./save/word_id_mapping.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "ndarray": {
                    "value": "pos_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_w2v(embedding_dim, embedding_dim_pos, train_file_path, w2v_file)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(torch.from_numpy(pos_embedding))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_230": {
                "obj": {
                    "value": "pos_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_w2v(embedding_dim, embedding_dim_pos, train_file_path, w2v_file)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(torch.from_numpy(pos_embedding))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./save/pos_embedding_fold_{}.pth'.format(fold)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_231": {
                "obj": {
                    "value": "Model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./save/E2E-EC_fold_{}.pth'.format(fold)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "E2E_PextE.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "word_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "word_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_w2v(embedding_dim, embedding_dim_pos, train_file_path, w2v_file)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(word_embedding)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_276": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, max_doc_len, max_sen_len, embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_277": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, max_doc_len * max_doc_len, embedding_dim_pos]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_282": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "Model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.005",
                            "float"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "l2_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "Dropout_43": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1 - keep_prob1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_44": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1 - keep_prob2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1 - keep_prob3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.pos_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * n_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "n_class",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.cause_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * n_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "n_class",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.pair_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * n_hidden + embedding_dim_pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.pair_linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hidden // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "n_class",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_51": {
                "variable": {
                    "value": "self.word_bilstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_52": {
                "variable": {
                    "value": "self.cause_bilstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * n_hidden + n_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_53": {
                "variable": {
                    "value": "self.pos_bilstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * n_hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "pred_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pos_linear(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "pred_cause",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cause_linear(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "x_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, distance.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_115": {
                "variable": {
                    "value": "pred_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pair_linear2(self.relu(self.pair_linear1(x_distance)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "s_pred_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s, pred_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_143": {
                "obj": {
                    "value": "word_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_w2v(embedding_dim, embedding_dim_pos, train_file_path, w2v_file)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(word_embedding)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "./save/word_embedding.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_144": {
                "obj": {
                    "value": "word_id_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_w2v(embedding_dim, embedding_dim_pos, train_file_path, w2v_file)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "./save/word_id_mapping.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "ndarray": {
                    "value": "pos_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_w2v(embedding_dim, embedding_dim_pos, train_file_path, w2v_file)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(torch.from_numpy(pos_embedding))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_230": {
                "obj": {
                    "value": "pos_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_w2v(embedding_dim, embedding_dim_pos, train_file_path, w2v_file)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(torch.from_numpy(pos_embedding))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'./save/pos_embedding_fold_{}.pth'.format(fold)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_231": {
                "obj": {
                    "value": "Model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./save/E2E-PextE_fold_{}.pth'.format(fold)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test_E2E.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_28": {
                "variable": {
                    "value": "word_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./save/word_embedding.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_29": {
                "variable": {
                    "value": "word_id_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./save/word_id_mapping.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_40": {
                "variable": {
                    "value": "pos_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'./save/pos_embedding_fold_{}.pth'.format(fold)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_41": {
                "f": {
                    "value": "'./save/E2E-PextE_fold_{}.pth'.format(fold)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}