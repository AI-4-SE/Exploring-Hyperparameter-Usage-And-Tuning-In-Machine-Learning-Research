{
    "correct_text.py": {
        "tensorflow": {
            "DEFINE_string_41": {
                "name": {
                    "value": "config",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "TestConfig",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Name of config to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_42": {
                "name": {
                    "value": "data_reader_type",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "MovieDialogReader",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Type of data reader to use.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_44": {
                "name": {
                    "value": "train_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Training data path.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "val_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "val",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Validation data path.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_46": {
                "name": {
                    "value": "test_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Testing data path.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_47": {
                "name": {
                    "value": "model_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path where the model is saved.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_134": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "run_447": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_135": {
                "filename": {
                    "value": "ckpt.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dtc_lambda.py": {
        "tensorflow": {
            "Session_66": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "preprocessors/preprocess_movie_dialogs.py": {
        "tensorflow": {
            "DEFINE_string_5": {
                "name": {
                    "value": "raw_data",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Raw data path",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_6": {
                "name": {
                    "value": "out_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "File to write preprocessed data to.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "seq2seq.py": {
        "tensorflow": {
            "argmax_101": {
                "variable": {
                    "value": "prev_symbol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_ops.xw_plus_b(prev, output_projection[0], output_projection[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_104": {
                "variable": {
                    "value": "emb_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('embedding', [num_symbols, embedding_size])",
                            "Call"
                        ],
                        [
                            "variable_scope.get_variable('embedding', [num_symbols, embedding_size], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "variable_scope.get_variable('embedding', [num_symbols, embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "prev_symbol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.argmax(prev, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "rnn_178": {
                "variable": {
                    "value": "(_, enc_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "step_function": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_cell.OutputProjectionWrapper(cell, num_decoder_symbols)",
                            "Call"
                        ],
                        [
                            "rnn_cell.OutputProjectionWrapper(cell, output_symbols)",
                            "Call"
                        ],
                        [
                            "rnn_cell.OutputProjectionWrapper(cell, num_decoder_symbols)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rnn_210": {
                "variable": {
                    "value": "(_, enc_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "step_function": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_cell.OutputProjectionWrapper(cell, num_decoder_symbols)",
                            "Call"
                        ],
                        [
                            "rnn_cell.OutputProjectionWrapper(cell, output_symbols)",
                            "Call"
                        ],
                        [
                            "rnn_cell.OutputProjectionWrapper(cell, num_decoder_symbols)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope or 'tied_rnn_seq2seq'",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_274": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_symbols, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rnn_345": {
                "variable": {
                    "value": "(_, encoder_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "step_function": {
                    "value": "encoder_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_cell.EmbeddingWrapper(cell, embedding_classes=num_encoder_symbols, embedding_size=embedding_size)",
                            "Call"
                        ],
                        [
                            "rnn_cell.EmbeddingWrapper(cell, embedding_classes=num_encoder_symbols, embedding_size=embedding_size)",
                            "Call"
                        ],
                        [
                            "rnn_cell.EmbeddingWrapper(cell, embedding_classes=num_encoder_symbols, embedding_size=embedding_size)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_376": {
                "variable": {
                    "value": "outputs_and_state",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "feed_previous",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : decoder(True)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : decoder(False)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "get_variable_453": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_symbols, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_488": {
                "variable": {
                    "value": "outputs_and_state",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "feed_previous",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : decoder(True)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : decoder(False)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_591": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat(1, top_states)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, attn_length, 1, attn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pack_632": {
                "variable": {
                    "value": "batch_attn_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_736": {
                "variable": {
                    "value": "proj_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output_projection[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_742": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_symbols, embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rnn_821": {
                "variable": {
                    "value": "(encoder_outputs, encoder_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "step_function": {
                    "value": "encoder_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_cell.EmbeddingWrapper(cell, embedding_classes=num_encoder_symbols, embedding_size=embedding_size)",
                            "Call"
                        ],
                        [
                            "rnn_cell.EmbeddingWrapper(cell, embedding_classes=num_encoder_symbols, embedding_size=embedding_size)",
                            "Call"
                        ],
                        [
                            "rnn_cell.EmbeddingWrapper(cell, embedding_classes=num_encoder_symbols, embedding_size=embedding_size)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_827": {
                "variable": {
                    "value": "attention_states",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "top_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[array_ops.reshape(e, [-1, 1, cell.output_size]) for e in encoder_outputs]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "cond_874": {
                "variable": {
                    "value": "outputs_and_state",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "feed_previous",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : decoder(True)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : decoder(False)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "rnn_943": {
                "variable": {
                    "value": "(_, encoder_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "step_function": {
                    "value": "encoder_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_cell.EmbeddingWrapper(cell, embedding_classes=num_encoder_symbols, embedding_size=embedding_size)",
                            "Call"
                        ],
                        [
                            "rnn_cell.EmbeddingWrapper(cell, embedding_classes=num_encoder_symbols, embedding_size=embedding_size)",
                            "Call"
                        ],
                        [
                            "rnn_cell.EmbeddingWrapper(cell, embedding_classes=num_encoder_symbols, embedding_size=embedding_size)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_1031": {
                "variable": {
                    "value": "log_perps",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "log_perp_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_1062": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sequence_loss_by_example(logits, targets, weights, average_across_timesteps=average_across_timesteps, softmax_loss_function=softmax_loss_function)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "xw_plus_b_99": {
                "variable": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_ops.xw_plus_b(prev, output_projection[0], output_projection[1])",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "weights": {
                    "value": "output_projection[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "biases": {
                    "value": "output_projection[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stop_gradient_106": {
                "variable": {
                    "value": "emb_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_ops.embedding_lookup(embedding, prev_symbol)",
                            "Call"
                        ],
                        [
                            "array_ops.stop_gradient(emb_prev)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "scope or 'rnn_decoder'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_177": {
                "name_or_scope": {
                    "value": "scope or 'basic_rnn_seq2seq'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "combined_tied_rnn_seq2seq",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_266": {
                "name_or_scope": {
                    "value": "scope or 'embedding_rnn_decoder'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_269": {
                "variable": {
                    "value": "proj_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output_projection[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_271": {
                "variable": {
                    "value": "proj_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output_projection[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_335": {
                "name_or_scope": {
                    "value": "scope or 'embedding_rnn_seq2seq'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "pack_sequence_as_383": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "encoder_state",
                    "type": "variable",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "state_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs_and_state[outputs_len:]",
                            "Subscript"
                        ],
                        [
                            "[state]",
                            "List"
                        ],
                        [
                            "nest.flatten(state)",
                            "Call"
                        ],
                        [
                            "outputs_and_state[outputs_len:]",
                            "Subscript"
                        ],
                        [
                            "[state]",
                            "List"
                        ],
                        [
                            "nest.flatten(state)",
                            "Call"
                        ],
                        [
                            "outputs_and_state[outputs_len:]",
                            "Subscript"
                        ],
                        [
                            "[state]",
                            "List"
                        ],
                        [
                            "nest.flatten(state)",
                            "Call"
                        ],
                        [
                            "outputs_and_state[outputs_len:]",
                            "Subscript"
                        ],
                        [
                            "[state]",
                            "List"
                        ],
                        [
                            "nest.flatten(state)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_443": {
                "name_or_scope": {
                    "value": "scope or 'embedding_tied_rnn_seq2seq'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_448": {
                "variable": {
                    "value": "proj_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output_projection[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_450": {
                "variable": {
                    "value": "proj_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "output_projection[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_sequence_as_503": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "zero_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell.zero_state(batch_size, dtype)",
                            "Call"
                        ]
                    ]
                },
                "flat_sequence": {
                    "value": "state_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs_and_state[outputs_len:]",
                            "Subscript"
                        ],
                        [
                            "[state]",
                            "List"
                        ],
                        [
                            "nest.flatten(state)",
                            "Call"
                        ],
                        [
                            "outputs_and_state[outputs_len:]",
                            "Subscript"
                        ],
                        [
                            "[state]",
                            "List"
                        ],
                        [
                            "nest.flatten(state)",
                            "Call"
                        ],
                        [
                            "outputs_and_state[outputs_len:]",
                            "Subscript"
                        ],
                        [
                            "[state]",
                            "List"
                        ],
                        [
                            "nest.flatten(state)",
                            "Call"
                        ],
                        [
                            "outputs_and_state[outputs_len:]",
                            "Subscript"
                        ],
                        [
                            "[state]",
                            "List"
                        ],
                        [
                            "nest.flatten(state)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_580": {
                "name_or_scope": {
                    "value": "scope or 'attention_decoder'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_597": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'AttnW_%d' % a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, attn_size, attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_739": {
                "name_or_scope": {
                    "value": "scope or 'embedding_attention_decoder'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_814": {
                "name_or_scope": {
                    "value": "scope or 'embedding_attention_seq2seq'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_sequence_as_881": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "encoder_state",
                    "type": "variable",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "state_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs_and_state[outputs_len:]",
                            "Subscript"
                        ],
                        [
                            "[state]",
                            "List"
                        ],
                        [
                            "nest.flatten(state)",
                            "Call"
                        ],
                        [
                            "outputs_and_state[outputs_len:]",
                            "Subscript"
                        ],
                        [
                            "[state]",
                            "List"
                        ],
                        [
                            "nest.flatten(state)",
                            "Call"
                        ],
                        [
                            "outputs_and_state[outputs_len:]",
                            "Subscript"
                        ],
                        [
                            "[state]",
                            "List"
                        ],
                        [
                            "nest.flatten(state)",
                            "Call"
                        ],
                        [
                            "outputs_and_state[outputs_len:]",
                            "Subscript"
                        ],
                        [
                            "[state]",
                            "List"
                        ],
                        [
                            "nest.flatten(state)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_935": {
                "name_or_scope": {
                    "value": "scope or 'one2many_rnn_seq2seq'",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_1017": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_1033": {
                "variable": {
                    "value": "total_size",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_1061": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_1123": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "embedding_lookup_280": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('embedding', [num_symbols, embedding_size])",
                            "Call"
                        ],
                        [
                            "variable_scope.get_variable('embedding', [num_symbols, embedding_size], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "variable_scope.get_variable('embedding', [num_symbols, embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "embedding_lookup_456": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('embedding', [num_symbols, embedding_size])",
                            "Call"
                        ],
                        [
                            "variable_scope.get_variable('embedding', [num_symbols, embedding_size], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "variable_scope.get_variable('embedding', [num_symbols, embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear([inp] + attns, input_size, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_458": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('embedding', [num_symbols, embedding_size])",
                            "Call"
                        ],
                        [
                            "variable_scope.get_variable('embedding', [num_symbols, embedding_size], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "variable_scope.get_variable('embedding', [num_symbols, embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear([inp] + attns, input_size, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_584": {
                "input": {
                    "value": "decoder_inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_609": {
                "variable": {
                    "value": "query_list",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat(1, query_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_614": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "query_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.flatten(query)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_633": {
                "shape": {
                    "value": "batch_attn_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.pack([batch_size, attn_size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "scope.dtype",
                            "Attribute"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "embedding_lookup_748": {
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('embedding', [num_symbols, embedding_size])",
                            "Call"
                        ],
                        [
                            "variable_scope.get_variable('embedding', [num_symbols, embedding_size], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "variable_scope.get_variable('embedding', [num_symbols, embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_825": {
                "tensor": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, cell.output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1025": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(target, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_1026": {
                "variable": {
                    "value": "crossent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(target, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_364": {
                "name_or_scope": {
                    "value": "variable_scope.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if feed_previous_bool else True",
                            "IfExp"
                        ],
                        [
                            "None if feed_previous_bool else True",
                            "IfExp"
                        ],
                        [
                            "None if feed_previous_bool else True",
                            "IfExp"
                        ],
                        [
                            "None if feed_previous else True",
                            "IfExp"
                        ]
                    ]
                }
            },
            "flatten_373": {
                "variable": {
                    "value": "state_list",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_state",
                            "variable"
                        ],
                        [
                            "state_list[0]",
                            "Subscript"
                        ],
                        [
                            "nest.pack_sequence_as(structure=encoder_state, flat_sequence=state_list)",
                            "Call"
                        ],
                        [
                            "state_list[0]",
                            "Subscript"
                        ],
                        [
                            "nest.pack_sequence_as(structure=zero_state, flat_sequence=state_list)",
                            "Call"
                        ],
                        [
                            "initial_state",
                            "variable"
                        ],
                        [
                            "state_list[0]",
                            "Subscript"
                        ],
                        [
                            "nest.pack_sequence_as(structure=encoder_state, flat_sequence=state_list)",
                            "Call"
                        ],
                        [
                            "state_list[0]",
                            "Subscript"
                        ],
                        [
                            "nest.pack_sequence_as(structure=encoder_state, flat_sequence=state_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_478": {
                "name_or_scope": {
                    "value": "variable_scope.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if feed_previous_bool else True",
                            "IfExp"
                        ],
                        [
                            "None if feed_previous_bool else True",
                            "IfExp"
                        ],
                        [
                            "None if feed_previous_bool else True",
                            "IfExp"
                        ],
                        [
                            "None if feed_previous else True",
                            "IfExp"
                        ]
                    ]
                }
            },
            "flatten_485": {
                "variable": {
                    "value": "state_list",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_state",
                            "variable"
                        ],
                        [
                            "state_list[0]",
                            "Subscript"
                        ],
                        [
                            "nest.pack_sequence_as(structure=encoder_state, flat_sequence=state_list)",
                            "Call"
                        ],
                        [
                            "state_list[0]",
                            "Subscript"
                        ],
                        [
                            "nest.pack_sequence_as(structure=zero_state, flat_sequence=state_list)",
                            "Call"
                        ],
                        [
                            "initial_state",
                            "variable"
                        ],
                        [
                            "state_list[0]",
                            "Subscript"
                        ],
                        [
                            "nest.pack_sequence_as(structure=encoder_state, flat_sequence=state_list)",
                            "Call"
                        ],
                        [
                            "state_list[0]",
                            "Subscript"
                        ],
                        [
                            "nest.pack_sequence_as(structure=encoder_state, flat_sequence=state_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_500": {
                "input": {
                    "value": "encoder_inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_587": {
                "input": {
                    "value": "attention_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat(1, top_states)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_599": {
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(attention_states, [-1, attn_length, 1, attn_size])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope.get_variable('AttnW_%d' % a, [1, 1, attn_size, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_601": {
                "name": {
                    "value": "'AttnV_%d' % a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_618": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(query, attention_vec_size, True)",
                            "Call"
                        ],
                        [
                            "array_ops.reshape(y, [-1, 1, 1, attention_vec_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, attention_vec_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_620": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v[a] * math_ops.tanh(hidden_features[a] + y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_622": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_sum(v[a] * math_ops.tanh(hidden_features[a] + y), [2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_624": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "array_ops.reshape(a, [-1, attn_length, 1, 1]) * hidden",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_scope_642": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_665": {
                "name_or_scope": {
                    "value": "AttnOutputProjection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_853": {
                "name_or_scope": {
                    "value": "variable_scope.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if feed_previous_bool else True",
                            "IfExp"
                        ],
                        [
                            "None if feed_previous_bool else True",
                            "IfExp"
                        ],
                        [
                            "None if feed_previous_bool else True",
                            "IfExp"
                        ],
                        [
                            "None if feed_previous else True",
                            "IfExp"
                        ]
                    ]
                }
            },
            "flatten_871": {
                "variable": {
                    "value": "state_list",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_state",
                            "variable"
                        ],
                        [
                            "state_list[0]",
                            "Subscript"
                        ],
                        [
                            "nest.pack_sequence_as(structure=encoder_state, flat_sequence=state_list)",
                            "Call"
                        ],
                        [
                            "state_list[0]",
                            "Subscript"
                        ],
                        [
                            "nest.pack_sequence_as(structure=zero_state, flat_sequence=state_list)",
                            "Call"
                        ],
                        [
                            "initial_state",
                            "variable"
                        ],
                        [
                            "state_list[0]",
                            "Subscript"
                        ],
                        [
                            "nest.pack_sequence_as(structure=encoder_state, flat_sequence=state_list)",
                            "Call"
                        ],
                        [
                            "state_list[0]",
                            "Subscript"
                        ],
                        [
                            "nest.pack_sequence_as(structure=encoder_state, flat_sequence=state_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_949": {
                "name_or_scope": {
                    "value": "'one2many_decoder_' + str(name)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_975": {
                "variable": {
                    "value": "outputs_and_state",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "feed_previous",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : filled_embedding_rnn_decoder(True)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : filled_embedding_rnn_decoder(False)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_1067": {
                "input": {
                    "value": "targets[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_1068": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "static_batch_size.value",
                            "Attribute"
                        ],
                        [
                            "array_ops.shape(encoder_inputs[0])[0]",
                            "Subscript"
                        ],
                        [
                            "array_ops.shape(decoder_inputs[0])[0]",
                            "Subscript"
                        ],
                        [
                            "array_ops.shape(targets[0])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "cost.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_1125": {
                "name_or_scope": {
                    "value": "variable_scope.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True if j > 0 else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "loop_function",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_478": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_616": {
                "name_or_scope": {
                    "value": "'Attention_%d' % a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_645": {
                "name_or_scope": {
                    "value": "loop_function",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_659": {
                "name_or_scope": {
                    "value": "variable_scope.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_854": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_963": {
                "variable": {
                    "value": "vs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_sequence_as_985": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "encoder_state",
                    "type": "variable",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "state_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs_and_state[outputs_len:]",
                            "Subscript"
                        ],
                        [
                            "[state]",
                            "List"
                        ],
                        [
                            "nest.flatten(state)",
                            "Call"
                        ],
                        [
                            "outputs_and_state[outputs_len:]",
                            "Subscript"
                        ],
                        [
                            "[state]",
                            "List"
                        ],
                        [
                            "nest.flatten(state)",
                            "Call"
                        ],
                        [
                            "outputs_and_state[outputs_len:]",
                            "Subscript"
                        ],
                        [
                            "[state]",
                            "List"
                        ],
                        [
                            "nest.flatten(state)",
                            "Call"
                        ],
                        [
                            "outputs_and_state[outputs_len:]",
                            "Subscript"
                        ],
                        [
                            "[state]",
                            "List"
                        ],
                        [
                            "nest.flatten(state)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_1125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_627": {
                "tensor": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.reduce_sum(array_ops.reshape(a, [-1, attn_length, 1, 1]) * hidden, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, attn_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_scope_659": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_972": {
                "variable": {
                    "value": "state_list",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_state",
                            "variable"
                        ],
                        [
                            "state_list[0]",
                            "Subscript"
                        ],
                        [
                            "nest.pack_sequence_as(structure=encoder_state, flat_sequence=state_list)",
                            "Call"
                        ],
                        [
                            "state_list[0]",
                            "Subscript"
                        ],
                        [
                            "nest.pack_sequence_as(structure=zero_state, flat_sequence=state_list)",
                            "Call"
                        ],
                        [
                            "initial_state",
                            "variable"
                        ],
                        [
                            "state_list[0]",
                            "Subscript"
                        ],
                        [
                            "nest.pack_sequence_as(structure=encoder_state, flat_sequence=state_list)",
                            "Call"
                        ],
                        [
                            "state_list[0]",
                            "Subscript"
                        ],
                        [
                            "nest.pack_sequence_as(structure=encoder_state, flat_sequence=state_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_621": {
                "x": {
                    "value": "hidden_features[a] + y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_625": {
                "tensor": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xrange(num_heads)",
                            "Call"
                        ],
                        [
                            "attns",
                            "variable"
                        ],
                        [
                            "xrange(num_heads)",
                            "Call"
                        ],
                        [
                            "nn_ops.softmax(s)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, attn_length, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_964": {
                "name_or_scope": {
                    "value": "vs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope.get_variable_scope()",
                            "Call"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if feed_previous_bool else True",
                            "IfExp"
                        ],
                        [
                            "None if feed_previous_bool else True",
                            "IfExp"
                        ],
                        [
                            "None if feed_previous_bool else True",
                            "IfExp"
                        ],
                        [
                            "None if feed_previous else True",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "text_corrector_models.py": {
        "tensorflow": {
            "softmax_372": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_ops.xw_plus_b(logits, output_projection[0], output_projection[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_63": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "float(learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_66": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_86": {
                "variable": {
                    "value": "corrective_tokens_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "corrective_tokens_mask if corrective_tokens_mask else np.zeros(self.target_vocab_size)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.target_vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_91": {
                "variable": {
                    "value": "batched_corrective_tokens",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "self.batch_corrective_tokens_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "corrective_tokens",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GRUCell_122": {
                "variable": {
                    "value": "single_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_195": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_212": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_215": {
                "variable": {
                    "value": "packed_one_hot_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.pack(encoder_inputs, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.target_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "xw_plus_b_368": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_ops.xw_plus_b(logits, output_projection[0], output_projection[1])",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "output_projection[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "biases": {
                    "value": "output_projection[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_108": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "proj_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size, self.target_vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_109": {
                "variable": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('proj_w', [size, self.target_vocab_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "proj_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.target_vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_124": {
                "variable": {
                    "value": "single_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MultiRNNCell_127": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[single_cell] * num_layers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_217": {
                "x": {
                    "value": "batch_corrective_tokens_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_max(packed_one_hot_inputs, reduction_indices=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_407": {
                "variable": {
                    "value": "prev_symbol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "project_and_apply_input_bias(prev, output_projection, input_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_410": {
                "variable": {
                    "value": "emb_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "prev_symbol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.argmax(prev, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_204": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.losses[b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_205": {
                "variable": {
                    "value": "(clipped_gradients, norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.losses[b], params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "max_gradient_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "all_variables_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_max_218": {
                "input_tensor": {
                    "value": "packed_one_hot_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(indices=tf.pack(encoder_inputs, axis=1), depth=self.target_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_412": {
                "variable": {
                    "value": "emb_prev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb_prev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_ops.embedding_lookup(embedding, prev_symbol)",
                            "Call"
                        ],
                        [
                            "array_ops.stop_gradient(emb_prev)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_74": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'encoder{0}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'decoder{0}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'weight{0}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sampled_softmax_loss_116": {
                "weights": {
                    "value": "w_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(w)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('proj_b', [self.target_vocab_size])",
                            "Call"
                        ],
                        [
                            "range(len(buckets))",
                            "Call"
                        ],
                        [
                            "range(len(buckets))",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "num_sampled": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.target_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_199": {
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_200": {
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_215": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}