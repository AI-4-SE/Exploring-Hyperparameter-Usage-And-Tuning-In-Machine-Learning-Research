{
    "upsampling.py": {
        "tensorflow": {
            "Input_139": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "audiofiles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_162": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=(input_size, 1), name='audiofiles')",
                            "Call"
                        ],
                        [
                            "fit_gen(samples, original, batch_size=BATCH_SIZE, valid_size=120)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubpixelShuffle(DOWNSAMPLE_RATIO // 2)(x)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Flatten()(outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_model_176": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MODEL + 'audio.h5'",
                            "BinOp"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{'SubpixelShuffle': tf.keras.layers.Layer}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "save_model_203": {
                "model": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.Model(inputs=inputs, outputs=outputs)",
                            "Call"
                        ],
                        [
                            "tf.keras.models.load_model(checkpoint_path, custom_objects={'SubpixelShuffle': tf.keras.layers.Layer})",
                            "Call"
                        ]
                    ]
                },
                "filepath": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MODEL + 'audio.h5'",
                            "BinOp"
                        ]
                    ]
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_124": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "I",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_to_space_nd_125": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(I, [2, 1, 0])",
                            "Call"
                        ],
                        [
                            "tf.batch_to_space_nd(X, [r], [[0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, [2, 1, 0])",
                            "Call"
                        ]
                    ]
                },
                "block_shape": {
                    "value": "[r]",
                    "type": "List",
                    "possible_values": []
                },
                "crops": {
                    "value": "[[0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_126": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(I, [2, 1, 0])",
                            "Call"
                        ],
                        [
                            "tf.batch_to_space_nd(X, [r], [[0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, [2, 1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv1D_141": {
                "filters": {
                    "value": "DOWNSAMPLE_RATIO * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "input_size // 50",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_143": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_144": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1D_147": {
                "filters": {
                    "value": "DOWNSAMPLE_RATIO * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "input_size // 50",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_149": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_150": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1D_155": {
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "input_size // 50",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "map_fn_129": {
                "fn": {
                    "value": "lambda inp: tf.contrib.periodic_resample.periodic_resample(inp, (inp.shape[0] * self.r, None))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=(input_size, 1), name='audiofiles')",
                            "Call"
                        ],
                        [
                            "fit_gen(samples, original, batch_size=BATCH_SIZE, valid_size=120)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}