{
    "lib/nets/network.py": {
        "sklearn": {
            "KMeans_683": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "zeros_97": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_99": {
                "variable": {
                    "value": "sp_i",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, num_rois]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_100": {
                "variable": {
                    "value": "sp_i[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "num_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats_new.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "sp_i[1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.where(kmeans.labels_ == high_score_label)[0]",
                            "Subscript"
                        ],
                        [
                            "np.array([np.argmax(probs)])",
                            "Call"
                        ],
                        [
                            "gt",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_102": {
                "variable": {
                    "value": "sp_v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_105": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_score * one_hot_sparse",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_115": {
                "variable": {
                    "value": "grad_channel_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grads_val.view(num_rois, num_channel, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_117": {
                "variable": {
                    "value": "att_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_feats_new * grad_channel_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_130": {
                "variable": {
                    "value": "mask_all_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "att_all > thl_mask_value",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros(att_all.shape).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones(att_all.shape).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "mask_all",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_all_new.reshape(num_rois, 7, 7)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "pooled_feat_before_after",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bbox_feats_new, bbox_feats_new * mask_all)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_155": {
                "variable": {
                    "value": "cls_prob_before_after",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score_before_after",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.refine_net_1(pooled_feat_before_after)",
                            "Call"
                        ],
                        [
                            "self.refine_net_2(pooled_feat_before_after)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "label_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(roi_labels_1_new, axis=1)",
                            "Call"
                        ],
                        [
                            "np.argmax(roi_labels_2_new, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_162": {
                "variable": {
                    "value": "sp_i",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, num_rois]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_163": {
                "variable": {
                    "value": "sp_i[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "num_rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_feats_new.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_165": {
                "variable": {
                    "value": "sp_v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_rois]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_167": {
                "variable": {
                    "value": "before_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot_sparse * cls_prob_before",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_168": {
                "variable": {
                    "value": "after_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot_sparse * cls_prob_after",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_170": {
                "variable": {
                    "value": "change_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "change_vector > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "change_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "before_vector - after_vector - 0.02",
                            "BinOp"
                        ],
                        [
                            "torch.where(change_vector > 0, change_vector, torch.zeros(change_vector.shape).cuda())",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros(change_vector.shape).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_171": {
                "variable": {
                    "value": "fg_index",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "label_gt > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones(before_vector.shape).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros(before_vector.shape).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_199": {
                "variable": {
                    "value": "(batch_mins, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "atten_maps.view(atten_shape[0:-2] + (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_200": {
                "variable": {
                    "value": "(batch_maxs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "atten_maps.view(atten_shape[0:-2] + (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "div_201": {
                "variable": {
                    "value": "atten_normed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atten_maps.view(atten_shape[0:-2] + (-1,)) - batch_mins",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "batch_maxs - batch_mins + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "variable": {
                    "value": "roi_labels_each",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "roi_labels[0][keep_inds[0], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "variable": {
                    "value": "roi_labels_each",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "roi_labels[1][keep_inds[1], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_238": {
                "variable": {
                    "value": "roi_labels_each",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "roi_labels[2][keep_inds[2], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_240": {
                "variable": {
                    "value": "roi_labels_each",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "roi_labels[3][keep_inds[3], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_261": {
                "variable": {
                    "value": "roi_labels_each",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "roi_labels[0][keep_inds[0], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "variable": {
                    "value": "roi_labels_each",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "roi_labels[1][keep_inds[1], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_265": {
                "variable": {
                    "value": "roi_labels_each",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "roi_labels[2][keep_inds[2], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_267": {
                "variable": {
                    "value": "roi_labels_each",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "roi_labels[3][keep_inds[3], :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "label_new",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label, label, label, label)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_288": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "det_cls_prob.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "det_cls_prob.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "det_cls_prob.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_289": {
                "variable": {
                    "value": "max_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(det_cls_prob.shape, dtype=det_cls_prob.dtype, device=det_cls_prob.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_290": {
                "variable": {
                    "value": "cls_det_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(zeros, 1 - torch.mul(label_new, det_cls_prob))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_315": {
                "variable": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_score_net(fc7_roi)",
                            "Call"
                        ],
                        [
                            "self.cls_score_net(fc7_roi)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_316": {
                "variable": {
                    "value": "det_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_score - context_score",
                            "BinOp"
                        ],
                        [
                            "frame_score - context_score",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_317": {
                "variable": {
                    "value": "refine_prob_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refine_score_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.refine_net_1(fc7_roi)",
                            "Call"
                        ],
                        [
                            "self.refine_net_1(fc7_roi_1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_318": {
                "variable": {
                    "value": "refine_prob_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refine_score_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.refine_net_2(fc7_roi)",
                            "Call"
                        ],
                        [
                            "self.refine_net_2(fc7_roi_2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_321": {
                "variable": {
                    "value": "det_cls_prob_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_score_net(fc7_roi)",
                            "Call"
                        ],
                        [
                            "self.cls_score_net(fc7_roi)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "det_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(det_score, dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(det_score, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat((det_prob1, det_prob2, det_prob3, det_prob4))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_322": {
                "variable": {
                    "value": "det_cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_cls_prob_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(cls_score, det_prob)",
                            "Call"
                        ],
                        [
                            "torch.mul(cls_score, det_prob)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_324": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cls_prob.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_338": {
                "variable": {
                    "value": "refine_prob_1_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refine_score_1_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.refine_net_1(fc7_roi_new)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_345": {
                "variable": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_score_net(fc7_roi)",
                            "Call"
                        ],
                        [
                            "self.cls_score_net(fc7_roi)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_358": {
                "variable": {
                    "value": "det_cls_prob_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_score_net(fc7_roi)",
                            "Call"
                        ],
                        [
                            "self.cls_score_net(fc7_roi)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "det_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(det_score, dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(det_score, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat((det_prob1, det_prob2, det_prob3, det_prob4))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_373": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cls_prob.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_412": {
                "variable": {
                    "value": "refine_prob_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refine_score_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.refine_net_1(fc7_roi)",
                            "Call"
                        ],
                        [
                            "self.refine_net_1(fc7_roi_1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_413": {
                "variable": {
                    "value": "refine_prob_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "refine_score_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.refine_net_2(fc7_roi)",
                            "Call"
                        ],
                        [
                            "self.refine_net_2(fc7_roi_2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_441": {
                "variable": {
                    "value": "self.cls_score_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._fc7_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_442": {
                "variable": {
                    "value": "self.det_score_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._fc7_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_444": {
                "variable": {
                    "value": "self.bbox_pred_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._fc7_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._num_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_445": {
                "variable": {
                    "value": "self.refine_net_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._fc7_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_446": {
                "variable": {
                    "value": "self.refine_net_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._fc7_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_477": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ss_boxes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_485": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ss_boxes[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_493": {
                "variable": {
                    "value": "pool5_roi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pool5_roi_0, pool5_roi_flip_0, pool5_roi_1, pool5_roi_flip_1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_494": {
                "variable": {
                    "value": "pool5_context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pool5_context_0, pool5_context_flip_0, pool5_context_1, pool5_context_flip_1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_495": {
                "variable": {
                    "value": "pool5_frame",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pool5_frame_0, pool5_frame_flip_0, pool5_frame_1, pool5_frame_flip_1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_514": {
                "variable": {
                    "value": "ss_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ss_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_177": {
                "variable": {
                    "value": "not_01_fg_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_247": {
                "variable": {
                    "value": "rois_self_attention_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[keep_inds_new]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_248": {
                "variable": {
                    "value": "rois_self_attention_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._normalize_atten_maps(rois_self_attention_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_251": {
                "variable": {
                    "value": "rois_self_attention_gt_1_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_self_attention_gt_1[0:num_each]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_252": {
                "variable": {
                    "value": "rois_self_attention_gt_1_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_self_attention_gt_1[num_each * 2:num_each * 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_253": {
                "variable": {
                    "value": "rois_self_attention_gt_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_self_attention_gt_1_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(rois_self_attention_gt_1[0:num_each], rois_self_attention_gt_1[num_each:num_each * 2].flip(dims=[2]))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_273": {
                "variable": {
                    "value": "rois_self_attention_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois[keep_inds_new]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_274": {
                "variable": {
                    "value": "rois_self_attention_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._normalize_atten_maps(rois_self_attention_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_277": {
                "variable": {
                    "value": "rois_self_attention_gt_2_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_self_attention_gt_2[0:num_each]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_278": {
                "variable": {
                    "value": "rois_self_attention_gt_2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_self_attention_gt_2[num_each * 2:num_each * 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_279": {
                "variable": {
                    "value": "rois_self_attention_gt_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rois_self_attention_gt_2_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(rois_self_attention_gt_2[0:num_each], rois_self_attention_gt_2[num_each:num_each * 2].flip(dims=[2]))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_300": {
                "variable": {
                    "value": "consistency_conf_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_350": {
                "variable": {
                    "value": "det_prob1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_score[ss_rois_num_each * 0:ss_rois_num_each * 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_351": {
                "variable": {
                    "value": "det_prob2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_score[ss_rois_num_each * 1:ss_rois_num_each * 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_352": {
                "variable": {
                    "value": "det_prob3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_score[ss_rois_num_each * 2:ss_rois_num_each * 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_353": {
                "variable": {
                    "value": "det_prob4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_score[ss_rois_num_each * 3:ss_rois_num_each * 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "det_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(det_prob1, det_prob2, det_prob3, det_prob4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_356": {
                "variable": {
                    "value": "det_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame_score - context_score",
                            "BinOp"
                        ],
                        [
                            "frame_score - context_score",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_362": {
                "variable": {
                    "value": "det_cls_prob1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_cls_prob_product[ss_rois_num_each * 0:ss_rois_num_each * 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_363": {
                "variable": {
                    "value": "det_cls_prob2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_cls_prob_product[ss_rois_num_each * 1:ss_rois_num_each * 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_364": {
                "variable": {
                    "value": "det_cls_prob3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_cls_prob_product[ss_rois_num_each * 2:ss_rois_num_each * 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_365": {
                "variable": {
                    "value": "det_cls_prob4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_cls_prob_product[ss_rois_num_each * 3:ss_rois_num_each * 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_366": {
                "variable": {
                    "value": "det_cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[det_cls_prob1, det_cls_prob2, det_cls_prob3, det_cls_prob4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mul_367": {
                "variable": {
                    "value": "det_cls_prob_product2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.delete(cls_prob.copy(), idxs[keep_idxs][keep_idxs_new], axis=0)",
                            "Call"
                        ],
                        [
                            "refine_prob_each.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "cls_prob[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(cls_score, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(cls_score, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "det_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(det_score, dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(det_score, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat((det_prob1, det_prob2, det_prob3, det_prob4))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_369": {
                "variable": {
                    "value": "det_cls_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "det_cls_prob_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(cls_score, det_prob)",
                            "Call"
                        ],
                        [
                            "torch.mul(cls_score, det_prob)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_370": {
                "variable": {
                    "value": "det_cls_prob_product2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.delete(cls_prob.copy(), idxs[keep_idxs][keep_idxs_new], axis=0)",
                            "Call"
                        ],
                        [
                            "refine_prob_each.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "cls_prob[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(cls_score, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(cls_score, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "det_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(det_score, dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(det_score, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat((det_prob1, det_prob2, det_prob3, det_prob4))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_541": {
                "variable": {
                    "value": "self._image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.transpose([0, 3, 1, 2]).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "*size": {
                    "value": "att_all.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_130": {
                "*size": {
                    "value": "att_all.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "*size": {
                    "value": "change_vector.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_171": {
                "*size": {
                    "value": "before_vector.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "*size": {
                    "value": "before_vector.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_237": {
                "input": {
                    "value": "torch.mul(roi_labels_each, torch.log(refine_prob_1[keep_inds[1] + pi]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_239": {
                "input": {
                    "value": "torch.mul(roi_labels_each, torch.log(refine_prob_1[keep_inds[2] + pi * 2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_241": {
                "input": {
                    "value": "torch.mul(roi_labels_each, torch.log(refine_prob_1[keep_inds[3] + pi * 3]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_254": {
                "input": {
                    "value": "rois_self_attention_1[0:num_each]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "rois_self_attention_gt_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rois_self_attention_1.clone().detach()",
                            "Call"
                        ],
                        [
                            "torch.max(rois_self_attention_gt_1_1, rois_self_attention_gt_1_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_255": {
                "input": {
                    "value": "rois_self_attention_1[num_each:num_each * 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "rois_self_attention_gt_1.flip(dims=[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_256": {
                "input": {
                    "value": "rois_self_attention_1[num_each * 2:num_each * 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "rois_self_attention_gt_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rois_self_attention_1.clone().detach()",
                            "Call"
                        ],
                        [
                            "torch.max(rois_self_attention_gt_1_1, rois_self_attention_gt_1_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_257": {
                "input": {
                    "value": "rois_self_attention_1[num_each * 3:num_each * 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "rois_self_attention_gt_1.flip(dims=[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_264": {
                "input": {
                    "value": "torch.mul(roi_labels_each, torch.log(refine_prob_2[keep_inds[1] + pi]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_266": {
                "input": {
                    "value": "torch.mul(roi_labels_each, torch.log(refine_prob_2[keep_inds[2] + pi * 2]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_268": {
                "input": {
                    "value": "torch.mul(roi_labels_each, torch.log(refine_prob_2[keep_inds[3] + pi * 3]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_280": {
                "input": {
                    "value": "rois_self_attention_2[0:num_each]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "rois_self_attention_gt_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rois_self_attention_2.clone().detach()",
                            "Call"
                        ],
                        [
                            "torch.max(rois_self_attention_gt_2_1, rois_self_attention_gt_2_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_281": {
                "input": {
                    "value": "rois_self_attention_2[num_each:num_each * 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "rois_self_attention_gt_2.flip(dims=[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_282": {
                "input": {
                    "value": "rois_self_attention_2[num_each * 2:num_each * 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "rois_self_attention_gt_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rois_self_attention_2.clone().detach()",
                            "Call"
                        ],
                        [
                            "torch.max(rois_self_attention_gt_2_1, rois_self_attention_gt_2_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_283": {
                "input": {
                    "value": "rois_self_attention_2[num_each * 3:num_each * 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "rois_self_attention_gt_2.flip(dims=[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_537": {
                "ndarray": {
                    "value": "image_level_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_556": {
                "variable": {
                    "value": "image_org",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image[i].transpose([0, 3, 1, 2]).copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_601": {
                "ndarray": {
                    "value": "image.transpose([0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_607": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_128": {
                "input": {
                    "value": "att_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(bbox_feats_new * grad_channel_mean, 1)",
                            "Call"
                        ],
                        [
                            "att_all.view(num_rois, 49)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_186": {
                "input": {
                    "value": "change_vector_fg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "change_vector[not_01_fg_index]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_188": {
                "input": {
                    "value": "change_vector_bg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "change_vector[not_01_bg_index]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_235": {
                "input": {
                    "value": "torch.mul(roi_labels_each, torch.log(refine_prob_1[keep_inds[0]]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_237": {
                "input": {
                    "value": "roi_labels_each",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(roi_labels[0][keep_inds[0], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[1][keep_inds[1], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[2][keep_inds[2], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[3][keep_inds[3], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[0][keep_inds[0], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[1][keep_inds[1], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[2][keep_inds[2], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[3][keep_inds[3], :], dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(refine_prob_1[keep_inds[1] + pi])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_239": {
                "input": {
                    "value": "roi_labels_each",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(roi_labels[0][keep_inds[0], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[1][keep_inds[1], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[2][keep_inds[2], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[3][keep_inds[3], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[0][keep_inds[0], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[1][keep_inds[1], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[2][keep_inds[2], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[3][keep_inds[3], :], dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(refine_prob_1[keep_inds[2] + pi * 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_241": {
                "input": {
                    "value": "roi_labels_each",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(roi_labels[0][keep_inds[0], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[1][keep_inds[1], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[2][keep_inds[2], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[3][keep_inds[3], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[0][keep_inds[0], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[1][keep_inds[1], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[2][keep_inds[2], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[3][keep_inds[3], :], dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(refine_prob_1[keep_inds[3] + pi * 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_262": {
                "input": {
                    "value": "torch.mul(roi_labels_each, torch.log(refine_prob_2[keep_inds[0]]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_264": {
                "input": {
                    "value": "roi_labels_each",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(roi_labels[0][keep_inds[0], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[1][keep_inds[1], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[2][keep_inds[2], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[3][keep_inds[3], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[0][keep_inds[0], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[1][keep_inds[1], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[2][keep_inds[2], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[3][keep_inds[3], :], dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(refine_prob_2[keep_inds[1] + pi])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_266": {
                "input": {
                    "value": "roi_labels_each",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(roi_labels[0][keep_inds[0], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[1][keep_inds[1], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[2][keep_inds[2], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[3][keep_inds[3], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[0][keep_inds[0], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[1][keep_inds[1], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[2][keep_inds[2], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[3][keep_inds[3], :], dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(refine_prob_2[keep_inds[2] + pi * 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_268": {
                "input": {
                    "value": "roi_labels_each",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(roi_labels[0][keep_inds[0], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[1][keep_inds[1], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[2][keep_inds[2], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[3][keep_inds[3], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[0][keep_inds[0], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[1][keep_inds[1], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[2][keep_inds[2], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[3][keep_inds[3], :], dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(refine_prob_2[keep_inds[3] + pi * 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_289": {
                "input": {
                    "value": "label_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((label, label, label, label))",
                            "Call"
                        ],
                        [
                            "label_new.clone().detach().float().to(det_cls_prob.device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "det_cls_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._predictions['det_cls_prob']",
                            "Subscript"
                        ],
                        [
                            "det_cls_prob.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(det_cls_prob_product, 0)",
                            "Call"
                        ],
                        [
                            "torch.sum(det_cls_prob_product, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack([det_cls_prob1, det_cls_prob2, det_cls_prob3, det_cls_prob4])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_542": {
                "ndarray": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((0, 4), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.vstack((gt_boxes, gt_boxes_tmp[keep_idxs_new, :]))",
                            "Call"
                        ],
                        [
                            "proposals['gt_boxes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_553": {
                "ndarray": {
                    "value": "image_level_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mul_235": {
                "input": {
                    "value": "roi_labels_each",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(roi_labels[0][keep_inds[0], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[1][keep_inds[1], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[2][keep_inds[2], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[3][keep_inds[3], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[0][keep_inds[0], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[1][keep_inds[1], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[2][keep_inds[2], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[3][keep_inds[3], :], dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(refine_prob_1[keep_inds[0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_237": {
                "input": {
                    "value": "refine_prob_1[keep_inds[1] + pi]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_239": {
                "input": {
                    "value": "refine_prob_1[keep_inds[2] + pi * 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_241": {
                "input": {
                    "value": "refine_prob_1[keep_inds[3] + pi * 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_262": {
                "input": {
                    "value": "roi_labels_each",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(roi_labels[0][keep_inds[0], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[1][keep_inds[1], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[2][keep_inds[2], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[3][keep_inds[3], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[0][keep_inds[0], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[1][keep_inds[1], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[2][keep_inds[2], :], dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(roi_labels[3][keep_inds[3], :], dtype=torch.float32).cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.log(refine_prob_2[keep_inds[0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_264": {
                "input": {
                    "value": "refine_prob_2[keep_inds[1] + pi]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_266": {
                "input": {
                    "value": "refine_prob_2[keep_inds[2] + pi * 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_268": {
                "input": {
                    "value": "refine_prob_2[keep_inds[3] + pi * 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_235": {
                "input": {
                    "value": "refine_prob_1[keep_inds[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_262": {
                "input": {
                    "value": "refine_prob_2[keep_inds[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/apmetric.py": {
        "torch": {
            "zeros_62": {
                "variable": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.scores.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_63": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_79": {
                "variable": {
                    "value": "(sorted, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_28": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "FloatStorage_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LongStorage_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_25": {
                "obj": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_27": {
                "obj": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model/bbox_transform.py": {
        "torch": {
            "log_27": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_28": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_30": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.unsqueeze(2) for _ in [pred_ctr_x - 0.5 * pred_w, pred_ctr_y - 0.5 * pred_h, pred_ctr_x + 0.5 * pred_w, pred_ctr_y + 0.5 * pred_h]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_74": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxes[:, :, 0].clamp(0, im_shape[1] - 1), boxes[:, :, 1].clamp(0, im_shape[0] - 1), boxes[:, :, 2].clamp(0, im_shape[1] - 1), boxes[:, :, 3].clamp(0, im_shape[0] - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_52": {
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, 2::4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_53": {
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, 3::4]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model/test.py": {
        "torch": {
            "from_numpy_257": {
                "ndarray": {
                    "value": "cls_dets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack((cls_boxes, cls_scores[:, np.newaxis])).astype(np.float32, copy=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_209": {
                "ndarray": {
                    "value": "dets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_boxes[cls_ind][im_ind]",
                            "Subscript"
                        ],
                        [
                            "dets[inds, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_171": {
                "ndarray": {
                    "value": "box_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox_pred",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model/train_val.py": {
        "torch": {
            "SGD_150": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': getattr(value, 'weight_decay', cfg.TRAIN.WEIGHT_DECAY)}]",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.TRAIN.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_77": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.SNAPSHOT_PREFIX + '_iter_{:d}'.format(iter) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "os.path.join(self.output_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_130": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_107": {
                "f": {
                    "value": "str(sfile)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_185": {
                "f": {
                    "value": "self.pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/nets/mobilenet_v1.py": {
        "torch": {
            "Sequential_241": {
                "variable": {
                    "value": "self._layers[head]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.mobilenet.children())[:12]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_242": {
                "variable": {
                    "value": "self._layers[tail]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.mobilenet.children())[12:]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size, stride, (kernel_size - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, in_channels, kernel_size, stride, (kernel_size - 1) // 2, groups=in_channels, dilation=dilation, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size, stride, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth(conv_def.depth)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth(conv_def.depth)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_110": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU6_118": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth(conv_def.depth)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_124": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth(conv_def.depth)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_125": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "end_points[end_point_base]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('depthwise', conv_dw(in_channels, conv_def.kernel, stride=layer_stride, dilation=layer_rate)), ('pointwise', conv_pw(in_channels, out_channels, 1, stride=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "*args": {
                    "value": "end_points",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "*args": {
                    "value": "end_points",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/nets/resnet_v1.py": {
        "torch": {
            "Sequential_150": {
                "variable": {
                    "value": "self._layers[head]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.resnet.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/nets/vgg16.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.vgg.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.vgg.classifier._modules.values())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self._layers[head]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.vgg.features._modules.values())[:-1]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "DataParallel_41": {
                "variable": {
                    "value": "self._layers[head]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "module": {
                    "value": "self._layers['head']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/ops/nms/nms_wrapper.py": {
        "torch": {
            "from_numpy_32": {
                "variable": {
                    "value": "dets_th",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dets",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/ops/roi_align/gradcheck.py": {
        "torch": {
            "randn_22": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "feat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_24": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(num_rois, 4) * img_size * 0.5",
                            "BinOp"
                        ],
                        [
                            "np.hstack((batch_ind, rois))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rois).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "gradcheck_27": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "RoIAlign(3, spatial_scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(feat, rois)",
                            "Tuple"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_29": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "RoIAlign(3, spatial_scale, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(feat, rois)",
                            "Tuple"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "lib/ops/roi_align/roi_align.py": {
        "torch": {}
    },
    "lib/ops/roi_crop/roi_crop.py": {
        "torch": {}
    },
    "lib/ops/roi_pool/gradcheck.py": {
        "torch": {
            "randn_10": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_11": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gradcheck_15": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "RoIPool(4, 1.0 / 8)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(feat, rois)",
                            "Tuple"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "lib/ops/roi_pool/roi_pool.py": {
        "torch": {}
    },
    "lib/ops/roi_ring_pool/roi_ring_pool.py": {
        "torch": {}
    },
    "lib/roi_data_layer/augmentations.py": {
        "torch": {
            "from_numpy_204": {
                "ndarray": {
                    "value": "cvimage.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_204": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/setup_cuda.py": {
        "torch": {}
    },
    "lib/utils/bbox.py": {
        "torch": {
            "from_numpy_15": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_16": {
                "variable": {
                    "value": "query_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "query_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(query_boxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_26": {
                "input": {
                    "value": "boxes[:, 2:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_26": {
                "input": {
                    "value": "boxes[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_27": {
                "input": {
                    "value": "boxes[:, 3:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_27": {
                "input": {
                    "value": "boxes[:, 1:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/timer.py": {
        "torch": {
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/demo.py": {
        "torch": {
            "load_158": {
                "f": {
                    "value": "saved_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('output', demonet, DATASETS[dataset][0], 'default', NETS[demonet][0] % (100000 if dataset == 'pascal_voc' else 110000))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_111": {
                "ndarray": {
                    "value": "dets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack((cls_boxes, cls_scores[:, np.newaxis])).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "dets[keep.numpy(), :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "tools/test_net.py": {
        "torch": {
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_140": {
                "f": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "tools/trainval_net.py": {
        "torch": {
            "manual_seed_105": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_106": {
                "seed": {
                    "value": "cfg.RNG_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}