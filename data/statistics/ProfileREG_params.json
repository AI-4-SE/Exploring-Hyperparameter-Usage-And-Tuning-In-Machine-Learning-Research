{
    "model/data_utils.py": {
        "torch": {}
    },
    "model/reg_model.py": {
        "torch": {
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Embedding_45": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.word_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_47": {
                "variable": {
                    "value": "self.char_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.char_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.char_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_50": {
                "variable": {
                    "value": "self.char_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.char_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.char_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.char_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.char_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_59": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "drop_out",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "drop_out",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "drop_out",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_85": {
                "variable": {
                    "value": "(lengths_sorted, idx_sort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "word_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_lens.view(batch_size * max_seq_len)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_86": {
                "variable": {
                    "value": "(_, idx_unsort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor.sort(word_lens, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(input_seq_lens, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_89": {
                "variable": {
                    "value": "char_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_embedding(char_ids)",
                            "Call"
                        ],
                        [
                            "char_embedded.view(batch_size * max_seq_len, max_word_len, -1)",
                            "Call"
                        ],
                        [
                            "char_embedded.index_select(0, idx_sort)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor.sort(word_lens, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(input_seq_lens, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "char_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fw_hn, bw_hn)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_105": {
                "variable": {
                    "value": "char_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.char_proj(char_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "final_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(word_embeddings, char_hiddens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTM_135": {
                "variable": {
                    "value": "self.pre_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_136": {
                "variable": {
                    "value": "self.pos_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.output_cproj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.output_hproj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_139": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_141": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sort_158": {
                "variable": {
                    "value": "(prec_lens_sorted, pre_idx_sort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prec_seq_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(batch.prec_seq_lens, device=device, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_159": {
                "variable": {
                    "value": "(posc_lens_sorted, pos_idx_sort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "posc_seq_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(batch.posc_seq_lens, device=device, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_160": {
                "variable": {
                    "value": "(_, pre_idx_unsort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_idx_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(prec_seq_lens, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_161": {
                "variable": {
                    "value": "(_, pos_idx_unsort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_idx_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(posc_seq_lens, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_166": {
                "variable": {
                    "value": "pre_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_embed(prec_word_ids, prec_char_ids, prec_word_lens)",
                            "Call"
                        ],
                        [
                            "embed_pre.index_select(0, pre_idx_sort)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "prec_lens_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(prec_seq_lens, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_167": {
                "variable": {
                    "value": "pos_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_embed(posc_word_ids, posc_char_ids, posc_word_lens)",
                            "Call"
                        ],
                        [
                            "embed_pos.index_select(0, pos_idx_sort)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "posc_lens_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(posc_seq_lens, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_214": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_216": {
                "variable": {
                    "value": "self.output_cproj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self.output_hproj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_218": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sort_237": {
                "variable": {
                    "value": "(lengths_sorted, idx_sort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "input_seq_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_seq_lens",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_238": {
                "variable": {
                    "value": "(_, idx_unsort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor.sort(word_lens, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(input_seq_lens, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_241": {
                "variable": {
                    "value": "input_packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.word_embed(input_word_ids, input_char_ids, input_word_lens)",
                            "Call"
                        ],
                        [
                            "embed_wd.index_select(0, idx_sort)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor.sort(word_lens, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(input_seq_lens, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_246": {
                "variable": {
                    "value": "(outputs_padded, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs_packed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(input_packed)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_311": {
                "variable": {
                    "value": "self.decoderRNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_315": {
                "variable": {
                    "value": "self.Wh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_316": {
                "variable": {
                    "value": "self.Ws",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_317": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_321": {
                "variable": {
                    "value": "self.w_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_322": {
                "variable": {
                    "value": "self.w_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_323": {
                "variable": {
                    "value": "self.w_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_324": {
                "variable": {
                    "value": "self.w_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_327": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_456": {
                "variable": {
                    "value": "total_masked_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lm_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_456": {
                "variable": {
                    "value": "total_masked_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_456": {
                "variable": {
                    "value": "total_masked_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dec_lens.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_483": {
                "variable": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e_t.view(batch_size, max_enc_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 1)",
                            "Call"
                        ],
                        [
                            "e_t.view(batch_size, max_enc_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_487": {
                "variable": {
                    "value": "p_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.V(torch.cat((_h, context.squeeze(1)), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_489": {
                "variable": {
                    "value": "p_switch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_h(context.squeeze(1)) + self.w_s(_h) + self.w_x(embed_input[:, 0, :]) + self.w_c(enc_h_n)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_494": {
                "variable": {
                    "value": "p_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_switch[:, 0].view(-1, 1).expand(batch_size, self.vocab_size - self.nprons), p_switch[:, 1].view(-1, 1).expand(batch_size, self.nprons))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_730": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.regModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_958": {
                "variable": {
                    "value": "prec_word_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.prec_word_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_959": {
                "variable": {
                    "value": "prec_seq_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.prec_seq_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_960": {
                "variable": {
                    "value": "prec_char_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.prec_char_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_961": {
                "variable": {
                    "value": "prec_word_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.prec_word_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_963": {
                "variable": {
                    "value": "posc_word_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.posc_word_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_964": {
                "variable": {
                    "value": "posc_seq_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.posc_seq_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_965": {
                "variable": {
                    "value": "posc_char_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.posc_char_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_966": {
                "variable": {
                    "value": "posc_word_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.posc_word_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_973": {
                "variable": {
                    "value": "des_word_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.des_word_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_974": {
                "variable": {
                    "value": "des_seq_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.des_seq_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_975": {
                "variable": {
                    "value": "des_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.des_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_976": {
                "variable": {
                    "value": "des_char_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.des_char_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_977": {
                "variable": {
                    "value": "des_word_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.des_word_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_978": {
                "variable": {
                    "value": "max_des_oovs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.max_des_oovs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_979": {
                "variable": {
                    "value": "des_extented_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.des_extented_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_984": {
                "variable": {
                    "value": "_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.dec_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_985": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.target_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_986": {
                "variable": {
                    "value": "dec_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.dec_lens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_987": {
                "variable": {
                    "value": "dec_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch.dec_padding_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_403": {
                "variable": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e_t.view(batch_size, max_enc_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 1)",
                            "Call"
                        ],
                        [
                            "e_t.view(batch_size, max_enc_len)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_409": {
                "variable": {
                    "value": "p_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.V(torch.cat((_h, context), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_414": {
                "variable": {
                    "value": "p_switch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_h(context) + enc_final_state_proj + self.w_x(embed_input[:, _step, :]) + _h_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_417": {
                "variable": {
                    "value": "p_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_switch[:, 0].view(-1, 1).expand(batch_size, self.vocab_size - self.nprons), p_switch[:, 1].view(-1, 1).expand(batch_size, self.nprons))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_505": {
                "variable": {
                    "value": "ext_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.max_article_oov)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_506": {
                "variable": {
                    "value": "combined_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(weighted_Pvocab, ext_vocab)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_533": {
                "variable": {
                    "value": "_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[self.start_id]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_623": {
                "variable": {
                    "value": "_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[self.start_id]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_725": {
                "variable": {
                    "value": "self.regModel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.regModel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_738": {
                "obj": {
                    "value": "self.regModel.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.dir_model + 'checkpoint.pth.tar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_174": {
                "tensors": {
                    "value": "(pre_state[1][0], pre_state[1][1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_175": {
                "tensors": {
                    "value": "(pos_state[1][0], pos_state[1][1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_262": {
                "tensors": {
                    "value": "(h_n[0], h_n[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "tensors": {
                    "value": "(c_n[0], c_n[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_428": {
                "variable": {
                    "value": "ext_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.max_article_oov)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_430": {
                "variable": {
                    "value": "combined_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(weighted_Pvocab, ext_vocab)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_479": {
                "input": {
                    "value": "enc_proj + dec_proj",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_529": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_561": {
                "variable": {
                    "value": "_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "decode_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.getOverallTopk(vocab_probs, next_h, next_c, all_hyps, decoded_outputs)",
                            "Call"
                        ],
                        [
                            "decode_inds.t()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_606": {
                "tensors": {
                    "value": "next_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode_step(beam_enc_states, enc_h_n, init_state, _input, beam_enc_mask, beam_article_inds)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.decode_step(enc_states, enc_h_n, init_state, _input, enc_mask, article_inds)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_621": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_722": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_742": {
                "f": {
                    "value": "dir_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dir_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "ndarray": {
                    "value": "self.pre_trained",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_188": {
                "tensors": {
                    "value": "(pre_h, pos_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "tensors": {
                    "value": "(pre_c, pos_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_398": {
                "input": {
                    "value": "enc_proj + dec_proj",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_487": {
                "tensors": {
                    "value": "(_h, context.squeeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_639": {
                "variable": {
                    "value": "_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[self.unk_id]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__799": {
                "parameters": {
                    "value": "self.regModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.config.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_409": {
                "tensors": {
                    "value": "(_h, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_562": {
                "data": {
                    "value": "init_h.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_563": {
                "data": {
                    "value": "init_c.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_723": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}