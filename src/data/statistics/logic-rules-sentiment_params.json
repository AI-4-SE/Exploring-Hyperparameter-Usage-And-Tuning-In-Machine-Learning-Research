{
    "code/analysis.py": {
        "tensorflow": {
            "ConfigProto_144": {
                "variable": {
                    "value": "cfg_proto",
                    "type": "variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_147": {
                "config": {
                    "value": "cfg_proto",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(intra_op_parallelism_threads=2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "code/main.py": {
        "tensorflow": {
            "reset_default_graph_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_24": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/model/nn.py": {
        "tensorflow": {
            "random_uniform_initializer_9": {
                "minval": {
                    "value": "-limit",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "limit",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_19": {
                "variable": {
                    "value": "self.epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(config.lr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, args.config.seq_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "self.segment_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "self.w2v_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.vocab_size, e_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_61": {
                "variable": {
                    "value": "self.embedding_lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [args.vocab_size, e_size], initializer=random_uniform(0.25), trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('embedding', [args.vocab_size, e_size], initializer=random_uniform(0.25), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_100": {
                "variable": {
                    "value": "conv_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "conv_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(conv_outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv_outputs, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_122": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_123": {
                "variable": {
                    "value": "self.one_hot_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_126": {
                "variable": {
                    "value": "self.loss1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.one_hot_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "self.soft_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, num_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_134": {
                "variable": {
                    "value": "self.loss2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.soft_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "self.l1_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_168": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_169": {
                "variable": {
                    "value": "self.best_saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_172": {
                "variable": {
                    "value": "self.input_str",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.vocab_size, e_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "random_uniform(0.25)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_53": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.vocab_size, e_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "random_uniform(0.25)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "self.input_strings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_67": {
                "variable": {
                    "value": "self.input_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedding_lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_72": {
                "variable": {
                    "value": "self.input_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embedding_lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_106": {
                "variable": {
                    "value": "conv_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(conv_outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv_outputs, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_channels, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "random_uniform(math.sqrt(6.0 / (total_channels.value + num_classes)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_norm_114": {
                "variable": {
                    "value": "self.clipped_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clipped_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_115": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_148": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rho": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_154": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_83": {
                "variable": {
                    "value": "debug[filter]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv_filter%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size, e_size, 1, channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "random_uniform(0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_87": {
                "variable": {
                    "value": "debug[bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv_bias%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[channels]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_95": {
                "variable": {
                    "value": "debug[output]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(output)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "full_connected",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_130": {
                "input_tensor": {
                    "value": "self.loss1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_138": {
                "input_tensor": {
                    "value": "self.loss2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_165": {
                "control_inputs": {
                    "value": "[self.updates]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_35": {
                "value": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "'conv%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_119": {
                "a": {
                    "value": "conv_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(conv_outputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv_outputs, keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_91": {
                "input": {
                    "value": "input_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "conv_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/test.py": {
        "tensorflow": {
            "ConfigProto_121": {
                "variable": {
                    "value": "cfg_proto",
                    "type": "variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_124": {
                "config": {
                    "value": "cfg_proto",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(intra_op_parallelism_threads=2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "code/train.py": {
        "tensorflow": {
            "GPUOptions_31": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_33": {
                "variable": {
                    "value": "cfg_proto",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                },
                "intra_op_parallelism_threads": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_35": {
                "variable": {
                    "value": "cfg_proto",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_37": {
                "config": {
                    "value": "cfg_proto",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options, intra_op_parallelism_threads=2)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "code/utils/initialize.py": {
        "tensorflow": {
            "get_checkpoint_state_17": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "args.load_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_18": {
                "variable": {
                    "value": "ckpt_best",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "args.best_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "local_variables_initializer_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}