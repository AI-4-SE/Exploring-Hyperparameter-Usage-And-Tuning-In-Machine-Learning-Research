{
    "ctpn/ctpn/demo.py": {
        "tensorflow": {
            "ConfigProto_89": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_90": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_95": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ctpn/ctpn/model.py": {
        "tensorflow": {
            "ConfigProto_32": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_35": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_38": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_41": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/Users/linear/Documents/pycode/CHINESE-OCR/ctpn/checkpoints'",
                            "str"
                        ]
                    ]
                }
            },
            "NewCheckpointReader_42": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "ckpt.model_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ctpn/lib/fast_rcnn/train.py": {
        "tensorflow": {
            "ConfigProto_257": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Saver_40": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "write_version": {
                    "value": "tf.train.SaverDef.V2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_42": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logdir",
                            "Method Argument"
                        ]
                    ]
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "log_image_data",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "log_image_name",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_104": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_110": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "cfg.TRAIN.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_120": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "add_to_collection_90": {
                "name": {
                    "value": "_ops.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "log_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_logging_ops.image_summary(log_image_name, tf.expand_dims(log_image_data, 0), max_images=1)",
                            "Call"
                        ],
                        [
                            "self.build_image_summary()",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_100": {
                "name": {
                    "value": "rpn_reg_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "rpn_loss_box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.build_loss(ohem=cfg.TRAIN.OHEM)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_101": {
                "name": {
                    "value": "rpn_cls_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "rpn_cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.build_loss(ohem=cfg.TRAIN.OHEM)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_102": {
                "name": {
                    "value": "model_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.build_loss(ohem=cfg.TRAIN.OHEM)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_103": {
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.build_loss(ohem=cfg.TRAIN.OHEM)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_112": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "cfg.TRAIN.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_123": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_124": {
                "variable": {
                    "value": "(grads, norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(total_loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_150": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.output_dir + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_260": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_50": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_51": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_89": {
                "input": {
                    "value": "log_image_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.uint8, [None, None, 3])",
                            "Call"
                        ],
                        [
                            "self.build_image_summary()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_114": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "cfg.TRAIN.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_118": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.TRAIN.LEARNING_RATE, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.MOMENTUM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "global_variables_initializer_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "bbox_pred",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradients_125": {
                "ys": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net.build_loss(ohem=cfg.TRAIN.OHEM)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_173": {
                "ref": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(cfg.TRAIN.LEARNING_RATE, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "lr.eval() * cfg.TRAIN.GAMMA",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ctpn/lib/networks/VGGnet_test.py": {
        "tensorflow": {
            "placeholder_13": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "self.im_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ctpn/lib/networks/VGGnet_train.py": {
        "tensorflow": {
            "placeholder_11": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_12": {
                "variable": {
                    "value": "self.im_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "im_info",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_13": {
                "variable": {
                    "value": "self.gt_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_boxes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "self.gt_ishard",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "gt_ishard",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "self.dontcare_areas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "dontcare_areas",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_16": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ctpn/lib/networks/network.py": {
        "tensorflow": {
            "shape_260": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_288": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_345": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_354": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_399": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.get_output('rpn_cls_score_reshape')",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_401": {
                "variable": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.get_output('rpn-data')[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_404": {
                "variable": {
                    "value": "fg_keep",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.get_output('rpn-data')[0], [-1])",
                            "Call"
                        ],
                        [
                            "tf.gather(rpn_label, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_405": {
                "variable": {
                    "value": "rpn_keep",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.not_equal(rpn_label, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_406": {
                "variable": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.get_output('rpn_cls_score_reshape'), [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(rpn_cls_score, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rpn_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_407": {
                "variable": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.get_output('rpn-data')[0], [-1])",
                            "Call"
                        ],
                        [
                            "tf.gather(rpn_label, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "rpn_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_408": {
                "variable": {
                    "value": "rpn_cross_entropy_n",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.get_output('rpn-data')[0], [-1])",
                            "Call"
                        ],
                        [
                            "tf.gather(rpn_label, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "rpn_cls_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.get_output('rpn_cls_score_reshape'), [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather(rpn_cls_score, rpn_keep)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_417": {
                "variable": {
                    "value": "rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(rpn_bbox_pred, [-1, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "rpn_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_419": {
                "variable": {
                    "value": "rpn_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(rpn_bbox_targets, [-1, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "rpn_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_421": {
                "variable": {
                    "value": "rpn_bbox_inside_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(rpn_bbox_inside_weights, [-1, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "rpn_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_423": {
                "variable": {
                    "value": "rpn_bbox_outside_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(rpn_bbox_outside_weights, [-1, 4])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "rpn_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.not_equal(rpn_label, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_426": {
                "variable": {
                    "value": "rpn_loss_box_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rpn_bbox_outside_weights * self.smooth_l1_dist(rpn_bbox_inside_weights * (rpn_bbox_pred - rpn_bbox_targets))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_431": {
                "variable": {
                    "value": "rpn_cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rpn_cross_entropy_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=rpn_label, logits=rpn_cls_score)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_435": {
                "variable": {
                    "value": "regularization_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_87": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(img)",
                            "Call"
                        ],
                        [
                            "tf.shape(img)",
                            "Call"
                        ],
                        [
                            "tf.shape(input)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regularizer",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_96": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N * H, W, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMCell_101": {
                "variable": {
                    "value": "lstm_fw_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "d_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_h",
                            "Method Argument"
                        ],
                        [
                            "d_h",
                            "Method Argument"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_102": {
                "variable": {
                    "value": "lstm_bw_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "d_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_h",
                            "Method Argument"
                        ],
                        [
                            "d_h",
                            "Method Argument"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_104": {
                "variable": {
                    "value": "(lstm_out, last_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "lstm_fw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(d_h, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "lstm_bw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(d_h, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_106": {
                "variable": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bidirectional_dynamic_rnn(lstm_fw_cell, lstm_bw_cell, img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat(lstm_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, 2 * d_h])",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(lstm_cell, img, initial_state=initial_state, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, d_h])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bidirectional_dynamic_rnn(lstm_fw_cell, lstm_bw_cell, img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat(lstm_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, 2 * d_h])",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(lstm_cell, img, initial_state=initial_state, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, d_h])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N * H * W, 2 * d_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_110": {
                "variable": {
                    "value": "init_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_111": {
                "variable": {
                    "value": "init_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(lstm_out, weights) + biases",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(outputs, [N, H, W, d_o])",
                            "Call"
                        ],
                        [
                            "tf.matmul(lstm_out, weights) + biases",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(outputs, [N, H, W, d_o])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, H, W, d_o]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_124": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N * H, W, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMCell_129": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "d_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_h",
                            "Method Argument"
                        ],
                        [
                            "d_h",
                            "Method Argument"
                        ]
                    ]
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_132": {
                "variable": {
                    "value": "(lstm_out, last_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(d_h, state_is_tuple=True)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ],
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.reshape(img, [N * H, W, C])",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm_cell.zero_state(N * H, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bidirectional_dynamic_rnn(lstm_fw_cell, lstm_bw_cell, img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat(lstm_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, 2 * d_h])",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(lstm_cell, img, initial_state=initial_state, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, d_h])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N * H * W, d_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_137": {
                "variable": {
                    "value": "init_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_138": {
                "variable": {
                    "value": "init_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(lstm_out, weights) + biases",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(outputs, [N, H, W, d_o])",
                            "Call"
                        ],
                        [
                            "tf.matmul(lstm_out, weights) + biases",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(outputs, [N, H, W, d_o])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, H, W, d_o]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_150": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_152": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N * H * W, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_154": {
                "variable": {
                    "value": "init_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_155": {
                "variable": {
                    "value": "init_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_174": {
                "variable": {
                    "value": "init_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_175": {
                "variable": {
                    "value": "init_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_193": {
                "features": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_198": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k_h, k_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s_h, s_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool_207": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k_h, k_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s_h, s_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "py_func_220": {
                "variable": {
                    "value": "(blob, bbox_delta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "proposal_layer_py",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[input[0], input[1], input[2], cfg_key, _feat_stride, anchor_scales]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_225": {
                "variable": {
                    "value": "rpn_rois",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(blob, [-1, 5])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "rpn_rois",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_227": {
                "variable": {
                    "value": "rpn_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(proposal_layer_py, [input[0], input[1], input[2], cfg_key, _feat_stride, anchor_scales], [tf.float32, tf.float32])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "rpn_targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "py_func_242": {
                "variable": {
                    "value": "(rpn_labels, rpn_bbox_targets, rpn_bbox_inside_weights, rpn_bbox_outside_weights)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "anchor_target_layer_py",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[input[0], input[1], input[2], input[3], input[4], _feat_stride, anchor_scales]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_247": {
                "variable": {
                    "value": "rpn_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.cast(rpn_labels, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "rpn_labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_249": {
                "variable": {
                    "value": "rpn_bbox_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "rpn_bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(anchor_target_layer_py, [input[0], input[1], input[2], input[3], input[4], _feat_stride, anchor_scales], [tf.float32, tf.float32, tf.float32, tf.float32])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(rpn_bbox_targets, name='rpn_bbox_targets')",
                            "Call"
                        ],
                        [
                            "self.get_output('rpn-data')[1]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(tf.reshape(rpn_bbox_targets, [-1, 4]), rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "rpn_bbox_targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_251": {
                "variable": {
                    "value": "rpn_bbox_inside_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "rpn_bbox_inside_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(anchor_target_layer_py, [input[0], input[1], input[2], input[3], input[4], _feat_stride, anchor_scales], [tf.float32, tf.float32, tf.float32, tf.float32])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(rpn_bbox_inside_weights, name='rpn_bbox_inside_weights')",
                            "Call"
                        ],
                        [
                            "self.get_output('rpn-data')[2]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(tf.reshape(rpn_bbox_inside_weights, [-1, 4]), rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "rpn_bbox_inside_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_253": {
                "variable": {
                    "value": "rpn_bbox_outside_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "rpn_bbox_outside_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(anchor_target_layer_py, [input[0], input[1], input[2], input[3], input[4], _feat_stride, anchor_scales], [tf.float32, tf.float32, tf.float32, tf.float32])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(rpn_bbox_outside_weights, name='rpn_bbox_outside_weights')",
                            "Call"
                        ],
                        [
                            "self.get_output('rpn-data')[3]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(tf.reshape(rpn_bbox_outside_weights, [-1, 4]), rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "rpn_bbox_outside_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_290": {
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_shape[0], input_shape[1], -1, int(d)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "local_response_normalization_298": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "depth_radius": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "radius",
                            "Method Argument"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                },
                "beta": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_307": {
                "concat_dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axis",
                            "Method Argument"
                        ]
                    ]
                },
                "values": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_356": {
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_362": {
                "x": {
                    "value": "input[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "input[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_376": {
                "x": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_391": {
                "variable": {
                    "value": "deltas_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_392": {
                "variable": {
                    "value": "smoothL1_sign",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(deltas_abs, 1.0 / sigma2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_161": {
                "tensor": {
                    "value": "_O",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(input, kernel) + biases",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[N, H, W, int(d_o)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_170": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, s_h, s_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ],
                        [
                            "DEFAULT_PADDING",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_219": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_266": {
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_276": {
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_311": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_321": {
                "variable": {
                    "value": "feed_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(input, [0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_327": {
                "variable": {
                    "value": "init_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_329": {
                "variable": {
                    "value": "init_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_331": {
                "variable": {
                    "value": "init_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_333": {
                "variable": {
                    "value": "init_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_347": {
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_350": {
                "logits": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_356": {
                "logits": {
                    "value": "tf.reshape(input, [-1, input_shape[3]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_370": {
                "features": {
                    "value": "temp_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.batch_norm(input, scale=True, center=True, is_training=is_training, scope=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_381": {
                "variable": {
                    "value": "l2_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_decay",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_390": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.setdefault('name', self.get_unique_name(op.__name__))",
                            "Call"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "'smooth_l1_dist'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "not_equal_405": {
                "x": {
                    "value": "rpn_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.get_output('rpn-data')[0], [-1])",
                            "Call"
                        ],
                        [
                            "tf.gather(rpn_label, rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_417": {
                "tensor": {
                    "value": "rpn_bbox_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_output('rpn_bbox_pred')",
                            "Call"
                        ],
                        [
                            "tf.gather(tf.reshape(rpn_bbox_pred, [-1, 4]), rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_419": {
                "tensor": {
                    "value": "rpn_bbox_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(anchor_target_layer_py, [input[0], input[1], input[2], input[3], input[4], _feat_stride, anchor_scales], [tf.float32, tf.float32, tf.float32, tf.float32])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(rpn_bbox_targets, name='rpn_bbox_targets')",
                            "Call"
                        ],
                        [
                            "self.get_output('rpn-data')[1]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(tf.reshape(rpn_bbox_targets, [-1, 4]), rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_421": {
                "tensor": {
                    "value": "rpn_bbox_inside_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(anchor_target_layer_py, [input[0], input[1], input[2], input[3], input[4], _feat_stride, anchor_scales], [tf.float32, tf.float32, tf.float32, tf.float32])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(rpn_bbox_inside_weights, name='rpn_bbox_inside_weights')",
                            "Call"
                        ],
                        [
                            "self.get_output('rpn-data')[2]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(tf.reshape(rpn_bbox_inside_weights, [-1, 4]), rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_423": {
                "tensor": {
                    "value": "rpn_bbox_outside_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(anchor_target_layer_py, [input[0], input[1], input[2], input[3], input[4], _feat_stride, anchor_scales], [tf.float32, tf.float32, tf.float32, tf.float32])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(rpn_bbox_outside_weights, name='rpn_bbox_outside_weights')",
                            "Call"
                        ],
                        [
                            "self.get_output('rpn-data')[3]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(tf.reshape(rpn_bbox_outside_weights, [-1, 4]), rpn_keep)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_429": {
                "input_tensor": {
                    "value": "rpn_loss_box_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(rpn_bbox_outside_weights * self.smooth_l1_dist(rpn_bbox_inside_weights * (rpn_bbox_pred - rpn_bbox_targets)), reduction_indices=[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_437": {
                "inputs": {
                    "value": "regularization_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict",
                            "variable"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_115": {
                "a": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bidirectional_dynamic_rnn(lstm_fw_cell, lstm_bw_cell, img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat(lstm_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, 2 * d_h])",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(lstm_cell, img, initial_state=initial_state, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, d_h])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.make_var('weights', [2 * d_h, d_o], init_weights, trainable, regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))",
                            "Call"
                        ],
                        [
                            "self.make_var('weights', [d_h, d_o], init_weights, trainable, regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))",
                            "Call"
                        ],
                        [
                            "self.make_var('weights', [dim, num_out], init_weights, trainable, regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_142": {
                "a": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bidirectional_dynamic_rnn(lstm_fw_cell, lstm_bw_cell, img, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.concat(lstm_out, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, 2 * d_h])",
                            "Call"
                        ],
                        [
                            "tf.nn.dynamic_rnn(lstm_cell, img, initial_state=initial_state, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lstm_out, [N * H * W, d_h])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.make_var('weights', [2 * d_h, d_o], init_weights, trainable, regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))",
                            "Call"
                        ],
                        [
                            "self.make_var('weights', [d_h, d_o], init_weights, trainable, regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))",
                            "Call"
                        ],
                        [
                            "self.make_var('weights', [dim, num_out], init_weights, trainable, regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_160": {
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.make_var('weights', [d_i, d_o], init_weights, trainable, regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))",
                            "Call"
                        ],
                        [
                            "self.make_var('weights', [k_h, k_w, c_i, c_o], init_weights, trainable, regularizer=self.l2_regularizer(cfg.TRAIN.WEIGHT_DECAY))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_182": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv",
                            "Call"
                        ],
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ],
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.make_var('biases', [d_o], init_biases, trainable)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [d_o], init_biases, trainable)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [d_o], init_biases, trainable)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [c_o], init_biases, trainable)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [num_out], init_biases, trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_184": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv",
                            "Call"
                        ],
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ],
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.make_var('biases', [d_o], init_biases, trainable)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [d_o], init_biases, trainable)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [d_o], init_biases, trainable)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [c_o], init_biases, trainable)",
                            "Call"
                        ],
                        [
                            "self.make_var('biases', [num_out], init_biases, trainable)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_225": {
                "tensor": {
                    "value": "blob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(proposal_layer_py, [input[0], input[1], input[2], cfg_key, _feat_stride, anchor_scales], [tf.float32, tf.float32])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_247": {
                "x": {
                    "value": "rpn_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.py_func(anchor_target_layer_py, [input[0], input[1], input[2], input[3], input[4], _feat_stride, anchor_scales], [tf.float32, tf.float32, tf.float32, tf.float32])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(tf.cast(rpn_labels, tf.int32), name='rpn_labels')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_266": {
                "tensor": {
                    "value": "tf.transpose(input, [0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_shape[0], int(d), tf.cast(tf.cast(input_shape[1], tf.float32) / tf.cast(d, tf.float32) * tf.cast(input_shape[3], tf.float32), tf.int32), input_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_276": {
                "tensor": {
                    "value": "tf.transpose(input, [0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_shape[0], int(d), tf.cast(tf.cast(input_shape[1], tf.float32) * (tf.cast(input_shape[3], tf.float32) / tf.cast(d, tf.float32)), tf.int32), input_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_347": {
                "logits": {
                    "value": "tf.reshape(input, [-1, input_shape[3]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_380": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "l2_regularizer",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[tensor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_385": {
                "x": {
                    "value": "l2_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(weight_decay, dtype=tensor.dtype.base_dtype, name='weight_decay')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.nn.l2_loss(tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "less_393": {
                "x": {
                    "value": "deltas_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(deltas)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / sigma2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_430": {
                "input_tensor": {
                    "value": "tf.cast(fg_keep, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_51": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "subkey",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict[key]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_183": {
                "features": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_188": {
                "features": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv",
                            "Call"
                        ],
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ],
                        [
                            "convolve(input, kernel)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_321": {
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input, [N * H * W, C])",
                            "Call"
                        ],
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_loss_385": {
                "t": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_395": {
                "x": {
                    "value": "smoothL1_sign - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_430": {
                "x": {
                    "value": "fg_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(rpn_label, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_269": {
                "x": {
                    "value": "tf.cast(input_shape[1], tf.float32) / tf.cast(d, tf.float32) * tf.cast(input_shape[3], tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_279": {
                "x": {
                    "value": "input_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_394": {
                "x": {
                    "value": "deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_270": {
                "x": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1:].as_list()",
                            "Call"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_280": {
                "x": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1:].as_list()",
                            "Call"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ],
                        [
                            "d",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train/keras-train/trainbatch.py": {
        "tensorflow": {
            "ConfigProto_52": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_54": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto(intra_op_parallelism_threads=2)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_90": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.lmdbDataset(root=trainroot, target_transform=one_hot)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.randomSequentialSampler(train_dataset, batchSize)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "int(workers)",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.alignCollate(imgH=imgH, imgW=imgW, keep_ratio=keep_ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.lmdbDataset(root=valroot, transform=dataset.resizeNormalize((imgW, imgH)), target_transform=one_hot)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "testSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(workers)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "crnn/crnn.py": {
        "torch": {
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_46": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./crnn/samples/model_acc97.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "crnn/dataset.py": {
        "torch": {
            "cat_130": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.unsqueeze(0) for t in images]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_92": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.batch_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_97": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "tail - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "crnn/models/crnn.py": {
        "torch": {
            "LSTM_22": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nIn",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nHidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nOut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nm[i]",
                            "Subscript"
                        ],
                        [
                            "nOut",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "cnn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BidirectionalLSTM(512, nh, nh, ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_65": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_67": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_71": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_75": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "nIn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc if i == 0 else nm[i - 1]",
                            "IfExp"
                        ],
                        [
                            "nIn",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nm[i]",
                            "Subscript"
                        ],
                        [
                            "nOut",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "ss[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "ps[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "nOut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nm[i]",
                            "Subscript"
                        ],
                        [
                            "nOut",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_60": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "crnn/models/utils.py": {
        "torch": {}
    },
    "crnn/test.py": {
        "torch": {}
    },
    "crnn/util.py": {
        "torch": {
            "UpsamplingBilinear2d_100": {
                "variable": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "train/keras-train/allinonetrain.py": {
        "torch": {
            "DataLoader_253": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lmdbDataset(root=trainroot, target_transform=one_hot)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "int(workers)",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "alignCollate(imgH=imgH, imgW=imgW, keep_ratio=keep_ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_262": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lmdbDataset(root=valroot, transform=resizeNormalize((imgW, imgH)), target_transform=one_hot)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batchSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "int(workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.unsqueeze(0) for t in images]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_104": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.batch_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_109": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "tail - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train/keras-train/dataset.py": {
        "torch": {
            "cat_136": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.unsqueeze(0) for t in images]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_98": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.batch_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_103": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "tail - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train/keras-train/train.py": {
        "torch": {
            "DataLoader_69": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.lmdbDataset(root=trainroot, target_transform=one_hot)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.randomSequentialSampler(train_dataset, batchSize)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "int(workers)",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.alignCollate(imgH=imgH, imgW=imgW, keep_ratio=keep_ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.lmdbDataset(root=valroot, transform=dataset.resizeNormalize((imgW, imgH)), target_transform=one_hot)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batchSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "int(workers)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train/pytorch-train/crnn_main.py": {
        "torch": {
            "DataLoader_123": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.lmdbDataset(root=opt.trainroot)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.randomSequentialSampler(train_dataset, opt.batchSize)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.alignCollate(imgH=opt.imgH, imgW=opt.imgW, keep_ratio=opt.keep_ratio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_108": {
                "seed": {
                    "value": "opt.manualSeed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_180": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "crnn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_195": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adadelta_183": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "crnn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_185": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "crnn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_275": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "crnn.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "load_159": {
                "f": {
                    "value": "opt.crnn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_326": {
                "obj": {
                    "value": "crnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/netCRNN.pth'.format(opt.experiment)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_337": {
                "obj": {
                    "value": "crnn.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/netCRNN.pth'.format(opt.experiment)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train/pytorch-train/dataset.py": {
        "torch": {
            "cat_131": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t.unsqueeze(0) for t in images]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_93": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.batch_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_98": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "tail - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train/pytorch-train/manager_torch.py": {
        "torch": {
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train/pytorch-train/models/crnn.py": {
        "torch": {
            "LSTM_10": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nIn",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nHidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nOut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nm[i]",
                            "Subscript"
                        ],
                        [
                            "nOut",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "cnn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BidirectionalLSTM(512, nh, nh, ngpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_53": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_55": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_63": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "nIn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nc if i == 0 else nm[i - 1]",
                            "IfExp"
                        ],
                        [
                            "nIn",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nm[i]",
                            "Subscript"
                        ],
                        [
                            "nOut",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "ss[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "ps[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "nOut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nm[i]",
                            "Subscript"
                        ],
                        [
                            "nOut",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_48": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train/pytorch-train/models/utils.py": {
        "torch": {}
    },
    "train/pytorch-train/utils.py": {
        "torch": {
            "UpsamplingBilinear2d_136": {
                "variable": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    }
}