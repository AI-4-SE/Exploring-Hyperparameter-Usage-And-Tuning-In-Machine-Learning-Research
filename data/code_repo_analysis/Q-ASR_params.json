{
    "examples/speaker_recognition/voxceleb_eval.py": {
        "sklearn": {
            "roc_curve_107": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_acc(trial_file=trial_file, emb=emb, save_kaldi_emb=save_kaldi_emb)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_acc(trial_file=trial_file, emb=emb, save_kaldi_emb=save_kaldi_emb)",
                            "Call"
                        ]
                    ]
                },
                "pos_label": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/models/glue_benchmark/metrics_for_glue.py": {
        "sklearn": {
            "f1_score_31": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matthews_corrcoef_36": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/parts/utils_funcs.py": {
        "sklearn": {
            "confusion_matrix_105": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "confusion_matrix_69": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "classification_report_130": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "target_names": {
                    "value": "labels_names",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[k + ' (label id: ' + str(v) + ')' for (k, v) in sorted(label_ids.items(), key=lambda item: item[1]) if v in used_labels]",
                            "ListComp"
                        ]
                    ]
                },
                "digits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "output_dict": {
                    "value": "output_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "scripts/process_vad_data.py": {
        "sklearn": {
            "train_test_split_102": {
                "variable": {
                    "value": "(X_train, X_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_104": {
                "variable": {
                    "value": "(X_train, X_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_train",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "val_size_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val_size / (1 - test_size)",
                            "BinOp"
                        ]
                    ]
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/scp_to_manifest.py": {
        "sklearn": {
            "StratifiedShuffleSplit_71": {
                "variable": {
                    "value": "sss",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/collections/nlp/test_classification_report.py": {
        "sklearn": {
            "precision_recall_fscore_support_46": {
                "variable": {
                    "value": "(pr_sklearn, recall_sklearn, f1_sklearn, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([1, 0, 0, 1, 2, 1, 0])",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([0, 1, 1, 1, 2, 2, 0])",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['macro', 'micro', 'weighted']",
                            "List"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Tensor_33": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_36": {},
            "round_48": {
                "input": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classification_report_nemo(preds, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_49": {
                "input": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classification_report_nemo(preds, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_50": {
                "input": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classification_report_nemo(preds, labels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/asr/experimental/speech_to_text_sclite.py": {
        "torch": {
            "is_available_69": {
                "variable": {
                    "value": "can_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_100": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "autocast_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/asr/quantization/inference.py": {
        "torch": {
            "is_available_42": {
                "variable": {
                    "value": "can_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_72": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_105": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[synthetic_seqlen] * synthetic_batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "autocast_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/asr/quantization/synthesize.py": {
        "torch": {
            "is_available_43": {
                "variable": {
                    "value": "can_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_62": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_85": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "examples/asr/speech_to_text_calibrate.py": {
        "torch": {
            "is_available_47": {
                "variable": {
                    "value": "can_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_65": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "autocast_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/asr/speech_to_text_infer.py": {
        "torch": {
            "is_available_40": {
                "variable": {
                    "value": "can_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_55": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "autocast_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/asr/speech_to_text_quant_infer.py": {
        "torch": {
            "is_available_49": {
                "variable": {
                    "value": "can_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_67": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "autocast_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/asr/vad_infer.py": {
        "torch": {
            "device_49": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_grad_enabled_68": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_128": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vad_model(input_signal=test_batch[0], input_signal_length=test_batch[1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "autocast_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/nlp/language_modeling/convert_weights_to_nemo1.0.py": {
        "torch": {
            "load_41": {
                "variable": {
                    "value": "bert_in",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.bert_encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "tok_in",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.bert_token_classifier",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_44": {
                "variable": {
                    "value": "seq_in",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.bert_sequence_classifier",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_61": {
                "obj": {
                    "value": "new_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': new_dict}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.output_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/tts/test_tts_infer.py": {
        "torch": {
            "stack_119": {
                "variable": {
                    "value": "tts_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tts_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(tts_input)",
                            "Call"
                        ],
                        [
                            "tts_input.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_72": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_114": {
                "variable": {
                    "value": "tts_input[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text in enumerate(tts_input)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, longest_tts_input - len(text))",
                            "Tuple"
                        ]
                    ]
                },
                "value": {
                    "value": "68",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/data/audio_to_label.py": {
        "torch": {
            "stack_156": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(tokens)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(tokens)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_157": {
                "variable": {
                    "value": "tokens_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tokens_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ],
                        [
                            "torch.stack(tokens_lengths)",
                            "Call"
                        ],
                        [
                            "zip(*batch)",
                            "Call"
                        ],
                        [
                            "torch.tensor(num_slices)",
                            "Call"
                        ],
                        [
                            "zip(*batch)",
                            "Call"
                        ],
                        [
                            "torch.tensor(num_slices)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_207": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(tokens)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(tokens)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_208": {
                "variable": {
                    "value": "tokens_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "num_slices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_255": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(tokens)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(tokens)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_256": {
                "variable": {
                    "value": "tokens_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "num_slices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_152": {
                "variable": {
                    "value": "audio_signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "audio_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(audio_signal)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(audio_signal)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(audio_signal)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "stack_153": {
                "variable": {
                    "value": "audio_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_audio_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_203": {
                "variable": {
                    "value": "audio_signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "audio_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(audio_signal)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(audio_signal)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(audio_signal)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "tensor_204": {
                "variable": {
                    "value": "audio_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "audio_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_audio_lengths)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "zip(*batch)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(audio_lengths)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "zip(*batch)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(audio_lengths)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "zeros_232": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "append_len_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slice_length // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_233": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "append_len_end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slice_length - slice_length // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_234": {
                "variable": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(start, sig, end)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_250": {
                "variable": {
                    "value": "audio_signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "audio_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(audio_signal)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(audio_signal)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(audio_signal)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "tensor_251": {
                "variable": {
                    "value": "audio_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "audio_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_audio_lengths)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "zip(*batch)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(audio_lengths)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "zip(*batch)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(audio_lengths)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "tensor_280": {
                "data": {
                    "value": "tl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "cat_139": {
                "variable": {
                    "value": "rep_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "repeat * [sig]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rep_sig, sub)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "rep_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "repeat * [sig]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rep_sig, sub)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_273": {
                "data": {
                    "value": "features.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "data": {
                    "value": "fixed_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.featurizer.sample_rate * self.time_length",
                            "BinOp"
                        ],
                        [
                            "int(min(fixed_length, max(audio_lengths)))",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_143": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "chunck_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sig_len - fixed_length",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "data": {
                    "value": "fixed_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.featurizer.sample_rate * self.time_length",
                            "BinOp"
                        ],
                        [
                            "int(min(fixed_length, max(audio_lengths)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_183": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/data/audio_to_text.py": {
        "torch": {
            "stack_75": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_76": {
                "variable": {
                    "value": "tokens_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tokens_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ],
                        [
                            "torch.stack(tokens_lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_71": {
                "variable": {
                    "value": "audio_signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "audio_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(audio_signal)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "stack_72": {
                "variable": {
                    "value": "audio_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "audio_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ],
                        [
                            "torch.stack(audio_lengths)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "load_366": {
                "variable": {
                    "value": "pth",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "durs_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.pop('durs_path')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_408": {
                "variable": {
                    "value": "xy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:-1], y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_409": {
                "variable": {
                    "value": "xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([x[:-1], y], dim=1).view(-1)",
                            "Call"
                        ],
                        [
                            "F.pad(xy, pad=[0, 1], value=x[-1])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "x[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_67": {
                "variable": {
                    "value": "tokens_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "variable"
                        ],
                        [
                            "torch.nn.functional.pad(tokens_i, pad, value=pad_id)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, max_audio_len - sig_len)",
                            "Tuple"
                        ],
                        [
                            "(0, max_tokens_len - tokens_i_len)",
                            "Tuple"
                        ],
                        [
                            "2 * len(tensor.shape) * [0]",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "pad_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.pad_id",
                            "Attribute"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tokenizer.pad_id",
                            "Attribute"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "pad_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_403": {
                "tensors": {
                    "value": "new_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_62": {
                "variable": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "variable"
                        ],
                        [
                            "torch.nn.functional.pad(sig, pad)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, max_audio_len - sig_len)",
                            "Tuple"
                        ],
                        [
                            "(0, max_tokens_len - tokens_i_len)",
                            "Tuple"
                        ],
                        [
                            "2 * len(tensor.shape) * [0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_182": {
                "data": {
                    "value": "tl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sample.text_tokens)",
                            "Call"
                        ],
                        [
                            "tl + 1",
                            "BinOp"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "len(manifest_entry.text_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_379": {
                "data": {
                    "value": "len(text)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_590": {
                "data": {
                    "value": "tl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sample.text_tokens)",
                            "Call"
                        ],
                        [
                            "tl + 1",
                            "BinOp"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "len(manifest_entry.text_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_840": {
                "data": {
                    "value": "features.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_851": {
                "data": {
                    "value": "tl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sample.text_tokens)",
                            "Call"
                        ],
                        [
                            "tl + 1",
                            "BinOp"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "len(manifest_entry.text_tokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_170": {
                "data": {
                    "value": "features.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_394": {
                "data": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors",
                            "variable"
                        ]
                    ]
                }
            },
            "pad_402": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors",
                            "variable"
                        ]
                    ]
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0, max_audio_len - sig_len)",
                            "Tuple"
                        ],
                        [
                            "(0, max_tokens_len - tokens_i_len)",
                            "Tuple"
                        ],
                        [
                            "2 * len(tensor.shape) * [0]",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_583": {
                "data": {
                    "value": "features.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_420": {
                "*size": {
                    "value": "len(t) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "t.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_interleave_433": {
                "input": {
                    "value": "text1",
                    "type": "variable",
                    "possible_values": []
                },
                "repeats": {
                    "value": "durs1",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/data/audio_to_text_dali.py": {
        "torch": {
            "zeros_440": {
                "variable": {
                    "value": "transcript_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text_raw.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "ttokens_len",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_443": {
                "variable": {
                    "value": "transcript_len_out",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "text_tokens_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_442": {
                "variable": {
                    "value": "transcript_out[i, :n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "text_tokens[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_217": {
                "variable": {
                    "value": "self.window",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.window_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/data/audio_to_text_dataset.py": {
        "torch": {
            "is_available_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/losses/angularloss.py": {
        "torch": {
            "cat_63": {
                "variable": {
                    "value": "excl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat((logits[i, :y], logits[i, y + 1:])).unsqueeze(0) for (i, y) in enumerate(labels)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_59": {
                "input": {
                    "value": "torch.acos(torch.clamp(torch.diagonal(logits.transpose(0, 1)[labels]), -1.0 + self.eps, 1 - self.eps)) + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_66": {
                "input": {
                    "value": "self.scale * excl",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "torch.exp(self.scale * excl)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(numerator) + torch.sum(torch.exp(self.scale * excl), dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_68": {
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numerator - torch.log(denominator)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_64": {
                "tensors": {
                    "value": "(logits[i, :y], logits[i, y + 1:])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_64": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "acos_60": {
                "input": {
                    "value": "torch.clamp(torch.diagonal(logits.transpose(0, 1)[labels]), -1.0 + self.eps, 1 - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_60": {
                "input": {
                    "value": "torch.diagonal(logits.transpose(0, 1)[labels])",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0 + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diagonal_60": {
                "input": {
                    "value": "logits.transpose(0, 1)[labels]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/losses/ctc.py": {
        "torch": {
            "mean_71": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super().forward(log_probs=log_probs, targets=targets, input_lengths=input_lengths, target_lengths=target_lengths)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/collections/asr/losses/rnnt.py": {
        "torch": {
            "mean_151": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._loss(acts=log_probs, labels=targets, act_lens=input_lengths, label_lens=target_lengths)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/collections/asr/metrics/rnnt_wer.py": {
        "torch": {
            "tensor_386": {
                "data": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "scores + editdistance.eval(h_list, r_list)",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.scores.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.scores.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_387": {
                "data": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "words + len(r_list)",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.words.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.words.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_342": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_343": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/metrics/rnnt_wer_bpe.py": {
        "torch": {
            "tensor_195": {
                "data": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "scores + editdistance.eval(h_list, r_list)",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.scores.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.scores.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_196": {
                "data": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "words + len(r_list)",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.words.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.words.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_150": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/metrics/wer.py": {
        "torch": {
            "tensor_174": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "scores + editdistance.eval(h_list, r_list)",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "self.scores.detach().float()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.scores.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.scores.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "self.words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "words + len(r_list)",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "self.words.detach().float()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.words.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.words.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_114": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/metrics/wer_bpe.py": {
        "torch": {
            "tensor_137": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "scores + editdistance.eval(h_list, r_list)",
                            "BinOp"
                        ],
                        [
                            "self.scores.detach().float()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.scores.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.scores.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_138": {
                "variable": {
                    "value": "self.words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "words + len(r_list)",
                            "BinOp"
                        ],
                        [
                            "self.words.detach().float()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.words.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.words.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/models/asr_model.py": {
        "torch": {
            "stack_38": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_38": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_39": {
                "variable": {
                    "value": "wer_num",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_wer_num'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "wer_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_40": {
                "variable": {
                    "value": "wer_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_wer_denom'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_40": {
                "variable": {
                    "value": "wer_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_45": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_45": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_46": {
                "variable": {
                    "value": "wer_num",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_wer_num'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_46": {
                "variable": {
                    "value": "wer_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_47": {
                "variable": {
                    "value": "wer_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_wer_denom'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_47": {
                "variable": {
                    "value": "wer_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/models/classification_models.py": {
        "torch": {
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_348": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_348": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_349": {
                "variable": {
                    "value": "correct_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_correct_counts'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_349": {
                "variable": {
                    "value": "correct_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_350": {
                "variable": {
                    "value": "total_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_total_counts'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_350": {
                "variable": {
                    "value": "total_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_363": {
                "variable": {
                    "value": "test_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_363": {
                "variable": {
                    "value": "test_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_364": {
                "variable": {
                    "value": "correct_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_correct_counts'].unsqueeze(0) for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_364": {
                "variable": {
                    "value": "correct_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_365": {
                "variable": {
                    "value": "total_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_total_counts'].unsqueeze(0) for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_365": {
                "variable": {
                    "value": "total_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_182": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AudioToSpeechLabelDataSet(manifest_filepath=config['manifest_filepath'], labels=config['labels'], featurizer=featurizer, max_duration=config.get('max_duration', None), min_duration=config.get('min_duration', None), trim=config.get('trim_silence', True), load_audio=config.get('load_audio', True), time_length=config.get('time_length', 0.31), shift_length=config.get('shift_length', 0.01))",
                            "Call"
                        ],
                        [
                            "AudioLabelDataset(manifest_filepath=config['manifest_filepath'], labels=config['labels'], featurizer=featurizer, max_duration=config.get('max_duration', None), min_duration=config.get('min_duration', None), trim=config.get('trim_silence', True), load_audio=config.get('load_audio', True))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_func",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.vad_frame_seq_collate_fn",
                            "Attribute"
                        ],
                        [
                            "dataset.collate_fn",
                            "Attribute"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "config.get('drop_last', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "config['shuffle']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'paths2audio_files': paths2audio_files, 'batch_size': batch_size, 'temp_dir': tmpdir}",
                            "Dict"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.get('num_workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "config.get('pin_memory', False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/models/ctc_bpe_models.py": {
        "torch": {
            "DataLoader_133": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audio_to_text_dataset.get_tarred_bpe_dataset(config=config, tokenizer=self.tokenizer, shuffle_n=shuffle_n, global_rank=self.global_rank, world_size=self.world_size, augmentor=augmentor)",
                            "Call"
                        ],
                        [
                            "audio_to_text_dataset.get_bpe_dataset(config=config, tokenizer=self.tokenizer, augmentor=augmentor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "config.get('drop_last', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['shuffle']",
                            "Subscript"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.get('num_workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "config.get('pin_memory', False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/models/ctc_models.py": {
        "torch": {
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_312": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audio_to_text_dataset.get_dali_char_dataset(config=config, shuffle=shuffle, device_id=device_id, global_rank=self.global_rank, world_size=self.world_size, preprocessor_cfg=self._cfg.preprocessor)",
                            "Call"
                        ],
                        [
                            "audio_to_text_dataset.get_tarred_char_dataset(config=config, shuffle_n=shuffle_n, global_rank=self.global_rank, world_size=self.world_size, augmentor=augmentor)",
                            "Call"
                        ],
                        [
                            "audio_to_text_dataset.get_char_dataset(config=config, augmentor=augmentor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'paths2audio_files': paths2audio_files, 'batch_size': batch_size, 'temp_dir': tmpdir}",
                            "Dict"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "config.get('drop_last', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['shuffle']",
                            "Subscript"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.get('num_workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "config.get('pin_memory', False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/models/label_models.py": {
        "torch": {
            "stack_203": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_203": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_204": {
                "variable": {
                    "value": "correct_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_correct_counts'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_204": {
                "variable": {
                    "value": "correct_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_205": {
                "variable": {
                    "value": "total_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_total_counts'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_205": {
                "variable": {
                    "value": "total_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_236": {
                "variable": {
                    "value": "test_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_236": {
                "variable": {
                    "value": "test_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_237": {
                "variable": {
                    "value": "correct_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_correct_counts'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_237": {
                "variable": {
                    "value": "correct_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_238": {
                "variable": {
                    "value": "total_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_total_counts'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_238": {
                "variable": {
                    "value": "total_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_393": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['embs'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_394": {
                "variable": {
                    "value": "slices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['slices'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataLoader_114": {
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "self.dataset.fixed_seq_collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "config.get('drop_last', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "config['shuffle']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.get('num_workers', 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "config.get('pin_memory', False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/models/rnnt_bpe_models.py": {
        "torch": {
            "DataLoader_233": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audio_to_text_dataset.get_tarred_bpe_dataset(config=config, tokenizer=self.tokenizer, shuffle_n=shuffle_n, global_rank=self.global_rank, world_size=self.world_size, augmentor=augmentor)",
                            "Call"
                        ],
                        [
                            "audio_to_text_dataset.get_bpe_dataset(config=config, tokenizer=self.tokenizer, augmentor=augmentor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "config.get('drop_last', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['shuffle']",
                            "Subscript"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.get('num_workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "config.get('pin_memory', False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/models/rnnt_models.py": {
        "torch": {
            "no_grad_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_536": {
                "variable": {
                    "value": "wer_num",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_wer_num'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_536": {
                "variable": {
                    "value": "wer_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_537": {
                "variable": {
                    "value": "wer_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_wer_denom'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_537": {
                "variable": {
                    "value": "wer_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_547": {
                "variable": {
                    "value": "wer_num",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_wer_num'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_547": {
                "variable": {
                    "value": "wer_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_548": {
                "variable": {
                    "value": "wer_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_wer_denom'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_548": {
                "variable": {
                    "value": "wer_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_300": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audio_to_text_dataset.get_dali_char_dataset(config=config, shuffle=shuffle, device_id=device_id, global_rank=self.global_rank, world_size=self.world_size, preprocessor_cfg=self._cfg.preprocessor)",
                            "Call"
                        ],
                        [
                            "audio_to_text_dataset.get_tarred_char_dataset(config=config, shuffle_n=shuffle_n, global_rank=self.global_rank, world_size=self.world_size, augmentor=augmentor)",
                            "Call"
                        ],
                        [
                            "audio_to_text_dataset.get_char_dataset(config=config, augmentor=augmentor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'paths2audio_files': paths2audio_files, 'batch_size': batch_size, 'temp_dir': tmpdir}",
                            "Dict"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "config.get('drop_last', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['shuffle']",
                            "Subscript"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.get('num_workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "config.get('pin_memory', False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_532": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_532": {
                "variable": {
                    "value": "val_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_543": {
                "variable": {
                    "value": "test_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_543": {
                "variable": {
                    "value": "test_loss_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_585": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "std": {
                    "value": "self._optim_variational_noise_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "param.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/modules/audio_preprocessing.py": {
        "torch": {
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ceil_390": {
                "variable": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "length.to(torch.float32) / self.hop_length",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_490": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_501": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "image_len - audio_length + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[num_images]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_506": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cutout_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_516": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_signal",
                            "variable"
                        ],
                        [
                            "torch.nn.functional.pad(image, [pad_left, pad_right], mode='constant', value=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(cutout_images, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_left, pad_right]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/modules/beam_search_decoder.py": {
        "torch": {
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_91": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_probs",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/collections/asr/modules/conformer_encoder.py": {
        "torch": {
            "randn_79": {
                "variable": {
                    "value": "input_example",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self._feat_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_176": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_200": {
                "variable": {
                    "value": "audio_signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(audio_signal, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.pre_encode(audio_signal, length)",
                            "Call"
                        ],
                        [
                            "self.embed(audio_signal)",
                            "Call"
                        ],
                        [
                            "self.pos_enc(audio_signal)",
                            "Call"
                        ],
                        [
                            "layer(x=audio_signal, att_mask=xx_mask, pos_emb=pos_emb, pad_mask=pad_mask)",
                            "Call"
                        ],
                        [
                            "self.out_proj(audio_signal)",
                            "Call"
                        ],
                        [
                            "torch.transpose(audio_signal, 1, 2)",
                            "Call"
                        ],
                        [
                            "audio_signal",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_223": {
                "variable": {
                    "value": "audio_signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(audio_signal, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.pre_encode(audio_signal, length)",
                            "Call"
                        ],
                        [
                            "self.embed(audio_signal)",
                            "Call"
                        ],
                        [
                            "self.pos_enc(audio_signal)",
                            "Call"
                        ],
                        [
                            "layer(x=audio_signal, att_mask=xx_mask, pos_emb=pos_emb, pad_mask=pad_mask)",
                            "Call"
                        ],
                        [
                            "self.out_proj(audio_signal)",
                            "Call"
                        ],
                        [
                            "torch.transpose(audio_signal, 1, 2)",
                            "Call"
                        ],
                        [
                            "audio_signal",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_230": {
                "variable": {
                    "value": "seq_range",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_time",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.pre_encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "pos_bias_u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_heads, d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "pos_bias_v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_heads, d_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feat_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/modules/conv_asr.py": {
        "torch": {
            "randn_69": {
                "variable": {
                    "value": "input_example",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self._feat_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_191": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*encoder_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_261": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self._feat_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self._num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_265": {
                "variable": {
                    "value": "self.decoder_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "qconv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_285": {
                "variable": {
                    "value": "input_example",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "self._feat_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "randn_335": {
                "variable": {
                    "value": "input_example",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self._feat_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_367": {
                "variable": {
                    "value": "self.decoder_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(self._feat_in, self._num_classes, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_410": {
                "variable": {
                    "value": "input_example",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.input_feat_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_458": {
                "variable": {
                    "value": "self.emb_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "emb_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_460": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "shapes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Sequential_465": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(inp_shape, out_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_275": {
                "input": {
                    "value": "output.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_361": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_380": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder_layers(encoder_output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_485": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._pooling(encoder_output)",
                            "Call"
                        ],
                        [
                            "layer(pool)",
                            "Call"
                        ],
                        [
                            "F.normalize(pool, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool1d_363": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_367": {
                "in_features": {
                    "value": "self._feat_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_466": {
                "in_features": {
                    "value": "inp_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_467": {
                "num_features": {
                    "value": "out_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "learn_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_468": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_484": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.final.parameters()",
                            "Call"
                        ],
                        [
                            "F.normalize(W, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/modules/lstm_decoder.py": {
        "torch": {
            "LSTM_62": {
                "variable": {
                    "value": "self.lstm_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "feat_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_in",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "lstm_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm_hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.linear_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "lstm_hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lstm_hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self._num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_86": {
                "variable": {
                    "value": "input_example",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "self._feat_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "log_softmax_76": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_output.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.lstm_layer(output)",
                            "Call"
                        ],
                        [
                            "self.linear_layer(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/modules/rnnt.py": {
        "torch": {
            "ModuleDict_266": {
                "variable": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'embed': embed, 'dec_rnn': rnn.rnn(input_size=pred_n_hidden, hidden_size=pred_n_hidden, num_layers=pred_rnn_layers, norm=norm, forget_gate_bias=forget_gate_bias, t_max=t_max, dropout=dropout)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "full_339": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "hypothesis.y_sequence[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_p.device",
                            "Attribute"
                        ],
                        [
                            "hypothesis.dec_state[0].device",
                            "Attribute"
                        ],
                        [
                            "_p.device",
                            "Attribute"
                        ],
                        [
                            "_p.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_434": {
                "variable": {
                    "value": "batch_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_j for (y_j, d_state) in done]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_437": {
                "variable": {
                    "value": "lm_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[h.y_sequence[-1] for h in hypotheses]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_p.device",
                            "Attribute"
                        ],
                        [
                            "hypothesis.dec_state[0].device",
                            "Attribute"
                        ],
                        [
                            "_p.device",
                            "Attribute"
                        ],
                        [
                            "_p.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_870": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "pred_n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_n_hidden",
                            "Method Argument"
                        ],
                        [
                            "pred_n_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "joint_n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_n_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_871": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "enc_n_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "joint_n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_n_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_224": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 1, self.pred_hidden)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_p.device",
                            "Attribute"
                        ],
                        [
                            "hypothesis.dec_state[0].device",
                            "Attribute"
                        ],
                        [
                            "_p.device",
                            "Attribute"
                        ],
                        [
                            "_p.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_p.dtype",
                            "Attribute"
                        ],
                        [
                            "_p.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_229": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 1, H)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_262": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "pred_n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_n_hidden",
                            "Method Argument"
                        ],
                        [
                            "pred_n_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "self.blank_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_264": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "pred_n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_n_hidden",
                            "Method Argument"
                        ],
                        [
                            "pred_n_hidden",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_408": {
                "variable": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tokens, device=device, dtype=torch.long).view(batch, -1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_p.device",
                            "Attribute"
                        ],
                        [
                            "hypothesis.dec_state[0].device",
                            "Attribute"
                        ],
                        [
                            "_p.device",
                            "Attribute"
                        ],
                        [
                            "_p.device",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_879": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_461": {
                "variable": {
                    "value": "batch_states[state_id][layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s[state_id][layer] for s in decoder_states]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_781": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torch.cat(losses, 0)",
                            "Call"
                        ],
                        [
                            "losses.mean()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_788": {
                "variable": {
                    "value": "wer_num",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "wer_numer_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_789": {
                "variable": {
                    "value": "wer_denom",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "wer_denom_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_846": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_881": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_890": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_298": {
                "*size": {
                    "value": "self.pred_rnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.size(0)",
                            "Call"
                        ],
                        [
                            "len(process)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_299": {
                "*size": {
                    "value": "self.pred_rnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.size(0)",
                            "Call"
                        ],
                        [
                            "len(process)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_304": {
                "*size": {
                    "value": "self.pred_rnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.size(0)",
                            "Call"
                        ],
                        [
                            "len(process)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_305": {
                "*size": {
                    "value": "self.pred_rnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.size(0)",
                            "Call"
                        ],
                        [
                            "len(process)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_883": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_888": {
                "in_features": {
                    "value": "joint_n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_n_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_887": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prednet.get('dropout', 0.0)",
                            "Call"
                        ],
                        [
                            "jointnet.get('dropout', 0.0)",
                            "Call"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/collections/asr/modules/rnnt_abstract.py": {
        "torch": {}
    },
    "nemo/collections/asr/parts/activations.py": {
        "torch": {
            "sigmoid_27": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/collections/asr/parts/conformer_modules.py": {
        "torch": {
            "LayerNorm_56": {
                "variable": {
                    "value": "self.norm_feed_forward1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_60": {
                "variable": {
                    "value": "self.norm_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_64": {
                "variable": {
                    "value": "self.norm_self_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_75": {
                "variable": {
                    "value": "self.norm_feed_forward2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_78": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_79": {
                "variable": {
                    "value": "self.norm_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_132": {
                "variable": {
                    "value": "self.pointwise_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d_model * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_135": {
                "variable": {
                    "value": "self.depthwise_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_144": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_146": {
                "variable": {
                    "value": "self.pointwise_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "glu_154": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.norm_feed_forward1(x)",
                            "Call"
                        ],
                        [
                            "self.feed_forward1(x)",
                            "Call"
                        ],
                        [
                            "self.fc_factor * self.dropout(x) + residual",
                            "BinOp"
                        ],
                        [
                            "self.norm_self_att(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, mask=att_mask, pos_emb=pos_emb)",
                            "Call"
                        ],
                        [
                            "self.dropout(x) + residual",
                            "BinOp"
                        ],
                        [
                            "self.norm_conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, pad_mask)",
                            "Call"
                        ],
                        [
                            "self.dropout(x) + residual",
                            "BinOp"
                        ],
                        [
                            "self.norm_feed_forward2(x)",
                            "Call"
                        ],
                        [
                            "self.feed_forward2(x)",
                            "Call"
                        ],
                        [
                            "self.fc_factor * self.dropout(x) + residual",
                            "BinOp"
                        ],
                        [
                            "self.norm_out(x)",
                            "Call"
                        ],
                        [
                            "self.self_attn(query=x, key=x, value=x, mask=att_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.pointwise_conv1(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.glu(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.depthwise_conv(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise_conv2(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_ff",
                            "Method Argument"
                        ],
                        [
                            "d_ff",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_177": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_ff",
                            "Method Argument"
                        ],
                        [
                            "d_ff",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/collections/asr/parts/features.py": {
        "torch": {
            "zeros_55": {
                "variable": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(seq_len.shape[0], x.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "x_std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(seq_len.shape[0], x.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "recombine_magnitude_phase",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[magnitude * torch.cos(phase), magnitude * torch.sin(phase)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv_transpose1d_162": {
                "variable": {
                    "value": "inverse_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recombine_magnitude_phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([magnitude * torch.cos(phase), magnitude * torch.sin(phase)], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "Variable(self.inverse_basis, requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.hop_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "variable": {
                    "value": "filterbanks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "librosa.filters.mel(sample_rate, self.n_fft, n_mels=nfilt, fmin=lowfreq, fmax=highfreq)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_281": {
                "variable": {
                    "value": "filterbanks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_363": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fb.to(x.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(x.unsqueeze(1), (p, p), 'reflect').squeeze(1)",
                            "Call"
                        ],
                        [
                            "x + self.dither * torch.randn_like(x)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x[:, 0].unsqueeze(1), x[:, 1:] - self.preemph * x[:, :-1]), dim=1)",
                            "Call"
                        ],
                        [
                            "self.stft(x)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(x.pow(2).sum(-1))",
                            "Call"
                        ],
                        [
                            "x.pow(self.mag_power)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.fb.to(x.dtype), x)",
                            "Call"
                        ],
                        [
                            "torch.log(x + self.log_zero_guard_value_fn(x))",
                            "Call"
                        ],
                        [
                            "splice_frames(x, self.frame_splicing)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.clamp(x, min=self.log_zero_guard_value_fn(x)))",
                            "Call"
                        ],
                        [
                            "normalize_batch(x, seq_len, normalize_type=self.normalize)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(mask.unsqueeze(1).type(torch.bool).to(device=x.device), self.pad_value)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, self.max_length - x.size(-1)), value=self.pad_value)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, pad_to - pad_amt), value=self.pad_value)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_385": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_len.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "x_std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_len.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "audio_segment.samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_179": {
                "variable": {
                    "value": "approx_nonzero_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.where(window_sum > tiny(window_sum))[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ceil_328": {
                "input": {
                    "value": "seq_len / self.hop_length",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_340": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(p, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_340": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_348": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x[:, 0].unsqueeze(1), x[:, 1:] - self.preemph * x[:, :-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_356": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.pow(2).sum(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_391": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(x.unsqueeze(1), (p, p), 'reflect').squeeze(1)",
                            "Call"
                        ],
                        [
                            "x + self.dither * torch.randn_like(x)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x[:, 0].unsqueeze(1), x[:, 1:] - self.preemph * x[:, :-1]), dim=1)",
                            "Call"
                        ],
                        [
                            "self.stft(x)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(x.pow(2).sum(-1))",
                            "Call"
                        ],
                        [
                            "x.pow(self.mag_power)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.fb.to(x.dtype), x)",
                            "Call"
                        ],
                        [
                            "torch.log(x + self.log_zero_guard_value_fn(x))",
                            "Call"
                        ],
                        [
                            "splice_frames(x, self.frame_splicing)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.clamp(x, min=self.log_zero_guard_value_fn(x)))",
                            "Call"
                        ],
                        [
                            "normalize_batch(x, seq_len, normalize_type=self.normalize)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(mask.unsqueeze(1).type(torch.bool).to(device=x.device), self.pad_value)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, self.max_length - x.size(-1)), value=self.pad_value)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, pad_to - pad_amt), value=self.pad_value)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.max_length - x.size(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.pad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "normalize_type['fixed_mean']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "x_std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "normalize_type['fixed_std']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "[x[:, :, :n], x[:, :, n:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_287": {
                "data": {
                    "value": "max_duration * sample_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_351": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_368": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.log_zero_guard_value_fn(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_180": {
                "ndarray": {
                    "value": "window_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "librosa.filters.window_sumsquare(self.window, magnitude.size(-1), hop_length=self.hop_length, win_length=self.win_length, n_fft=self.filter_length, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(torch.from_numpy(window_sum), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "stft_262": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(x.unsqueeze(1), (p, p), 'reflect').squeeze(1)",
                            "Call"
                        ],
                        [
                            "x + self.dither * torch.randn_like(x)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x[:, 0].unsqueeze(1), x[:, 1:] - self.preemph * x[:, :-1]), dim=1)",
                            "Call"
                        ],
                        [
                            "self.stft(x)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(x.pow(2).sum(-1))",
                            "Call"
                        ],
                        [
                            "x.pow(self.mag_power)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.fb.to(x.dtype), x)",
                            "Call"
                        ],
                        [
                            "torch.log(x + self.log_zero_guard_value_fn(x))",
                            "Call"
                        ],
                        [
                            "splice_frames(x, self.frame_splicing)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.clamp(x, min=self.log_zero_guard_value_fn(x)))",
                            "Call"
                        ],
                        [
                            "normalize_batch(x, seq_len, normalize_type=self.normalize)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(mask.unsqueeze(1).type(torch.bool).to(device=x.device), self.pad_value)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, self.max_length - x.size(-1)), value=self.pad_value)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, pad_to - pad_amt), value=self.pad_value)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "n_fft": {
                    "value": "self.n_fft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hop_length": {
                    "value": "self.hop_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "win_length": {
                    "value": "self.win_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "center": {
                    "value": "False if stft_exact_pad else True",
                    "type": "IfExp",
                    "possible_values": []
                },
                "window": {
                    "value": "self.window.to(dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "return_complex": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_like_344": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(x.unsqueeze(1), (p, p), 'reflect').squeeze(1)",
                            "Call"
                        ],
                        [
                            "x + self.dither * torch.randn_like(x)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x[:, 0].unsqueeze(1), x[:, 1:] - self.preemph * x[:, :-1]), dim=1)",
                            "Call"
                        ],
                        [
                            "self.stft(x)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(x.pow(2).sum(-1))",
                            "Call"
                        ],
                        [
                            "x.pow(self.mag_power)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.fb.to(x.dtype), x)",
                            "Call"
                        ],
                        [
                            "torch.log(x + self.log_zero_guard_value_fn(x))",
                            "Call"
                        ],
                        [
                            "splice_frames(x, self.frame_splicing)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.clamp(x, min=self.log_zero_guard_value_fn(x)))",
                            "Call"
                        ],
                        [
                            "normalize_batch(x, seq_len, normalize_type=self.normalize)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(mask.unsqueeze(1).type(torch.bool).to(device=x.device), self.pad_value)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, self.max_length - x.size(-1)), value=self.pad_value)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, pad_to - pad_amt), value=self.pad_value)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_370": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(x, min=self.log_zero_guard_value_fn(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_395": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(x.unsqueeze(1), (p, p), 'reflect').squeeze(1)",
                            "Call"
                        ],
                        [
                            "x + self.dither * torch.randn_like(x)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x[:, 0].unsqueeze(1), x[:, 1:] - self.preemph * x[:, :-1]), dim=1)",
                            "Call"
                        ],
                        [
                            "self.stft(x)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(x.pow(2).sum(-1))",
                            "Call"
                        ],
                        [
                            "x.pow(self.mag_power)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.fb.to(x.dtype), x)",
                            "Call"
                        ],
                        [
                            "torch.log(x + self.log_zero_guard_value_fn(x))",
                            "Call"
                        ],
                        [
                            "splice_frames(x, self.frame_splicing)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.clamp(x, min=self.log_zero_guard_value_fn(x)))",
                            "Call"
                        ],
                        [
                            "normalize_batch(x, seq_len, normalize_type=self.normalize)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(mask.unsqueeze(1).type(torch.bool).to(device=x.device), self.pad_value)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, self.max_length - x.size(-1)), value=self.pad_value)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, pad_to - pad_amt), value=self.pad_value)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_to - pad_amt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.pad_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_160": {
                "input": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phase",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_160": {
                "input": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phase",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_370": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.pad(x.unsqueeze(1), (p, p), 'reflect').squeeze(1)",
                            "Call"
                        ],
                        [
                            "x + self.dither * torch.randn_like(x)",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x[:, 0].unsqueeze(1), x[:, 1:] - self.preemph * x[:, :-1]), dim=1)",
                            "Call"
                        ],
                        [
                            "self.stft(x)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(x.pow(2).sum(-1))",
                            "Call"
                        ],
                        [
                            "x.pow(self.mag_power)",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.fb.to(x.dtype), x)",
                            "Call"
                        ],
                        [
                            "torch.log(x + self.log_zero_guard_value_fn(x))",
                            "Call"
                        ],
                        [
                            "splice_frames(x, self.frame_splicing)",
                            "Call"
                        ],
                        [
                            "torch.log(torch.clamp(x, min=self.log_zero_guard_value_fn(x)))",
                            "Call"
                        ],
                        [
                            "normalize_batch(x, seq_len, normalize_type=self.normalize)",
                            "Call"
                        ],
                        [
                            "x.masked_fill(mask.unsqueeze(1).type(torch.bool).to(device=x.device), self.pad_value)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, self.max_length - x.size(-1)), value=self.pad_value)",
                            "Call"
                        ],
                        [
                            "nn.functional.pad(x, (0, pad_to - pad_amt), value=self.pad_value)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "self.log_zero_guard_value_fn(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/parts/jasper.py": {
        "torch": {
            "cat_99": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mean, std]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv1d_148": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[compute_new_kernel_size(k, kernel_size_factor) for k in kernel_size]",
                            "ListComp"
                        ],
                        [
                            "compute_new_kernel_size(kernel_size, kernel_size_factor)",
                            "Call"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "11",
                            "Method Argument"
                        ],
                        [
                            "11",
                            "Method Argument"
                        ],
                        [
                            "11",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_227": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.masked_fill(mask.unsqueeze(1).to(device=x.device), 0)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.heads, sh[-1])",
                            "Call"
                        ],
                        [
                            "self.act(x, scaling_factor)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.groups, self.channels_per_group, sh[-1])",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.groups * self.channels_per_group, sh[-1])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_271": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channels, channels // reduction_ratio, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_288": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "y.transpose(1, -1)",
                            "Call"
                        ],
                        [
                            "self.fc(y)",
                            "Call"
                        ],
                        [
                            "y.transpose(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(y, size=timesteps, mode=self.interpolation_mode)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_346": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_448": {
                "variable": {
                    "value": "self.mout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self._get_act_dropout_layer(drop_prob=dropout, activation=activation)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_459": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pooled, cov]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool1d_264": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool1d_266": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.context_window",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_269": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_286": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pool(x)",
                            "Call"
                        ],
                        [
                            "y.transpose(1, -1)",
                            "Call"
                        ],
                        [
                            "self.fc(y)",
                            "Call"
                        ],
                        [
                            "y.transpose(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(y, size=timesteps, mode=self.interpolation_mode)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "timesteps",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.interpolation_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_416": {
                "variable": {
                    "value": "res_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_468": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Hardtanh_637": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "min_val": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max_val": {
                    "value": "20.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_272": {
                "in_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "channels // reduction_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_274": {
                "in_features": {
                    "value": "channels // reduction_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_427": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "self._get_conv_bn_layer(ip, planes, kernel_size=1, normalization=normalization, norm_groups=norm_groups, stride=stride_val, quant_mode=quant_mode, quant_bit=quant_bit, is_first_layer=self.layer_num == 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_470": {
                "variable": {
                    "value": "res_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_537": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[compute_new_kernel_size(k, kernel_size_factor) for k in kernel_size]",
                            "ListComp"
                        ],
                        [
                            "compute_new_kernel_size(kernel_size, kernel_size_factor)",
                            "Call"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "11",
                            "Method Argument"
                        ],
                        [
                            "11",
                            "Method Argument"
                        ],
                        [
                            "11",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_638": {
                "p": {
                    "value": "drop_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_180": {
                "start": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "GroupNorm_618": {
                "num_groups": {
                    "value": "norm_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_684": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x, x_scaling_factor)",
                            "Call"
                        ],
                        [
                            "out.view(sh[0], self.real_out_channels, -1)",
                            "Call"
                        ],
                        [
                            "l(out, lens, out_scaling_factor)",
                            "Call"
                        ],
                        [
                            "self.mout(out)",
                            "Call"
                        ],
                        [
                            "l(out)",
                            "Call"
                        ],
                        [
                            "self.res_act(out, out_scaling_factor, res_out, res_out_scaling_factor)",
                            "Call"
                        ],
                        [
                            "torch.max(out, res_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "GroupNorm_620": {
                "num_groups": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GroupNorm_622": {
                "num_groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_624": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/parts/multi_head_attention.py": {
        "torch": {
            "Linear_63": {
                "variable": {
                    "value": "self.linear_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ],
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ],
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.linear_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ],
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ],
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.linear_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ],
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ],
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ],
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ],
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_68": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_114": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.linear_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ],
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ],
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_170": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(p_attn, value)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous().view(n_batch, -1, self.h * self.d_k)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, pad=(0, qlen))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), qlen, pos_len + 1)",
                            "Call"
                        ],
                        [
                            "x * self.xscale",
                            "BinOp"
                        ],
                        [
                            "x + self.pe[:, :x.size(1)]",
                            "BinOp"
                        ],
                        [
                            "x * self.xscale",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, qlen)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_201": {
                "variable": {
                    "value": "matrix_ac",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_with_bias_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(q + self.pos_bias_u).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_205": {
                "variable": {
                    "value": "matrix_bd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_with_bias_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(q + self.pos_bias_v).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_228": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "needed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * x.size(1) - 1",
                            "BinOp"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_248": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, self.d_model, 2, dtype=torch.float32) * -(math.log(10000.0) / self.d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_251": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_252": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_109": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.masked_fill(mask, min_value)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "(matrix_ac + matrix_bd) / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_111": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.masked_fill(mask, min_value)",
                            "Call"
                        ],
                        [
                            "torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "(matrix_ac + matrix_bd) / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.pos_bias_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.h, self.d_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.pos_bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.h, self.d_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_245": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-(x.size(1) - 1)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_245": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_247": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_247": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_283": {
                "variable": {
                    "value": "self.dropout_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_emb_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_130": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_q(query).view(n_batch, -1, self.h, self.d_k)",
                            "Call"
                        ],
                        [
                            "q.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.forward_qkv(query, key, value)",
                            "Call"
                        ],
                        [
                            "self.forward_qkv(query, key, value)",
                            "Call"
                        ],
                        [
                            "q.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_249": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/parts/perturb.py": {
        "torch": {}
    },
    "nemo/collections/asr/parts/rnnt_beam_decoding.py": {
        "torch": {
            "tensor_325": {
                "variable": {
                    "value": "blank_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.blank]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_289": {
                "variable": {
                    "value": "ytu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.joint.joint(hi, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_296": {
                "variable": {
                    "value": "(logp, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ytu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log_softmax(self.joint.joint(hi, y), dim=-1)",
                            "Call"
                        ],
                        [
                            "ytu[0, 0, 0, :]",
                            "Subscript"
                        ],
                        [
                            "ytu.float()",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(self.joint.joint(hi, y), dim=-1)",
                            "Call"
                        ],
                        [
                            "ytu[0, 0, 0, :]",
                            "Subscript"
                        ],
                        [
                            "(torch.cat((top_k[0], ytu[self.blank].unsqueeze(0))), torch.cat((top_k[1] + index_incr, blank_tensor)))",
                            "Tuple"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_357": {
                "variable": {
                    "value": "ytu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.joint.joint(hi, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_424": {
                "*size": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.beam_size, self.vocab_size)",
                            "Call"
                        ],
                        [
                            "min(self.beam_size, self.vocab_size)",
                            "Call"
                        ],
                        [
                            "min(self.beam_size, self.vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_448": {
                "variable": {
                    "value": "beam_logp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.joint.joint(h_enc, beam_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_525": {
                "*size": {
                    "value": "beam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.beam_size, self.vocab_size)",
                            "Call"
                        ],
                        [
                            "min(self.beam_size, self.vocab_size)",
                            "Call"
                        ],
                        [
                            "min(self.beam_size, self.vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "h.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_597": {
                "variable": {
                    "value": "h_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h[1] for h in h_states]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_softmax_601": {
                "variable": {
                    "value": "beam_logp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.joint.joint(h_enc, beam_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_365": {
                "tensors": {
                    "value": "(top_k[0], ytu[self.blank].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_366": {
                "tensors": {
                    "value": "(top_k[1] + index_incr, blank_tensor)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/parts/rnnt_greedy_decoding.py": {
        "torch": {
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_473": {
                "variable": {
                    "value": "last_label",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[batchsize, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self._blank_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "full_477": {
                "variable": {
                    "value": "blank_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[batchsize]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_458": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_370": {
                "variable": {
                    "value": "last_label",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[batchsize, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self._blank_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "full_373": {
                "variable": {
                    "value": "blank_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[batchsize]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_356": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_214": {
                "data": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_344": {
                "data": {
                    "value": "sent",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/parts/rnnt_utils.py": {
        "torch": {}
    },
    "nemo/collections/asr/parts/spectr_augment.py": {
        "torch": {
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/asr/parts/subsampling.py": {
        "torch": {
            "Linear_105": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv_channels * out_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feat_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "conv_channels",
                            "variable"
                        ],
                        [
                            "conv_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_65": {
                "kernel_size": {
                    "value": "self._kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self._stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self._padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self._ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "conv_channels",
                            "variable"
                        ],
                        [
                            "conv_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self._kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self._stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self._padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/common/losses/aggregator.py": {
        "torch": {
            "zeros_like_61": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "values[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/common/losses/cross_entropy.py": {
        "torch": {
            "flatten_65": {
                "variable": {
                    "value": "logits_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_66": {
                "variable": {
                    "value": "labels_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_71": {
                "variable": {
                    "value": "loss_mask_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_mask > 0.5",
                            "Compare"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_52": {
                "obj": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_76": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/common/losses/mse_loss.py": {
        "torch": {}
    },
    "nemo/collections/common/losses/smoothed_cross_entropy.py": {
        "torch": {
            "sum_100": {
                "input": {
                    "value": "neg_log_likelihood * output_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/common/losses/spanning_loss.py": {
        "torch": {
            "CrossEntropyLoss_75": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/collections/common/metrics/classification_accuracy.py": {
        "torch": {
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "self.correct_counts_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "correct_counts_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "correct_counts_k",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "labels.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "self.total_counts_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "total_counts_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "total_counts_k",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "labels.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_69": {
                "*size": {
                    "value": "len(self.top_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "len(self.top_k)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/common/metrics/perplexity.py": {
        "torch": {
            "Categorical_63": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "validate_args": {
                    "value": "self.validate_args",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/common/parts/multi_layer_perceptron.py": {
        "torch": {
            "Linear_45": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_60": {
                "variable": {
                    "value": "output_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_states[:]",
                            "Subscript"
                        ],
                        [
                            "getattr(self, f'layer{i}')(output_states)",
                            "Call"
                        ],
                        [
                            "torch.log_softmax(output_states, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/common/parts/rnn.py": {
        "torch": {
            "tensor_507": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cat_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.full((batch_size, max_len), fill_value=0.0, dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_165": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n // 4",
                            "BinOp"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_272": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_310": {
                "variable": {
                    "value": "h_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_311": {
                "variable": {
                    "value": "c_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ceil_359": {
                "variable": {
                    "value": "x_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_lens.float() / self.factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_408": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(4 * hidden_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_409": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(4 * hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LayerNorm_412": {
                "variable": {
                    "value": "self.layernorm_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_413": {
                "variable": {
                    "value": "self.layernorm_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_414": {
                "variable": {
                    "value": "self.layernorm_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n // 4",
                            "BinOp"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_435": {
                "variable": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ingate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(ingate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_436": {
                "variable": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forgetgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(forgetgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_437": {
                "variable": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cellgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_438": {
                "variable": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outgate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gates.chunk(4, 1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(outgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_450": {
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[layer(*first_layer_args)] + [layer(*other_layer_args) for _ in range(num_layers - 1)]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "script_90": {
                "obj": {
                    "value": "ln_lstm(input_size=input_size, hidden_size=hidden_size, num_layers=num_layers, dropout=dropout, forget_gate_bias=forget_gate_bias, t_max=t_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_356": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(reduced_dims, -1)",
                            "Call"
                        ],
                        [
                            "self.module(x)",
                            "Call"
                        ],
                        [
                            "x.view(*dims, -1)",
                            "Call"
                        ],
                        [
                            "self.lstm(x, h)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.rnn(x, hx=hx)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x, hx=hx[rnn_idx])",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_193": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_400": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "outputs + [out]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_408": {
                "*size": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_409": {
                "*size": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n // 4",
                            "BinOp"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_430": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight_ih.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_431": {
                "input": {
                    "value": "hx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._parse_hidden_state(hx)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight_hh.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_441": {
                "input": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layernorm_c(forgetgate * cx + ingate * cellgate)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_177": {
                "variable": {
                    "value": "p.data[hidden_size:2 * hidden_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.init.uniform_(p.data[0:hidden_size], 1, t_max - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_221": {
                "num_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_360": {
                "tensors": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_288": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_467": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "layer.cell.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_468": {
                "*size": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "layer.cell.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/common/parts/transformer_utils.py": {
        "torch": {
            "tril_45": {
                "variable": {
                    "value": "future_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(attn_shape).byte().to(input_mask.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_45": {
                "*size": {
                    "value": "attn_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1, input_mask.shape[1], input_mask.shape[1])",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/collections/cv/losses/nll_loss.py": {
        "torch": {}
    },
    "nemo/collections/cv/models/mnist_lenet5.py": {
        "torch": {
            "DataLoader_110": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MNISTDataset(self._cfg.dataset)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/collections/cv/modules/lenet5.py": {
        "torch": {
            "Sequential_43": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 6, kernel_size=(5, 5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_46": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_49": {
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_57": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/data/glue_benchmark/glue_benchmark_dataset.py": {
        "torch": {
            "is_initialized_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/data/information_retrieval/information_retrieval_dataset.py": {
        "torch": {}
    },
    "nemo/collections/nlp/data/language_modeling/l2r_lm_dataset.py": {
        "torch": {}
    },
    "nemo/collections/nlp/data/language_modeling/lm_bert_dataset.py": {
        "torch": {
            "DistributedSampler_425": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertPretrainingPreprocessedDataset(input_file=data_file, max_predictions_per_seq=self.max_predictions_per_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_429": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertPretrainingPreprocessedDataset(input_file=data_file, max_predictions_per_seq=self.max_predictions_per_seq)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(train_data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/data/question_answering_squad/qa_dataset.py": {
        "torch": {
            "is_initialized_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/data/text_classification/text_classification_dataset.py": {
        "torch": {
            "is_initialized_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/data/token_classification/punctuation_capitalization_dataset.py": {
        "torch": {
            "is_initialized_375": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/data/token_classification/token_classification_dataset.py": {
        "torch": {
            "is_initialized_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/metrics/classification_report.py": {
        "torch": {
            "tensor_98": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "TP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "FN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "FP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_115": {
                "variable": {
                    "value": "total_examples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.num_examples_per_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_116": {
                "variable": {
                    "value": "num_non_empty_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.num_examples_per_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "true_divide_118": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "dividend": {
                    "value": "self.tp * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "divisor": {
                    "value": "self.tp + self.fp + METRIC_EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "true_divide_119": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "dividend": {
                    "value": "self.tp * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "divisor": {
                    "value": "self.tp + self.fn + METRIC_EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "true_divide_120": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "dividend": {
                    "value": "2 * precision * recall",
                    "type": "BinOp",
                    "possible_values": []
                },
                "divisor": {
                    "value": "precision + recall + METRIC_EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "true_divide_132": {
                "variable": {
                    "value": "micro_precision",
                    "type": "variable",
                    "possible_values": []
                },
                "dividend": {
                    "value": "torch.sum(self.tp) * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "divisor": {
                    "value": "torch.sum(self.tp + self.fp) + METRIC_EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "true_divide_133": {
                "variable": {
                    "value": "micro_recall",
                    "type": "variable",
                    "possible_values": []
                },
                "dividend": {
                    "value": "torch.sum(self.tp) * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "divisor": {
                    "value": "torch.sum(self.tp + self.fn) + METRIC_EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "true_divide_134": {
                "variable": {
                    "value": "micro_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "dividend": {
                    "value": "2 * micro_precision * micro_recall",
                    "type": "BinOp",
                    "possible_values": []
                },
                "divisor": {
                    "value": "micro_precision + micro_recall + METRIC_EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_136": {
                "input": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.true_divide(self.tp * 100, self.tp + self.fp + METRIC_EPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_137": {
                "input": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.true_divide(self.tp * 100, self.tp + self.fn + METRIC_EPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_138": {
                "input": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.true_divide(2 * precision * recall, precision + recall + METRIC_EPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_139": {
                "input": {
                    "value": "precision * self.num_examples_per_class",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_140": {
                "input": {
                    "value": "recall * self.num_examples_per_class",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_141": {
                "input": {
                    "value": "f1 * self.num_examples_per_class",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_132": {
                "input": {
                    "value": "self.tp + self.fp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_133": {
                "input": {
                    "value": "self.tp + self.fn",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/models/glue_benchmark/glue_benchmark_model.py": {
        "torch": {
            "stack_186": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_186": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['eval_tensors']['preds'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['eval_tensors']['labels'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "argmax_176": {
                "variable": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "torch.argmax(model_output, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_initialized_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_266": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GLUEDataset(file_name=file_name, task_name=self.task_name, tokenizer=self.tokenizer, max_seq_length=self._cfg.dataset.max_seq_length, use_cache=self._cfg.dataset.use_cache)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "cfg.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self._cfg.dataset.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self._cfg.dataset.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "self._cfg.dataset.drop_last",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_initialized_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_like_195": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x['eval_tensors']['preds'] for x in outputs])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "empty_like_196": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x['eval_tensors']['labels'] for x in outputs])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/collections/nlp/models/information_retrieval/base_ir_model.py": {
        "torch": {
            "zeros_63": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(tokens_to_add, hidden_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "model.embeddings.word_embeddings.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(model.embeddings.word_embeddings.weight.data, zeros)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "query_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['query_ids'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "passage_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['passage_ids'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['scores'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_168": {
                "variable": {
                    "value": "val_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_168": {
                "variable": {
                    "value": "val_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_199": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertInformationRetrievalDataset(tokenizer=self.tokenizer, passages=cfg.passages, queries=cfg.queries, query_to_passages=cfg.query_to_passages, num_negatives=cfg.num_negatives, psg_cache_format=cfg.get('psg_cache_format', 'pkl'), max_query_length=cfg.get('max_query_length', 31), max_passage_length=cfg.get('max_passage_length', 190))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "cfg.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.get('num_workers', 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "cfg.get('pin_memory', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "cfg.get('drop_last', False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_initialized_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_like_127": {
                "input": {
                    "value": "query_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x['query_ids'] for x in outputs])",
                            "Call"
                        ],
                        [
                            "all_query_ids[i].detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_128": {
                "input": {
                    "value": "passage_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x['passage_ids'] for x in outputs])",
                            "Call"
                        ],
                        [
                            "all_passage_ids[i].detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_129": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.compute_scores_and_loss(batch[:-2])",
                            "Call"
                        ],
                        [
                            "self.compute_scores_and_loss(batch[:-2])",
                            "Call"
                        ],
                        [
                            "torch.cat([x['scores'] for x in outputs])",
                            "Call"
                        ],
                        [
                            "all_scores[i].detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/collections/nlp/models/information_retrieval/bert_dpr_model.py": {
        "torch": {
            "cat_81": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.matmul(q_vectors, p_positives.T), torch.einsum('ij,ipj->ip', q_vectors, p_negatives))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_100": {
                "variable": {
                    "value": "normalized_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.matmul(q_vectors, p_positives.T), torch.einsum('ij,ipj->ip', q_vectors, p_negatives)), dim=1)",
                            "Call"
                        ],
                        [
                            "self(q_input_ids=q_input_ids.view(-1, q_seq_length), q_token_type_ids=q_input_type_ids.view(-1, q_seq_length), q_attention_mask=q_input_mask.view(-1, q_seq_length), p_input_ids=p_input_ids.view(-1, p_seq_length), p_token_type_ids=p_input_type_ids.view(-1, p_seq_length), p_attention_mask=p_input_mask.view(-1, p_seq_length)).view(batch_size, 1, batch_size + num_passages - 1)",
                            "Call"
                        ],
                        [
                            "scores[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((torch.diag(scores)[:, None], scores[:, batch_size:]), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.diag(scores)[:, None], scores[:, batch_size:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertInformationRetrievalDataset(tokenizer=self.tokenizer, passages=cfg.passages, queries=cfg.queries, query_to_passages=cfg.query_to_passages, num_negatives=cfg.num_negatives, psg_cache_format=cfg.get('psg_cache_format', 'pkl'), max_query_length=cfg.get('max_query_length', 31), max_passage_length=cfg.get('max_passage_length', 190), preprocess_fn='preprocess_dpr')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "cfg.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.get('num_workers', 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "cfg.get('pin_memory', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "cfg.get('drop_last', False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "input": {
                    "value": "q_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_encoder(input_ids=q_input_ids, token_type_ids=q_token_type_ids, attention_mask=q_attention_mask)",
                            "Call"
                        ],
                        [
                            "q_vectors[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "p_positives.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_82": {
                "equation": {
                    "value": "ij,ipj->ip",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_encoder(input_ids=q_input_ids, token_type_ids=q_token_type_ids, attention_mask=q_attention_mask)",
                            "Call"
                        ],
                        [
                            "q_vectors[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_103": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(batch_size)[:, None].long().to(normalized_scores.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_106": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((torch.matmul(q_vectors, p_positives.T), torch.einsum('ij,ipj->ip', q_vectors, p_negatives)), dim=1)",
                            "Call"
                        ],
                        [
                            "self(q_input_ids=q_input_ids.view(-1, q_seq_length), q_token_type_ids=q_input_type_ids.view(-1, q_seq_length), q_attention_mask=q_input_mask.view(-1, q_seq_length), p_input_ids=p_input_ids.view(-1, p_seq_length), p_token_type_ids=p_input_type_ids.view(-1, p_seq_length), p_attention_mask=p_input_mask.view(-1, p_seq_length)).view(batch_size, 1, batch_size + num_passages - 1)",
                            "Call"
                        ],
                        [
                            "scores[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((torch.diag(scores)[:, None], scores[:, batch_size:]), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_102": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_vectors.size()",
                            "Call"
                        ],
                        [
                            "p_input_ids.size()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/collections/nlp/models/information_retrieval/bert_joint_ir_model.py": {
        "torch": {
            "log_softmax_79": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(input_ids=input_ids.view(-1, seq_length), token_type_ids=input_type_ids.view(-1, seq_length), attention_mask=input_mask.view(-1, seq_length)).view(batch_size, 1, num_passages)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_81": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids[:, :1, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_82": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(input_ids[:, :1, 0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/collections/nlp/models/intent_slot_classification/intent_slot_classification_model.py": {
        "torch": {
            "argmax_270": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intent_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(hidden_states=hidden_states)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids.to(device), token_type_ids=input_type_ids.to(device), attention_mask=input_mask.to(device))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_293": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_293": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_364": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IntentSlotClassificationDataset(input_file=input_file, slot_file=slot_file, tokenizer=self.tokenizer, max_seq_length=self.max_seq_length, num_samples=cfg.num_samples, pad_label=self.cfg.data_desc.pad_label, ignore_extra_tokens=self.cfg.ignore_extra_tokens, ignore_start_end=self.cfg.ignore_start_end)",
                            "Call"
                        ],
                        [
                            "IntentSlotInferenceDataset(tokenizer=self.tokenizer, queries=queries, max_seq_length=-1, do_lower_case=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "cfg.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "cfg.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "cfg.drop_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_388": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IntentSlotClassificationDataset(input_file=input_file, slot_file=slot_file, tokenizer=self.tokenizer, max_seq_length=self.max_seq_length, num_samples=cfg.num_samples, pad_label=self.cfg.data_desc.pad_label, ignore_extra_tokens=self.cfg.ignore_extra_tokens, ignore_start_end=self.cfg.ignore_start_end)",
                            "Call"
                        ],
                        [
                            "IntentSlotInferenceDataset(tokenizer=self.tokenizer, queries=queries, max_seq_length=-1, do_lower_case=False)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "test_ds.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "test_ds.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "test_ds.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "test_ds.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "test_ds.drop_last",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_274": {
                "input": {
                    "value": "slot_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(hidden_states=hidden_states)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids.to(device), token_type_ids=input_type_ids.to(device), attention_mask=input_mask.to(device))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_452": {
                "variable": {
                    "value": "slot_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "slot_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(hidden_states=hidden_states)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids.to(device), token_type_ids=input_type_ids.to(device), attention_mask=input_mask.to(device))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_441": {
                "input": {
                    "value": "intent_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(hidden_states=hidden_states)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids.to(device), token_type_ids=input_type_ids.to(device), attention_mask=input_mask.to(device))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/models/language_modeling/bert_lm_model.py": {
        "torch": {
            "DataLoader_235": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.data_file",
                            "Attribute"
                        ],
                        [
                            "BertPretrainingDataset(tokenizer=self.tokenizer, data_file=cfg.data_file, max_seq_length=cfg.max_seq_length, mask_prob=cfg.mask_prob, short_seq_prob=cfg.short_seq_prob)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "cfg.get('drop_last', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "cfg.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.get('num_workers', 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_180": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_180": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/models/language_modeling/transformer_lm_model.py": {
        "torch": {
            "stack_155": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_155": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_226": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L2RLanguageModelingDataset(tokenizer=self.tokenizer, dataset=cfg.file_name, max_seq_length=self.dataset_cfg.max_seq_length, batch_step=predict_last_k, use_cache=cfg.get('use_cache', False))",
                            "Call"
                        ],
                        [
                            "TarredL2RLanguageModelingDataset(text_tar_filepaths=cfg['tarred_text_filepaths'], metadata_path=cfg['file_name'], tokenizer=self.tokenizer, max_seq_length=self.dataset_cfg.max_seq_length, batch_step=predict_last_k, shuffle_n=shuffle_n, shard_strategy=cfg.get('tarred_shard_strategy', 'scatter'), global_rank=self.global_rank, world_size=self.world_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.shuffle",
                            "Attribute"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.dataset_cfg.get('num_workers', 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self.dataset_cfg.get('pin_memory', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "self.dataset_cfg.get('drop_last', False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/models/neural_machine_translation/neural_machine_translation_model.py": {
        "torch": {
            "stack_184": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_184": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_233": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NeuralMachineTranslationDataset(filepath=cfg.filepath, encoder_tokenizer=self.encoder_tokenizer, decoder_tokenizer=self.decoder_tokenizer, encoder_add_special_tokens=self.encoder_add_special_tokens, decoder_add_special_tokens=self.decoder_add_special_tokens, max_seq_length=self._cfg.max_seq_length, num_samples=cfg.get('num_samples', -1), convert_labels=self._cfg.convert_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self._cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "cfg.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.get('num_workers', 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "cfg.get('pin_memory', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "cfg.get('drop_last', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/models/nlp_model.py": {
        "torch": {
            "DistributedSampler_257": {
                "variable": {
                    "value": "mp_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self._train_dl.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_replicas": {
                    "value": "app_state.data_parallel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "app_state.data_parallel_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/models/question_answering/qa_model.py": {
        "torch": {
            "stack_127": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[f'{prefix}_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_127": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "unique_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[f'{prefix}_tensors']['unique_ids'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_130": {
                "variable": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[f'{prefix}_tensors']['start_logits'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[f'{prefix}_tensors']['end_logits'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_309": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SquadDataset(tokenizer=self.tokenizer, data_file=cfg.file, doc_stride=self._cfg.dataset.doc_stride, max_query_length=self._cfg.dataset.max_query_length, max_seq_length=self._cfg.dataset.max_seq_length, version_2_with_negative=self._cfg.dataset.version_2_with_negative, num_samples=cfg.num_samples, mode=mode, use_cache=self._cfg.dataset.use_cache)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "cfg.drop_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "cfg.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "cfg.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_initialized_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_241": {
                "tensors": {
                    "value": "all_unique_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "empty_like_139": {
                "input": {
                    "value": "unique_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x[f'{prefix}_tensors']['unique_ids'] for x in outputs])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tensor2list(torch.cat(all_unique_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_140": {
                "input": {
                    "value": "start_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss(logits=logits, start_positions=start_positions, end_positions=end_positions)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[f'{prefix}_tensors']['start_logits'] for x in outputs])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tensor2list(s.squeeze())",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_141": {
                "input": {
                    "value": "end_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss(logits=logits, start_positions=start_positions, end_positions=end_positions)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[f'{prefix}_tensors']['end_logits'] for x in outputs])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tensor2list(e.squeeze())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/collections/nlp/models/text_classification/text_classification_model.py": {
        "torch": {
            "argmax_150": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(hidden_states=hidden_states)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids.to(device), token_type_ids=input_type_ids.to(device), attention_mask=input_mask.to(device))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_168": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[f'val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_168": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_242": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TextClassificationDataset(tokenizer=self.tokenizer, input_file=input_file, max_seq_length=self.dataset_cfg.max_seq_length, num_samples=cfg.get('num_samples', -1), shuffle=cfg.shuffle, use_cache=self.dataset_cfg.use_cache)",
                            "Call"
                        ],
                        [
                            "TextClassificationDataset(tokenizer=self.tokenizer, queries=queries, max_seq_length=max_seq_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "cfg.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.get('num_workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "cfg.get('pin_memory', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "cfg.get('drop_last', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_306": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TextClassificationDataset(tokenizer=self.tokenizer, input_file=input_file, max_seq_length=self.dataset_cfg.max_seq_length, num_samples=cfg.get('num_samples', -1), shuffle=cfg.shuffle, use_cache=self.dataset_cfg.use_cache)",
                            "Call"
                        ],
                        [
                            "TextClassificationDataset(tokenizer=self.tokenizer, queries=queries, max_seq_length=max_seq_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.get('num_workers', 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "cfg.get('pin_memory', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_284": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(hidden_states=hidden_states)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids.to(device), token_type_ids=input_type_ids.to(device), attention_mask=input_mask.to(device))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/models/token_classification/punctuation_capitalization_model.py": {
        "torch": {
            "stack_202": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_202": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_225": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_225": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_325": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertPunctuationCapitalizationDataset(tokenizer=self.tokenizer, text_file=text_file, label_file=label_file, pad_label=self._cfg.dataset.pad_label, punct_label_ids=self._cfg.punct_label_ids, capit_label_ids=self._cfg.capit_label_ids, max_seq_length=self._cfg.dataset.max_seq_length, ignore_extra_tokens=self._cfg.dataset.ignore_extra_tokens, ignore_start_end=self._cfg.dataset.ignore_start_end, use_cache=self._cfg.dataset.use_cache, num_samples=cfg.num_samples, punct_label_ids_file=self._cfg.class_labels.punct_labels_file, capit_label_ids_file=self._cfg.class_labels.capit_labels_file)",
                            "Call"
                        ],
                        [
                            "BertPunctuationCapitalizationInferDataset(tokenizer=self.tokenizer, queries=queries, max_seq_length=self._cfg.dataset.max_seq_length)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "cfg.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self._cfg.dataset.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self._cfg.dataset.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "self._cfg.dataset.drop_last",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_351": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertPunctuationCapitalizationDataset(tokenizer=self.tokenizer, text_file=text_file, label_file=label_file, pad_label=self._cfg.dataset.pad_label, punct_label_ids=self._cfg.punct_label_ids, capit_label_ids=self._cfg.capit_label_ids, max_seq_length=self._cfg.dataset.max_seq_length, ignore_extra_tokens=self._cfg.dataset.ignore_extra_tokens, ignore_start_end=self._cfg.dataset.ignore_start_end, use_cache=self._cfg.dataset.use_cache, num_samples=cfg.num_samples, punct_label_ids_file=self._cfg.class_labels.punct_labels_file, capit_label_ids_file=self._cfg.class_labels.capit_labels_file)",
                            "Call"
                        ],
                        [
                            "BertPunctuationCapitalizationInferDataset(tokenizer=self.tokenizer, queries=queries, max_seq_length=self._cfg.dataset.max_seq_length)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(queries)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self._cfg.dataset.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self._cfg.dataset.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_152": {
                "input": {
                    "value": "punct_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.punct_classifier(hidden_states=hidden_states)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self._make_step(batch)",
                            "Call"
                        ],
                        [
                            "self._make_step(batch)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids.to(device), token_type_ids=input_type_ids.to(device), attention_mask=input_mask.to(device))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_156": {
                "input": {
                    "value": "capit_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.capit_classifier(hidden_states=hidden_states)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self._make_step(batch)",
                            "Call"
                        ],
                        [
                            "self._make_step(batch)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids.to(device), token_type_ids=input_type_ids.to(device), attention_mask=input_mask.to(device))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_179": {
                "input": {
                    "value": "punct_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.punct_classifier(hidden_states=hidden_states)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self._make_step(batch)",
                            "Call"
                        ],
                        [
                            "self._make_step(batch)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids.to(device), token_type_ids=input_type_ids.to(device), attention_mask=input_mask.to(device))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_183": {
                "input": {
                    "value": "capit_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.capit_classifier(hidden_states=hidden_states)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self._make_step(batch)",
                            "Call"
                        ],
                        [
                            "self._make_step(batch)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids.to(device), token_type_ids=input_type_ids.to(device), attention_mask=input_mask.to(device))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_402": {
                "input": {
                    "value": "punct_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.punct_classifier(hidden_states=hidden_states)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self._make_step(batch)",
                            "Call"
                        ],
                        [
                            "self._make_step(batch)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids.to(device), token_type_ids=input_type_ids.to(device), attention_mask=input_mask.to(device))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_403": {
                "input": {
                    "value": "capit_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.capit_classifier(hidden_states=hidden_states)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self._make_step(batch)",
                            "Call"
                        ],
                        [
                            "self._make_step(batch)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids.to(device), token_type_ids=input_type_ids.to(device), attention_mask=input_mask.to(device))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/models/token_classification/token_classification_model.py": {
        "torch": {
            "stack_173": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_173": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_199": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_199": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_304": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertTokenClassificationDataset(text_file=text_file, label_file=labels_file, max_seq_length=dataset_cfg.max_seq_length, tokenizer=self.tokenizer, num_samples=cfg.num_samples, pad_label=dataset_cfg.pad_label, label_ids=self._cfg.label_ids, ignore_extra_tokens=dataset_cfg.ignore_extra_tokens, ignore_start_end=dataset_cfg.ignore_start_end, use_cache=dataset_cfg.use_cache)",
                            "Call"
                        ],
                        [
                            "BertTokenClassificationInferDataset(tokenizer=self.tokenizer, queries=queries, max_seq_length=-1)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "cfg.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "dataset_cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "dataset_cfg.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "dataset_cfg.drop_last",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_328": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertTokenClassificationDataset(text_file=text_file, label_file=labels_file, max_seq_length=dataset_cfg.max_seq_length, tokenizer=self.tokenizer, num_samples=cfg.num_samples, pad_label=dataset_cfg.pad_label, label_ids=self._cfg.label_ids, ignore_extra_tokens=dataset_cfg.ignore_extra_tokens, ignore_start_end=dataset_cfg.ignore_start_end, use_cache=dataset_cfg.use_cache)",
                            "Call"
                        ],
                        [
                            "BertTokenClassificationInferDataset(tokenizer=self.tokenizer, queries=queries, max_seq_length=-1)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self._cfg.dataset.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "self._cfg.dataset.pin_memory",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_162": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(hidden_states=hidden_states)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids.to(device), token_type_ids=input_type_ids.to(device), attention_mask=input_mask.to(device))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_192": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(hidden_states=hidden_states)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids.to(device), token_type_ids=input_type_ids.to(device), attention_mask=input_mask.to(device))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_368": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(hidden_states=hidden_states)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self(input_ids=input_ids, token_type_ids=input_type_ids, attention_mask=input_mask)",
                            "Call"
                        ],
                        [
                            "self.forward(input_ids=input_ids.to(device), token_type_ids=input_type_ids.to(device), attention_mask=input_mask.to(device))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/modules/common/bert_module.py": {
        "torch": {
            "load_60": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "restore_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randint_91": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "sample.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_92": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "sample.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/modules/common/classifier.py": {
        "torch": {
            "Dropout_49": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_69": {
                "variable": {
                    "value": "input_example",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/modules/common/megatron/megatron_bert.py": {
        "torch": {
            "load_141": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "restore_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_162": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "mp_restore_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'{restore_path}/mp_rank_{model_parallel_rank:02d}/model_optim_rng.pt'",
                            "JoinedStr"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/modules/common/megatron/megatron_utils.py": {
        "torch": {
            "is_initialized_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/modules/common/sequence_regression.py": {
        "torch": {}
    },
    "nemo/collections/nlp/modules/common/token_classifier.py": {
        "torch": {
            "Linear_132": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_134": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/modules/common/transformer/transformer_decoders.py": {
        "torch": {
            "LayerNorm_55": {
                "variable": {
                    "value": "self.layer_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_59": {
                "variable": {
                    "value": "self.layer_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_63": {
                "variable": {
                    "value": "self.layer_norm_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_100": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "memory_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(decoder_mems_list[i], decoder_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/modules/common/transformer/transformer_encoders.py": {
        "torch": {
            "LayerNorm_55": {
                "variable": {
                    "value": "self.layer_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_59": {
                "variable": {
                    "value": "self.layer_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "memory_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoder_mems_list[i], encoder_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/modules/common/transformer/transformer_generators.py": {
        "torch": {
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "pad_profile",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "encoder_hidden_states.size()",
                            "Call"
                        ],
                        [
                            "decoder_input_ids.size()",
                            "Call"
                        ],
                        [
                            "self._prepare_for_search(decoder_input_ids, encoder_hidden_states)",
                            "Call"
                        ],
                        [
                            "log_probs.size()",
                            "Call"
                        ],
                        [
                            "self._prepare_for_search(decoder_input_ids, encoder_hidden_states)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_199": {
                "variable": {
                    "value": "(scores, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_softmax.forward(decoder_mems_list[-1])",
                            "Call"
                        ],
                        [
                            "self._forward(tgt[:, -1:], encoder_hidden_states, encoder_input_mask, decoder_mems_list, i)",
                            "Call"
                        ],
                        [
                            "super()._forward(decoder_input_ids, encoder_hidden_states, encoder_input_mask, decoder_mems_list, pos)",
                            "Call"
                        ],
                        [
                            "self._forward(tgt, encoder_hidden_states, encoder_input_mask, None, 0)",
                            "Call"
                        ],
                        [
                            "self._forward(prefixes[:, -1:], encoder_hidden_states, encoder_input_mask, decoder_mems_list, i + 1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_201": {
                "variable": {
                    "value": "rescaled_logexp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_softmax.forward(decoder_mems_list[-1])",
                            "Call"
                        ],
                        [
                            "self._forward(tgt[:, -1:], encoder_hidden_states, encoder_input_mask, decoder_mems_list, i)",
                            "Call"
                        ],
                        [
                            "super()._forward(decoder_input_ids, encoder_hidden_states, encoder_input_mask, decoder_mems_list, pos)",
                            "Call"
                        ],
                        [
                            "self._forward(tgt, encoder_hidden_states, encoder_input_mask, None, 0)",
                            "Call"
                        ],
                        [
                            "self._forward(prefixes[:, -1:], encoder_hidden_states, encoder_input_mask, decoder_mems_list, i + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_201": {
                "variable": {
                    "value": "rescaled_logexp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_probs, self.beam_size, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "index": {
                    "value": "scores.div(self.temp).exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multinomial_209": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs.view(-1, vocab_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_210": {
                "variable": {
                    "value": "pseudo_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_softmax.forward(decoder_mems_list[-1])",
                            "Call"
                        ],
                        [
                            "self._forward(tgt[:, -1:], encoder_hidden_states, encoder_input_mask, decoder_mems_list, i)",
                            "Call"
                        ],
                        [
                            "super()._forward(decoder_input_ids, encoder_hidden_states, encoder_input_mask, decoder_mems_list, pos)",
                            "Call"
                        ],
                        [
                            "self._forward(tgt, encoder_hidden_states, encoder_input_mask, None, 0)",
                            "Call"
                        ],
                        [
                            "self._forward(prefixes[:, -1:], encoder_hidden_states, encoder_input_mask, decoder_mems_list, i + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_210": {
                "variable": {
                    "value": "pseudo_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(probs.view(-1, vocab_size), 1).view(-1, seq_len, 1)",
                            "Call"
                        ]
                    ]
                },
                "index": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_239": {
                "variable": {
                    "value": "(scores, prefixes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "prefixes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt.repeat(1, self.beam_size).view(-1, 1), prefixes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_259": {
                "variable": {
                    "value": "pad_profile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_probs, self.beam_size, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.topk(log_probs.permute(0, 2, 1), self.beam_size, dim=1)",
                            "Call"
                        ],
                        [
                            "scores.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "scores + scores_i * (1 - pad_mask).to(scores.dtype)",
                            "BinOp"
                        ],
                        [
                            "scores / prefixes_len.pow(self.len_pen)",
                            "BinOp"
                        ],
                        [
                            "torch.topk(scores.view(-1, self.beam_size ** 2), self.beam_size, dim=1)",
                            "Call"
                        ],
                        [
                            "scores.view(-1, 1) * prefixes_len.pow(self.len_pen)",
                            "BinOp"
                        ],
                        [
                            "scores / prefixes_len.pow(self.len_pen)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_263": {
                "variable": {
                    "value": "prefixes_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(log_probs, self.beam_size, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.topk(log_probs.permute(0, 2, 1), self.beam_size, dim=1)",
                            "Call"
                        ],
                        [
                            "scores.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "scores + scores_i * (1 - pad_mask).to(scores.dtype)",
                            "BinOp"
                        ],
                        [
                            "scores / prefixes_len.pow(self.len_pen)",
                            "BinOp"
                        ],
                        [
                            "torch.topk(scores.view(-1, self.beam_size ** 2), self.beam_size, dim=1)",
                            "Call"
                        ],
                        [
                            "scores.view(-1, 1) * prefixes_len.pow(self.len_pen)",
                            "BinOp"
                        ],
                        [
                            "scores / prefixes_len.pow(self.len_pen)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_322": {
                "variable": {
                    "value": "best_guesses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(-1, self.beam_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_322": {
                "variable": {
                    "value": "best_guesses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "encoder_hidden_states.size()",
                            "Call"
                        ],
                        [
                            "decoder_input_ids.size()",
                            "Call"
                        ],
                        [
                            "self._prepare_for_search(decoder_input_ids, encoder_hidden_states)",
                            "Call"
                        ],
                        [
                            "log_probs.size()",
                            "Call"
                        ],
                        [
                            "self._prepare_for_search(decoder_input_ids, encoder_hidden_states)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_154": {
                "variable": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_156": {
                "variable": {
                    "value": "pad_profile",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad_profile",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, 1).long().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.max(pad_profile, (next_tokens == self.eos).long())",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(scores).long()",
                            "Call"
                        ],
                        [
                            "(~not_eos_pad[:, -1:]).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_157": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt, next_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_274": {
                "variable": {
                    "value": "(scores_i, prefixes_i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_288": {
                "variable": {
                    "value": "(scores, indices_i)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.view(-1, self.beam_size ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "prefixes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prefixes, prefixes_i.unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/nlp/modules/common/transformer/transformer_modules.py": {
        "torch": {
            "zeros_39": {
                "variable": {
                    "value": "pos_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_40": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "max_sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_40": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_42": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coef * torch.arange(0.0, hidden_size, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_43": {
                "variable": {
                    "value": "pos_enc[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_44": {
                "variable": {
                    "value": "pos_enc[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_80": {
                "variable": {
                    "value": "self.token_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_85": {
                "variable": {
                    "value": "self.token_type_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_token_types",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_86": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_87": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "embedding_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_96": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "start_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "end": {
                    "value": "start_pos + seq_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.query_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_140": {
                "variable": {
                    "value": "self.key_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.value_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.out_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_144": {
                "variable": {
                    "value": "self.attn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_score_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_145": {
                "variable": {
                    "value": "self.layer_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_layer_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_165": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_net(queries)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(query) / self.attn_scale",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_168": {
                "variable": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-1, -2))",
                            "Call"
                        ],
                        [
                            "attention_scores + attention_mask.to(attention_scores.dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_171": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(attention_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.attn_dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_net(values)",
                            "Call"
                        ],
                        [
                            "self.transpose_for_scores(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_196": {
                "variable": {
                    "value": "self.dense_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inner_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.dense_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inner_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_198": {
                "variable": {
                    "value": "self.layer_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "ffn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "embedding_49": {
                "input": {
                    "value": "self.pos_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(start=start_pos, end=start_pos + seq_length, dtype=torch.long, device=input_ids.device)",
                            "Call"
                        ],
                        [
                            "position_ids.unsqueeze(0).expand_as(input_ids)",
                            "Call"
                        ],
                        [
                            "position_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_82": {
                "variable": {
                    "value": "self.position_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_42": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/data/datalayers.py": {
        "torch": {
            "tensor_154": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "features.samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "audio_signal",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_audio_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.n_segments",
                            "Attribute"
                        ],
                        [
                            "find_max_len(batch, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "audio_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "audio_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(audio_lengths, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "data": {
                    "value": "features.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_288": {
                "variable": {
                    "value": "sample[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "npz_data.items()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequence_331": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch[idx][key].permute(1, 0, 2) for idx in idxs_sorted]",
                            "ListComp"
                        ],
                        [
                            "pad_sequence(data, batch_first=True)",
                            "Call"
                        ],
                        [
                            "data.permute(0, 3, 2, 1)",
                            "Call"
                        ],
                        [
                            "batch[0][key].unsqueeze(0).permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/helpers/helpers.py": {
        "torch": {
            "arange_41": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(lengths).item()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_218": {
                "variable": {
                    "value": "new_conv_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_40": {
                "variable": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "remove_weight_norm_220": {
                "variable": {
                    "value": "old_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "old_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_list",
                            "variable"
                        ],
                        [
                            "torch.nn.utils.remove_weight_norm(old_conv)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_117": {
                "input": {
                    "value": "gate[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/losses/glow_tts_loss.py": {
        "torch": {
            "sum_75": {
                "variable": {
                    "value": "logdet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logdet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(logdet)",
                            "Call"
                        ],
                        [
                            "logdet",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_80": {
                "input": {
                    "value": "x_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_78": {
                "input": {
                    "value": "y_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_77": {
                "input": {
                    "value": "torch.exp(-2 * y_logs) * (z - y_m) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_77": {
                "input": {
                    "value": "-2 * y_logs",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/losses/stftlosses.py": {
        "torch": {
            "stft_64": {
                "variable": {
                    "value": "x_stft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "n_fft": {
                    "value": "fft_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fft_size",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                },
                "hop_length": {
                    "value": "hop_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hop_size",
                            "Method Argument"
                        ]
                    ]
                },
                "win_length": {
                    "value": "win_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "win_length",
                            "Method Argument"
                        ],
                        [
                            "600",
                            "Method Argument"
                        ]
                    ]
                },
                "window": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "window",
                            "Method Argument"
                        ],
                        [
                            "'hann_window'",
                            "Method Argument"
                        ],
                        [
                            "'hann_window'",
                            "Method Argument"
                        ]
                    ]
                },
                "return_complex": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_69": {
                "input": {
                    "value": "torch.clamp(real ** 2 + imag ** 2, min=1e-07)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_69": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_102": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(y_mag - x_mag, p='fro', dim=(1, 2)) / torch.norm(y_mag, p='fro', dim=(1, 2))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "F.l1_loss(torch.log(y_mag), torch.log(x_mag), reduction='none')",
                            "Call"
                        ],
                        [
                            "loss / loss.shape[2]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=[1, 2])",
                            "Call"
                        ],
                        [
                            "loss / input_lengths",
                            "BinOp"
                        ]
                    ]
                }
            },
            "l1_loss_136": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(y_mag)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.log(x_mag)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_139": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(y_mag - x_mag, p='fro', dim=(1, 2)) / torch.norm(y_mag, p='fro', dim=(1, 2))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "F.l1_loss(torch.log(y_mag), torch.log(x_mag), reduction='none')",
                            "Call"
                        ],
                        [
                            "loss / loss.shape[2]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=[1, 2])",
                            "Call"
                        ],
                        [
                            "loss / input_lengths",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_210": {
                "variable": {
                    "value": "self.stft_losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_100": {
                "input": {
                    "value": "y_mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stft(y, self.fft_size, self.shift_size, self.win_length, self.window)",
                            "Call"
                        ],
                        [
                            "y_mag",
                            "Method Argument"
                        ],
                        [
                            "y_mag",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "l1_loss_135": {
                "input": {
                    "value": "torch.log(y_mag)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.log(x_mag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_136": {
                "input": {
                    "value": "x_mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stft(x, self.fft_size, self.shift_size, self.win_length, self.window)",
                            "Call"
                        ],
                        [
                            "x_mag",
                            "Method Argument"
                        ],
                        [
                            "x_mag",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_142": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(y_mag - x_mag, p='fro', dim=(1, 2)) / torch.norm(y_mag, p='fro', dim=(1, 2))",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "F.l1_loss(torch.log(y_mag), torch.log(x_mag), reduction='none')",
                            "Call"
                        ],
                        [
                            "loss / loss.shape[2]",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=[1, 2])",
                            "Call"
                        ],
                        [
                            "loss / input_lengths",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_69": {
                "input": {
                    "value": "real ** 2 + imag ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_135": {
                "input": {
                    "value": "x_mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stft(x, self.fft_size, self.shift_size, self.win_length, self.window)",
                            "Call"
                        ],
                        [
                            "x_mag",
                            "Method Argument"
                        ],
                        [
                            "x_mag",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_190": {
                "input": {
                    "value": "input_lengths / float(self.shift_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/losses/tacotron2loss.py": {
        "torch": {
            "zeros_48": {
                "variable": {
                    "value": "gate_target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "spec_target_len.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec_target.shape[2]",
                            "Subscript"
                        ],
                        [
                            "spec_target.shape[2]",
                            "Subscript"
                        ],
                        [
                            "spec_pred_dec.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mse_loss_81": {
                "variable": {
                    "value": "rnn_mel_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec_pred_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec_pred_dec.narrow(2, 0, max_len)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(spec_pred_dec, (0, pad_amount), value=pad_value)",
                            "Call"
                        ],
                        [
                            "spec_pred_dec",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "spec_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec_target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mse_loss_82": {
                "variable": {
                    "value": "postnet_mel_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec_pred_postnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec_pred_postnet.narrow(2, 0, max_len)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(spec_pred_postnet, (0, pad_amount), value=pad_value)",
                            "Call"
                        ],
                        [
                            "spec_pred_postnet",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "spec_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec_target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_83": {
                "variable": {
                    "value": "gate_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gate_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_pred.narrow(1, 0, max_len).contiguous()",
                            "Call"
                        ],
                        [
                            "gate_pred.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(gate_pred, (0, pad_amount), value=1000.0)",
                            "Call"
                        ],
                        [
                            "gate_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "gate_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(spec_target_len.shape[0], max_len)",
                            "Call"
                        ],
                        [
                            "gate_target.type_as(gate_pred)",
                            "Call"
                        ],
                        [
                            "gate_target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_68": {
                "variable": {
                    "value": "spec_pred_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec_pred_dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec_pred_dec.narrow(2, 0, max_len)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(spec_pred_dec, (0, pad_amount), value=pad_value)",
                            "Call"
                        ],
                        [
                            "spec_pred_dec",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_amount)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pad_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_69": {
                "variable": {
                    "value": "spec_pred_postnet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec_pred_postnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec_pred_postnet.narrow(2, 0, max_len)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(spec_pred_postnet, (0, pad_amount), value=pad_value)",
                            "Call"
                        ],
                        [
                            "spec_pred_postnet",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_amount)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pad_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_70": {
                "variable": {
                    "value": "gate_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gate_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_pred.narrow(1, 0, max_len).contiguous()",
                            "Call"
                        ],
                        [
                            "gate_pred.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(gate_pred, (0, pad_amount), value=1000.0)",
                            "Call"
                        ],
                        [
                            "gate_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_amount)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "1000.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/losses/uniglowloss.py": {
        "torch": {
            "sum_51": {
                "input": {
                    "value": "z * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/losses/waveglowloss.py": {
        "torch": {
            "sum_44": {
                "variable": {
                    "value": "log_s_total",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_s in enumerate(log_s_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_47": {
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_s in enumerate(log_s_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_50": {
                "input": {
                    "value": "z * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/models/base.py": {
        "torch": {
            "clamp_150": {
                "variable": {
                    "value": "audio_spect_denoised",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio_spect_denoised",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audio_spect - self.bias_spect.to(audio.device) * strength",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(audio_spect_denoised, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "spect",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.n_mel, 88)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/models/degli.py": {
        "torch": {
            "L1Loss_119": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_126": {
                "variable": {
                    "value": "self.loss_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([1.0 / i for i in range(len_weight, 0, -1)])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normal_179": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "std": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "generator": {
                    "value": "[batch_size, 2, spec.shape[2], spec.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "audios",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(max(Ts) - 1) * self.l_hop",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_214": {
                "variable": {
                    "value": "loss_blocks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_blocks.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_195": {
                "variable": {
                    "value": "audios[i, 0:my_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reconstruct_wave(y_i, kwargs_istft=self.kwargs_istft, n_sample=my_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_290": {
                "variable": {
                    "value": "tensorboard_logs[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[k] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_290": {
                "variable": {
                    "value": "tensorboard_logs[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_313": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instantiate(cfg.dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "data": {
                    "value": "[1.0 / i for i in range(len_weight, 0, -1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_216": {
                "input": {
                    "value": "loss_batch[..., :T]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_269": {
                "data": {
                    "value": "measure['STOI']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_270": {
                "data": {
                    "value": "measure['PESQ']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_275": {
                "data": {
                    "value": "measure['STOI']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_276": {
                "data": {
                    "value": "measure['PESQ']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/models/ed_mel2spec.py": {
        "torch": {
            "ones_45": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_specs",
                            "Attribute"
                        ],
                        [
                            "self.f_specs",
                            "Attribute"
                        ],
                        [
                            "outputs[0].keys()",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "L1Loss_73": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_120": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ed_mel2spec(mel=mel)",
                            "Call"
                        ],
                        [
                            "self(mel=mel)",
                            "Call"
                        ],
                        [
                            "torch.clamp(spec, min=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "loss_blocks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_154": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kern, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool2d_155": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_y",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kern, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "variable": {
                    "value": "loss_blocks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_171": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * _x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kern, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool2d_172": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * _y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kern, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "loss_blocks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_282": {
                "variable": {
                    "value": "tensorboard_logs[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[k] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_282": {
                "variable": {
                    "value": "tensorboard_logs[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_305": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instantiate(cfg.dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_137": {
                "input": {
                    "value": "loss_batch[..., :T]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_166": {
                "input": {
                    "value": "loss_batch[..., :T]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_183": {
                "input": {
                    "value": "loss_batch[..., :T]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_257": {
                "data": {
                    "value": "measure['STOI']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_258": {
                "data": {
                    "value": "measure['PESQ']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_261": {
                "data": {
                    "value": "measure['STOI']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "data": {
                    "value": "measure['PESQ']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/models/glow_tts.py": {
        "torch": {
            "tensor_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.parser(str_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_164": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_164": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_165": {
                "variable": {
                    "value": "avg_mle",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['l_mle'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_165": {
                "variable": {
                    "value": "avg_mle",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_166": {
                "variable": {
                    "value": "avg_length_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['l_length'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_166": {
                "variable": {
                    "value": "avg_length_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_167": {
                "variable": {
                    "value": "avg_logdet",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['logdet'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_167": {
                "variable": {
                    "value": "avg_logdet",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_260": {
                "variable": {
                    "value": "token_len",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tokens.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_236": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_AudioTextDataset(manifest_filepath=cfg['manifest_filepath'], parser=self.parser, sample_rate=cfg['sample_rate'], int_values=cfg.get('int_values', False), augmentor=augmentor, max_duration=cfg.get('max_duration', None), min_duration=cfg.get('min_duration', None), max_utts=cfg.get('max_utts', 0), trim=cfg.get('trim_silence', True), load_audio=cfg.get('load_audio', True), add_misc=cfg.get('add_misc', False))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "OmegaConf.create(cfg)",
                            "Call"
                        ],
                        [
                            "OmegaConf.create(cfg)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "cfg.get('drop_last', False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "cfg['shuffle']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "OmegaConf.create(cfg)",
                            "Call"
                        ],
                        [
                            "OmegaConf.create(cfg)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "cfg.get('num_workers', 0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/models/melgan.py": {
        "torch": {
            "MSELoss_43": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "opt1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "opt2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_256": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_256": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_295": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instantiate(cfg.dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_177": {
                "variable": {
                    "value": "audio_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(spec=spec)",
                            "Call"
                        ],
                        [
                            "self(spec=spec)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(audio_pred, (0, pad_amount), value=0.0)",
                            "Call"
                        ],
                        [
                            "audio_pred[:, :, :audio.shape[1]]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_amount)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_253": {
                "variable": {
                    "value": "return_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_269": {
                "tensors": {
                    "value": "[x['loss_feat'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_113": {
                "input": {
                    "value": "fake_score[i] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_253": {
                "tensors": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + sum(loss_gen) / len(fake_score)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "torch.stack([x['loss'] for x in outputs]).mean()",
                            "Call"
                        ],
                        [
                            "loss in enumerate(return_list)",
                            "Call"
                        ],
                        [
                            "loss in enumerate(list_of_losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_182": {
                "input": {
                    "value": "audio_len",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/models/squeezewave.py": {
        "torch": {
            "stack_182": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_182": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_204": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instantiate(cfg.dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/models/tacotron2.py": {
        "torch": {
            "Embedding_86": {
                "variable": {
                    "value": "self.text_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(cfg.labels) + 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "tokens_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.parser(str_input)",
                            "Call"
                        ],
                        [
                            "[len(self._cfg.labels)] + tokens + [len(self._cfg.labels) + 1]",
                            "BinOp"
                        ],
                        [
                            "tokens",
                            "Method Argument"
                        ],
                        [
                            "tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_202": {
                "variable": {
                    "value": "token_len",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(i) for i in tokens]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_271": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_271": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_297": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instantiate(cfg.dataset, labels=labels, bos_id=len(labels), eos_id=len(labels) + 1, pad_id=len(labels) + 2)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/models/talknet.py": {
        "torch": {
            "mse_loss_55": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "durs_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "durs_pred.exp() - 1",
                            "BinOp"
                        ],
                        [
                            "durs_pred.round().long()",
                            "Call"
                        ],
                        [
                            "self(text=text, text_len=text_len)",
                            "Call"
                        ],
                        [
                            "self(text=text, text_len=text_len)",
                            "Call"
                        ],
                        [
                            "durs_pred",
                            "Method Argument"
                        ],
                        [
                            "durs_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "(durs_true + 1).float().log()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_69": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.vocab.labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "cfg.d_char",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_71": {
                "variable": {
                    "value": "self.rz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cfg.model.jasper[-1].filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_123": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_123": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_124": {
                "variable": {
                    "value": "avg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['acc'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_124": {
                "variable": {
                    "value": "avg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_172": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mel_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mel_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "mel_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mel_true",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_172": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_187": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.vocab.labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "cfg.d_char",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_189": {
                "variable": {
                    "value": "self.rz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "cfg.model.jasper[-1].filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg.n_mels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_214": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_mel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self(text=text, text_len=text_len)",
                            "Call"
                        ],
                        [
                            "self(text=text, text_len=text_len)",
                            "Call"
                        ],
                        [
                            "pred_mel",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "true_mel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.preprocessor(audio, audio_len)",
                            "Call"
                        ],
                        [
                            "self.preprocessor(audio, audio_len)",
                            "Call"
                        ],
                        [
                            "true_mel",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_214": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_241": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_241": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instantiate(cfg.dataset)",
                            "Call"
                        ],
                        [
                            "instantiate(cfg.dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_250": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instantiate(cfg.dataset)",
                            "Call"
                        ],
                        [
                            "instantiate(cfg.dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_270": {
                "data": {
                    "value": "self.vocab.encode(text)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_273": {
                "data": {
                    "value": "len(text)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_273": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/models/two_stages.py": {
        "torch": {
            "tensor_44": {
                "variable": {
                    "value": "self.mel_pseudo_inverse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "melinv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "librosa.filters.mel(sr=sampling_rate, n_fft=n_fft, fmin=mel_fmin, fmax=mel_fmax, n_mels=mel_freq)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensordot_47": {
                "variable": {
                    "value": "lin_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "mel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mel",
                            "Method Argument"
                        ],
                        [
                            "mel",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.mel_pseudo_inverse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[[1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "audios",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(max(Ts) - 1) * self.l_hop",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "audios[i, 0:my_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "griffin_lim(spec[i, :, 0:Ts[i]].cpu().numpy(), n_iters=self.n_iters, n_fft=self.n_fft)",
                            "Call"
                        ],
                        [
                            "self.linvocoder.convert_linear_spectrogram_to_audio(linear_spec, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_173": {
                "variable": {
                    "value": "exp_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/models/uniglow.py": {
        "torch": {
            "stack_195": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_195": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_196": {
                "variable": {
                    "value": "avg_stoi",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_251": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self._cfg.train_ds.dataset.n_segments",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_220": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instantiate(cfg.dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/models/waveglow.py": {
        "torch": {
            "stack_185": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_185": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_207": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "instantiate(cfg.dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "dataset.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/modules/degli.py": {
        "torch": {
            "atan2_68": {
                "variable": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "x[:, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv_transpose1d_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv_transpose1d(x, eye, stride=hop_length, padding=0)",
                            "Call"
                        ],
                        [
                            "x.view(n_batch, -1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x[:, :ch // 2, ...] * self.sigmoid(x[:, ch // 2:, ...])",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, mag_replaced, consistent], dim=1)",
                            "Call"
                        ],
                        [
                            "self.convglu_first(x)",
                            "Call"
                        ],
                        [
                            "self.two_convglus(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "self.convglu_last(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, mag_replaced, consistent], dim=1)",
                            "Call"
                        ],
                        [
                            "encoder(x)",
                            "Call"
                        ],
                        [
                            "decoder(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, encoders_output[-(i + 2)]], dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoders[-1](x)",
                            "Call"
                        ],
                        [
                            "torch.mul(x_perm, self.linear_finalizer)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "consistent - residual",
                            "BinOp"
                        ],
                        [
                            "torch.randn((1, 2, n_freq, T), device=par.device, dtype=par.dtype)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(W, device=x.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(n_fft)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "hop_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hop_length",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "[mag * torch.cos(phase), mag * torch.sin(phase)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_81": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_108": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_fft",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.eye",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "eye.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_119": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "window.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "[diff // 2, math.ceil(diff / 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_123": {
                "variable": {
                    "value": "self.win_sq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "window ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_131": {
                "variable": {
                    "value": "eye_realimag",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eye, torch.zeros(n_fft, n_fft))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ifft_132": {
                "variable": {
                    "value": "basis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eye_realimag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((eye, torch.zeros(n_fft, n_fft)), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "signal_ndim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_135": {
                "variable": {
                    "value": "self.basis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "basis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.fft.ifft(eye_realimag, signal_ndim=1)",
                            "Call"
                        ],
                        [
                            "basis * window",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_165": {
                "variable": {
                    "value": "ytmp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bftc,fwc->bwt",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "stft_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stft_matrix[:, :, :n_frames]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((stft_matrix, flipped), dim=1)",
                            "Call"
                        ],
                        [
                            "stft_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_235": {
                "variable": {
                    "value": "self.two_convglus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvGLU(ch_hidden, ch_hidden, batchnorm=True, act=self.act, kernel_size=(k_y2, k_x2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_241": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ch_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ch_hidden",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(k_y2, k_x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "((k_y2 - 1) // 2, (k_x2 - 1) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, mag_replaced, consistent]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_303": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_345": {
                "variable": {
                    "value": "self.decoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_402": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, mag_replaced, consistent]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_475": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(k, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2",
                            "Method Argument"
                        ],
                        [
                            "(2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "(p, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_509": {
                "variable": {
                    "value": "self.window",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.hann_window(n_fft)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_611": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 2, n_freq, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "par.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "par.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_612": {
                "variable": {
                    "value": "mag",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, n_freq, T)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "par.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "par.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_613": {
                "variable": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(T - 1) * self.hop_length",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_614": {
                "variable": {
                    "value": "repeat",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_113": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "win_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_fft",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_158": {
                "variable": {
                    "value": "stft_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(stft_matrix, flipped)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_204": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "(7",
                            "Method Argument"
                        ],
                        [
                            "(5",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size[0] // 2, kernel_size[1] // 2)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_206": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "(7",
                            "Method Argument"
                        ],
                        [
                            "(5",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size[0] // 2, kernel_size[1] // 2)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_211": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_340": {
                "variable": {
                    "value": "encoder_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_364": {
                "variable": {
                    "value": "decoder_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_370": {
                "variable": {
                    "value": "self.linear_finalizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(n_freq) * init_alpha",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_412": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, encoders_output[-(i + 2)]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_418": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 1, 3, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.linear_finalizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_443": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(p1x, p2x, p1y - 1, p2y)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "weight_norm_464": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._gen_conv(layer_specs[0], layer_specs[1], convGlu=self.convGlu, rounding_needed=True, use_weight_norm=self.use_weight_norm)",
                            "Call"
                        ],
                        [
                            "self._gen_conv(last_ch, ch_out, gain=gain, convGlu=self.convGlu, kernel_size=self.k_xy, use_weight_norm=self.use_weight_norm)",
                            "Call"
                        ],
                        [
                            "self._gen_deconv(last_ch, ch_out, gain=gain, k=kernel_size, use_weight_norm=self.use_weight_norm)",
                            "Call"
                        ],
                        [
                            "ConvGLU(in_ch, out_ch, kernel_size=kernel_size, stride=strides, batchnorm=self.glu_bn, padding=(0, 0), act='sigmoid')",
                            "Call"
                        ],
                        [
                            "nn.Conv2d(in_ch, out_ch, kernel_size=kernel_size, stride=strides, padding=(p1y, p1x))",
                            "Call"
                        ],
                        [
                            "nn.Conv2d(in_ch, out_ch, kernel_size=kernel_size, stride=strides, padding=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(conv, name='weight')",
                            "Call"
                        ],
                        [
                            "nn.ConvTranspose2d(in_ch, out_ch, kernel_size=(k, 3), stride=strides, padding_mode='zeros', padding=(p, 1), dilation=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(conv, name='weight')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "weight_norm_480": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._gen_conv(layer_specs[0], layer_specs[1], convGlu=self.convGlu, rounding_needed=True, use_weight_norm=self.use_weight_norm)",
                            "Call"
                        ],
                        [
                            "self._gen_conv(last_ch, ch_out, gain=gain, convGlu=self.convGlu, kernel_size=self.k_xy, use_weight_norm=self.use_weight_norm)",
                            "Call"
                        ],
                        [
                            "self._gen_deconv(last_ch, ch_out, gain=gain, k=kernel_size, use_weight_norm=self.use_weight_norm)",
                            "Call"
                        ],
                        [
                            "ConvGLU(in_ch, out_ch, kernel_size=kernel_size, stride=strides, batchnorm=self.glu_bn, padding=(0, 0), act='sigmoid')",
                            "Call"
                        ],
                        [
                            "nn.Conv2d(in_ch, out_ch, kernel_size=kernel_size, stride=strides, padding=(p1y, p1x))",
                            "Call"
                        ],
                        [
                            "nn.Conv2d(in_ch, out_ch, kernel_size=kernel_size, stride=strides, padding=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(conv, name='weight')",
                            "Call"
                        ],
                        [
                            "nn.ConvTranspose2d(in_ch, out_ch, kernel_size=(k, 3), stride=strides, padding_mode='zeros', padding=(p, 1), dilation=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(conv, name='weight')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ModuleList_513": {
                "variable": {
                    "value": "self.dnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DegliDNN() for _ in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_515": {
                "variable": {
                    "value": "self.dnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DegliED(n_freq, kwargs) for _ in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stft_520": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv_transpose1d(x, eye, stride=hop_length, padding=0)",
                            "Call"
                        ],
                        [
                            "x.view(n_batch, -1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x[:, :ch // 2, ...] * self.sigmoid(x[:, ch // 2:, ...])",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, mag_replaced, consistent], dim=1)",
                            "Call"
                        ],
                        [
                            "self.convglu_first(x)",
                            "Call"
                        ],
                        [
                            "self.two_convglus(x)",
                            "Call"
                        ],
                        [
                            "x + residual",
                            "BinOp"
                        ],
                        [
                            "self.convglu_last(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, mag_replaced, consistent], dim=1)",
                            "Call"
                        ],
                        [
                            "encoder(x)",
                            "Call"
                        ],
                        [
                            "decoder(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, encoders_output[-(i + 2)]], dim=1)",
                            "Call"
                        ],
                        [
                            "self.decoders[-1](x)",
                            "Call"
                        ],
                        [
                            "torch.mul(x_perm, self.linear_finalizer)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "consistent - residual",
                            "BinOp"
                        ],
                        [
                            "torch.randn((1, 2, n_freq, T), device=par.device, dtype=par.dtype)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "n_fft": {
                    "value": "self.n_fft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hop_length": {
                    "value": "self.hop_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "window": {
                    "value": "self.window",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_complex": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_56": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SELU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_185": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "overlap_add(ytmp, self.hop_length, self.eye)",
                            "Call"
                        ],
                        [
                            "y * self.n_fft ** 0.5",
                            "BinOp"
                        ],
                        [
                            "y[:, self.n_fft // 2:]",
                            "Subscript"
                        ],
                        [
                            "y[:, :length]",
                            "Subscript"
                        ],
                        [
                            "F.pad(y, [0, length - y.shape[1]])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, length - y.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_314": {
                "*args": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_338": {
                "variable": {
                    "value": "d[bn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_out in enumerate(layer_specs[2:])",
                            "Call"
                        ],
                        [
                            "ch_out in enumerate(layer_specs[1:])",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "BatchNorm2d_362": {
                "variable": {
                    "value": "d[bn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_out in enumerate(layer_specs[2:])",
                            "Call"
                        ],
                        [
                            "ch_out in enumerate(layer_specs[1:])",
                            "Call"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_459": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "(7",
                            "Method Argument"
                        ],
                        [
                            "(5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2",
                            "Method Argument"
                        ],
                        [
                            "(2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(p1y, p1x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_461": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "(7",
                            "Method Argument"
                        ],
                        [
                            "(5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2",
                            "Method Argument"
                        ],
                        [
                            "(2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "hann_window_509": {
                "window_length": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_fft",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_572": {
                "variable": {
                    "value": "out_repeats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_repeats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(out_repeats, dim=1)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_69": {
                "input": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(x[:, 1:], x[:, :1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_69": {
                "input": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.atan2(x[:, 1:], x[:, :1])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_131": {
                "*size": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_fft",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_fft",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_211": {
                "num_features": {
                    "value": "out_ch * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_370": {
                "*size": {
                    "value": "n_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_fft // 2 + 1",
                            "BinOp"
                        ],
                        [
                            "self.n_fft // 2 + 1",
                            "BinOp"
                        ],
                        [
                            "n_freq",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/collections/tts/modules/ed_mel2spec.py": {
        "torch": {
            "Parameter_104": {
                "variable": {
                    "value": "self.meltrans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.transpose(torch.tensor(meltrans, dtype=torch.float), 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "self.meltrans_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.transpose(torch.tensor(pinv(meltrans), dtype=torch.float), 0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_125": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_151": {
                "variable": {
                    "value": "self.decoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_174": {
                "variable": {
                    "value": "self.linear_finalizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(n_freq) * init_alpha",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mul_206": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.linear_finalizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_222": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._gen_conv(layer_specs[0], layer_specs[1], use_weight_norm=self.use_weight_norm)",
                            "Call"
                        ],
                        [
                            "self._gen_conv(last_ch, ch_out, gain=gain, use_weight_norm=self.use_weight_norm)",
                            "Call"
                        ],
                        [
                            "torch.nn.ReplicationPad2d(pad)",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_223": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 if i < len(layer_specs) - 2 else 5",
                            "IfExp"
                        ],
                        [
                            "(5",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2",
                            "Method Argument"
                        ],
                        [
                            "(2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_235": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(k, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2",
                            "Method Argument"
                        ],
                        [
                            "(2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "(p, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "encoder_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "decoder_block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "self.linear_pre_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.widening * 2, n_freq // 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensordot_180": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mel_pseudo_inverse(mel)",
                            "Call"
                        ],
                        [
                            "encoder(x)",
                            "Call"
                        ],
                        [
                            "decoder(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, encoders_output[-(i + 2)]], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mul(x_perm, self.linear_pre_final).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.decoders[-1](x)",
                            "Call"
                        ],
                        [
                            "torch.mul(x_perm, self.linear_finalizer)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x + x_in",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.meltrans_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "permute_180": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_183": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mel_pseudo_inverse(mel)",
                            "Call"
                        ],
                        [
                            "encoder(x)",
                            "Call"
                        ],
                        [
                            "decoder(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, encoders_output[-(i + 2)]], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mul(x_perm, self.linear_pre_final).permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.decoders[-1](x)",
                            "Call"
                        ],
                        [
                            "torch.mul(x_perm, self.linear_finalizer)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "x + x_in",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.meltrans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[[2], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "permute_183": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, encoders_output[-(i + 2)]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_202": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.linear_pre_final",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permute_202": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_226": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._gen_conv(layer_specs[0], layer_specs[1], use_weight_norm=self.use_weight_norm)",
                            "Call"
                        ],
                        [
                            "self._gen_conv(last_ch, ch_out, gain=gain, use_weight_norm=self.use_weight_norm)",
                            "Call"
                        ],
                        [
                            "self._gen_deconv(last_ch, ch_out, gain=gain, k=kernel_size, use_weight_norm=self.use_weight_norm)",
                            "Call"
                        ],
                        [
                            "nn.Conv2d(in_ch, out_ch, kernel_size=kernel_size, stride=strides, padding=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(conv, name='weight')",
                            "Call"
                        ],
                        [
                            "nn.ConvTranspose2d(in_ch, out_ch, kernel_size=(k, 3), stride=strides, padding_mode='zeros', padding=(p, 1), dilation=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(conv, name='weight')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "weight_norm_240": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._gen_conv(layer_specs[0], layer_specs[1], use_weight_norm=self.use_weight_norm)",
                            "Call"
                        ],
                        [
                            "self._gen_conv(last_ch, ch_out, gain=gain, use_weight_norm=self.use_weight_norm)",
                            "Call"
                        ],
                        [
                            "self._gen_deconv(last_ch, ch_out, gain=gain, k=kernel_size, use_weight_norm=self.use_weight_norm)",
                            "Call"
                        ],
                        [
                            "nn.Conv2d(in_ch, out_ch, kernel_size=kernel_size, stride=strides, padding=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(conv, name='weight')",
                            "Call"
                        ],
                        [
                            "nn.ConvTranspose2d(in_ch, out_ch, kernel_size=(k, 3), stride=strides, padding_mode='zeros', padding=(p, 1), dilation=1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(conv, name='weight')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sigmoid_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_33": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SELU_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_105": {
                "input": {
                    "value": "torch.tensor(meltrans, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_108": {
                "input": {
                    "value": "torch.tensor(pinv(meltrans), dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "*args": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "variable": {
                    "value": "d[bn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_out in enumerate(layer_specs[2:])",
                            "Call"
                        ],
                        [
                            "ch_out in enumerate(layer_specs[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_164": {
                "variable": {
                    "value": "d[dropout]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_167": {
                "variable": {
                    "value": "d[bn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_features": {
                    "value": "ch_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_out in enumerate(layer_specs[2:])",
                            "Call"
                        ],
                        [
                            "ch_out in enumerate(layer_specs[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_105": {
                "data": {
                    "value": "meltrans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "librosa.filters.mel(sr=sampling_rate, n_fft=n_fft, fmin=mel_fmin, fmax=mel_fmax, n_mels=mel_freq)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "data": {
                    "value": "pinv(meltrans)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_174": {
                "*size": {
                    "value": "n_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_fft // 2 + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_177": {
                "*size": {
                    "value": "self.widening * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "n_freq // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/modules/glow_tts.py": {
        "torch": {
            "Embedding_106": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_114": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_115": {
                "variable": {
                    "value": "self.attn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_116": {
                "variable": {
                    "value": "self.norm_layers_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_117": {
                "variable": {
                    "value": "self.ffn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_118": {
                "variable": {
                    "value": "self.norm_layers_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_134": {
                "variable": {
                    "value": "self.proj_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_163": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.emb(text) * math.sqrt(self.hidden_channels)",
                            "BinOp"
                        ],
                        [
                            "torch.transpose(x, 1, -1)",
                            "Call"
                        ],
                        [
                            "self.pre(x, x_mask)",
                            "Call"
                        ],
                        [
                            "x * x_mask",
                            "BinOp"
                        ],
                        [
                            "self.norm_layers_1[i](x + y)",
                            "Call"
                        ],
                        [
                            "self.norm_layers_2[i](x + y)",
                            "Call"
                        ],
                        [
                            "x * x_mask",
                            "BinOp"
                        ],
                        [
                            "spect",
                            "variable"
                        ],
                        [
                            "self.squeeze(x, x_mask, self.n_sqz)",
                            "Call"
                        ],
                        [
                            "f(x, x_mask, g=speaker_embeddings, reverse=reverse)",
                            "Call"
                        ],
                        [
                            "f(x, x_mask, g=speaker_embeddings, reverse=reverse)",
                            "Call"
                        ],
                        [
                            "self.unsqueeze(x, x_mask, self.n_sqz)",
                            "Call"
                        ],
                        [
                            "x[:, :, :t]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_164": {
                "variable": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "glow_tts_submodules.sequence_mask(text_lengths, x.size(2))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_231": {
                "variable": {
                    "value": "self.flows",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_379": {
                "variable": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "glow_tts_submodules.sequence_mask(spect_lengths, y_max_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_394": {
                "variable": {
                    "value": "y_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj_m(x) * x_mask",
                            "BinOp"
                        ],
                        [
                            "self.encoder(text=text, text_lengths=text_lengths, speaker_embeddings=speaker)",
                            "Call"
                        ],
                        [
                            "self.encoder(text=text, text_lengths=text_lengths, speaker_embeddings=speaker)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glow_tts_submodules.maximum_path(logp, attn_mask.squeeze(1)).unsqueeze(1).detach().squeeze(1)",
                            "Call"
                        ],
                        [
                            "glow_tts_submodules.generate_path(w_ceil.squeeze(1), attn_mask.squeeze(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_395": {
                "variable": {
                    "value": "y_logs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj_s(x) * x_mask",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x_m)",
                            "Call"
                        ],
                        [
                            "self.encoder(text=text, text_lengths=text_lengths, speaker_embeddings=speaker)",
                            "Call"
                        ],
                        [
                            "self.encoder(text=text, text_lengths=text_lengths, speaker_embeddings=speaker)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glow_tts_submodules.maximum_path(logp, attn_mask.squeeze(1)).unsqueeze(1).detach().squeeze(1)",
                            "Call"
                        ],
                        [
                            "glow_tts_submodules.generate_path(w_ceil.squeeze(1), attn_mask.squeeze(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "ceil_424": {
                "variable": {
                    "value": "w_ceil",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_durs_predicted) * x_mask.squeeze() * length_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_430": {
                "variable": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "glow_tts_submodules.sequence_mask(spect_lengths, y_max_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_435": {
                "variable": {
                    "value": "y_m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj_m(x) * x_mask",
                            "BinOp"
                        ],
                        [
                            "self.encoder(text=text, text_lengths=text_lengths, speaker_embeddings=speaker)",
                            "Call"
                        ],
                        [
                            "self.encoder(text=text, text_lengths=text_lengths, speaker_embeddings=speaker)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glow_tts_submodules.maximum_path(logp, attn_mask.squeeze(1)).unsqueeze(1).detach().squeeze(1)",
                            "Call"
                        ],
                        [
                            "glow_tts_submodules.generate_path(w_ceil.squeeze(1), attn_mask.squeeze(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_436": {
                "variable": {
                    "value": "y_logs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_logs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj_s(x) * x_mask",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x_m)",
                            "Call"
                        ],
                        [
                            "self.encoder(text=text, text_lengths=text_lengths, speaker_embeddings=speaker)",
                            "Call"
                        ],
                        [
                            "self.encoder(text=text, text_lengths=text_lengths, speaker_embeddings=speaker)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glow_tts_submodules.maximum_path(logp, attn_mask.squeeze(1)).unsqueeze(1).detach().squeeze(1)",
                            "Call"
                        ],
                        [
                            "glow_tts_submodules.generate_path(w_ceil.squeeze(1), attn_mask.squeeze(1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_136": {
                "variable": {
                    "value": "self.proj_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "x_dp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.detach(x), g_exp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_191": {
                "variable": {
                    "value": "x_logs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj_m(x) * x_mask",
                            "BinOp"
                        ],
                        [
                            "self.encoder(text=text, text_lengths=text_lengths, speaker_embeddings=speaker)",
                            "Call"
                        ],
                        [
                            "self.encoder(text=text, text_lengths=text_lengths, speaker_embeddings=speaker)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_299": {
                "variable": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "t // n_sqz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_311": {
                "variable": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "t * n_sqz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_337": {
                "variable": {
                    "value": "self.emb_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_speakers",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "gin_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normalize_367": {
                "variable": {
                    "value": "speaker",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.emb_g(speaker)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_367": {
                "variable": {
                    "value": "speaker",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_385": {
                "variable": {
                    "value": "x_s_sq_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2 * x_logs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_386": {
                "variable": {
                    "value": "logp1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * math.log(2 * math.pi) - x_logs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_386": {
                "variable": {
                    "value": "logp1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_387": {
                "variable": {
                    "value": "logp2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_s_sq_r.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "-0.5 * z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_388": {
                "variable": {
                    "value": "logp3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x_m * x_s_sq_r).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(spect=spect, spect_mask=y_mask, speaker_embeddings=speaker, reverse=False)",
                            "Call"
                        ],
                        [
                            "(y_m + torch.exp(y_logs) * torch.randn_like(y_m) * noise_scale) * y_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_389": {
                "variable": {
                    "value": "logp4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * x_m ** 2 * x_s_sq_r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_389": {
                "variable": {
                    "value": "logp4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_417": {
                "variable": {
                    "value": "speaker",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.emb_g(speaker)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_417": {
                "variable": {
                    "value": "speaker",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_380": {
                "input": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(glow_tts_submodules.sequence_mask(spect_lengths, y_max_length), 1).to(x_mask.dtype)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(glow_tts_submodules.sequence_mask(spect_lengths, y_max_length), 1).to(x_mask.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_397": {
                "input": {
                    "value": "1e-08 + torch.sum(attn, -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_431": {
                "input": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(glow_tts_submodules.sequence_mask(spect_lengths, y_max_length), 1).to(x_mask.dtype)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(glow_tts_submodules.sequence_mask(spect_lengths, y_max_length), 1).to(x_mask.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_423": {
                "input": {
                    "value": "log_durs_predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(text=text, text_lengths=text_lengths, speaker_embeddings=speaker)",
                            "Call"
                        ],
                        [
                            "self.encoder(text=text, text_lengths=text_lengths, speaker_embeddings=speaker)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_397": {
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glow_tts_submodules.maximum_path(logp, attn_mask.squeeze(1)).unsqueeze(1).detach().squeeze(1)",
                            "Call"
                        ],
                        [
                            "glow_tts_submodules.generate_path(w_ceil.squeeze(1), attn_mask.squeeze(1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_425": {
                "input": {
                    "value": "w_ceil",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ceil(w)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_438": {
                "input": {
                    "value": "y_logs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x_logs, attn)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x_logs, attn)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_438": {
                "input": {
                    "value": "y_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x_m, attn)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x_m, attn)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/collections/tts/modules/glow_tts_submodules.py": {
        "torch": {
            "arange_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "length.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "length.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(value.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "path * mask.astype(np.float32)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(path).to(device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "sequence_mask(cum_duration_flat, t_y).to(mask.dtype)",
                            "Call"
                        ],
                        [
                            "path.view(b, t_x, t_y)",
                            "Call"
                        ],
                        [
                            "path - F.pad(path, convert_pad_shape([[0, 0], [1, 0], [0, 0]]))[:, :-1]",
                            "BinOp"
                        ],
                        [
                            "path * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cumsum_114": {
                "variable": {
                    "value": "cum_duration",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "duration",
                    "type": "variable",
                    "possible_values": [
                        [
                            "duration",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_128": {
                "variable": {
                    "value": "t_act",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_act[:, :n_channels_int, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_129": {
                "variable": {
                    "value": "s_act",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_act[:, n_channels_int:, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_140": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_141": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_145": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_length, dtype=length.dtype, device=length.device)",
                            "Call"
                        ],
                        [
                            "(x - mean) * torch.rsqrt(variance + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "self.conv_layers[i](x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.norm_layers[i](x)",
                            "Call"
                        ],
                        [
                            "self.relu_drop(x)",
                            "Call"
                        ],
                        [
                            "x_org + self.proj(x)",
                            "BinOp"
                        ],
                        [
                            "(x + res_skip_acts[:, :self.hidden_channels, :]) * x_mask",
                            "BinOp"
                        ],
                        [
                            "x.view(b, 2, c // self.n_split, self.n_split // 2, t)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4).contiguous().view(b, self.n_split, c // self.n_split, t)",
                            "Call"
                        ],
                        [
                            "self.start(x_0) * x_mask",
                            "BinOp"
                        ],
                        [
                            "self.wn(x, x_mask, g)",
                            "Call"
                        ],
                        [
                            "self.attention(q, k, v, mask=attn_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_o(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, 1]]))",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, length - 1]]))",
                            "Call"
                        ],
                        [
                            "self.conv_1(x * x_mask)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(1.702 * x)",
                            "BinOp"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_1(spect * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x * mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_146": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_168": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_169": {
                "variable": {
                    "value": "self.norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_172": {
                "variable": {
                    "value": "self.relu_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_178": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_201": {
                "variable": {
                    "value": "self.in_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_202": {
                "variable": {
                    "value": "self.res_skip_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_203": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_dropout",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "p_dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_229": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_length, dtype=length.dtype, device=length.device)",
                            "Call"
                        ],
                        [
                            "(x - mean) * torch.rsqrt(variance + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "self.conv_layers[i](x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.norm_layers[i](x)",
                            "Call"
                        ],
                        [
                            "self.relu_drop(x)",
                            "Call"
                        ],
                        [
                            "x_org + self.proj(x)",
                            "BinOp"
                        ],
                        [
                            "(x + res_skip_acts[:, :self.hidden_channels, :]) * x_mask",
                            "BinOp"
                        ],
                        [
                            "x.view(b, 2, c // self.n_split, self.n_split // 2, t)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4).contiguous().view(b, self.n_split, c // self.n_split, t)",
                            "Call"
                        ],
                        [
                            "self.start(x_0) * x_mask",
                            "BinOp"
                        ],
                        [
                            "self.wn(x, x_mask, g)",
                            "Call"
                        ],
                        [
                            "self.attention(q, k, v, mask=attn_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_o(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, 1]]))",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, length - 1]]))",
                            "Call"
                        ],
                        [
                            "self.conv_1(x * x_mask)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(1.702 * x)",
                            "BinOp"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_1(spect * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x * mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_267": {
                "variable": {
                    "value": "self.logs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_268": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, channels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_273": {
                "variable": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(x.size(0), 1, x.size(2)).to(device=x.device, dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "x_mask",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x_mask",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_319": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.qr(torch.FloatTensor(self.n_split, self.n_split).normal_())[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_347": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_length, dtype=length.dtype, device=length.device)",
                            "Call"
                        ],
                        [
                            "(x - mean) * torch.rsqrt(variance + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "self.conv_layers[i](x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.norm_layers[i](x)",
                            "Call"
                        ],
                        [
                            "self.relu_drop(x)",
                            "Call"
                        ],
                        [
                            "x_org + self.proj(x)",
                            "BinOp"
                        ],
                        [
                            "(x + res_skip_acts[:, :self.hidden_channels, :]) * x_mask",
                            "BinOp"
                        ],
                        [
                            "x.view(b, 2, c // self.n_split, self.n_split // 2, t)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4).contiguous().view(b, self.n_split, c // self.n_split, t)",
                            "Call"
                        ],
                        [
                            "self.start(x_0) * x_mask",
                            "BinOp"
                        ],
                        [
                            "self.wn(x, x_mask, g)",
                            "Call"
                        ],
                        [
                            "self.attention(q, k, v, mask=attn_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_o(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, 1]]))",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, length - 1]]))",
                            "Call"
                        ],
                        [
                            "self.conv_1(x * x_mask)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(1.702 * x)",
                            "BinOp"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_1(spect * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x * mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight_inv",
                            "Attribute"
                        ],
                        [
                            "torch.inverse(self.weight.float()).to(dtype=self.weight.dtype)",
                            "Call"
                        ],
                        [
                            "weight.view(self.n_split, self.n_split, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_354": {
                "variable": {
                    "value": "self.weight_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_379": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_380": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Conv1d(in_channels // 2, hidden_channels, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(start)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_384": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_413": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_0, z_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_447": {
                "variable": {
                    "value": "self.conv_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_448": {
                "variable": {
                    "value": "self.conv_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_449": {
                "variable": {
                    "value": "self.conv_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_455": {
                "variable": {
                    "value": "self.conv_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_456": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_dropout",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "p_dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_498": {
                "variable": {
                    "value": "p_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(self.k_channels)",
                            "BinOp"
                        ],
                        [
                            "scores + scores_local",
                            "BinOp"
                        ],
                        [
                            "scores + self._attention_bias_proximal(t_s).to(device=scores.device, dtype=scores.dtype)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -10000.0)",
                            "Call"
                        ],
                        [
                            "scores * block_mask + -10000.0 * (1 - block_mask)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_500": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.drop(p_attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value * mask",
                            "BinOp"
                        ],
                        [
                            "value.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "value.view(b, self.n_heads, self.k_channels, t_s).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_514": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_length, dtype=length.dtype, device=length.device)",
                            "Call"
                        ],
                        [
                            "(x - mean) * torch.rsqrt(variance + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "self.conv_layers[i](x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.norm_layers[i](x)",
                            "Call"
                        ],
                        [
                            "self.relu_drop(x)",
                            "Call"
                        ],
                        [
                            "x_org + self.proj(x)",
                            "BinOp"
                        ],
                        [
                            "(x + res_skip_acts[:, :self.hidden_channels, :]) * x_mask",
                            "BinOp"
                        ],
                        [
                            "x.view(b, 2, c // self.n_split, self.n_split // 2, t)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4).contiguous().view(b, self.n_split, c // self.n_split, t)",
                            "Call"
                        ],
                        [
                            "self.start(x_0) * x_mask",
                            "BinOp"
                        ],
                        [
                            "self.wn(x, x_mask, g)",
                            "Call"
                        ],
                        [
                            "self.attention(q, k, v, mask=attn_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_o(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, 1]]))",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, length - 1]]))",
                            "Call"
                        ],
                        [
                            "self.conv_1(x * x_mask)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(1.702 * x)",
                            "BinOp"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_1(spect * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x * mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_523": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_length, dtype=length.dtype, device=length.device)",
                            "Call"
                        ],
                        [
                            "(x - mean) * torch.rsqrt(variance + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "self.conv_layers[i](x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.norm_layers[i](x)",
                            "Call"
                        ],
                        [
                            "self.relu_drop(x)",
                            "Call"
                        ],
                        [
                            "x_org + self.proj(x)",
                            "BinOp"
                        ],
                        [
                            "(x + res_skip_acts[:, :self.hidden_channels, :]) * x_mask",
                            "BinOp"
                        ],
                        [
                            "x.view(b, 2, c // self.n_split, self.n_split // 2, t)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4).contiguous().view(b, self.n_split, c // self.n_split, t)",
                            "Call"
                        ],
                        [
                            "self.start(x_0) * x_mask",
                            "BinOp"
                        ],
                        [
                            "self.wn(x, x_mask, g)",
                            "Call"
                        ],
                        [
                            "self.attention(q, k, v, mask=attn_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_o(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, 1]]))",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, length - 1]]))",
                            "Call"
                        ],
                        [
                            "self.conv_1(x * x_mask)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(1.702 * x)",
                            "BinOp"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_1(spect * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x * mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y.unsqueeze(0).transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_547": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_length, dtype=length.dtype, device=length.device)",
                            "Call"
                        ],
                        [
                            "(x - mean) * torch.rsqrt(variance + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "self.conv_layers[i](x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.norm_layers[i](x)",
                            "Call"
                        ],
                        [
                            "self.relu_drop(x)",
                            "Call"
                        ],
                        [
                            "x_org + self.proj(x)",
                            "BinOp"
                        ],
                        [
                            "(x + res_skip_acts[:, :self.hidden_channels, :]) * x_mask",
                            "BinOp"
                        ],
                        [
                            "x.view(b, 2, c // self.n_split, self.n_split // 2, t)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4).contiguous().view(b, self.n_split, c // self.n_split, t)",
                            "Call"
                        ],
                        [
                            "self.start(x_0) * x_mask",
                            "BinOp"
                        ],
                        [
                            "self.wn(x, x_mask, g)",
                            "Call"
                        ],
                        [
                            "self.attention(q, k, v, mask=attn_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_o(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, 1]]))",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, length - 1]]))",
                            "Call"
                        ],
                        [
                            "self.conv_1(x * x_mask)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(1.702 * x)",
                            "BinOp"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_1(spect * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x * mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, 1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_551": {
                "variable": {
                    "value": "x_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view([batch, heads, length * 2 * length])",
                            "Call"
                        ],
                        [
                            "F.pad(x_flat, convert_pad_shape([[0, 0], [0, 0], [0, length - 1]]))",
                            "Call"
                        ],
                        [
                            "x.view([batch, heads, length ** 2 + length * (length - 1)])",
                            "Call"
                        ],
                        [
                            "F.pad(x_flat, convert_pad_shape([[0, 0], [0, 0], [length, 0]]))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "convert_pad_shape([[0, 0], [0, 0], [0, length - 1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_564": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_length, dtype=length.dtype, device=length.device)",
                            "Call"
                        ],
                        [
                            "(x - mean) * torch.rsqrt(variance + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "self.conv_layers[i](x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.norm_layers[i](x)",
                            "Call"
                        ],
                        [
                            "self.relu_drop(x)",
                            "Call"
                        ],
                        [
                            "x_org + self.proj(x)",
                            "BinOp"
                        ],
                        [
                            "(x + res_skip_acts[:, :self.hidden_channels, :]) * x_mask",
                            "BinOp"
                        ],
                        [
                            "x.view(b, 2, c // self.n_split, self.n_split // 2, t)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4).contiguous().view(b, self.n_split, c // self.n_split, t)",
                            "Call"
                        ],
                        [
                            "self.start(x_0) * x_mask",
                            "BinOp"
                        ],
                        [
                            "self.wn(x, x_mask, g)",
                            "Call"
                        ],
                        [
                            "self.attention(q, k, v, mask=attn_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_o(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, 1]]))",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, length - 1]]))",
                            "Call"
                        ],
                        [
                            "self.conv_1(x * x_mask)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(1.702 * x)",
                            "BinOp"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_1(spect * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x * mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_567": {
                "variable": {
                    "value": "x_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view([batch, heads, length * 2 * length])",
                            "Call"
                        ],
                        [
                            "F.pad(x_flat, convert_pad_shape([[0, 0], [0, 0], [0, length - 1]]))",
                            "Call"
                        ],
                        [
                            "x.view([batch, heads, length ** 2 + length * (length - 1)])",
                            "Call"
                        ],
                        [
                            "F.pad(x_flat, convert_pad_shape([[0, 0], [0, 0], [length, 0]]))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "convert_pad_shape([[0, 0], [0, 0], [length, 0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_578": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "x.size()",
                            "Call"
                        ],
                        [
                            "length",
                            "Method Argument"
                        ],
                        [
                            "length",
                            "Method Argument"
                        ],
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_595": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_channels",
                            "Method Argument"
                        ],
                        [
                            "filter_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_596": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_channels",
                            "Method Argument"
                        ],
                        [
                            "filter_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_597": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_dropout",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "p_dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_627": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "p_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_dropout",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "p_dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_628": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_channels",
                            "Method Argument"
                        ],
                        [
                            "filter_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_630": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_channels",
                            "Method Argument"
                        ],
                        [
                            "filter_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_channels",
                            "Method Argument"
                        ],
                        [
                            "filter_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_632": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_channels",
                            "Method Argument"
                        ],
                        [
                            "filter_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_636": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_length, dtype=length.dtype, device=length.device)",
                            "Call"
                        ],
                        [
                            "(x - mean) * torch.rsqrt(variance + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "self.conv_layers[i](x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.norm_layers[i](x)",
                            "Call"
                        ],
                        [
                            "self.relu_drop(x)",
                            "Call"
                        ],
                        [
                            "x_org + self.proj(x)",
                            "BinOp"
                        ],
                        [
                            "(x + res_skip_acts[:, :self.hidden_channels, :]) * x_mask",
                            "BinOp"
                        ],
                        [
                            "x.view(b, 2, c // self.n_split, self.n_split // 2, t)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4).contiguous().view(b, self.n_split, c // self.n_split, t)",
                            "Call"
                        ],
                        [
                            "self.start(x_0) * x_mask",
                            "BinOp"
                        ],
                        [
                            "self.wn(x, x_mask, g)",
                            "Call"
                        ],
                        [
                            "self.attention(q, k, v, mask=attn_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_o(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, 1]]))",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, length - 1]]))",
                            "Call"
                        ],
                        [
                            "self.conv_1(x * x_mask)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(1.702 * x)",
                            "BinOp"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_1(spect * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x * mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_640": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_length, dtype=length.dtype, device=length.device)",
                            "Call"
                        ],
                        [
                            "(x - mean) * torch.rsqrt(variance + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "self.conv_layers[i](x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.norm_layers[i](x)",
                            "Call"
                        ],
                        [
                            "self.relu_drop(x)",
                            "Call"
                        ],
                        [
                            "x_org + self.proj(x)",
                            "BinOp"
                        ],
                        [
                            "(x + res_skip_acts[:, :self.hidden_channels, :]) * x_mask",
                            "BinOp"
                        ],
                        [
                            "x.view(b, 2, c // self.n_split, self.n_split // 2, t)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4).contiguous().view(b, self.n_split, c // self.n_split, t)",
                            "Call"
                        ],
                        [
                            "self.start(x_0) * x_mask",
                            "BinOp"
                        ],
                        [
                            "self.wn(x, x_mask, g)",
                            "Call"
                        ],
                        [
                            "self.attention(q, k, v, mask=attn_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_o(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, 1]]))",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, length - 1]]))",
                            "Call"
                        ],
                        [
                            "self.conv_1(x * x_mask)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(1.702 * x)",
                            "BinOp"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_1(spect * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x * mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_206": {
                "variable": {
                    "value": "cond_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "gin_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * hidden_channels * n_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_207": {
                "variable": {
                    "value": "self.cond_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "cond_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Conv1d(gin_channels, 2 * hidden_channels * n_layers, 1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv1d_212": {
                "variable": {
                    "value": "in_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * hidden_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation_rate ** i",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int((kernel_size * dilation - dilation) / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_215": {
                "variable": {
                    "value": "in_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "in_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Conv1d(hidden_channels, 2 * hidden_channels, kernel_size, dilation=dilation, padding=padding)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(in_layer, name='weight')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv1d_224": {
                "variable": {
                    "value": "res_skip_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "res_skip_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * hidden_channels",
                            "BinOp"
                        ],
                        [
                            "hidden_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_225": {
                "variable": {
                    "value": "res_skip_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "res_skip_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Conv1d(hidden_channels, res_skip_channels, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(res_skip_layer, name='weight')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_272": {
                "variable": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_295": {
                "variable": {
                    "value": "denom",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(x.size(0), 1, x.size(2)).to(device=x.device, dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "x_mask",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x_mask",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_328": {
                "variable": {
                    "value": "x_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(x.size(0), 1, x.size(2)).to(device=x.device, dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "x_mask",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x_mask",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_404": {
                "variable": {
                    "value": "logs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1e-06 + torch.sigmoid(logs + 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_411": {
                "variable": {
                    "value": "logdet",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logs * x_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_453": {
                "variable": {
                    "value": "self.emb_rel_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(n_heads_rel, window_size * 2 + 1, self.k_channels) * rel_stddev",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_454": {
                "variable": {
                    "value": "self.emb_rel_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(n_heads_rel, window_size * 2 + 1, self.k_channels) * rel_stddev",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_532": {
                "variable": {
                    "value": "padded_relative_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relative_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "relative_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "convert_pad_shape([[0, 0], [pad_length, pad_length], [0, 0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_580": {
                "input": {
                    "value": "-torch.log1p(torch.abs(diff))",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_604": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(max_length, dtype=length.dtype, device=length.device)",
                            "Call"
                        ],
                        [
                            "(x - mean) * torch.rsqrt(variance + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x * self.gamma.view(*shape) + self.beta.view(*shape)",
                            "BinOp"
                        ],
                        [
                            "self.conv_layers[i](x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.norm_layers[i](x)",
                            "Call"
                        ],
                        [
                            "self.relu_drop(x)",
                            "Call"
                        ],
                        [
                            "x_org + self.proj(x)",
                            "BinOp"
                        ],
                        [
                            "(x + res_skip_acts[:, :self.hidden_channels, :]) * x_mask",
                            "BinOp"
                        ],
                        [
                            "x.view(b, 2, c // self.n_split, self.n_split // 2, t)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4).contiguous().view(b, self.n_split, c // self.n_split, t)",
                            "Call"
                        ],
                        [
                            "self.start(x_0) * x_mask",
                            "BinOp"
                        ],
                        [
                            "self.wn(x, x_mask, g)",
                            "Call"
                        ],
                        [
                            "self.attention(q, k, v, mask=attn_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_o(x)",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, 1]]))",
                            "Call"
                        ],
                        [
                            "F.pad(x, convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, length - 1]]))",
                            "Call"
                        ],
                        [
                            "self.conv_1(x * x_mask)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(1.702 * x)",
                            "BinOp"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * x_mask)",
                            "Call"
                        ],
                        [
                            "self.conv_1(spect * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_1(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.conv_2(x * mask)",
                            "Call"
                        ],
                        [
                            "torch.relu(x)",
                            "Call"
                        ],
                        [
                            "self.norm_2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.proj(x * mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_119": {
                "input": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(value.shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "path * mask.astype(np.float32)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(path).to(device=device, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "sequence_mask(cum_duration_flat, t_y).to(mask.dtype)",
                            "Call"
                        ],
                        [
                            "path.view(b, t_x, t_y)",
                            "Call"
                        ],
                        [
                            "path - F.pad(path, convert_pad_shape([[0, 0], [1, 0], [0, 0]]))[:, :-1]",
                            "BinOp"
                        ],
                        [
                            "path * mask",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "convert_pad_shape([[0, 0], [1, 0], [0, 0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_140": {
                "*size": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_141": {
                "*size": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rsqrt_148": {
                "input": {
                    "value": "variance + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_170": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_172": {
                "p": {
                    "value": "p_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_dropout",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "p_dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_242": {
                "variable": {
                    "value": "g_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_layers[i](x)",
                            "Call"
                        ],
                        [
                            "self.drop(x_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "remove_weight_norm_256": {
                "module": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_shape[::-1]",
                            "Subscript"
                        ],
                        [
                            "self.in_layers",
                            "Attribute"
                        ],
                        [
                            "self.res_skip_layers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "remove_weight_norm_258": {
                "module": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_shape[::-1]",
                            "Subscript"
                        ],
                        [
                            "self.in_layers",
                            "Attribute"
                        ],
                        [
                            "self.res_skip_layers",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_267": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "qr_316": {
                "input": {
                    "value": "torch.FloatTensor(self.n_split, self.n_split).normal_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "det_317": {
                "input": {
                    "value": "w_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.qr(torch.FloatTensor(self.n_split, self.n_split).normal_())[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "inverse_337": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_482": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query.view(b, self.n_heads, self.k_channels, t_t).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "query",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_496": {
                "variable": {
                    "value": "block_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(self.k_channels)",
                            "BinOp"
                        ],
                        [
                            "scores + scores_local",
                            "BinOp"
                        ],
                        [
                            "scores + self._attention_bias_proximal(t_s).to(device=scores.device, dtype=scores.dtype)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask == 0, -10000.0)",
                            "Call"
                        ],
                        [
                            "scores * block_mask + -10000.0 * (1 - block_mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "triu_496": {
                "variable": {
                    "value": "block_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.block_length",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tril_496": {
                "variable": {
                    "value": "block_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.block_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_579": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(length, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_175": {
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ],
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_283": {
                "input": {
                    "value": "self.logs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_296": {
                "input": {
                    "value": "x * x_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_297": {
                "input": {
                    "value": "x * x * x_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_299": {
                "input": {
                    "value": "torch.clamp_min(v, 1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_326": {
                "*size": {
                    "value": "(b,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_602": {
                "input": {
                    "value": "1.702 * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_279": {
                "input": {
                    "value": "-self.logs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_404": {
                "input": {
                    "value": "logs + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_407": {
                "input": {
                    "value": "-logs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_453": {
                "*size": {
                    "value": "n_heads_rel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if heads_share else n_heads",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "window_size * 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.k_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_454": {
                "*size": {
                    "value": "n_heads_rel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if heads_share else n_heads",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "window_size * 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.k_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log1p_580": {
                "input": {
                    "value": "torch.abs(diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_282": {
                "input": {
                    "value": "self.logs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logdet_344": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_410": {
                "input": {
                    "value": "logs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * torch.log(torch.clamp_min(v, 1e-06))",
                            "BinOp"
                        ],
                        [
                            "out[:, self.in_channels // 2:, :]",
                            "Subscript"
                        ],
                        [
                            "torch.log(1e-06 + torch.sigmoid(logs + 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_580": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(r, 0) - torch.unsqueeze(r, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_301": {
                "input": {
                    "value": "-logs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/modules/melgan_modules.py": {
        "torch": {
            "Sequential_80": {
                "variable": {
                    "value": "self.stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nonlinear_activation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_89": {
                "variable": {
                    "value": "self.skip_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "self.melgan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_291": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_403": {
                "variable": {
                    "value": "self.discriminators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool1d_419": {
                "variable": {
                    "value": "self.pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_142": {
                "variable": {
                    "value": "nonlinear_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_402": {
                "variable": {
                    "value": "nonlinear_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad1d_82": {
                "padding": {
                    "value": "(kernel_size - 1) // 2 * dilation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_83": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_85": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReflectionPad1d_147": {
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_148": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReflectionPad1d_181": {
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_182": {
                "in_channels": {
                    "value": "channels // 2 ** len(upsample_scales)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_300": {
                "*args": {
                    "value": "torch.nn.ReflectionPad1d((np.prod(kernel_sizes) - 1) // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_330": {
                "*args": {
                    "value": "torch.nn.Conv1d(in_chs, out_chs, kernel_sizes[0], padding=(kernel_sizes[0] - 1) // 2, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_336": {
                "in_channels": {
                    "value": "out_chs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(in_chs * downsample_scale, max_downsample_channels)",
                            "Call"
                        ],
                        [
                            "min(in_chs * 2, max_downsample_channels)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_sizes[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_sizes[1] - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_155": {
                "in_channels": {
                    "value": "channels // 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels // 2 ** (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "upsample_scale * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "upsample_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upsample_scale in enumerate(upsample_scales)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "upsample_scale // 2 + upsample_scale % 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "upsample_scale % 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tanh_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "remove_weight_norm_229": {
                "module": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "weight_norm_240": {
                "module": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReflectionPad1d_301": {
                "padding": {
                    "value": "(np.prod(kernel_sizes) - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_302": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "np.prod(kernel_sizes)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_312": {
                "*args": {
                    "value": "torch.nn.Conv1d(in_chs, out_chs, kernel_size=downsample_scale * 10 + 1, stride=downsample_scale, padding=downsample_scale * 5, groups=in_chs // 4, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_331": {
                "in_channels": {
                    "value": "in_chs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "variable"
                        ],
                        [
                            "out_chs",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(in_chs * downsample_scale, max_downsample_channels)",
                            "Call"
                        ],
                        [
                            "min(in_chs * 2, max_downsample_channels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_sizes[0] - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "remove_weight_norm_469": {
                "module": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "weight_norm_480": {
                "module": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "spectral_norm_490": {
                "module": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ],
                        [
                            "module",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_313": {
                "in_channels": {
                    "value": "in_chs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "variable"
                        ],
                        [
                            "out_chs",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(in_chs * downsample_scale, max_downsample_channels)",
                            "Call"
                        ],
                        [
                            "min(in_chs * 2, max_downsample_channels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "downsample_scale * 10 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "downsample_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "downsample_scales",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "downsample_scale * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_chs // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/modules/squeezewave.py": {
        "torch": {
            "ModuleList_86": {
                "variable": {
                    "value": "self.wavenet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_87": {
                "variable": {
                    "value": "self.convinv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "audio_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_160": {
                "variable": {
                    "value": "mel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.n_mel_channels, 96)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "par.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "par.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[audio_0, audio_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(audio_0, audio_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_190": {
                "tensors": {
                    "value": "output_audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_195": {
                "*size": {
                    "value": "spec.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_remaining_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256 * spec.size(2) // self.n_group",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "spec.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, audio)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_205": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, n_half:, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_184": {
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, n_half:, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_210": {
                "*size": {
                    "value": "spec.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_early_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256 * spec.size(2) // self.n_group",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "spec.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/modules/squeezewave_submodules.py": {
        "torch": {
            "Conv1d_45": {
                "variable": {
                    "value": "fusedconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "conv.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_54": {
                "variable": {
                    "value": "w_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn.weight.div(torch.sqrt(bn.eps + bn.running_var))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_56": {
                "variable": {
                    "value": "fusedconv.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "w_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(bn.weight.div(torch.sqrt(bn.eps + bn.running_var)))",
                            "Call"
                        ],
                        [
                            "w_bn.clone()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv.weight.clone().view(conv.out_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_62": {
                "variable": {
                    "value": "b_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.bias - bn.weight.mul(bn.running_mean).div(torch.sqrt(bn.running_var + bn.eps))",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(b_bn, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "new_conv_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "b_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "conv.weight.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "remove_weight_norm_81": {
                "variable": {
                    "value": "wavenet.start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "wavenet.start",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "remove_weight_norm_83": {
                "variable": {
                    "value": "wavenet.cond_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "wavenet.cond_layer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_101": {
                "variable": {
                    "value": "self.in_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_102": {
                "variable": {
                    "value": "self.res_skip_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_103": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv1d_105": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_106": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Conv1d(n_in_channels, n_channels, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(start, name='weight')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv1d_111": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * n_in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_116": {
                "variable": {
                    "value": "cond_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_mel_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_mel_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * n_channels * n_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_117": {
                "variable": {
                    "value": "self.cond_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "cond_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Conv1d(n_mel_channels, 2 * n_channels * n_layers, 1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "input": {
                    "value": "w_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv.weight.clone().view(conv.out_channels, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(bn_3, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_129": {
                "variable": {
                    "value": "res_skip_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_130": {
                "variable": {
                    "value": "res_skip_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "res_skip_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Conv1d(n_channels, n_channels, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(res_skip_layer, name='weight')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_54": {
                "input": {
                    "value": "bn.eps + bn.running_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_61": {
                "input": {
                    "value": "bn.running_var + bn.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_64": {
                "input": {
                    "value": "bn_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_bn.expand(-1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "*args": {
                    "value": "depthwise",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "*args": {
                    "value": "torch.nn.BatchNorm1d(n_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_123": {
                "num_features": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_124": {
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_125": {
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * n_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/modules/submodules.py": {
        "torch": {
            "tanh_176": {
                "variable": {
                    "value": "t_act",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_act[:, :n_channels_int, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_177": {
                "variable": {
                    "value": "s_act",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_act[:, n_channels_int:, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.linear_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_50": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(dilation * (kernel_size - 1) / 2)",
                            "Call"
                        ],
                        [
                            "int((attention_kernel_size - 1) / 2)",
                            "Call"
                        ],
                        [
                            "int((kernel_size * dilation - dilation) / 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** i",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_143": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_alignment_energies(attention_hidden_state, processed_memory, attention_weights_cat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_144": {
                "variable": {
                    "value": "attention_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_155": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[LinearNorm(in_size, out_size, bias=False) for (in_size, out_size) in zip(in_sizes, sizes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv1d_191": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_241": {
                "variable": {
                    "value": "self.in_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_242": {
                "variable": {
                    "value": "self.res_skip_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_244": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_channels",
                            "Method Argument"
                        ],
                        [
                            "n_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_245": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Conv1d(n_in_channels, n_channels, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(start, name='weight')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv1d_250": {
                "variable": {
                    "value": "end",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_channels",
                            "Method Argument"
                        ],
                        [
                            "n_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * n_in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_255": {
                "variable": {
                    "value": "cond_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_mel_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_mel_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * n_channels * n_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_256": {
                "variable": {
                    "value": "self.cond_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "cond_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Conv1d(n_mel_channels, 2 * n_channels * n_layers, 1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_277": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forward_input[0]",
                            "Subscript"
                        ],
                        [
                            "self.start(audio)",
                            "Call"
                        ],
                        [
                            "audio + res_skip_acts[:, :self.n_channels, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv1d_216": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(z)",
                            "Call"
                        ],
                        [
                            "F.conv1d(z, self.W_inverse, bias=None, stride=1, padding=0)",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.W_inverse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_261": {
                "variable": {
                    "value": "in_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_channels",
                            "Method Argument"
                        ],
                        [
                            "n_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * n_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** i",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(dilation * (kernel_size - 1) / 2)",
                            "Call"
                        ],
                        [
                            "int((attention_kernel_size - 1) / 2)",
                            "Call"
                        ],
                        [
                            "int((kernel_size * dilation - dilation) / 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "weight_norm_262": {
                "variable": {
                    "value": "in_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "in_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Conv1d(n_channels, 2 * n_channels, kernel_size, dilation=dilation, padding=padding)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(in_layer, name='weight')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv1d_270": {
                "variable": {
                    "value": "res_skip_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_channels",
                            "Method Argument"
                        ],
                        [
                            "n_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "res_skip_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * n_channels",
                            "BinOp"
                        ],
                        [
                            "n_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_271": {
                "variable": {
                    "value": "res_skip_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "res_skip_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Conv1d(n_channels, res_skip_channels, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.weight_norm(res_skip_layer, name='weight')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_121": {
                "input": {
                    "value": "processed_query + processed_attention_weights + processed_memory",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_162": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linear(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_169": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(linear(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "qr_194": {
                "input": {
                    "value": "torch.FloatTensor(c, c).normal_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "det_197": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.qr(torch.FloatTensor(c, c).normal_())[0]",
                            "Subscript"
                        ],
                        [
                            "W.view(c, c, 1)",
                            "Call"
                        ],
                        [
                            "self.conv.weight.squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "logdet_220": {
                "input": {
                    "value": "W.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bernoulli_164": {
                "input": {
                    "value": "x0.data.new(x0.data.size()).fill_(1 - self.p_dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_169": {
                "input": {
                    "value": "linear(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/modules/tacotron2.py": {
        "torch": {
            "ModuleList_70": {
                "variable": {
                    "value": "self.convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "convolutions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "LSTM_72": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "encoder_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_99": {
                "variable": {
                    "value": "token_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "token_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(F.relu(conv(token_embedding)), 0.5, self.training)",
                            "Call"
                        ],
                        [
                            "token_embedding.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pack_padded_sequence(token_embedding, input_lengths, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "token_embedding.float()",
                            "Call"
                        ],
                        [
                            "token_embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "token_len.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_109": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(token_embedding)",
                            "Call"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_packed_sequence(outputs, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_172": {
                "variable": {
                    "value": "self.attention_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "prenet_dim + encoder_embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "attention_rnn_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTMCell_182": {
                "variable": {
                    "value": "self.decoder_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "attention_rnn_dim + encoder_embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "decoder_rnn_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_252": {
                "variable": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(alignments).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "alignments + [alignment]",
                            "BinOp"
                        ],
                        [
                            "self.parse_decoder_outputs(mel_outputs, gate_outputs, alignments)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.parse_decoder_outputs(mel_outputs, gate_outputs, alignments)",
                            "Call"
                        ],
                        [
                            "alignments",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_252": {
                "variable": {
                    "value": "alignments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_256": {
                "variable": {
                    "value": "gate_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gate_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(gate_outputs).squeeze(-1).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "gate_outputs.contiguous()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gate_outputs + [gate_output]",
                            "BinOp"
                        ],
                        [
                            "self.parse_decoder_outputs(mel_outputs, gate_outputs, alignments)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.parse_decoder_outputs(mel_outputs, gate_outputs, alignments)",
                            "Call"
                        ],
                        [
                            "gate_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_256": {
                "variable": {
                    "value": "gate_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_256": {
                "variable": {
                    "value": "gate_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_259": {
                "variable": {
                    "value": "mel_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mel_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(mel_outputs).transpose(0, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "mel_outputs.view(mel_outputs.size(0), -1, self.n_mel_channels)",
                            "Call"
                        ],
                        [
                            "mel_outputs.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "mel_outputs + [mel_output.squeeze(1)]",
                            "BinOp"
                        ],
                        [
                            "self.parse_decoder_outputs(mel_outputs, gate_outputs, alignments)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.parse_decoder_outputs(mel_outputs, gate_outputs, alignments)",
                            "Call"
                        ],
                        [
                            "mel_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_259": {
                "variable": {
                    "value": "mel_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "cell_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(decoder_input, self.attention_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_280": {
                "variable": {
                    "value": "self.attention_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attention_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p_attention_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "attention_weights_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.attention_weights.unsqueeze(1), self.attention_weights_cum.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.attention_hidden, self.attention_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_302": {
                "variable": {
                    "value": "self.decoder_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decoder_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p_decoder_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "decoder_hidden_attention_context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.decoder_hidden, self.attention_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_313": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(decoder_input, decoder_inputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_340": {
                "variable": {
                    "value": "mel_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[memory.size(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_341": {
                "variable": {
                    "value": "not_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[memory.size(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_399": {
                "variable": {
                    "value": "self.convolutions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_465": {
                "variable": {
                    "value": "mel_spec_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convolutions[-1](mel_spec_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "conv_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvNorm(encoder_embedding_dim, encoder_embedding_dim, kernel_size=encoder_kernel_size, stride=1, padding=int((encoder_kernel_size - 1) / 2), dilation=1, w_init_gain='relu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_92": {
                "variable": {
                    "value": "token_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(conv(token_embedding))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "le_352": {
                "variable": {
                    "value": "dec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sigmoid(gate_output.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.gate_threshold",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_352": {
                "variable": {
                    "value": "dec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_464": {
                "variable": {
                    "value": "mel_spec_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tanh(self.convolutions[i](mel_spec_out))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_402": {
                "*args": {
                    "value": "ConvNorm(n_mel_channels, postnet_embedding_dim, kernel_size=postnet_kernel_size, stride=1, padding=int((postnet_kernel_size - 1) / 2), dilation=1, w_init_gain='tanh')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_433": {
                "*args": {
                    "value": "ConvNorm(postnet_embedding_dim, n_mel_channels, kernel_size=postnet_kernel_size, stride=1, padding=int((postnet_kernel_size - 1) / 2), dilation=1, w_init_gain='linear')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_67": {
                "num_features": {
                    "value": "encoder_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_92": {
                "input": {
                    "value": "conv(token_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "autocast_272": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "autocast_294": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_412": {
                "num_features": {
                    "value": "postnet_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_418": {
                "*args": {
                    "value": "ConvNorm(postnet_embedding_dim, postnet_embedding_dim, kernel_size=postnet_kernel_size, stride=1, padding=int((postnet_kernel_size - 1) / 2), dilation=1, w_init_gain='tanh')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_443": {
                "num_features": {
                    "value": "n_mel_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_464": {
                "input": {
                    "value": "self.convolutions[i](mel_spec_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_357": {
                "input": {
                    "value": "not_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([memory.size(0)], dtype=torch.int32)",
                            "Call"
                        ],
                        [
                            "not_finished.cuda()",
                            "Call"
                        ],
                        [
                            "not_finished * dec",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm1d_428": {
                "num_features": {
                    "value": "postnet_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_352": {
                "input": {
                    "value": "gate_output.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/collections/tts/modules/uniglow.py": {
        "torch": {
            "randn_121": {
                "variable": {
                    "value": "mel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.n_mel_channels, 96)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "par.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "par.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_153": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec[:, :, :-1]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(spec, size=audio.size(2))",
                            "Call"
                        ],
                        [
                            "spec[:, :, :-1]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(spec, size=audio_len)",
                            "Call"
                        ],
                        [
                            "spec",
                            "Method Argument"
                        ],
                        [
                            "spec",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "audio_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec.shape[2] * self.upsample_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_130": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec[:, :, :-1]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(spec, size=audio.size(2))",
                            "Call"
                        ],
                        [
                            "spec[:, :, :-1]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(spec, size=audio_len)",
                            "Call"
                        ],
                        [
                            "spec",
                            "Method Argument"
                        ],
                        [
                            "spec",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "audio.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[audio_0, audio_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[audio_0, audio_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "remove_weight_norm_175": {
                "variable": {
                    "value": "wavenet.start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "wavenet.start",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "remove_weight_norm_177": {
                "variable": {
                    "value": "wavenet.cond_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "wavenet.cond_layer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_144": {
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, n_half:, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_154": {
                "*size": {
                    "value": "spec.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "audio_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec.shape[2] * self.upsample_factor",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "spec.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_165": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, n_half:, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_143": {
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, n_half:, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/collections/tts/modules/waveglow.py": {
        "torch": {
            "ConvTranspose1d_56": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_mel_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_mel_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.wavenet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_64": {
                "variable": {
                    "value": "self.convinv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "audio_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_141": {
                "variable": {
                    "value": "mel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.n_mel_channels, 96)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "par.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "par.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[audio_0, audio_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(audio_0, audio_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "remove_weight_norm_218": {
                "variable": {
                    "value": "wavenet.start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "wavenet.start",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "remove_weight_norm_220": {
                "variable": {
                    "value": "wavenet.cond_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "wavenet.cond_layer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_181": {
                "tensors": {
                    "value": "output_audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_193": {
                "*size": {
                    "value": "spec.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_remaining_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "spec.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "spec.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, audio)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_205": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, n_half:, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_175": {
                "input": {
                    "value": "log_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, n_half:, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_210": {
                "*size": {
                    "value": "spec.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_early_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "spec.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "spec.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/core/classes/dataset.py": {
        "torch": {}
    },
    "nemo/core/classes/exportable.py": {
        "torch": {
            "trace_131": {
                "variable": {
                    "value": "jitted_model",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "check_trace": {
                    "value": "check_trace",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "script_121": {
                "variable": {
                    "value": "jitted_model",
                    "type": "variable",
                    "possible_values": []
                },
                "obj": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/core/classes/loss.py": {
        "torch": {}
    },
    "nemo/core/classes/modelPT.py": {
        "torch": {
            "current_device_131": {
                "variable": {
                    "value": "app_state.device_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_295": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path.join(tmpdir, _MODEL_WEIGHTS)",
                            "Call"
                        ],
                        [
                            "path.join(tmpdir, _MODEL_WEIGHTS)",
                            "Call"
                        ],
                        [
                            "path.join(tmpdir, _MODEL_WEIGHTS)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_375": {
                "variable": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_377": {
                "variable": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_544": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path.join(tmpdir, _MODEL_WEIGHTS)",
                            "Call"
                        ],
                        [
                            "path.join(tmpdir, _MODEL_WEIGHTS)",
                            "Call"
                        ],
                        [
                            "path.join(tmpdir, _MODEL_WEIGHTS)",
                            "Call"
                        ]
                    ]
                }
            },
            "current_device_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_400": {
                "f": {
                    "value": "model_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path.join(tmpdir, _MODEL_WEIGHTS)",
                            "Call"
                        ],
                        [
                            "path.join(tmpdir, _MODEL_WEIGHTS)",
                            "Call"
                        ],
                        [
                            "path.join(tmpdir, _MODEL_WEIGHTS)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_548": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_weights)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, _MODEL_WEIGHTS)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, f'{primary_key}.ckpt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_558": {
                "obj": {
                    "value": "state_dict_subset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'.'.join(inner_key.split('.')[1:]): state_dict[inner_key] for inner_key in inner_keys}",
                            "DictComp"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, _MODEL_WEIGHTS)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, f'{primary_key}.ckpt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/core/classes/module.py": {
        "torch": {}
    },
    "nemo/core/optim/lr_scheduler.py": {
        "torch": {}
    },
    "nemo/core/optim/novograd.py": {
        "torch": {
            "zeros_like_99": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_137": {
                "variable": {
                    "value": "data_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_138": {
                "variable": {
                    "value": "grad_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exp_avg.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_122": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/core/optim/optimizers.py": {
        "torch": {}
    },
    "nemo/quantization/utils/distill_data.py": {
        "torch": {
            "DataLoader_53": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UniformDataset(length=10000, size=size, transform=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_64": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_std / bn_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_124": {
                "variable": {
                    "value": "crit",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_125": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[gaussian_data]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_126": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam([gaussian_data], lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "min_lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "patience": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[seqlen] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_146": {
                "variable": {
                    "value": "conv_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_output[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "var_147": {
                "variable": {
                    "value": "conv_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_output[0] + eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_148": {
                "variable": {
                    "value": "conv_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_var + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_24": {
                "*size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_113": {
                "input": {
                    "value": "bn.running_var + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clone_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nemo/quantization/utils/quant_modules.py": {
        "torch": {
            "Parameter_240": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv.weight.data.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv1d_304": {
                "variable": {
                    "value": "conv_int",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x / pre_act_scaling_factor).type(torch.double)",
                            "Call"
                        ],
                        [
                            "x / prev_act_scaling_factor",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight_integer.type(torch.double)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias_integer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight_function(bias, self.bias_bit, bias_scaling_factor.reshape([-1])).type(torch.double)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_353": {
                "variable": {
                    "value": "running_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn.running_var.detach() + self.bn.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_416": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "linear.weight.data.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_242": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv.bias.data.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_274": {
                "variable": {
                    "value": "(w_min, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.data.detach()",
                            "Call"
                        ],
                        [
                            "scaled_weight.data.detach()",
                            "Call"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "max_275": {
                "variable": {
                    "value": "(w_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.data.detach()",
                            "Call"
                        ],
                        [
                            "scaled_weight.data.detach()",
                            "Call"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "min_276": {
                "variable": {
                    "value": "(w_min, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(weight, dim=-1, out=None)",
                            "Call"
                        ],
                        [
                            "torch.min(w_min, dim=-1, out=None)",
                            "Call"
                        ],
                        [
                            "weight.min()",
                            "Call"
                        ],
                        [
                            "w_min.view(-1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.min(w_transform, dim=1, out=None)",
                            "Call"
                        ],
                        [
                            "w_transform.min().expand(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "max_277": {
                "variable": {
                    "value": "(w_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(weight, dim=-1, out=None)",
                            "Call"
                        ],
                        [
                            "torch.max(w_max, dim=-1, out=None)",
                            "Call"
                        ],
                        [
                            "weight.max()",
                            "Call"
                        ],
                        [
                            "w_max.view(-1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.max(w_transform, dim=1, out=None)",
                            "Call"
                        ],
                        [
                            "w_transform.max().expand(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv1d_317": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quant_act_int * act_scaling_factor",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_339": {
                "variable": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_int * correct_scaling_factor",
                            "BinOp"
                        ],
                        [
                            "self.int_conv(weight, bias, x, pre_act_scaling_factor)",
                            "Call"
                        ],
                        [
                            "self.int_conv(weight, bias, x, pre_act_scaling_factor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "var_340": {
                "variable": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_int * correct_scaling_factor",
                            "BinOp"
                        ],
                        [
                            "self.int_conv(weight, bias, x, pre_act_scaling_factor)",
                            "Call"
                        ],
                        [
                            "self.int_conv(weight, bias, x, pre_act_scaling_factor)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_like_360": {
                "variable": {
                    "value": "scaled_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_420": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "linear.bias.data.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_449": {
                "variable": {
                    "value": "(w_min, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w.data.detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "max_450": {
                "variable": {
                    "value": "(w_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "w_transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w.data.detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "quantile_122": {
                "variable": {
                    "value": "quantile_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if identity is None else identity + x",
                            "IfExp"
                        ]
                    ]
                },
                "q": {
                    "value": "torch.tensor(1 - self.percentile / 100).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "quantile_123": {
                "variable": {
                    "value": "quantile_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if identity is None else identity + x",
                            "IfExp"
                        ]
                    ]
                },
                "q": {
                    "value": "torch.tensor(self.percentile / 100).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_128": {
                "input": {
                    "value": "self.x_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.x_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_247": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_248": {
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_417": {
                "*size": {
                    "value": "self.out_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_418": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_423": {
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "channel_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "channel_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_67": {
                "*size": {
                    "value": "channel_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_135": {
                "variable": {
                    "value": "self.x_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.x_min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_136": {
                "variable": {
                    "value": "self.x_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.x_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "quantile_161": {
                "variable": {
                    "value": "x_min",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if identity is None else identity + x",
                            "IfExp"
                        ]
                    ]
                },
                "q": {
                    "value": "torch.tensor(1 - self.percentile / 100).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "quantile_165": {
                "variable": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if identity is None else identity + x",
                            "IfExp"
                        ]
                    ]
                },
                "q": {
                    "value": "torch.tensor(self.percentile / 100).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_243": {
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_346": {
                "input": {
                    "value": "self.bn.running_var + self.bn.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_436": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quant_act_int * act_scaling_factor",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_468": {
                "input": {
                    "value": "x_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x / pre_act_scaling_factor).type(torch.double)",
                            "Call"
                        ],
                        [
                            "x / prev_act_scaling_factor",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_integer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias_integer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "data": {
                    "value": "1 - self.percentile / 100",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "data": {
                    "value": "self.percentile / 100",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "data": {
                    "value": "1 - self.percentile / 100",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "data": {
                    "value": "self.percentile / 100",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nemo/quantization/utils/quant_utils.py": {
        "torch": {
            "round_26": {
                "input": {
                    "value": "1.0 / scale * input + zero_point",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "zero_point",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_76": {
                "variable": {
                    "value": "new_quant_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_quant_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear_quantize(x, scale, zero_point, inplace=False)",
                            "Call"
                        ],
                        [
                            "torch.clamp(new_quant_x, -n, n - 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-n",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "n - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_48": {
                "variable": {
                    "value": "(scale, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([saturation_min.abs(), saturation_max.abs()], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_101": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "round_114": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_146": {
                "ndarray": {
                    "value": "output_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.frexp(inputs.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "np.array(tmp_m)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_147": {
                "ndarray": {
                    "value": "output_e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.frexp(inputs.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "float(max_bit) - output_e",
                            "BinOp"
                        ]
                    ]
                }
            },
            "round_187": {
                "variable": {
                    "value": "z_int",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_act / pre_act_scaling_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_196": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output / 2.0 ** e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_200": {
                "variable": {
                    "value": "wx_int",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "identity / identity_scaling_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_209": {
                "variable": {
                    "value": "output1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output1 / 2.0 ** e1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_48": {
                "tensors": {
                    "value": "[saturation_min.abs(), saturation_max.abs()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_49": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(torch.stack([saturation_min.abs(), saturation_max.abs()], dim=1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(scale, min=1e-08) / n",
                            "BinOp"
                        ],
                        [
                            "max(saturation_min.abs(), saturation_max.abs())",
                            "Call"
                        ],
                        [
                            "torch.clamp(scale, min=1e-08) / n",
                            "BinOp"
                        ],
                        [
                            "specified_scale",
                            "variable"
                        ],
                        [
                            "ctx.scale",
                            "Attribute"
                        ],
                        [
                            "scale.view(-1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "scale.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "scale.view(-1)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_52": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(torch.stack([saturation_min.abs(), saturation_max.abs()], dim=1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(scale, min=1e-08) / n",
                            "BinOp"
                        ],
                        [
                            "max(saturation_min.abs(), saturation_max.abs())",
                            "Call"
                        ],
                        [
                            "torch.clamp(scale, min=1e-08) / n",
                            "BinOp"
                        ],
                        [
                            "specified_scale",
                            "variable"
                        ],
                        [
                            "ctx.scale",
                            "Attribute"
                        ],
                        [
                            "scale.view(-1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "scale.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "scale.view(-1)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_214": {
                "input": {
                    "value": "output.type(torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-n - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** (num_bits - 1) - 1",
                            "BinOp"
                        ],
                        [
                            "2 ** (k - 1) - 1",
                            "BinOp"
                        ],
                        [
                            "2 ** (bit_num - 1) - 1",
                            "BinOp"
                        ],
                        [
                            "2 ** bit_num - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_216": {
                "input": {
                    "value": "output.type(torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 ** (num_bits - 1) - 1",
                            "BinOp"
                        ],
                        [
                            "2 ** (k - 1) - 1",
                            "BinOp"
                        ],
                        [
                            "2 ** (bit_num - 1) - 1",
                            "BinOp"
                        ],
                        [
                            "2 ** bit_num - 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "nemo/utils/export_utils.py": {
        "torch": {
            "Conv2d_63": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv1d.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv1d.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(conv1d.kernel_size[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(conv1d.stride[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(conv1d.padding[0], 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(conv1d.dilation[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "conv1d.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "conv1d.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "variable": {
                    "value": "conv2d.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv1d.weight.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "variable": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "bn1d.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "bn1d.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "bn1d.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affine": {
                    "value": "bn1d.affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "bn1d.track_running_stats",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_40": {
                "variable": {
                    "value": "mod",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "n.normalized_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "n.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elementwise_affine": {
                    "value": "n.elementwise_affine",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_77": {
                "variable": {
                    "value": "sample_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "conv1d.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/asr_checkpoint_port.py": {
        "torch": {
            "load_62": {
                "f": {
                    "value": "encoder_ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_ckpt",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_63": {
                "f": {
                    "value": "decoder_ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_ckpt",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/collections/asr/test_asr_classification_model.py": {
        "torch": {}
    },
    "tests/collections/asr/test_asr_datasets.py": {
        "torch": {}
    },
    "tests/collections/asr/test_asr_metrics.py": {
        "torch": {
            "unsqueeze_74": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_80": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "data": {
                    "value": "[len(reference)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/collections/asr/test_asr_modules.py": {
        "torch": {
            "randn_76": {
                "variable": {
                    "value": "input_signal",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(4, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_77": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "161",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_92": {
                "variable": {
                    "value": "input_signal",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(4, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_93": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "161",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_126": {
                "variable": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_166": {
                "variable": {
                    "value": "token",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_173": {
                "variable": {
                    "value": "token",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "blank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "encoder_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_207": {
                "variable": {
                    "value": "dec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "pred_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_config.prednet.pred_hidden",
                            "Attribute"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_36": {
                "variable": {
                    "value": "input_signal",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(4, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_37": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "161",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_43": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(res1 - res2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_45": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(res1 - res2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_56": {
                "variable": {
                    "value": "input_signal",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(4, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_57": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "161",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_63": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(res1 - res2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_65": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(res1 - res2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_43": {
                "input": {
                    "value": "res1 - res2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_45": {
                "input": {
                    "value": "res1 - res2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_63": {
                "input": {
                    "value": "res1 - res2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_65": {
                "input": {
                    "value": "res1 - res2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "[128] * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/collections/common/perplexity_inputs.py": {
        "torch": {
            "rand_38": {
                "*size": {
                    "value": "NUM_BATCHES",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "NUM_CLASSES",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_40": {
                "*size": {
                    "value": "NUM_BATCHES",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "NUM_CLASSES",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_45": {
                "*size": {
                    "value": "NUM_BATCHES",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "NUM_CLASSES",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_42": {
                "*size": {
                    "value": "NUM_BATCHES",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "NUM_CLASSES",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_46": {
                "*size": {
                    "value": "NUM_BATCHES",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "NUM_CLASSES",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tests/collections/common/pl_utils.py": {
        "torch": {
            "stack_120": {
                "variable": {
                    "value": "total_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[preds[i] for i in range(NUM_BATCHES)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "total_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target[i] for i in range(NUM_BATCHES)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_104": {
                "variable": {
                    "value": "ddp_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[preds[i + r] for r in range(worldsize)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_105": {
                "variable": {
                    "value": "ddp_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target[i + r] for r in range(worldsize)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_322": {
                "variable": {
                    "value": "ddp_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[probs[i + r] for r in range(worldsize)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_324": {
                "variable": {
                    "value": "ddp_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logits[i + r] for r in range(worldsize)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/collections/common/test_metrics.py": {
        "torch": {
            "tensor_28": {
                "variable": {
                    "value": "top_k_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.1, 0.3, 0.2, 0.0], [0.9, 0.6, 0.2, 0.3], [0.2, 0.1, 0.4, 0.3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 2], [2, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_67": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[correct1, correct2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_68": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[total1, total2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "accuracy.correct_counts_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[correct.sum()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "accuracy.total_counts_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[total.sum()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_98": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[correct1, correct2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_99": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[total1, total2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "accuracy.correct_counts_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[correct.sum()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "variable": {
                    "value": "accuracy.total_counts_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[total.sum()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_64": {
                "input": {
                    "value": "self.top_k_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "[0, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "[2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_93": {
                "input": {
                    "value": "self.top_k_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/collections/nlp/test_huggingface.py": {
        "torch": {
            "is_available_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/collections/nlp/test_megatron.py": {
        "torch": {
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/collections/nlp/test_nlp_exportables.py": {
        "torch": {
            "load_127": {
                "variable": {
                    "value": "torchscript_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(tmpdir, obj.__class__.__name__ + '.onnx')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmpdir, 'isc.onnx')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmpdir, 'isc.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmpdir, 'ner.onnx')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmpdir, 'puncap.onnx')",
                            "Call"
                        ],
                        [
                            "os.path.join(tmpdir, 'qa.onnx')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/core/test_exp_manager.py": {
        "torch": {
            "Linear_67": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l1_loss_79": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(batch)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.l1_loss(output, torch.zeros(output.size()).to(output.device))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.zeros(output.size()).to(output.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_57": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OnesDataset(2)",
                            "Call"
                        ],
                        [
                            "OnesDataset(10)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OnesDataset(2)",
                            "Call"
                        ],
                        [
                            "OnesDataset(10)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "output.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_102": {
                "tensors": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_326": {
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "model.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_42": {
                "*size": {
                    "value": "p.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_338": {
                "data": {
                    "value": "[1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "model.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_44": {
                "*size": {
                    "value": "p.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_46": {
                "*size": {
                    "value": "p.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/core/test_fileio.py": {
        "torch": {
            "load_256": {
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'model_weights.ckpt')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_294": {
                "f": {
                    "value": "encoder_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'encoder.ckpt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/core/test_optimizers_schedulers.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l1_loss_77": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(batch)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.l1_loss(output, torch.ones(output.size()).to(output.device))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.ones(output.size()).to(output.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_56": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomDataset(self.dataset_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "self.drop_last",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_77": {
                "*size": {
                    "value": "output.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/core/test_typecheck.py": {
        "torch": {
            "zeros_458": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_459": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_602": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_603": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_464": {
                "input": {
                    "value": "x == 10",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_470": {
                "input": {
                    "value": "x == 9",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_471": {
                "input": {
                    "value": "y == 4",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_478": {
                "input": {
                    "value": "y == -6",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_608": {
                "input": {
                    "value": "y == -5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_613": {
                "input": {
                    "value": "x == -1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_614": {
                "input": {
                    "value": "y == -6",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_620": {
                "input": {
                    "value": "x == 9",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "data": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "data": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "data": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_265": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_267": {
                "data": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_287": {
                "data": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "data": {
                    "value": "10 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_308": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_352": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x0.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_512": {
                "data": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_518": {
                "data": {
                    "value": "-10.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_541": {
                "data": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_546": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_547": {
                "data": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_552": {
                "data": {
                    "value": "-10.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_678": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_691": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_700": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_48": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_249": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_285": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_290": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_290": {
                "size": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_328": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_379": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_510": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_516": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_539": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_550": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_652": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_654": {
                "data": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_211": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_658": {
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/ctc_segmentation/scripts/cut_audio.py": {
        "torch": {
            "set_grad_enabled_90": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/ctc_segmentation/scripts/run_ctc_segmentation.py": {
        "torch": {
            "empty_cache_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}