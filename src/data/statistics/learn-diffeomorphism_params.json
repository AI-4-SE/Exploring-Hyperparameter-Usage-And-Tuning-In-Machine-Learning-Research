{
    "examples/test_model.py": {
        "torch": {
            "is_available_23": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "pos_test_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pos_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([x.ravel(order='F'), y.ravel(order='F')]).transpose()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_49": {
                "f": {
                    "value": "os.path.join('models', '{}.pt'.format(args.data))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "pos_train[-1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_50": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if use_cuda else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/train_model.py": {
        "torch": {
            "is_available_21": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 0:2]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(pos).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "vel",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[:, 2:4]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vel).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_54": {
                "variable": {
                    "value": "trainer.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "trainer.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SmoothL1Loss_58": {
                "variable": {
                    "value": "trainer.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "learn_diffeomorphism/coupling_layer.py": {
        "torch": {
            "exp_52": {
                "input": {
                    "value": "-self.scaling_(x[:, self.inx_za])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_43": {
                "input": {
                    "value": "self.scaling_(x[:, self.inx_za])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "learn_diffeomorphism/diffeomorphism.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.prediction_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*(CouplingLayer(dim, num_features, i % 2, length) for i in range(num_diff))",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_23": {
                "variable": {
                    "value": "jac",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0) * self.dim_",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.dim_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_26": {
                "outputs": {
                    "value": "y[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.invert(x)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(y[:, i])",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_27": {
                "input": {
                    "value": "y[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "learn_diffeomorphism/dynamics.py": {
        "torch": {
            "bmm_45": {
                "input": {
                    "value": "torch.inverse(J)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "-dy.unsqueeze(2)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_55": {
                "input": {
                    "value": "y_hat.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y_hat.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_45": {
                "input": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "learn_diffeomorphism/kernel_machine.py": {
        "torch": {
            "MultivariateNormal_20": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(self.num_features_, dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.eye(dim) / np.power(length, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Uniform_22": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "torch.zeros(self.num_features_)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "torch.ones(self.num_features_) * 2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.linear_clamped_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_features_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.linear_clamped_.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultivariateNormal(torch.zeros(self.num_features_, dim), torch.eye(dim) / np.power(length, 2)).sample()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.linear_clamped_.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Uniform(torch.zeros(self.num_features_), torch.ones(self.num_features_) * 2 * np.pi).sample()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.prediction_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "match_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_40": {
                "input": {
                    "value": "torch.tensor(2 / self.num_features_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_40": {
                "input": {
                    "value": "self.linear_clamped_(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "2 / self.num_features_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "*size": {
                    "value": "self.num_features_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "*size": {
                    "value": "self.num_features_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_20": {
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_22": {
                "*size": {
                    "value": "self.num_features_",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "learn_diffeomorphism/trainer.py": {
        "torch": {
            "SGD_23": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_27": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_62": {
                "variable": {
                    "value": "torch_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(self.input, self.target)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.options_['batch']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "self.options_['shuffle']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_123": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('models', '{}.pt'.format(file))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_127": {
                "f": {
                    "value": "os.path.join('models', '{}.pt'.format(file))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device(self.input.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__106": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.options_['clip_grad']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_128": {
                "type": {
                    "value": "self.input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "learn_diffeomorphism/utils.py": {
        "torch": {
            "is_available_5": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_6": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "meshgrid_23": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(m, dtype=torch.uint8).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(n, dtype=torch.uint8).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_29": {
                "indices": {
                    "value": "torch.cat([x.reshape(-1, 1).transpose(1, 0), y.reshape(-1, 1).transpose(1, 0)], dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "a.reshape(-1, 1).squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(m, m)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_23": {
                "start": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ymin - ymax) / (xmin - xmax)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_24": {
                "start": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_26": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ymin - ymax) / (xmin - xmax)",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_interleave_26": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_26": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_29": {
                "tensors": {
                    "value": "[x.reshape(-1, 1).transpose(1, 0), y.reshape(-1, 1).transpose(1, 0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}