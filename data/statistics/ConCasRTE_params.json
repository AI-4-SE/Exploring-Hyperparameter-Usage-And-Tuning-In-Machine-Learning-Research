{
    "main.py": {
        "torch": {
            "tensor_149": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "args.conf_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_157": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_153": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "pred < 1 - args.min_num",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(pred < 1 - args.min_num, pred, torch.ones(pred.shape).to('cuda') * 1 - args.min_num).to('cuda')",
                            "Call"
                        ],
                        [
                            "torch.where(pred > args.min_num, pred, torch.ones(pred.shape).to('cuda') * args.min_num).to('cuda')",
                            "Call"
                        ],
                        [
                            "torch.log(pred / (1 - pred))",
                            "Call"
                        ],
                        [
                            "sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.ones(pred.shape).to('cuda') * 1 - args.min_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_154": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "pred > args.min_num",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(pred < 1 - args.min_num, pred, torch.ones(pred.shape).to('cuda') * 1 - args.min_num).to('cuda')",
                            "Call"
                        ],
                        [
                            "torch.where(pred > args.min_num, pred, torch.ones(pred.shape).to('cuda') * args.min_num).to('cuda')",
                            "Call"
                        ],
                        [
                            "torch.log(pred / (1 - pred))",
                            "Call"
                        ],
                        [
                            "sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.ones(pred.shape).to('cuda') * args.min_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_155": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred / (1 - pred)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_162": {
                "variable": {
                    "value": "sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_171": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "where_173": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "(pred_res_1 == True) & (pred_res_2 == True)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros(shape).to('cuda')",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(shape).to('cuda')",
                            "Call"
                        ],
                        [
                            "torch.where((pred_res_1 == True) & (pred_res_2 == True), torch.zeros(shape).to('cuda'), weight).to('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_281": {
                "f": {
                    "value": "os.path.join(output_path, WEIGHTS_NAME)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_429": {
                "f": {
                    "value": "os.path.join(output_path, WEIGHTS_NAME)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_159": {
                "input": {
                    "value": "1 + torch.exp(-1 * torch.abs(pred).to('cuda'))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_243": {
                "variable": {
                    "value": "s_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binary_crossentropy(args, targets=batch_subject_labels, pred=s_pred)",
                            "Call"
                        ],
                        [
                            "torch.mean(s_loss, dim=2).to('cuda')",
                            "Call"
                        ],
                        [
                            "torch.sum(s_loss * batch_mask).to('cuda') / torch.sum(batch_mask).to('cuda')",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_247": {
                "variable": {
                    "value": "o_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binary_crossentropy(args, targets=batch_object_labels, pred=o_pred)",
                            "Call"
                        ],
                        [
                            "torch.mean(o_loss, dim=2).to('cuda')",
                            "Call"
                        ],
                        [
                            "torch.sum(o_loss * batch_mask).to('cuda') / torch.sum(batch_mask).to('cuda')",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_270": {
                "obj": {
                    "value": "train_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_path, 'dev_%s' % WEIGHTS_NAME)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_299": {
                "data": {
                    "value": "[mask]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_319": {
                "data": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_embed(torch.tensor([token_ids]).to('cuda'), torch.tensor([mask]).to('cuda'))",
                            "Call"
                        ],
                        [
                            "cls.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.repeat(cls, len(s_loc), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_167": {
                "input": {
                    "value": "pred - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__258": {
                "parameters": {
                    "value": "train_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_336": {
                "data": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_embed(torch.tensor([token_ids]).to('cuda'), torch.tensor([mask]).to('cuda'))",
                            "Call"
                        ],
                        [
                            "cls.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.repeat(cls, len(s_loc), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_234": {
                "data": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "evl_data",
                            "variable"
                        ],
                        [
                            "self.sample(is_random)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_244": {
                "input": {
                    "value": "batch_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sequence_padding(batch_mask)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_248": {
                "input": {
                    "value": "batch_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sequence_padding(batch_mask)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_360": {
                "data": {
                    "value": "head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_embed(torch.tensor([token_ids]).to('cuda'), torch.tensor([mask]).to('cuda'))",
                            "Call"
                        ],
                        [
                            "head.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.repeat(head, len(s_loc), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_361": {
                "data": {
                    "value": "tail",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_embed(torch.tensor([token_ids]).to('cuda'), torch.tensor([mask]).to('cuda'))",
                            "Call"
                        ],
                        [
                            "tail.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.repeat(tail, len(s_loc), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_362": {
                "data": {
                    "value": "rel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_embed(torch.tensor([token_ids]).to('cuda'), torch.tensor([mask]).to('cuda'))",
                            "Call"
                        ],
                        [
                            "rel.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.repeat(rel, len(s_loc), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_365": {
                "data": {
                    "value": "batch_so_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(batch_so_mask).astype(np.int)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "sequence_padding(batch_so_mask).astype(np.int)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_366": {
                "data": {
                    "value": "cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_embed(torch.tensor([token_ids]).to('cuda'), torch.tensor([mask]).to('cuda'))",
                            "Call"
                        ],
                        [
                            "cls.cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.repeat(cls, len(s_loc), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_173": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_363": {
                "data": {
                    "value": "s_loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_364": {
                "data": {
                    "value": "o_loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_154": {
                "*size": {
                    "value": "pred.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_159": {
                "input": {
                    "value": "-1 * torch.abs(pred).to('cuda')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_153": {
                "*size": {
                    "value": "pred.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_159": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(pred < 1 - args.min_num, pred, torch.ones(pred.shape).to('cuda') * 1 - args.min_num).to('cuda')",
                            "Call"
                        ],
                        [
                            "torch.where(pred > args.min_num, pred, torch.ones(pred.shape).to('cuda') * args.min_num).to('cuda')",
                            "Call"
                        ],
                        [
                            "torch.log(pred / (1 - pred))",
                            "Call"
                        ],
                        [
                            "sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Dropout_8": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_9": {
                "variable": {
                    "value": "self.w1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.w2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.w3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.s_classier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.o_classier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.p_classier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_18": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}