{
    "adversarials/src/utils/embeddings/replacement_dictionary.py": {
        "sklearn": {}
    },
    "adversarials/src/utils/model_temp/idf_dataset.py": {
        "sklearn": {
            "train_test_split_18": {
                "variable": {
                    "value": "(train, test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataframe",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_percentile",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_68": {
                "variable": {
                    "value": "self.tokenizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strip_accents": {
                    "value": "unicode",
                    "type": "str",
                    "possible_values": []
                },
                "min_df": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "TensorDataset_50": {
                "*tensors": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_55": {
                "*tensors": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "adversarials/src/utils/model_temp/persistent_dataset.py": {
        "sklearn": {
            "train_test_split_27": {
                "variable": {
                    "value": "(self.train, self.test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataframe",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_percentile",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "adversarials/src/utils/model_temp/svc.py": {
        "sklearn": {
            "LinearSVC_16": {
                "variable": {
                    "value": "svc",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'hinge'",
                            "Method Argument"
                        ]
                    ]
                },
                "penalty": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'l2'",
                            "Method Argument"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CalibratedClassifierCV_18": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "base_estimator": {
                    "value": "svc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearSVC(C=C, loss=loss, penalty=penalty, max_iter=max_iter)",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "f1_score_65": {
                "y_true": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[numpy.argmax(prob) for prob in svm.predict(test_tokens)]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/src/data/embedding_dataset.py": {
        "sklearn": {
            "train_test_split_13": {
                "variable": {
                    "value": "(train, test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataframe",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_percentile",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/src/data/idf_dataset.py": {
        "sklearn": {
            "train_test_split_20": {
                "variable": {
                    "value": "(train, test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataframe",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_percentile",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_68": {
                "variable": {
                    "value": "self.tokenizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strip_accents": {
                    "value": "unicode",
                    "type": "str",
                    "possible_values": []
                },
                "min_df": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "TensorDataset_52": {
                "*tensors": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_57": {
                "*tensors": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/src/data/persistent_dataset.py": {
        "sklearn": {
            "train_test_split_27": {
                "variable": {
                    "value": "(self.train, self.test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataframe",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_percentile",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/src/models/static/mlp.py": {
        "sklearn": {
            "f1_score_166": {
                "y_true": {
                    "value": "dataset.get_test_dataset()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlp.predict(dataset.get_test_dataset()[0].todense())",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(tokenizer.vocabulary_)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_17": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idf.num_labels",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_30": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_31": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(tokenizer.vocabulary_)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idf.num_labels",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_54": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idf.get_train_dataset_torch()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "IDFDataset()",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_106": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_108": {
                "variable": {
                    "value": "(_, outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_143": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/src/models/static/svc.py": {
        "sklearn": {
            "LinearSVC_16": {
                "variable": {
                    "value": "svc",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'hinge'",
                            "Method Argument"
                        ]
                    ]
                },
                "penalty": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'l2'",
                            "Method Argument"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "max_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CalibratedClassifierCV_18": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "base_estimator": {
                    "value": "svc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearSVC(C=C, loss=loss, penalty=penalty, max_iter=max_iter)",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "f1_score_65": {
                "y_true": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[numpy.argmax(prob) for prob in svm.predict(test_tokens)]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "adversarials/src/utils/language_model/google_language_model.py": {
        "tensorflow": {
            "Graph_19": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_20": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_18": {
                "device_name": {
                    "value": "/gpu:1",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "adversarials/src/utils/language_model/language_model_loader.py": {
        "tensorflow": {
            "Glob_193": {
                "variable": {
                    "value": "self._all_shards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filename": {
                    "value": "filepattern",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_194": {
                "msg": {
                    "value": "Found %d shards at %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(self._all_shards)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "filepattern",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_200": {
                "msg": {
                    "value": "Loading data from: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "shard_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_214": {
                "msg": {
                    "value": "Loaded %d words.",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "current_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "current_idx + current_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_215": {
                "msg": {
                    "value": "Finished loading",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "adversarials/src/utils/language_model/language_model_utils.py": {
        "tensorflow": {
            "import_graph_def_20": {
                "variable": {
                    "value": "[t[states_init], t[lstm/lstm_0/control_dependency], t[lstm/lstm_1/control_dependency], t[softmax_out], t[class_ids_out], t[class_weights_out], t[log_perplexity_out], t[inputs_in], t[targets_in], t[target_weights_in], t[char_inputs_in], t[all_embs], t[softmax_weights], t[global_step]]",
                    "type": "List",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "gd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "input_map": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "['states_init', 'lstm/lstm_0/control_dependency:0', 'lstm/lstm_1/control_dependency:0', 'softmax_out:0', 'class_ids_out:0', 'class_weights_out:0', 'log_perplexity_out:0', 'inputs_in:0', 'targets_in:0', 'target_weights_in:0', 'char_inputs_in:0', 'all_embs_out:0', 'Reshape_3:0', 'global_step:0']",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GraphDef_10": {
                "variable": {
                    "value": "gd",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_13": {
                "msg": {
                    "value": "Recovering Graph %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "gd_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "FastGFile_8": {
                "name": {
                    "value": "gd_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/src/models/sequence/lstm.py": {
        "torch": {
            "Embedding_27": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.word_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_30": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/src/utils/sparse_utils.py": {
        "torch": {}
    }
}