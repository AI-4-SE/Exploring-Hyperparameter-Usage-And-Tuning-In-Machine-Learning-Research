{
    "algos/trpo.py": {
        "tensorflow": {
            "placeholder_77": {
                "variable": {
                    "value": "self.act_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.act_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "self.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self.old_act_dist_mean_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.act_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.old_act_dist_logstd_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.act_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "self.adv_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "self.flat_tangents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_103": {
                "variable": {
                    "value": "self.ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.log_p_act - self.log_oldp_act",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_133": {
                "variable": {
                    "value": "kl_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "kl_fixed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_utils.gauss_kl_fixed(self.act_dist_mean, self.act_dist_logstd) / self.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "self.policy.trainable_variables",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_120": {
                "input_tensor": {
                    "value": "self.ratio * self.adv_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_139": {
                "input_tensor": {
                    "value": "g * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "envs/proxy_env.py": {
        "tensorflow": {}
    },
    "libs/misc/data_handling/normalization.py": {
        "tensorflow": {
            "get_variable_30": {
                "variable": {
                    "value": "self.mean_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(mean_obs)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "mean_obs",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_34": {
                "variable": {
                    "value": "self.std_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(std_obs)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "std_obs",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_38": {
                "variable": {
                    "value": "self.mean_deltas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(mean_deltas)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "mean_deltas",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "self.std_deltas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(std_deltas)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "std_deltas",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_46": {
                "variable": {
                    "value": "self.mean_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(mean_acts)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "mean_acts",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_50": {
                "variable": {
                    "value": "self.std_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(std_acts)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "std_acts",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self.new_mean_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mean_obs_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self.new_std_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "std_obs_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self.new_mean_deltas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mean_deltas_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.new_std_deltas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "std_deltas_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "self.new_mean_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mean_acts_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "self.new_std_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "std_acts_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_62": {
                "variable": {
                    "value": "self.update_mean_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.mean_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.new_mean_obs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_63": {
                "variable": {
                    "value": "self.update_std_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.std_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.new_std_obs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_64": {
                "variable": {
                    "value": "self.update_mean_deltas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.mean_deltas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.new_mean_deltas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_65": {
                "variable": {
                    "value": "self.update_std_deltas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.std_deltas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.new_std_deltas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_66": {
                "variable": {
                    "value": "self.update_mean_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.mean_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.new_mean_acts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_67": {
                "variable": {
                    "value": "self.update_std_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.std_acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.new_std_acts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_82": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.reuse_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_32": {
                "value": {
                    "value": "mean_obs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.mean(effective_observations, axis=0, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.mean(effective_observations, axis=0, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_36": {
                "value": {
                    "value": "std_obs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.std(effective_observations, axis=0, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.std(effective_observations, axis=0, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_40": {
                "value": {
                    "value": "mean_deltas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.mean(effective_next_observations - effective_observations, axis=0, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.mean(effective_next_observations - effective_observations, axis=0, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_44": {
                "value": {
                    "value": "std_deltas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.std(effective_next_observations - effective_observations, axis=0, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.std(effective_next_observations - effective_observations, axis=0, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_48": {
                "value": {
                    "value": "mean_acts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.mean(actions, axis=0, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.mean(actions, axis=0, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_52": {
                "value": {
                    "value": "std_acts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.std(actions, axis=0, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.std(actions, axis=0, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "libs/misc/data_handling/rollout_sampler.py": {
        "tensorflow": {
            "load_variable_36": {
                "variable": {
                    "value": "s1",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "data_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "data/_s1/.ATTRIBUTES/VARIABLE_VALUE",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_variable_37": {
                "variable": {
                    "value": "s2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "data_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "data/_s2/.ATTRIBUTES/VARIABLE_VALUE",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_variable_38": {
                "variable": {
                    "value": "a1",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "data_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "data/_a1/.ATTRIBUTES/VARIABLE_VALUE",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_variable_39": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "data_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "data/_reward/.ATTRIBUTES/VARIABLE_VALUE",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_variable_150": {
                "ckpt_dir_or_file": {
                    "value": "ckpt_name",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/'.join(var_name.split('.')) + '/.ATTRIBUTES/VARIABLE_VALUE'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "libs/misc/initial_configs/dynamics_model_config.py": {
        "tensorflow": {}
    },
    "libs/misc/initial_configs/policy_config.py": {
        "tensorflow": {}
    },
    "libs/misc/initial_configs/tf_swish.py": {
        "tensorflow": {
            "sigmoid_18": {
                "variable": {
                    "value": "sigmoid_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(features, name='features')",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_44": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(features, name='features')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_45": {
                "x": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ops.convert_to_tensor(features, name='features')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "libs/misc/misc_utils.py": {
        "tensorflow": {
            "get_variable_85": {
                "variable": {
                    "value": "self.mean_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "stats_mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "self.std_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "stats_std",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "self.mean_tf_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "stats_mean_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "self.std_tf_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "stats_std_ph",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "libs/misc/tf_networks.py": {
        "tensorflow": {
            "get_variable_85": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_23": {
                "value": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "npr.randn(*shape).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "out * (stddev / np.sqrt(np.square(out).sum(axis=0, keepdims=True)))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_initializer_40": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_47": {
                "initializer": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "normc_initializer(shape, stddev=init_para['stddev'], seed=seed, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(initializer=initializer(shape), name=name, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_50": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "init_para['mean']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "init_para['stddev']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1234",
                            "MethodArgument"
                        ],
                        [
                            "1234",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_56": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "init_para['mean']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "init_para['stddev']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1234",
                            "MethodArgument"
                        ],
                        [
                            "1234",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_62": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "init_para['minval']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "maxval": {
                    "value": "init_para['maxval']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1234",
                            "MethodArgument"
                        ],
                        [
                            "1234",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_68": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_para['val']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(ii)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(ii)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_129": {
                "a": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_vec if ii == 0 else self._h[ii - 1]",
                            "IfExp"
                        ]
                    ]
                },
                "b": {
                    "value": "self._w[ii]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "libs/misc/tf_utils.py": {
        "tensorflow": {
            "exp_14": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2 * logstd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_23": {
                "variable": {
                    "value": "var1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2 * logstd1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_24": {
                "variable": {
                    "value": "var2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2 * logstd2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_26": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logstd2 - logstd1 + (var1 + tf.square(mu1 - mu2)) / (2 * var2) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_35": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logstd + tf.constant(0.5 * np.log(2 * np.pi * np.e), tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_42": {
                "variable": {
                    "value": "inds0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inds0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(inds0, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_43": {
                "variable": {
                    "value": "inds1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inds1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(inds1, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_44": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "x_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_62": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_18": {
                "input_tensor": {
                    "value": "gp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-tf.square(x - mu) / (2 * var) - 0.5 * tf.log(tf.constant(2 * np.pi)) - logstd",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_47": {
                "params": {
                    "value": "x_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "inds0 * ncols + inds1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_63": {
                "values": {
                    "value": "[tf.reshape(grad, [numel(v)]) for (v, grad) in zip(var_list, grads)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_83": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*assigns",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_93": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(v, [numel(v)]) for v in var_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_44": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_101": {
                "values": {
                    "value": "tuple((tf.reshape(tensor, [-1]) for tensor in tensors))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "tensor": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(colvec, self.tensors_template.shape)",
                            "Call"
                        ],
                        [
                            "list(tensors)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "variable": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "colvec",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.tensors_template.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_36": {
                "value": {
                    "value": "0.5 * np.log(2 * np.pi * np.e)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_64": {
                "tensor": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "colvec[offset:offset + sz]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "tensor_template.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_16": {
                "x": {
                    "value": "tf.constant(2 * np.pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_81": {
                "ref": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(theta[start:start + size], shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "tensor": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_15": {
                "x": {
                    "value": "x - mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_16": {
                "value": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "tensor": {
                    "value": "theta[start:start + size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(x), tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_102": {
                "tensor": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(colvec[offset:offset + sz], tensor_template.shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_27": {
                "x": {
                    "value": "mu1 - mu2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "libs/misc/utils.py": {
        "tensorflow": {
            "ConfigProto_34": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "reset_default_graph_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_22": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "mem_frac",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.25",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConfigProto_23": {
                "variable": {
                    "value": "tf_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=mem_frac)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_39": {
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                }
            },
            "InteractiveSession_28": {
                "variable": {
                    "value": "session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=1, intra_op_parallelism_threads=1, gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_30": {
                "variable": {
                    "value": "session",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=1, intra_op_parallelism_threads=1, gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "InteractiveSession_38": {
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_norm_51": {
                "t": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "logger.py": {
        "tensorflow": {
            "summary_iterator_439": {
                "path": {
                    "value": "fname",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fnames",
                            "Name"
                        ]
                    ]
                }
            },
            "as_bytes_159": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "osp.join(osp.abspath(dir), prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/baselines.py": {
        "tensorflow": {
            "placeholder_98": {
                "variable": {
                    "value": "self.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "self.target_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_squared_error_122": {
                "variable": {
                    "value": "self.value_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.target_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_127": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0003",
                    "type": "float",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "trainable_variables_129": {
                "scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/dynamics.py": {
        "tensorflow": {
            "placeholder_98": {
                "variable": {
                    "value": "self.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.obs_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "self.acts_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.acts_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "self.next_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.obs_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_112": {
                "variable": {
                    "value": "normalized_obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[normalized_obs, obs[:, self.obs_dim:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_183": {
                "variable": {
                    "value": "dyn_adam_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.adam_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_184": {
                "variable": {
                    "value": "self.dyn_adam_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "dyn_adam_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables(self.adam_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_squared_error_237": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_normalized_deltas(deltas)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predicted_normalized_deltas",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dense_32": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(out, self.size, activation=self.activation, name=layer_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, self.output_size, activation=self.output_activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.output_activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_114": {
                "values": {
                    "value": "[normalized_obs, normalized_acts]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_165": {
                "variable": {
                    "value": "self.coeff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "coeff",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(0.001)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_181": {
                "variable": {
                    "value": "self.update_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_28": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(out, self.size, activation=self.activation, name=layer_name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, self.output_size, activation=self.output_activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dense_{}'.format(layer_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "self.adam_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_191": {
                "ref": {
                    "value": "self.coeff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0 / len(train_data)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_30": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'dense_{}'.format(layer_i)",
                            "Call"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "l2_loss_31": {
                "t": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_165": {
                "value": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "trainable_variables_182": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/policies.py": {
        "tensorflow": {
            "placeholder_55": {
                "variable": {
                    "value": "self.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_131": {
                "variable": {
                    "value": "(mean, logstd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "mean_network_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_squared_error_138": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.acts_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predicted_action",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.mean + tf.random_normal(tf.shape(self.acts_ph)) * tf.exp(self.logstd)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variables_initializer_59": {
                "variable": {
                    "value": "self.init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self.name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.acts_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.act_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "trainable_variables_70": {
                "variable": {
                    "value": "bc_adam_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.bc_adam_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_71": {
                "variable": {
                    "value": "self.bc_adam_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "bc_adam_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables(self.bc_adam_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_81": {
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_68": {
                "variable": {
                    "value": "self.bc_update_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.params['behavior_policy']['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_collection_59": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "self.bc_adam_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_117": {
                "x": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_132": {
                "x": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.tanh(mean) * self._act_mags + self._act_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_137": {
                "x": {
                    "value": "self.logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_133": {
                "x": {
                    "value": "logstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LOGSTD_MIN + 0.5 * (LOGSTD_MAX - LOGSTD_MIN) * (tf.tanh(logstd) + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_137": {
                "input": {
                    "value": "self.acts_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_69": {
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/stochastic_dynamics.py": {
        "tensorflow": {
            "placeholder_67": {
                "variable": {
                    "value": "self.obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, obs_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.acts_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, acts_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.next_obs_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, obs_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_91": {
                "variable": {
                    "value": "inv_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-logvar",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "group_95": {
                "variable": {
                    "value": "self.enforce_bound_consistency",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.assign(self.max_logvar, max_bounds)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.assign(self.min_logvar, min_bounds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_squared_error_106": {
                "variable": {
                    "value": "self.loss_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "normalized_deltas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self.next_obs_ph - self.obs_ph - normalization.mean_deltas) / (normalization.std_deltas + self.epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn_output[:, :self.obs_dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "trainable_variables_113": {
                "variable": {
                    "value": "dyn_adam_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.adam_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_114": {
                "variable": {
                    "value": "self.dyn_adam_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "dyn_adam_vars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables(self.adam_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_28": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(out, self.size, activation=self.activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, self.output_size, activation=self.output_activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.output_activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_77": {
                "variable": {
                    "value": "self.max_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "max_logvar",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones(shape=[obs_dim]) * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "self.min_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "min_logvar",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "-tf.ones(shape=[obs_dim]) * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_111": {
                "variable": {
                    "value": "self.update_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_187": {
                "values": {
                    "value": "[normalized_obs, normalized_acts]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dense_27": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(out, self.size, activation=self.activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, self.output_size, activation=self.output_activation)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_94": {
                "x": {
                    "value": "self.max_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.min_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_94": {
                "x": {
                    "value": "self.max_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.min_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_95": {
                "ref": {
                    "value": "self.min_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "min_bounds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "self.adam_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_180": {
                "features": {
                    "value": "self.max_logvar - nn_output[:, self.obs_dim:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_181": {
                "features": {
                    "value": "logvar - self.min_logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(mean - normalized_deltas) * inv_var, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_104": {
                "input_tensor": {
                    "value": "tf.reduce_sum(logvar, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_190": {
                "input": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn_output[:, :self.obs_dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sqrt_191": {
                "x": {
                    "value": "tf.exp(logvar)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_103": {
                "input_tensor": {
                    "value": "tf.square(mean - normalized_deltas) * inv_var",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_104": {
                "input_tensor": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.max_logvar - tf.nn.softplus(self.max_logvar - nn_output[:, self.obs_dim:])",
                            "BinOp"
                        ],
                        [
                            "self.min_logvar + tf.nn.softplus(logvar - self.min_logvar)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_105": {
                "input_tensor": {
                    "value": "self.min_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_112": {
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_191": {
                "x": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.max_logvar - tf.nn.softplus(self.max_logvar - nn_output[:, self.obs_dim:])",
                            "BinOp"
                        ],
                        [
                            "self.min_logvar + tf.nn.softplus(logvar - self.min_logvar)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_77": {
                "shape": {
                    "value": "[obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_78": {
                "shape": {
                    "value": "[obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_103": {
                "x": {
                    "value": "mean - normalized_deltas",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "offline.py": {
        "tensorflow": {
            "get_collection_119": {
                "variable": {
                    "value": "all_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "get_collection_120": {
                "variable": {
                    "value": "policy_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "policy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_121": {
                "variable": {
                    "value": "behavior_policy_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "behavior_policy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_131": {
                "variable": {
                    "value": "dynamics_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "all_var_except_policy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[v for v in all_variables if v not in policy_variables + behavior_policy_variables + value_variables]",
                            "ListComp"
                        ],
                        [
                            "[v for v in all_variables if v not in policy_variables + behavior_policy_variables]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Saver_132": {
                "variable": {
                    "value": "behavior_policy_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "behavior_policy_variables",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope='behavior_policy')",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_133": {
                "variable": {
                    "value": "policy_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "policy_variables",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope='policy')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_123": {
                "variable": {
                    "value": "value_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "baseline",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_279": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seed % 4294967294",
                            "BinOp"
                        ],
                        [
                            "params['random_seeds']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "assign_169": {
                "ref": {
                    "value": "new",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "old",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "trainable_variables_169": {
                "scope": {
                    "value": "behavior_policy",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "recursive.py": {
        "tensorflow": {
            "get_collection_152": {
                "variable": {
                    "value": "all_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "get_collection_153": {
                "variable": {
                    "value": "policy_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "policy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_154": {
                "variable": {
                    "value": "behavior_policy_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "behavior_policy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_164": {
                "variable": {
                    "value": "dynamics_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "all_var_except_policy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[v for v in all_variables if v not in policy_variables + behavior_policy_variables + value_variables]",
                            "ListComp"
                        ],
                        [
                            "[v for v in all_variables if v not in policy_variables + behavior_policy_variables]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Saver_165": {
                "variable": {
                    "value": "behavior_policy_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "behavior_policy_variables",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope='behavior_policy')",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_166": {
                "variable": {
                    "value": "policy_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "policy_variables",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope='policy')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_156": {
                "variable": {
                    "value": "value_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "baseline",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_358": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seed % 4294967294",
                            "BinOp"
                        ],
                        [
                            "params['random_seeds']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "assign_256": {
                "ref": {
                    "value": "new",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "old",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "trainable_variables_256": {
                "scope": {
                    "value": "behavior_policy",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "save_video.py": {
        "tensorflow": {
            "get_collection_49": {
                "variable": {
                    "value": "policy_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "policy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_50": {
                "variable": {
                    "value": "policy_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "policy_variables",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope='policy')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}