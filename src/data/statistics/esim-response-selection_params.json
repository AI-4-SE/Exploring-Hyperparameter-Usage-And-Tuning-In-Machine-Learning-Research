{
    "scripts/esim/main.py": {
        "tensorflow": {
            "transpose_182": {
                "variable": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input_data, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_204": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_data",
                            "variable"
                        ],
                        [
                            "tf.transpose(output, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat(outputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_231": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.vocab_size, FLAGS.dim_word]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(numpy.array(embedding_np))",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "not FLAGS.fix_embedding",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_257": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x1, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int64, shape=[None, None], name='x1')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_258": {
                "variable": {
                    "value": "x1_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x1_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x1_mask, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, None], name='x1_mask')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_259": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x2, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int64, shape=[None, None], name='x2')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_260": {
                "variable": {
                    "value": "x2_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x2_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x2_mask, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, None], name='x2_mask')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_263": {
                "variable": {
                    "value": "attention_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x1, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int64, shape=[None, None], name='x1')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(x2, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_267": {
                "variable": {
                    "value": "attention_weight_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_weight - tf.reduce_max(attention_weight, axis=2, keepdims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_273": {
                "variable": {
                    "value": "x1_dual",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(x2, 1) * tf.expand_dims(alpha, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_275": {
                "variable": {
                    "value": "x1_dual",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x1_dual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(x2, 1) * tf.expand_dims(alpha, -1), 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x1_dual, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_279": {
                "variable": {
                    "value": "attention_weight_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(attention_weight_1, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_286": {
                "variable": {
                    "value": "x2_dual",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(x1, 1) * tf.expand_dims(beta, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_288": {
                "variable": {
                    "value": "x2_dual",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x2_dual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.expand_dims(x1, 1) * tf.expand_dims(beta, -1), 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2_dual, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_309": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_310": {
                "variable": {
                    "value": "x1_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x1_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_311": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_312": {
                "variable": {
                    "value": "x2_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x2_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_313": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_314": {
                "variable": {
                    "value": "keep_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_317": {
                "variable": {
                    "value": "emb1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', shape=[FLAGS.vocab_size, FLAGS.dim_word], initializer=tf.constant_initializer(numpy.array(embedding_np)), trainable=not FLAGS.fix_embedding)",
                            "Call"
                        ],
                        [
                            "load_word_embedding(token_to_idx)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x1, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int64, shape=[None, None], name='x1')",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_318": {
                "variable": {
                    "value": "emb2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', shape=[FLAGS.vocab_size, FLAGS.dim_word], initializer=tf.constant_initializer(numpy.array(embedding_np)), trainable=not FLAGS.fix_embedding)",
                            "Call"
                        ],
                        [
                            "load_word_embedding(token_to_idx)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x2, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int64, shape=[None, None], name='x2')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_320": {
                "variable": {
                    "value": "emb1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "emb1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, x1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(emb1, keep_rate)",
                            "Call"
                        ],
                        [
                            "emb1 * tf.expand_dims(x1_mask, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [], name='keep_rate')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_321": {
                "variable": {
                    "value": "emb2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "emb2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, x2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(emb2, keep_rate)",
                            "Call"
                        ],
                        [
                            "emb2 * tf.expand_dims(x2_mask, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [], name='keep_rate')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_341": {
                "variable": {
                    "value": "x1_match",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x1_enc, x1_dual, x1_enc * x1_dual, x1_enc - x1_dual]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_342": {
                "variable": {
                    "value": "x2_match",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x2_enc, x2_dual, x2_enc * x2_dual, x2_enc - x2_dual]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_357": {
                "variable": {
                    "value": "x1_match_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1_match_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x1_match, FLAGS.hidden_size, activation=tf.nn.relu, name='fnn', kernel_initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x1_match_mapping, keep_rate)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [], name='keep_rate')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_358": {
                "variable": {
                    "value": "x2_match_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x2_match_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(x2_match, FLAGS.hidden_size, activation=tf.nn.relu, name='fnn', kernel_initializer=tf.truncated_normal_initializer(stddev=0.02), reuse=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x2_match_mapping, keep_rate)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [], name='keep_rate')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_371": {
                "variable": {
                    "value": "logit_x1_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x1_cmp * tf.expand_dims(x1_mask, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_374": {
                "variable": {
                    "value": "logit_x2_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x2_cmp * tf.expand_dims(x2_mask, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_376": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[logit_x1_sum, logit_x1_max, logit_x2_sum, logit_x2_max]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_651": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cost_op",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_653": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_655": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, name='learning_rate', trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_659": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_668": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_669": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_346": {
                "variable": {
                    "value": "x1_match_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x1_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x1_enc, x1_dual, x1_enc * x1_dual, x1_enc - x1_dual], 2)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "FLAGS.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "fnn",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_350": {
                "variable": {
                    "value": "x2_match_mapping",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x2_match",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x2_enc, x2_dual, x2_enc * x2_dual, x2_enc - x2_dual], 2)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "FLAGS.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "fnn",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_380": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([logit_x1_sum, logit_x1_max, logit_x2_sum, logit_x2_max], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logit, keep_rate)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logit, FLAGS.hidden_size, activation=tf.nn.tanh, name='fnn1', kernel_initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logit, keep_rate)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logit, FLAGS.num_labels, activation=None, name='fnn2', kernel_initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [], name='keep_rate')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_381": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([logit_x1_sum, logit_x1_max, logit_x2_sum, logit_x2_max], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logit, keep_rate)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logit, FLAGS.hidden_size, activation=tf.nn.tanh, name='fnn1', kernel_initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logit, keep_rate)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logit, FLAGS.num_labels, activation=None, name='fnn2', kernel_initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "FLAGS.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "fnn1",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_386": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([logit_x1_sum, logit_x1_max, logit_x2_sum, logit_x2_max], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logit, keep_rate)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logit, FLAGS.hidden_size, activation=tf.nn.tanh, name='fnn1', kernel_initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logit, keep_rate)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logit, FLAGS.num_labels, activation=None, name='fnn2', kernel_initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [], name='keep_rate')",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_388": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([logit_x1_sum, logit_x1_max, logit_x2_sum, logit_x2_max], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logit, keep_rate)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logit, FLAGS.hidden_size, activation=tf.nn.tanh, name='fnn1', kernel_initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logit, keep_rate)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logit, FLAGS.num_labels, activation=None, name='fnn2', kernel_initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "FLAGS.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "fnn2",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_393": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.zeros((maxlen_2, n_samples)).astype('int64')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int64, shape=[None], name='y')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([logit_x1_sum, logit_x1_max, logit_x2_sum, logit_x2_max], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logit, keep_rate)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logit, FLAGS.hidden_size, activation=tf.nn.tanh, name='fnn1', kernel_initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logit, keep_rate)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logit, FLAGS.num_labels, activation=None, name='fnn2', kernel_initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_395": {
                "variable": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([logit_x1_sum, logit_x1_max, logit_x2_sum, logit_x2_max], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logit, keep_rate)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logit, FLAGS.hidden_size, activation=tf.nn.tanh, name='fnn1', kernel_initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(logit, keep_rate)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logit, FLAGS.num_labels, activation=None, name='fnn2', kernel_initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ]
                    ]
                }
            },
            "info_564": {
                "msg": {
                    "value": "seen samples %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "n_done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "n_done + len(instance)",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "set_verbosity_618": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_621": {
                "msg": {
                    "value": "***** Loading Vocabulary *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MakeDirs_624": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_627": {
                "msg": {
                    "value": "***** Loading Text Iterator *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_645": {
                "msg": {
                    "value": "***** Initialize Word Embedding *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_649": {
                "msg": {
                    "value": "***** Build Computation Graph *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_657": {
                "msg": {
                    "value": "***** Trainable Variables *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_664": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(cost_op, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "FLAGS.clip_c",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_785": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "bilstm",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_188": {
                "variable": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "rnn_size",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DropoutWrapper_190": {
                "variable": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(rnn_size, initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_fw, input_keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTMCell_192": {
                "variable": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "rnn_size",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DropoutWrapper_194": {
                "variable": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(rnn_size, initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_bw, input_keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bidirectional_dynamic_rnn_196": {
                "variable": {
                    "value": "(outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(rnn_size, initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_fw, input_keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(rnn_size, initializer=tf.truncated_normal_initializer(stddev=0.02))",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.DropoutWrapper(cell_bw, input_keep_prob=keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_data",
                            "variable"
                        ],
                        [
                            "tf.transpose(output, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat(outputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_202": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_263": {
                "a": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x2, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int64, shape=[None, None], name='x2')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_269": {
                "input": {
                    "value": "x2_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x2_mask, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, None], name='x2_mask')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_278": {
                "input_tensor": {
                    "value": "attention_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x1, tf.transpose(x2, [0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_279": {
                "a": {
                    "value": "attention_weight_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_weight - tf.reduce_max(attention_weight, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.transpose(attention_weight_1, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "attention_weight_1 * tf.expand_dims(x1_mask, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_280": {
                "input": {
                    "value": "x1_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x1_mask, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, None], name='x1_mask')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_323": {
                "input": {
                    "value": "x1_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x1_mask, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, None], name='x1_mask')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_324": {
                "input": {
                    "value": "x2_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x2_mask, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, None], name='x2_mask')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_327": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_335": {
                "input": {
                    "value": "x1_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x1_mask, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, None], name='x1_mask')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_336": {
                "input": {
                    "value": "x2_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x2_mask, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, None], name='x2_mask')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_345": {
                "name_or_scope": {
                    "value": "projection",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_361": {
                "name_or_scope": {
                    "value": "composition",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_369": {
                "input_tensor": {
                    "value": "x1_cmp * tf.expand_dims(x1_mask, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_370": {
                "input": {
                    "value": "tf.reduce_sum(x1_mask, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_372": {
                "input_tensor": {
                    "value": "x2_cmp * tf.expand_dims(x2_mask, -1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_373": {
                "input": {
                    "value": "tf.reduce_sum(x2_mask, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_379": {
                "name_or_scope": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_661": {
                "msg": {
                    "value": " name = %s, shape = %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_672": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_752": {
                "msg": {
                    "value": "***** Final Result ***** ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_753": {
                "msg": {
                    "value": "restore best model at epoch %s ",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "best_epoch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eidx",
                            "variable"
                        ]
                    ]
                }
            },
            "info_760": {
                "msg": {
                    "value": "valid set: MAP %s MRR %s Precision@1 %s Recall@1 %s Recall@2 %s Recall@5 %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "*valid_metrics",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "info_765": {
                "msg": {
                    "value": "test set: MAP %s MRR %s Precision@1 %s Recall@1 %s Recall@2 %s Recall@5 %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "*test_metrics",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "info_770": {
                "msg": {
                    "value": "train set: ACC %s Cost %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "train_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "train_cost",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_774": {
                "msg": {
                    "value": "training epochs: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "eidx + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_775": {
                "msg": {
                    "value": "training duration: %s hours",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "ud_whole",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(time.time() - ud_start_whole) / 3600",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "'bilstm_{}'.format(layer)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_233": {
                "value": {
                    "value": "numpy.array(embedding_np)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_268": {
                "input_tensor": {
                    "value": "attention_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x1, tf.transpose(x2, [0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_271": {
                "input_tensor": {
                    "value": "attention_weight_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(attention_weight - tf.reduce_max(attention_weight, axis=2, keepdims=True))",
                            "Call"
                        ],
                        [
                            "attention_weight_2 * tf.expand_dims(x2_mask, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_273": {
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_weight_2 / (tf.reduce_sum(attention_weight_2, -1, keepdims=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_284": {
                "input_tensor": {
                    "value": "attention_weight_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_weight - tf.reduce_max(attention_weight, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.exp(tf.transpose(attention_weight_1, [0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "attention_weight_1 * tf.expand_dims(x1_mask, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_286": {
                "input": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_weight_1 / (tf.reduce_sum(attention_weight_1, -1, keepdims=True) + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_370": {
                "input_tensor": {
                    "value": "x1_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x1_mask, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, None], name='x1_mask')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_371": {
                "input": {
                    "value": "x1_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x1_mask, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, None], name='x1_mask')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_373": {
                "input_tensor": {
                    "value": "x2_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x2_mask, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, None], name='x2_mask')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_374": {
                "input": {
                    "value": "x2_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x2_mask, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, None], name='x2_mask')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gradients_665": {
                "ys": {
                    "value": "cost_op",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_680": {
                "ref": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, name='learning_rate', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "current_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.learning_rate",
                            "Attribute"
                        ],
                        [
                            "current_lr * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_683": {
                "msg": {
                    "value": "***** Training at Epoch %s *****",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "eidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(FLAGS.max_train_epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_709": {
                "msg": {
                    "value": "***** Evaluation at Epoch %s *****",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "eidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(FLAGS.max_train_epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_710": {
                "msg": {
                    "value": "seen samples %s each epoch",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(seqs_x)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "n_samples + len(instance)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_711": {
                "msg": {
                    "value": "current learning rate: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "current_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.learning_rate",
                            "Attribute"
                        ],
                        [
                            "current_lr * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_721": {
                "msg": {
                    "value": "valid set: MAP %s MRR %s Precision@1 %s Recall@1 %s Recall@2 %s Recall@5 %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "*valid_metrics",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "info_727": {
                "msg": {
                    "value": "test set: MAP %s MRR %s Precision@1 %s Recall@1 %s Recall@2 %s Recall@5 %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "*test_metrics",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_349": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_353": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_369": {
                "input": {
                    "value": "x1_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x1_mask, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, None], name='x1_mask')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_372": {
                "input": {
                    "value": "x2_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x2_mask, [1, 0])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, None], name='x2_mask')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_384": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_391": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConfigProto_672": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "info_732": {
                "msg": {
                    "value": "saving current best model at epoch %s based on metrics on valid set",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "best_epoch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eidx",
                            "variable"
                        ]
                    ]
                }
            },
            "info_739": {
                "msg": {
                    "value": "bad_counter: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "bad_counter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "bad_counter + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_743": {
                "msg": {
                    "value": "half the current learning rate to %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "current_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.learning_rate",
                            "Attribute"
                        ],
                        [
                            "current_lr * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "info_747": {
                "msg": {
                    "value": "***** Early Stop *****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_189": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_193": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "info_693": {
                "msg": {
                    "value": "Minibatch with zero sample",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_706": {
                "msg": {
                    "value": "epoch %s update %s loss %s samples/sec %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "eidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(FLAGS.max_train_epochs)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "uidx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "uidx - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_742": {
                "ref": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, name='learning_rate', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "current_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.learning_rate",
                            "Attribute"
                        ],
                        [
                            "current_lr * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}