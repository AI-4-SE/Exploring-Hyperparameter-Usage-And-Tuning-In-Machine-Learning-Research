{
    "models/dense_heads/custom_centernet_head.py": {
        "torch": {
            "ModuleList_107": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Scale(scale=1.0) for _ in range(self.num_features)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.out_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.out_kernel // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_200": {
                "variable": {
                    "value": "bbox_reg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bbox_pred(bbox_tower)",
                            "Call"
                        ],
                        [
                            "self.scales[i](reg)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_241": {
                "variable": {
                    "value": "flatten_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points.repeat(len(img_metas), 1) for points in grids]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_265": {
                "variable": {
                    "value": "num_pos_local",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "len(pos_inds)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "reg_pred[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_270": {
                "variable": {
                    "value": "reg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg_targets.max(dim=1)[0] >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_270": {
                "variable": {
                    "value": "reg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_343": {
                "variable": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shapes_per_level.new_ones(num_loc_list[l_]) * self.strides[l_] for l_ in range(L)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_347": {
                "variable": {
                    "value": "reg_size_ranges",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shapes_per_level.new_tensor(self.sizes_of_interest[l_]).float().view(1, 2).expand(num_loc_list[l_], 2) for l_ in range(L)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_349": {
                "variable": {
                    "value": "grids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.compute_grids(agn_hm_pred_per_level)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(grids, dim=0)",
                            "Call"
                        ],
                        [
                            "self.compute_grids(agn_hm_pred)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_431": {
                "variable": {
                    "value": "reg_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x for x in reg_targets]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_432": {
                "variable": {
                    "value": "flattened_hms",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x for x in flattened_hms]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_474": {
                "variable": {
                    "value": "pos_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._get_label_inds(gt_bboxes, shapes_per_level)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_inds, dim=0).long()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_547": {
                "variable": {
                    "value": "heatmaps[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-dist.min(dim=1)[0]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_554": {
                "variable": {
                    "value": "reg_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.permute(0, 2, 3, 1).reshape(-1, 4) for x in reg_pred]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isfinite_264": {
                "input": {
                    "value": "reg_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reg_pred[reg_inds]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([x.permute(0, 2, 3, 1).reshape(-1, 4) for x in reg_pred], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "all_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_305": {
                "variable": {
                    "value": "shifts_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w * self.strides[level]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "self.strides[level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "agn_hm_pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_309": {
                "variable": {
                    "value": "shifts_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h * self.strides[level]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "self.strides[level]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "agn_hm_pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_313": {
                "variable": {
                    "value": "(shift_y, shift_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "shifts_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(0, h * self.strides[level], step=self.strides[level], dtype=torch.float32, device=agn_hm_pred.device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "shifts_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(0, w * self.strides[level], step=self.strides[level], dtype=torch.float32, device=agn_hm_pred.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_370": {
                "variable": {
                    "value": "reg_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[l, t, r, b]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_391": {
                "variable": {
                    "value": "radius2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "radius2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.delta ** 2 * 2 * area",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(radius2, min=self.min_radius ** 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.min_radius ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_409": {
                "variable": {
                    "value": "reg_targets[im_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "reg_targets[im_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "num_loc_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[len(loc) for loc in grids]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_420": {
                "variable": {
                    "value": "flattened_hms[im_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flattened_hms[im_i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "num_loc_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[len(loc) for loc in grids]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_579": {
                "variable": {
                    "value": "heatmap_nms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmap",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "heatmap * (heatmap_nms == heatmap).float()",
                            "BinOp"
                        ],
                        [
                            "heatmap.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "heatmap.reshape(N, -1, C)",
                            "Call"
                        ],
                        [
                            "heatmap * agn_hm[:, :, None]",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_625": {
                "variable": {
                    "value": "detections[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "detections[:, 2].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_627": {
                "variable": {
                    "value": "detections[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "detections[:, 3].clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_631": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sqrt(per_box_cls) if self.with_agn_hm else per_box_cls",
                            "IfExp"
                        ],
                        [
                            "torch.unsqueeze(scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_632": {
                "variable": {
                    "value": "boxlist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[detections, scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kthvalue_650": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "num_dets - post_nms_topk + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_655": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "keep[:max_proposals]",
                            "Subscript"
                        ],
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep, as_tuple=False).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_655": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_556": {
                "tensors": {
                    "value": "[x.permute(0, 2, 3, 1).reshape(-1) for x in agn_hm_pred]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_568": {
                "tensors": {
                    "value": "boxlist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([detections, scores], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_138": {
                "*args": {
                    "value": "*tower",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "stack_316": {
                "tensors": {
                    "value": "(shift_x, shift_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_415": {
                "tensors": {
                    "value": "targets_per_level",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "zip(*reg_targets)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_426": {
                "tensors": {
                    "value": "hms_per_level",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "zip(*flattened_hms)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_629": {
                "input": {
                    "value": "per_box_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "heatmap[i]",
                            "Subscript"
                        ],
                        [
                            "per_box_cls[per_candidate_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_135": {
                "num_groups": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channels[head]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models/losses/gaussian_focal_loss.py": {
        "torch": {
            "clamp_55": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred.sigmoid_()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "sigmoid_clamp",
                    "type": "Variable",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - sigmoid_clamp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_56": {
                "variable": {
                    "value": "neg_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - gaussian_target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_58": {
                "input": {
                    "value": "pos_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred[pos_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_58": {
                "input": {
                    "value": "1 - pos_pred",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4.0",
                            "MethodArgument"
                        ],
                        [
                            "4.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_59": {
                "input": {
                    "value": "1 - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_59": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(pred.sigmoid_(), min=sigmoid_clamp, max=1 - sigmoid_clamp)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4.0",
                            "MethodArgument"
                        ],
                        [
                            "4.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/roi_heads/custom_cascade_roi_head.py": {
        "torch": {
            "ModuleList_91": {
                "variable": {
                    "value": "self.mask_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "pos_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.pos_gt_labels for res in sampling_results]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_336": {
                "variable": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.bbox_head[i].regress_by_class(rois[j], bbox_label[j], bbox_pred[j], img_metas[j]) for j in range(num_imgs)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "where_288": {
                "variable": {
                    "value": "roi_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "roi_labels == self.bbox_head[i].num_classes",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_score[:, :-1].argmax(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "roi_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_results['bbox_targets'][0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(roi_labels == self.bbox_head[i].num_classes, cls_score[:, :-1].argmax(1), roi_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_386": {
                "ndarray": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ],
                        [
                            "img_meta[0]['scale_factor']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}