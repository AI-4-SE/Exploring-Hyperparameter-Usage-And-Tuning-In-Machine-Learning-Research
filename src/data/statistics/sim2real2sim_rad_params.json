{
    "TransformLayer.py": {
        "torch": {
            "zeros_21": {
                "variable": {
                    "value": "hue",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(rgb.shape[0], rgb.shape[2], rgb.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_47": {
                "variable": {
                    "value": "hsv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hsv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(hsv, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_56": {
                "variable": {
                    "value": "rgb_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hsv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(hsv, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_38": {
                "tensors": {
                    "value": "(hue, saturation, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_85": {
                "input": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb_prime + torch.cat((m, m, m), dim=1)",
                            "BinOp"
                        ],
                        [
                            "rgb.to(_device)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_127": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb.device",
                            "Attribute"
                        ],
                        [
                            "hsv.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mean_129": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-c * (torch.abs(hue / 60.0 % 2 - 1) - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_135": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb.device",
                            "Attribute"
                        ],
                        [
                            "hsv.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_155": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb.device",
                            "Attribute"
                        ],
                        [
                            "hsv.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clamp_157": {
                "variable": {
                    "value": "x[:, 2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, 2, :, :] * factor.view(len(x), 1, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_173": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rgb.device",
                            "Attribute"
                        ],
                        [
                            "hsv.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "x.device",
                            "Attribute"
                        ],
                        [
                            "inputs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clamp_175": {
                "variable": {
                    "value": "x[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, 1, :, :] * factor.view(len(x), 1, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "random_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice([True, False], len(inputs), p=[self.prob, 1 - self.prob])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_82": {
                "tensors": {
                    "value": "(m, m, m)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_130": {
                "input": {
                    "value": "(x - means) * factor.view(len(x), 1, 1, 1) + means",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_159": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-c * (torch.abs(hue / 60.0 % 2 - 1) - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_177": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-c * (torch.abs(hue / 60.0 % 2 - 1) - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_53": {
                "input": {
                    "value": "hue / 60.0 % 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "curl_sac.py": {
        "torch": {
            "tanh_25": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(mu)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_27": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(pi)",
                            "Call"
                        ],
                        [
                            "mu + noise * std",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.encoder.feature_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_81": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(log_std)",
                            "Call"
                        ],
                        [
                            "self.log_std_min + 0.5 * (self.log_std_max - self.log_std_min) * (log_std + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(obs_dim + action_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "obs_action",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_197": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(z_dim, z_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_224": {
                "variable": {
                    "value": "Wz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "z_pos.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_225": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.CURL.encode(obs_anchor)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Wz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.W, z_pos.T)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_319": {
                "variable": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "np.log(init_temperature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_325": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "actor_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(actor_beta, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_329": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "critic_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(critic_beta, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_333": {
                "variable": {
                    "value": "self.log_alpha_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.log_alpha]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "alpha_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(alpha_beta, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_350": {
                "variable": {
                    "value": "self.cross_entropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_413": {
                "variable": {
                    "value": "actor_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actor_Q1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_446": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "logits.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_29": {
                "input": {
                    "value": "F.relu(1 - pi.pow(2)) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_29": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_like_91": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(mu)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_343": {
                "variable": {
                    "value": "self.encoder_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic.encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "encoder_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_347": {
                "variable": {
                    "value": "self.cpc_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.CURL.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "encoder_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_489": {
                "obj": {
                    "value": "self.actor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/actor_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_492": {
                "obj": {
                    "value": "self.critic.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/critic_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_495": {
                "obj": {
                    "value": "self.actor_optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/actor_optimizer_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_498": {
                "obj": {
                    "value": "self.critic_optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/critic_optimizer_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_501": {
                "obj": {
                    "value": "self.log_alpha_optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/log_alpha_optimizer_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "self.encoder.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * action_shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "in_features": {
                    "value": "obs_dim + action_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_124": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_197": {
                "*size": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_396": {
                "input": {
                    "value": "current_Q1",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward + not_done * self.discount * target_V",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mse_loss_397": {
                "input": {
                    "value": "current_Q2",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward + not_done * self.discount * target_V",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_507": {
                "obj": {
                    "value": "self.CURL.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/curl_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_510": {
                "obj": {
                    "value": "self.encoder_optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/encoder_optimizer_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_513": {
                "obj": {
                    "value": "self.cpc_optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/cpc_optimizer_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_519": {
                "f": {
                    "value": "'%s/actor_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_522": {
                "f": {
                    "value": "'%s/critic_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_525": {
                "f": {
                    "value": "'%s/actor_optimizer_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_528": {
                "f": {
                    "value": "'%s/critic_optimizer_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_531": {
                "f": {
                    "value": "'%s/log_alpha_optimizer_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_389": {
                "input": {
                    "value": "target_Q1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_537": {
                "f": {
                    "value": "'%s/curl_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_540": {
                "f": {
                    "value": "'%s/encoder_optimizer_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_543": {
                "f": {
                    "value": "'%s/cpc_optimizer_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_226": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(z_a, Wz)",
                            "Call"
                        ],
                        [
                            "logits - torch.max(logits, 1)[0][:, None]",
                            "BinOp"
                        ],
                        [
                            "self.CURL.compute_logits(z_a, z_pos)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_29": {
                "input": {
                    "value": "1 - pi.pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "data_augs.py": {
        "torch": {
            "from_numpy_75": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnd <= p",
                            "Compare"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask[:, None] * torch.ones([1, frames]).type(mask.dtype)",
                            "BinOp"
                        ],
                        [
                            "mask.type(images.dtype).to(device)",
                            "Call"
                        ],
                        [
                            "mask[:, :, None, None, None]",
                            "Subscript"
                        ],
                        [
                            "rnd <= p",
                            "Compare"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask[:, None] * torch.ones([1, frames]).type(mask.dtype)",
                            "BinOp"
                        ],
                        [
                            "mask.type(images.dtype).to(device)",
                            "Call"
                        ],
                        [
                            "mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "rnd <= p",
                            "Compare"
                        ],
                        [
                            "rnd_rot * mask",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(mask).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_153": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnd <= p",
                            "Compare"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask[:, None] * torch.ones([1, frames]).type(mask.dtype)",
                            "BinOp"
                        ],
                        [
                            "mask.type(images.dtype).to(device)",
                            "Call"
                        ],
                        [
                            "mask[:, :, None, None, None]",
                            "Subscript"
                        ],
                        [
                            "rnd <= p",
                            "Compare"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask[:, None] * torch.ones([1, frames]).type(mask.dtype)",
                            "BinOp"
                        ],
                        [
                            "mask.type(images.dtype).to(device)",
                            "Call"
                        ],
                        [
                            "mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "rnd <= p",
                            "Compare"
                        ],
                        [
                            "rnd_rot * mask",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(mask).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_190": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnd <= p",
                            "Compare"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask[:, None] * torch.ones([1, frames]).type(mask.dtype)",
                            "BinOp"
                        ],
                        [
                            "mask.type(images.dtype).to(device)",
                            "Call"
                        ],
                        [
                            "mask[:, :, None, None, None]",
                            "Subscript"
                        ],
                        [
                            "rnd <= p",
                            "Compare"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask[:, None] * torch.ones([1, frames]).type(mask.dtype)",
                            "BinOp"
                        ],
                        [
                            "mask.type(images.dtype).to(device)",
                            "Call"
                        ],
                        [
                            "mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "rnd <= p",
                            "Compare"
                        ],
                        [
                            "rnd_rot * mask",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(mask).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_221": {
                "variable": {
                    "value": "rand_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_242": {
                "variable": {
                    "value": "transform_module",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ColorJitterLayer(brightness=0.4, contrast=0.4, saturation=0.4, hue=0.5, p=1.0, batch_size=128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_271": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_273": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load('data_sample.npy', allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "np.concatenate([x, x, x], 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x).to(device)",
                            "Call"
                        ],
                        [
                            "x.float() / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_54": {
                "*size": {
                    "value": "[1, 1, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "imgs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_78": {
                "*size": {
                    "value": "[1, frames]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_156": {
                "*size": {
                    "value": "[1, frames]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_193": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnd <= p",
                            "Compare"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask[:, None] * torch.ones([1, frames]).type(mask.dtype)",
                            "BinOp"
                        ],
                        [
                            "mask.type(images.dtype).to(device)",
                            "Call"
                        ],
                        [
                            "mask[:, :, None, None, None]",
                            "Subscript"
                        ],
                        [
                            "rnd <= p",
                            "Compare"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask[:, None] * torch.ones([1, frames]).type(mask.dtype)",
                            "BinOp"
                        ],
                        [
                            "mask.type(images.dtype).to(device)",
                            "Call"
                        ],
                        [
                            "mask[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "rnd <= p",
                            "Compare"
                        ],
                        [
                            "rnd_rot * mask",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(mask).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_231": {
                "variable": {
                    "value": "total_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(total_out, rand_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_195": {
                "condition": {
                    "value": "mask == i",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_196": {
                "*size": {
                    "value": "[1, frames]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "encoder.py": {
        "torch": {
            "ModuleList_30": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(obs_shape[0], num_filters, 3, stride=2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters * out_dim * out_dim",
                            "BinOp"
                        ],
                        [
                            "fc_input_dim + embedding_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_44": {
                "variable": {
                    "value": "self.ln",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_51": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_like_52": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(logstd)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_60": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convs[0](obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.convs[i](conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_71": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv.flatten(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_79": {
                "variable": {
                    "value": "y_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward_conv(obs)",
                            "Call"
                        ],
                        [
                            "h.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "repeat_interleave_79": {
                "variable": {
                    "value": "y_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "y_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_80": {
                "variable": {
                    "value": "x_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "x_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_82": {
                "variable": {
                    "value": "avg_x_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights * x_pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_83": {
                "variable": {
                    "value": "avg_y_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights * y_pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features, avg_x_pos, avg_y_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_109": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ln(h_fc)",
                            "Call"
                        ],
                        [
                            "h_fc",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "obs_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "logger.py": {
        "torch": {
            "SummaryWriter_98": {
                "variable": {
                    "value": "self._sw",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "tb_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(log_dir, 'tb')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(frames)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "positional_encoding.py": {
        "torch": {
            "set_detect_anomaly_4": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_9": {
                "input": {
                    "value": "(x - y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_10": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_34": {
                "variable": {
                    "value": "freq_bands",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "2.0 ** 0.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "2.0 ** max_freq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "N_freqs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kwargs['num_freqs']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_45": {
                "tensors": {
                    "value": "[fn(inputs) for fn in self.embed_fns]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Identity_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_32": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "max_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kwargs['max_freq_log2']",
                            "Subscript"
                        ]
                    ]
                },
                "steps": {
                    "value": "N_freqs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kwargs['num_freqs']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "sim_param_model.py": {
        "torch": {
            "Adam_113": {
                "variable": {
                    "value": "self.sim_param_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.trunk.parameters())",
                            "Call"
                        ],
                        [
                            "parameters + list(self.encoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "sim_param_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(sim_param_beta, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_133": {
                "variable": {
                    "value": "self.feature_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.encoder(img, detach=True) for img in input]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(features, dim=1)",
                            "Call"
                        ],
                        [
                            "self.encoder(input, detach=self.share_encoder)",
                            "Call"
                        ],
                        [
                            "features / torch.norm(features).detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_229": {
                "variable": {
                    "value": "full_action_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "full_action_traj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(full_action_traj)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_230": {
                "variable": {
                    "value": "full_state_traj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "full_state_traj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(full_state_traj)",
                            "Call"
                        ]
                    ]
                }
            },
            "Bernoulli_250": {
                "variable": {
                    "value": "pred_class",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([trunk(fake_pred) for trunk in self.trunk], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.trunk(fake_pred)",
                            "Call"
                        ],
                        [
                            "torch.cat([trunk(fake_pred) for trunk in self.trunk], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.trunk(fake_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_277": {
                "variable": {
                    "value": "dist_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[low, high, dist_mean]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_282": {
                "variable": {
                    "value": "shuffled_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.randperm(len(fake_pred) - 1) for _ in range(len(sim_params))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "shuffled_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shuffled_indices, dist_mean_indices]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_287": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(fake_pred > sim_params.unsqueeze(0).to(self.device)).long()",
                            "Call"
                        ],
                        [
                            "torch.gather(labels, 0, shuffled_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "shuffled_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.randperm(len(fake_pred) - 1) for _ in range(len(sim_params))], dim=1).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([shuffled_indices, dist_mean_indices])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_288": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([feat.squeeze(), full_action_traj[0], full_state_traj[0]], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([full_action_traj[0], full_state_traj[0]], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([encoded_pred_labels.repeat(B_traj, 1), feat.repeat(B_label, 1), full_action_traj.repeat(B_label, 1), full_state_traj.repeat(B_label, 1)], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([encoded_pred_labels.repeat(B_traj, 1), full_action_traj.repeat(B_label, 1), full_state_traj.repeat(B_label, 1)], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([low, high, dist_mean], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.gather(fake_pred, 0, shuffled_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "shuffled_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([torch.randperm(len(fake_pred) - 1) for _ in range(len(sim_params))], dim=1).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([shuffled_indices, dist_mean_indices])",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_77": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "trunk_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trunk",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat([o for o in traj], dim=0) for traj in obs_traj]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.encoder(img, detach=True) for img in input]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(features, dim=1)",
                            "Call"
                        ],
                        [
                            "self.encoder(input, detach=self.share_encoder)",
                            "Call"
                        ],
                        [
                            "features / torch.norm(features).detach()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat.squeeze(), full_action_traj[0], full_state_traj[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[full_action_traj[0], full_state_traj[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[trunk(fake_pred) for trunk in self.trunk]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_186": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([trunk(fake_pred) for trunk in self.trunk], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.trunk(fake_pred)",
                            "Call"
                        ],
                        [
                            "torch.cat([trunk(fake_pred) for trunk in self.trunk], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.trunk(fake_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_237": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_pred_labels.repeat(B_traj, 1), feat.repeat(B_label, 1), full_action_traj.repeat(B_label, 1), full_state_traj.repeat(B_label, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "fake_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_pred_labels.repeat(B_traj, 1), full_action_traj.repeat(B_label, 1), full_state_traj.repeat(B_label, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[trunk(fake_pred) for trunk in self.trunk]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_264": {
                "variable": {
                    "value": "low_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_params - dist_range",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                },
                "max": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_418": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/sim_param_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_421": {
                "obj": {
                    "value": "self.sim_param_optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/sim_param_optimizer_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_284": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "len(distribution_mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCELoss_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_427": {
                "f": {
                    "value": "'%s/sim_param_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_430": {
                "f": {
                    "value": "'%s/sim_param_optimizer_%s.pt' % (model_dir, step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "trunk_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_sim_param_dim + state_dim * num_frames + action_space_dim * num_frames * frame_skip",
                            "BinOp"
                        ],
                        [
                            "encoder_dims + pred_sim_param_dim + state_dim * num_frames + action_space_dim * num_frames * frame_skip",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self._units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "self._units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_sim_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "variable"
                        ]
                    ]
                }
            },
            "norm_135": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.encoder(img, detach=True) for img in input]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(features, dim=1)",
                            "Call"
                        ],
                        [
                            "self.encoder(input, detach=self.share_encoder)",
                            "Call"
                        ],
                        [
                            "features / torch.norm(features).detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_167": {
                "tensors": {
                    "value": "state_traj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_traj[::self.frame_skip]",
                            "Subscript"
                        ],
                        [
                            "state_traj[::self.frame_skip]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "action_traj",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_217": {
                "tensors": {
                    "value": "state_traj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_traj[::self.frame_skip]",
                            "Subscript"
                        ],
                        [
                            "state_traj[::self.frame_skip]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_218": {
                "tensors": {
                    "value": "action_traj",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "trunk_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_sim_param_dim + state_dim * num_frames + action_space_dim * num_frames * frame_skip",
                            "BinOp"
                        ],
                        [
                            "encoder_dims + pred_sim_param_dim + state_dim * num_frames + action_space_dim * num_frames * frame_skip",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self._units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "self._units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "*args": {
                    "value": "*trunk",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "self._units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_85": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_125": {
                "tensors": {
                    "value": "[o for o in traj]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_347": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_72": {
                "in_features": {
                    "value": "self._units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_74": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randperm_282": {
                "n": {
                    "value": "len(fake_pred) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_295": {
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "round_296": {
                "input": {
                    "value": "pred_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.distributions.bernoulli.Bernoulli(logits=x)",
                            "Call"
                        ],
                        [
                            "pred_class.mean",
                            "Attribute"
                        ],
                        [
                            "self.forward_classifier([obs_traj], fake_pred)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "device_49": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_rope.py": {
        "torch": {
            "device_113": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_722": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_315": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_317": {
                "variable": {
                    "value": "current_sim_params",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_327": {
                "variable": {
                    "value": "current_sim_params",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_722": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "manual_seed_38": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "floor_65": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs / 2 ** (8 - bits)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_179": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.actions[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_180": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.rewards[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_181": {
                "variable": {
                    "value": "not_dones",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.not_dones[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_247": {
                "variable": {
                    "value": "obses_img",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obses_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(self.obses['image'][idxs], device=self.device).float()",
                            "Call"
                        ],
                        [
                            "obses_dict",
                            "variable"
                        ],
                        [
                            "self.obses['image'][idxs]",
                            "Subscript"
                        ],
                        [
                            "random_crop(obses_img, self.image_size)",
                            "Call"
                        ],
                        [
                            "center_crop_image(obses_img, self.image_size)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(obses_img, device=self.device).float()",
                            "Call"
                        ],
                        [
                            "obses_dict",
                            "variable"
                        ],
                        [
                            "self.obses['image'][idxs]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(obses_img, device=self.device).float()",
                            "Call"
                        ],
                        [
                            "obses_img / 255.0",
                            "BinOp"
                        ],
                        [
                            "func(obses_img)",
                            "Call"
                        ],
                        [
                            "func(obses_img)",
                            "Call"
                        ],
                        [
                            "obses_dict",
                            "variable"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_248": {
                "variable": {
                    "value": "next_obses_img",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "next_obses_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(self.next_obses['image'][idxs], device=self.device).float()",
                            "Call"
                        ],
                        [
                            "next_obses_dict",
                            "variable"
                        ],
                        [
                            "self.next_obses['image'][idxs]",
                            "Subscript"
                        ],
                        [
                            "random_crop(next_obses_img, self.image_size)",
                            "Call"
                        ],
                        [
                            "center_crop_image(next_obses_img, self.image_size)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(next_obses_img, device=self.device).float()",
                            "Call"
                        ],
                        [
                            "next_obses_dict",
                            "variable"
                        ],
                        [
                            "self.next_obses['image'][idxs]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(next_obses_img, device=self.device).float()",
                            "Call"
                        ],
                        [
                            "next_obses_img / 255.0",
                            "BinOp"
                        ],
                        [
                            "func(next_obses_img)",
                            "Call"
                        ],
                        [
                            "func(next_obses_img)",
                            "Call"
                        ],
                        [
                            "next_obses_dict",
                            "variable"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_249": {
                "variable": {
                    "value": "obses_state",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obses_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(self.obses['state'][idxs], device=self.device).float()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.obses['state'][idxs]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(obses_state, device=self.device).float()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.obses['state'][idxs]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(obses_img, device=self.device).float()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_250": {
                "variable": {
                    "value": "next_obses_state",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "next_obses_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(self.next_obses['state'][idxs], device=self.device).float()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.next_obses['state'][idxs]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(next_obses_state, device=self.device).float()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.next_obses['state'][idxs]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(next_obses_img, device=self.device).float()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_251": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.actions[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_252": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.rewards[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_253": {
                "variable": {
                    "value": "not_dones",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.not_dones[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_255": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obses_img.copy()",
                            "Call"
                        ],
                        [
                            "random_crop(pos, self.image_size)",
                            "Call"
                        ],
                        [
                            "center_crop_image(pos, self.image_size)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(pos, device=self.device).float()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_327": {
                "variable": {
                    "value": "obses_img",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obses_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(self.obses['image'][idxs], device=self.device).float()",
                            "Call"
                        ],
                        [
                            "obses_dict",
                            "variable"
                        ],
                        [
                            "self.obses['image'][idxs]",
                            "Subscript"
                        ],
                        [
                            "random_crop(obses_img, self.image_size)",
                            "Call"
                        ],
                        [
                            "center_crop_image(obses_img, self.image_size)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(obses_img, device=self.device).float()",
                            "Call"
                        ],
                        [
                            "obses_dict",
                            "variable"
                        ],
                        [
                            "self.obses['image'][idxs]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(obses_img, device=self.device).float()",
                            "Call"
                        ],
                        [
                            "obses_img / 255.0",
                            "BinOp"
                        ],
                        [
                            "func(obses_img)",
                            "Call"
                        ],
                        [
                            "func(obses_img)",
                            "Call"
                        ],
                        [
                            "obses_dict",
                            "variable"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_328": {
                "variable": {
                    "value": "next_obses_img",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "next_obses_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(self.next_obses['image'][idxs], device=self.device).float()",
                            "Call"
                        ],
                        [
                            "next_obses_dict",
                            "variable"
                        ],
                        [
                            "self.next_obses['image'][idxs]",
                            "Subscript"
                        ],
                        [
                            "random_crop(next_obses_img, self.image_size)",
                            "Call"
                        ],
                        [
                            "center_crop_image(next_obses_img, self.image_size)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(next_obses_img, device=self.device).float()",
                            "Call"
                        ],
                        [
                            "next_obses_dict",
                            "variable"
                        ],
                        [
                            "self.next_obses['image'][idxs]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(next_obses_img, device=self.device).float()",
                            "Call"
                        ],
                        [
                            "next_obses_img / 255.0",
                            "BinOp"
                        ],
                        [
                            "func(next_obses_img)",
                            "Call"
                        ],
                        [
                            "func(next_obses_img)",
                            "Call"
                        ],
                        [
                            "next_obses_dict",
                            "variable"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_329": {
                "variable": {
                    "value": "obses_state",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "obses_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(self.obses['image'][idxs], device=self.device).float()",
                            "Call"
                        ],
                        [
                            "obses_dict",
                            "variable"
                        ],
                        [
                            "self.obses['image'][idxs]",
                            "Subscript"
                        ],
                        [
                            "random_crop(obses_img, self.image_size)",
                            "Call"
                        ],
                        [
                            "center_crop_image(obses_img, self.image_size)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(obses_img, device=self.device).float()",
                            "Call"
                        ],
                        [
                            "obses_dict",
                            "variable"
                        ],
                        [
                            "self.obses['image'][idxs]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(obses_img, device=self.device).float()",
                            "Call"
                        ],
                        [
                            "obses_img / 255.0",
                            "BinOp"
                        ],
                        [
                            "func(obses_img)",
                            "Call"
                        ],
                        [
                            "func(obses_img)",
                            "Call"
                        ],
                        [
                            "obses_dict",
                            "variable"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_330": {
                "variable": {
                    "value": "next_obses_state",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "next_obses_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(self.next_obses['image'][idxs], device=self.device).float()",
                            "Call"
                        ],
                        [
                            "next_obses_dict",
                            "variable"
                        ],
                        [
                            "self.next_obses['image'][idxs]",
                            "Subscript"
                        ],
                        [
                            "random_crop(next_obses_img, self.image_size)",
                            "Call"
                        ],
                        [
                            "center_crop_image(next_obses_img, self.image_size)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(next_obses_img, device=self.device).float()",
                            "Call"
                        ],
                        [
                            "next_obses_dict",
                            "variable"
                        ],
                        [
                            "self.next_obses['image'][idxs]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(next_obses_img, device=self.device).float()",
                            "Call"
                        ],
                        [
                            "next_obses_img / 255.0",
                            "BinOp"
                        ],
                        [
                            "func(next_obses_img)",
                            "Call"
                        ],
                        [
                            "func(next_obses_img)",
                            "Call"
                        ],
                        [
                            "next_obses_dict",
                            "variable"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_331": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.actions[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_332": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.rewards[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_333": {
                "variable": {
                    "value": "not_dones",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.not_dones[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_40": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_167": {
                "variable": {
                    "value": "obses_img",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.obses['image'][idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_168": {
                "variable": {
                    "value": "next_obses_img",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.next_obses['image'][idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_169": {
                "variable": {
                    "value": "obses_state",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.obses['state'][idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_170": {
                "variable": {
                    "value": "next_obses_state",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.next_obses['state'][idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_405": {
                "obj": {
                    "value": "payload",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sliced_obses, sliced_next_obses, self.actions[self.last_save:self.idx], self.rewards[self.last_save:self.idx], self.not_dones[self.last_save:self.idx], self.traj_ids[self.last_save:self.idx]]",
                            "List"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, '%d_%d.pt' % (self.last_save, self.idx))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, chunk)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_67": {
                "input": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(obs / 2 ** (8 - bits))",
                            "Call"
                        ],
                        [
                            "obs / bins",
                            "BinOp"
                        ],
                        [
                            "obs + torch.rand_like(obs) / bins",
                            "BinOp"
                        ],
                        [
                            "obs - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.obses[idx]",
                            "Subscript"
                        ],
                        [
                            "self.transform(obs)",
                            "Call"
                        ],
                        [
                            "self.env.reset()",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_175": {
                "variable": {
                    "value": "obses[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.obses[k][idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_177": {
                "variable": {
                    "value": "next_obses[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.next_obses[k][idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_187": {
                "variable": {
                    "value": "obses_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_189": {
                "variable": {
                    "value": "next_obses_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_263": {
                "variable": {
                    "value": "obses_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_265": {
                "variable": {
                    "value": "next_obses_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_351": {
                "variable": {
                    "value": "obses_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_353": {
                "variable": {
                    "value": "next_obses_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "v[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_416": {
                "variable": {
                    "value": "payload",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, '%d_%d.pt' % (self.last_save, self.idx))",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, chunk)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}