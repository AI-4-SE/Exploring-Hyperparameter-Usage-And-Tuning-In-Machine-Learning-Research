{
    "aae.py": {
        "tensorflow": {
            "flatten_45": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.flatten(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_56": {
                "variable": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "eps * tf.exp(0.5 * logvar) + mu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "z",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_59": {
                "variable": {
                    "value": "self.f_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-tf.reduce_sum(self.f(z_real) - self.f(z), -1)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "f_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_60": {
                "variable": {
                    "value": "self.g_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(-self.f(z), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "g_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_64": {
                "variable": {
                    "value": "gp_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(tf.norm(gradient_f, axis=-1) - 1, 0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "gp_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_66": {
                "variable": {
                    "value": "self.f_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "f",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_67": {
                "variable": {
                    "value": "self.g_vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_75": {
                "variable": {
                    "value": "kl_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(1 + logvar - mu * mu - tf.exp(logvar), -1)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reduce_mean(kl_loss, name='kl_loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "kl_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_77": {
                "variable": {
                    "value": "rec_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(rec - image), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "rec_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_52": {
                "variable": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "FullyConnected('fc_mu', x, 2, activation=None)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "mu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_72": {
                "variable": {
                    "value": "rec",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "FullyConnected('fc_rec', x, IMAGE_SIZE * IMAGE_SIZE, activation=tf.nn.sigmoid)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "rec",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_93": {
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('learning_rate', initializer=0.001, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_94": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('learning_rate', initializer=0.001, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_29": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, IMAGE_SIZE, IMAGE_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "label",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "f",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_60": {
                "input_tensor": {
                    "value": "-self.f(z)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stop_gradient_62": {
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(eps * tf.exp(0.5 * logvar) + mu, name='z')",
                            "Call"
                        ],
                        [
                            "self.encoder(img[None, ...])[0][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gradients_63": {
                "ys": {
                    "value": "self.f(z_interp)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "[z_interp]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_74": {
                "input_tensor": {
                    "value": "1 + logvar - mu * mu - tf.exp(logvar)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "input_tensor": {
                    "value": "tf.square(rec - image)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_120": {
                "name": {
                    "value": "optimize",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_59": {
                "input_tensor": {
                    "value": "self.f(z_real) - self.f(z)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_64": {
                "x": {
                    "value": "tf.norm(gradient_f, axis=-1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_77": {
                "x": {
                    "value": "rec - image",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_55": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FullyConnected('fc1', sample, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc2', x, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc1', image, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc2', x, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc1', z, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc2', x, 1000, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_56": {
                "x": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_58": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FullyConnected('fc1', sample, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc2', x, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc1', image, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc2', x, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc1', z, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc2', x, 1000, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_74": {
                "x": {
                    "value": "logvar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FullyConnected('fc_var', x, 2, activation=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_64": {
                "tensor": {
                    "value": "gradient_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(self.f(z_interp), [z_interp])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_62": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FullyConnected('fc1', sample, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc2', x, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc1', image, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc2', x, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc1', z, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc2', x, 1000, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "vae.py": {
        "tensorflow": {
            "flatten_37": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "structure": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.flatten(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_48": {
                "variable": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "eps * tf.exp(0.5 * logvar) + mu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "z",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_55": {
                "variable": {
                    "value": "kl_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(1 + logvar - mu * mu - tf.exp(logvar), -1)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reduce_mean(kl_loss, name='kl_loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "kl_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_57": {
                "variable": {
                    "value": "rec_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(rec - image), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "rec_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_44": {
                "variable": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "FullyConnected('fc_mu', x, 2, activation=None)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "mu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_52": {
                "variable": {
                    "value": "rec",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "FullyConnected('fc_rec', x, IMAGE_SIZE * IMAGE_SIZE, activation=tf.nn.sigmoid)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "rec",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_93": {
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('learning_rate', initializer=0.001, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_94": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('learning_rate', initializer=0.001, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_28": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, IMAGE_SIZE, IMAGE_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "label",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_54": {
                "input_tensor": {
                    "value": "1 + logvar - mu * mu - tf.exp(logvar)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_57": {
                "input_tensor": {
                    "value": "tf.square(rec - image)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_57": {
                "x": {
                    "value": "rec - image",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_47": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FullyConnected('fc1', image, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc2', x, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc1', z, 1000, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "FullyConnected('fc2', x, 1000, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_48": {
                "x": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_54": {
                "x": {
                    "value": "logvar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FullyConnected('fc_var', x, 2, activation=None)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}