{
    "task1/train.py": {
        "sklearn": {
            "accuracy_score_79": {
                "variable": {
                    "value": "curr_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "f1_score_80": {
                "variable": {
                    "value": "curr_f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_111": {
                "variable": {
                    "value": "curr_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "precision_score_112": {
                "variable": {
                    "value": "curr_prec",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "recall_score_113": {
                "variable": {
                    "value": "curr_rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "f1_score_114": {
                "variable": {
                    "value": "curr_f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_27": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_53": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0 if x < 0.5 else 1 for x in output]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0] if x[0] < 0.5 else [1] for x in output]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "save_130": {
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LangModelWithDense(lang_model, vocab_size, lm_emb_size, args.hidden_size, args.fine_tune).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "args.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "task2/process.py": {
        "sklearn": {
            "shuffle_346": {
                "variable": {
                    "value": "(X, y, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_2": {
                    "value": "mask",
                    "type": null,
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "pad_sequence_350": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pad_sequence(X, batch_first=True, padding_value=tokenizer.pad_token_id).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_351": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pad_sequence(y, batch_first=True, padding_value=0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_sequence_352": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pad_sequence(mask, batch_first=True, padding_value=0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_358": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_359": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(X, y, mask)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_334": {
                "data": {
                    "value": "tokens",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tokenizer.encode(sentence, add_special_tokens=True)",
                            "Call"
                        ],
                        [
                            "line.split()",
                            "Call"
                        ],
                        [
                            "tokenizer.encode(sentence, add_special_tokens=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_335": {
                "data": {
                    "value": "[eval_ent_dict[ent] if ent in eval_ent_dict else eval_ent_dict['O'] for ent in new_entities]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_like_336": {
                "input": {
                    "value": "torch.tensor(tokens)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_336": {
                "data": {
                    "value": "tokens",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tokenizer.encode(sentence, add_special_tokens=True)",
                            "Call"
                        ],
                        [
                            "line.split()",
                            "Call"
                        ],
                        [
                            "tokenizer.encode(sentence, add_special_tokens=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_234": {
                "data": {
                    "value": "tokens",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tokenizer.encode(sentence, add_special_tokens=True)",
                            "Call"
                        ],
                        [
                            "line.split()",
                            "Call"
                        ],
                        [
                            "tokenizer.encode(sentence, add_special_tokens=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_235": {
                "data": {
                    "value": "[eval_ent_dict[ent] if ent in eval_ent_dict else eval_ent_dict['O'] for ent in new_entities]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_like_236": {
                "input": {
                    "value": "torch.tensor(tokens)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "data": {
                    "value": "tokens",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tokenizer.encode(sentence, add_special_tokens=True)",
                            "Call"
                        ],
                        [
                            "line.split()",
                            "Call"
                        ],
                        [
                            "tokenizer.encode(sentence, add_special_tokens=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "task2/train.py": {
        "sklearn": {
            "accuracy_score_91": {
                "variable": {
                    "value": "curr_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "f1_score_92": {
                "variable": {
                    "value": "curr_micro_f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[i for i in range(1, num_classes)]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_93": {
                "variable": {
                    "value": "curr_macro_f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[i for i in range(1, num_classes)]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_94": {
                "variable": {
                    "value": "curr_macro_f1_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[i for i in range(1, num_classes)]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "accuracy_score_136": {
                "variable": {
                    "value": "curr_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "precision_score_138": {
                "variable": {
                    "value": "curr_micro_prec",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[i for i in range(1, num_classes)]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_139": {
                "variable": {
                    "value": "curr_micro_recall",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[i for i in range(1, num_classes)]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_140": {
                "variable": {
                    "value": "curr_micro_f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[i for i in range(1, num_classes)]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "precision_score_142": {
                "variable": {
                    "value": "curr_macro_prec",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[i for i in range(1, num_classes)]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "recall_score_143": {
                "variable": {
                    "value": "curr_macro_recall",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[i for i in range(1, num_classes)]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_144": {
                "variable": {
                    "value": "curr_macro_f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[i for i in range(1, num_classes)]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_150": {
                "variable": {
                    "value": "curr_macro_f1_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_y.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "target_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[i for i in range(1, num_classes)]",
                            "ListComp"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[torch.argmax(x) for x in output.view(-1, num_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[torch.argmax(x) for x in output.view(-1, num_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LangModelWithDense(lang_model, lm_emb_size, args.hidden_size, num_classes, args.fine_tune).to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'models/{}_{}.pt'.format(args.lang_model_name, 'finetune' if args.fine_tune else 'frozen')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_89": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_134": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "task1/generate_evalfile.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_29": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.device(args.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "task1/model.py": {
        "torch": {
            "Linear_55": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_56": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.8 if fine_tune else 0.1",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.8 if fine_tune else 0.1",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_78": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear3(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_74": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.lang_model(x, attention_mask=mask)[0]",
                            "Subscript"
                        ],
                        [
                            "self.lang_model(x, attention_mask=mask)[0]",
                            "Subscript"
                        ],
                        [
                            "embeddings[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "torch.mean(embeddings, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gelu_76": {
                "input": {
                    "value": "self.linear1(embeddings)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gelu_77": {
                "input": {
                    "value": "self.linear2(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "task1/process.py": {
        "torch": {
            "pad_sequence_74": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "token_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(y, dtype=torch.float32).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_sequence_76": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pad_sequence(mask, batch_first=True, padding_value=0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_78": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(X, y, mask)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tokenizer.encode(X[i][0], add_special_tokens=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_98": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(tokenizer.encode(X[i][0], add_special_tokens=True))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_72": {
                "input": {
                    "value": "tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.tensor(tokenizer.encode(X[i][0], add_special_tokens=True))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_100": {
                "data": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pad_sequence(token_list, batch_first=True, padding_value=tokenizer.pad_token_id).to(device)",
                            "Call"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "torch.nn.utils.rnn.pad_sequence(tokens, batch_first=True, padding_value=tokenizer.pad_token_id).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_96": {
                "data": {
                    "value": "tokenizer.encode(X[i], add_special_tokens=True)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "task1/utils.py": {
        "torch": {
            "ones_45": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_48": {
                "input": {
                    "value": "x[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "stop_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(batch_size, dtype=torch.long).to(device) * pad_id",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "task2/models.py": {
        "torch": {
            "Embedding_18": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_19": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "lstm_hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lang_model_embeddings, self.embedding(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_37": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((lang_model_embeddings, self.embedding(x)), dim=2)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(embeddings, lengths, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.lang_model(x, attention_mask=mask)[0]",
                            "Subscript"
                        ],
                        [
                            "self.lang_model(x, attention_mask=mask)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_41": {
                "variable": {
                    "value": "(lstm_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lstm(embeddings)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, seq_len, self.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.8 if fine_tune else 0.1",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_69": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.8 if fine_tune else 0.1",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, seq_len, self.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_48": {
                "input": {
                    "value": "self.linear1(lstm_output[:, i, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_49": {
                "input": {
                    "value": "self.linear2(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gelu_85": {
                "input": {
                    "value": "self.linear1(embeddings[:, i, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gelu_86": {
                "input": {
                    "value": "self.linear2(output)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "task2/predict.py": {
        "torch": {
            "load_22": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "data": {
                    "value": "[[1 for _ in range(len(tokens))]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_167": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "[[1 for _ in range(len(tokens))]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_82": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "task2/utils.py": {
        "torch": {
            "ones_12": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_15": {
                "input": {
                    "value": "x[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "stop_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(batch_size, dtype=torch.long).to(device) * pad_id",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}