{
    "main.py": {
        "sklearn": {
            "train_test_split_62": {
                "variable": {
                    "value": "(idxTrain, idxValid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "list_physical_devices_28": {
                "variable": {
                    "value": "physical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_29": {
                "device": {
                    "value": "physical_devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "losses.py": {
        "tensorflow": {
            "convert_to_tensor_4": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y_true, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_5": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y_pred, y_true.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y_true.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_7": {
                "input_tensor": {
                    "value": "tf.math.multiply(y_true, y_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_13": {
                "variable": {
                    "value": "real_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.pow(tf.ones_like(disc_real_output) - disc_real_output, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_14": {
                "variable": {
                    "value": "fake_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.pow(tf.zeros_like(disc_fake_output) - disc_fake_output, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_27": {
                "variable": {
                    "value": "disc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.pow(tf.ones_like(disc_fake_output) - disc_fake_output, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_7": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y_true, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y_pred, y_true.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_8": {
                "input_tensor": {
                    "value": "tf.math.add(y_true, y_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_13": {
                "x": {
                    "value": "tf.ones_like(disc_real_output) - disc_real_output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_14": {
                "x": {
                    "value": "tf.zeros_like(disc_fake_output) - disc_fake_output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_27": {
                "x": {
                    "value": "tf.ones_like(disc_fake_output) - disc_fake_output",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_8": {
                "x": {
                    "value": "class_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.math.reduce_sum(tf.math.add(y_true, y_pred), axis=[0, 1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_13": {
                "input": {
                    "value": "disc_real_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_14": {
                "input": {
                    "value": "disc_fake_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_27": {
                "input": {
                    "value": "disc_fake_output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_8": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y_true, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(y_pred, y_true.dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models.py": {
        "tensorflow": {
            "Input_46": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(128, 128, 128, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_77": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(128, 128, 128, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_78": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(128, 128, 128, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "target_image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_112": {
                "variable": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(128, 128, 128, 40)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_70": {
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input((128, 128, 128, 4), name='input_image')",
                            "Call"
                        ],
                        [
                            "Input((128, 128, 128, 4), name='input_image')",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv3DTranspose(4, kernel_size=ks, strides=2, padding='same', kernel_initializer='he_normal', activation='softmax', name='output_generator')(x)",
                            "Call"
                        ],
                        [
                            "Conv3D(1, ks, strides=1, padding='valid', kernel_initializer='he_normal', name='output_discriminator')(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_108": {
                "inputs": {
                    "value": "[targets, inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv3DTranspose(4, kernel_size=ks, strides=2, padding='same', kernel_initializer='he_normal', activation='softmax', name='output_generator')(x)",
                            "Call"
                        ],
                        [
                            "Conv3D(1, ks, strides=1, padding='valid', kernel_initializer='he_normal', name='output_discriminator')(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_115": {
                "inputs": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input((128, 128, 128, 40))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "fin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv3D(4, kernel_size=3, kernel_initializer='he_normal', padding='same', activation='softmax')(start)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Ensembler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3DTranspose_68": {
                "filters": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPadding3D_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3D_101": {
                "filters": {
                    "value": "Nfilter_start * 2 ** depth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPadding3D_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3D_106": {
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_113": {
                "filters": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_17": {
                "filters": {
                    "value": "Nf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv3D_26": {
                "filters": {
                    "value": "Nf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3DTranspose_38": {
                "filters": {
                    "value": "Nf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_42": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv3D_84": {
                "filters": {
                    "value": "Nf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_88": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv3D_30": {
                "filters": {
                    "value": "Nf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LeakyReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Concatenate_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_ensembler.py": {
        "tensorflow": {
            "Adam_10": {
                "variable": {
                    "value": "ensembler_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Mean_142": {
                "variable": {
                    "value": "epoch_dice_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_143": {
                "variable": {
                    "value": "epoch_dice_loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_v2v.py": {
        "tensorflow": {
            "Adam_18": {
                "variable": {
                    "value": "generator_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_19": {
                "variable": {
                    "value": "discriminator_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Mean_63": {
                "variable": {
                    "value": "epoch_v2v_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_64": {
                "variable": {
                    "value": "epoch_dice_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_65": {
                "variable": {
                    "value": "epoch_disc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_66": {
                "variable": {
                    "value": "epoch_v2v_loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_67": {
                "variable": {
                    "value": "epoch_dice_loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_68": {
                "variable": {
                    "value": "epoch_disc_loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "to_categorical_113": {
                "y": {
                    "value": "y_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_categorical_106": {
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nib.load(img_files[N - 1]).get_fdata(dtype='float32', caching='unchanged')",
                            "Call"
                        ],
                        [
                            "y[40:200, 34:226, 8:136]",
                            "Subscript"
                        ],
                        [
                            "np.empty((self.batch_size, *self.dim))",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}