{
    "mt/erac/train_actor.py": {
        "torch": {
            "load_246": {
                "variable": {
                    "value": "actor",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.work_dir, 'model_best.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_249": {
                "variable": {
                    "value": "test",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-test.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_67": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-vocab.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_83": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-vocab.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-train.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_96": {
                "variable": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-valid.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "mt/erac/train_critic.py": {
        "torch": {
            "load_80": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-vocab.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_92": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-train.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_93": {
                "variable": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-valid.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_102": {
                "variable": {
                    "value": "actor",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.actor_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_124": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_126": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_191": {
                "input": {
                    "value": "td_error.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_254": {
                "input": {
                    "value": "td_error.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mt/erac/train_erac.py": {
        "torch": {
            "load_330": {
                "variable": {
                    "value": "actor",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.work_dir, 'model_best_actor.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_333": {
                "variable": {
                    "value": "test",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-test.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_73": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-vocab.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_85": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-vocab.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_97": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-train.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_98": {
                "variable": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-valid.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_107": {
                "variable": {
                    "value": "critic",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.critic_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_115": {
                "variable": {
                    "value": "actor",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.actor_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_129": {
                "variable": {
                    "value": "act_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.act_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.act_beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_130": {
                "variable": {
                    "value": "crt_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.crt_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.crt_beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_223": {
                "input": {
                    "value": "td_error.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mt/preprocess.py": {
        "torch": {
            "save_169": {
                "obj": {
                    "value": "vocab",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.save_data + '-vocab.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_170": {
                "obj": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-train.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_171": {
                "obj": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-valid.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_172": {
                "obj": {
                    "value": "test",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-test.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mt/vaml/train_q.py": {
        "torch": {
            "load_286": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.work_dir, 'model_best.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_288": {
                "variable": {
                    "value": "test",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-test.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_70": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-vocab.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_86": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-vocab.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_98": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-train.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_99": {
                "variable": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-valid.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_120": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "Q_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[R_var[:-1] + V_mod[1:], R_var[-1].unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_190": {
                "input": {
                    "value": "td.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mt/vaml/train_vaml.py": {
        "torch": {
            "load_313": {
                "variable": {
                    "value": "actor",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.work_dir, 'model_best.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_316": {
                "variable": {
                    "value": "test",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-test.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-vocab.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_90": {
                "variable": {
                    "value": "vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-vocab.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_102": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-train.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_103": {
                "variable": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_data + '-valid.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_113": {
                "variable": {
                    "value": "critic",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.critic_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_159": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sent_bleu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(bleu_metric.sent_bleu(hyp, ref))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_136": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "shared/data.py": {
        "torch": {
            "cat_220": {
                "variable": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_233": {
                "variable": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(encoded)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "shared/metric.py": {
        "torch": {
            "cat_58": {
                "variable": {
                    "value": "hyp_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.corpus_hyp_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "ref_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.corpus_ref_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_214": {
                "variable": {
                    "value": "brevity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnt_match_list[0].new(1).zero_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_214": {
                "variable": {
                    "value": "brevity",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_242": {
                "variable": {
                    "value": "brevity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cnt_match_list[0].new(1).zero_()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_242": {
                "variable": {
                    "value": "brevity",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_106": {
                "variable": {
                    "value": "(o_clip, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "o_hh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "M_hh.sum(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_106": {
                "variable": {
                    "value": "(o_clip, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_107": {
                "variable": {
                    "value": "cnt_match",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_clip / (1e-16 + o_hh.squeeze(2))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_142": {
                "variable": {
                    "value": "(inc_o_clip, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inc_o_hh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "M_hh.clone().cumsum(-2).masked_fill_(triu_mask[None, None, :, :], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_142": {
                "variable": {
                    "value": "(inc_o_clip, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_143": {
                "variable": {
                    "value": "cnt_match",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inc_o_clip / (1e-16 + inc_o_hh.squeeze(2))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_178": {
                "variable": {
                    "value": "(_, eff_ref_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "hyp_len[:, :, None] - ref_len[:, None, :] - 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_178": {
                "variable": {
                    "value": "(_, eff_ref_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_198": {
                "variable": {
                    "value": "(_, eff_ref_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "hyp_len[:, :, None] - ref_len[:, None, :] - 0.01",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_198": {
                "variable": {
                    "value": "(_, eff_ref_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_56": {
                "tensors": {
                    "value": "cnt_match",
                    "type": "Call",
                    "possible_values": [
                        [
                            "hyp.new(1, 1).float().zero_().expand(bsz, nhyp)",
                            "Call"
                        ],
                        [
                            "torch.sum(o_clip / (1e-16 + o_hh.squeeze(2)), dim=-1)",
                            "Call"
                        ],
                        [
                            "cnt_match + 1",
                            "BinOp"
                        ],
                        [
                            "hyp.new(1, 1, 1).float().zero_().expand(bsz, nhyp, lhyp)",
                            "Call"
                        ],
                        [
                            "torch.sum(inc_o_clip / (1e-16 + inc_o_hh.squeeze(2)), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([cnt_pad, cnt_match], dim=2)",
                            "Call"
                        ],
                        [
                            "cnt_match + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "cnt_ngram",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(hyp.ne(self.pad_idx).float().sum(-1) - n + 1).clamp(min=0)",
                            "Call"
                        ],
                        [
                            "hyp.new(1, 1).float().fill_(max(0, lhyp_n)).expand(bsz, nhyp)",
                            "Call"
                        ],
                        [
                            "cnt_ngram + 1",
                            "BinOp"
                        ],
                        [
                            "(hyp.ne(self.pad_idx).float().cumsum(-1) - n + 1).clamp(min=0)",
                            "Call"
                        ],
                        [
                            "(hyp.new(range(1, lhyp + 1)).float() - n + 1).clamp(min=0)",
                            "Call"
                        ],
                        [
                            "cnt_ngram[None, None, :].expand(bsz, nhyp, lhyp)",
                            "Call"
                        ],
                        [
                            "cnt_ngram + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_148": {
                "variable": {
                    "value": "cnt_match",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cnt_pad, cnt_match]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_220": {
                "input": {
                    "value": "prec",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cnt_match_list[i].sum(0) / cnt_ngram_list[i].sum(0)",
                            "BinOp"
                        ],
                        [
                            "cnt_match_list[i] / cnt_ngram_list[i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_223": {
                "input": {
                    "value": "sum_log_prec / n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_247": {
                "input": {
                    "value": "sum_log_prec / n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_245": {
                "input": {
                    "value": "prec",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cnt_match_list[i].sum(0) / cnt_ngram_list[i].sum(0)",
                            "BinOp"
                        ],
                        [
                            "cnt_match_list[i] / cnt_ngram_list[i]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "shared/models.py": {
        "torch": {
            "sort_50": {
                "variable": {
                    "value": "(lens, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.data.ne(self.pad_idx).int().sum(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_73": {
                "variable": {
                    "value": "packed_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embed",
                            "Name"
                        ],
                        [
                            "embed.index_select(1, order)",
                            "Call"
                        ],
                        [
                            "output.index_select(1, rev_order)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lens.tolist()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_75": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sort_54": {
                "variable": {
                    "value": "(_, rev_order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "order",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "variable": {
                    "value": "att_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "(c_key.unsqueeze(1) * query.unsqueeze(0)).sum(3)",
                            "Call"
                        ],
                        [
                            "self.att_mlp(torch.cat([c_key_expand, query_expand], 3)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "self.dotprod_att(query, c_key)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(query, c_key)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_155": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "nemb",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "pad_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_156": {
                "variable": {
                    "value": "self.drop_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTM_159": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "nemb",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "nhid // mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "nlayer",
                    "type": "Variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "droph",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bi_enc",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_160": {
                "variable": {
                    "value": "self.drop_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "droph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_196": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "nemb",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "pad_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_197": {
                "variable": {
                    "value": "self.drop_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTM_200": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "nemb + nextra + natthid if input_feed else nemb + nextra",
                            "IfExp"
                        ],
                        [
                            "nemb + nextra + natthid if input_feed else nemb + nextra",
                            "IfExp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "nlayer",
                    "type": "Variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "droph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_201": {
                "variable": {
                    "value": "self.drop_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "droph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_204": {
                "variable": {
                    "value": "self.concat_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * nhid, natthid, bias=att_mode == 'mlp')",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_206": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "natthid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntoken",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_276": {
                "variable": {
                    "value": "sequence",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tokens",
                    "type": "List",
                    "possible_values": [
                        [
                            "[inp.clone().view(bs, k)]",
                            "List"
                        ],
                        [
                            "[inp.clone().view(bs, 1)]",
                            "List"
                        ]
                    ]
                }
            },
            "Embedding_591": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "nemb",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "pad_idx",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_592": {
                "variable": {
                    "value": "self.drop_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTM_595": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "nemb + nextra + natthid if input_feed else nemb + nextra",
                            "IfExp"
                        ],
                        [
                            "nemb + nextra + natthid if input_feed else nemb + nextra",
                            "IfExp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "nlayer",
                    "type": "Variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "droph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_596": {
                "variable": {
                    "value": "self.drop_hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "droph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_599": {
                "variable": {
                    "value": "self.concat_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * nhid, natthid, bias=att_mode == 'mlp')",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_601": {
                "variable": {
                    "value": "self.regressor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "natthid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ne_51": {
                "input": {
                    "value": "lens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lengths",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": [
                        [
                            "src.data.ne(self.pad_idx).int().sum(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.att_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * nhid, nhid)",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_215": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit / self.tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "rnn_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt_embed, extra_inp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "att_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_outs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_279": {
                "variable": {
                    "value": "seq_dec_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "seq_rnn_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rnn_outs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_321": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit / self.tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_371": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit / self.tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_432": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit / self.tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_627": {
                "variable": {
                    "value": "rnn_inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tgt_embed, extra_inp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_634": {
                "variable": {
                    "value": "att_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_outs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_204": {
                "in_features": {
                    "value": "2 * nhid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "natthid",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "att_mode == 'mlp'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Tanh_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_217": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit / self.tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "rnn_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rnn_outs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_281": {
                "variable": {
                    "value": "seq_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_282": {
                "variable": {
                    "value": "seq_dec_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(logits).view(-1, bs * k, self.ntoken)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_334": {
                "variable": {
                    "value": "token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob_rescaled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(log_prob / temperature).exp()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_463": {
                "variable": {
                    "value": "(sort_score, sort_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "top_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(context.data.new(bs, k).float().fill_(-float('inf')), volatile=context.volatile)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_527": {
                "variable": {
                    "value": "dec_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[enc_hid[0::2], enc_hid[1::2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_599": {
                "in_features": {
                    "value": "2 * nhid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "natthid",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "att_mode == 'mlp'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Tanh_599": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_635": {
                "variable": {
                    "value": "rnn_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rnn_outs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_695": {
                "variable": {
                    "value": "dec_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[enc_hid[0::2], enc_hid[1::2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "2 * nhid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tanh_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "nhid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_230": {
                "tensors": {
                    "value": "[rnn_inp[i:i + 1], att_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_232": {
                "tensors": {
                    "value": "[rnn_out, att_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_260": {
                "tensors": {
                    "value": "[rnn_out, att_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_284": {
                "variable": {
                    "value": "seq_dec_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_610": {
                "tensors": {
                    "value": "[rnn_inp[i:i + 1], att_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_612": {
                "tensors": {
                    "value": "[rnn_out, att_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_640": {
                "tensors": {
                    "value": "[rnn_out, att_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_116": {
                "tensors": {
                    "value": "[c_key_expand, query_expand]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_525": {
                "tensors": {
                    "value": "[hid[0::2], hid[1::2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_693": {
                "tensors": {
                    "value": "[hid[0::2], hid[1::2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "shared/utils.py": {
        "torch": {
            "save_34": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'model_{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_35": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, 'optimizer_{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "[seq[:, :, None], seq_crpt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}