{
    "codebase/utils/cluster/cluster_eval.py": {
        "sklearn": {
            "mutual_info_score_499": {
                "variable": {
                    "value": "mutual_information",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "predicted_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_clustering_get_data(config, net, test_dataloader, tf3, crop_transform, preprocessing_pool, sobel=sobel, using_IR=False, verbose=False)",
                            "Call"
                        ],
                        [
                            "predicted_clusters[0]",
                            "Subscript"
                        ],
                        [
                            "predicted_clusters.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "ground_truth_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_clustering_get_data(config, net, test_dataloader, tf3, crop_transform, preprocessing_pool, sobel=sobel, using_IR=False, verbose=False)",
                            "Call"
                        ],
                        [
                            "ground_truth_clusters.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "ground_truth_clusters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalized_mutual_info_score_501": {
                "variable": {
                    "value": "nmi",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "predicted_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_clustering_get_data(config, net, test_dataloader, tf3, crop_transform, preprocessing_pool, sobel=sobel, using_IR=False, verbose=False)",
                            "Call"
                        ],
                        [
                            "predicted_clusters[0]",
                            "Subscript"
                        ],
                        [
                            "predicted_clusters.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "ground_truth_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_clustering_get_data(config, net, test_dataloader, tf3, crop_transform, preprocessing_pool, sobel=sobel, using_IR=False, verbose=False)",
                            "Call"
                        ],
                        [
                            "ground_truth_clusters.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "ground_truth_clusters",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "argmax_37": {
                "variable": {
                    "value": "cluster_indexes_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(images, images_cropped, head='A')[0]",
                            "Subscript"
                        ],
                        [
                            "net(images, head='A')[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_38": {
                "variable": {
                    "value": "cluster_indexes_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(images, images_cropped, head='B')[0]",
                            "Subscript"
                        ],
                        [
                            "net(images, head='B')[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "flat_targets_all",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_batches * config.batch_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_373": {
                "variable": {
                    "value": "all_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.batch_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.in_channels",
                            "Attribute"
                        ],
                        [
                            "dim - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "config.input_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "config.input_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_376": {
                "variable": {
                    "value": "all_imgs_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.batch_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.in_channels",
                            "Attribute"
                        ],
                        [
                            "dim - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "config.input_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "config.input_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_473": {
                "variable": {
                    "value": "found",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.gt_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_474": {
                "variable": {
                    "value": "reordered_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_targets_all.shape[0]",
                            "Subscript"
                        ],
                        [
                            "flat_targets_all.shape[0]",
                            "Subscript"
                        ],
                        [
                            "predicted_clusters.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "predicted_clusters.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_138": {
                "*size": {
                    "value": "num_batches * config.batch_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_175": {
                "variable": {
                    "value": "flat_preds_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_outs_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_outs[i]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_330": {
                "variable": {
                    "value": "found",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.output_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_331": {
                "variable": {
                    "value": "reordered_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_targets_all.shape[0]",
                            "Subscript"
                        ],
                        [
                            "flat_targets_all.shape[0]",
                            "Subscript"
                        ],
                        [
                            "predicted_clusters.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "flat_predss_all[0].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_478": {
                "variable": {
                    "value": "reordered_preds[torch.eq(predicted_clusters, int(pred_i))]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(target_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "(num_batches * config.batch_sz, config.output_k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_246": {
                "variable": {
                    "value": "reordered_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat_targets_all.shape[0]",
                            "Subscript"
                        ],
                        [
                            "flat_targets_all.shape[0]",
                            "Subscript"
                        ],
                        [
                            "predicted_clusters.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "flat_predss_all[0].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_336": {
                "variable": {
                    "value": "reordered_preds[torch.eq(flat_predss_all[i], int(pred_i))]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(target_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_478": {
                "input": {
                    "value": "predicted_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_clustering_get_data(config, net, test_dataloader, tf3, crop_transform, preprocessing_pool, sobel=sobel, using_IR=False, verbose=False)",
                            "Call"
                        ],
                        [
                            "predicted_clusters[0]",
                            "Subscript"
                        ],
                        [
                            "predicted_clusters.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "int(pred_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_336": {
                "input": {
                    "value": "flat_predss_all[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "int(pred_i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/utils/cluster/eval_metrics.py": {
        "sklearn": {
            "normalized_mutual_info_score_74": {
                "labels_true": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "adjusted_rand_score_78": {
                "labels_true": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {}
    },
    "codebase/utils/cluster/k_means_assess.py": {
        "sklearn": {
            "KMeans_20": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "config.gt_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/utils/cluster/management/basic_dial_evaluation_manager.py": {
        "sklearn": {
            "mutual_info_score_345": {
                "variable": {
                    "value": "mutual_information",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "subhead_predicted_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predicted_clusters[subhead_index].cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "ground_truth_clusters_npy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ground_truth_clusters.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "normalized_mutual_info_score_347": {
                "variable": {
                    "value": "nmi",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "subhead_predicted_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predicted_clusters[subhead_index].cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "ground_truth_clusters_npy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ground_truth_clusters.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_56": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(root=path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.config.batch_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "list_collate_batcher",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_collate_batcher",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "domain_id_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(dataloader_batch), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_90": {
                "variable": {
                    "value": "images_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transformed_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processing_pool.map(self.transform, images)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "found",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.gt_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "reordered_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predicted_clusters.shape[0]",
                            "Subscript"
                        ],
                        [
                            "predicted_clusters.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "predicted_clusters.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "reordered_preds[torch.eq(predicted_clusters, int(pred_i))]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(target_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_125": {
                "tensors": {
                    "value": "subhead_cluster_assignments",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eq_161": {
                "input": {
                    "value": "predicted_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.perform_clustering(domain_id)",
                            "Call"
                        ],
                        [
                            "self.perform_clustering(domain_id)",
                            "Call"
                        ],
                        [
                            "predicted_clusters",
                            "Method Argument"
                        ],
                        [
                            "predicted_clusters",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "int(pred_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_123": {
                "input": {
                    "value": "clusters_probabilities[subhead_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/archs/cluster/da/dial.py": {
        "torch": {
            "zeros_179": {
                "variable": {
                    "value": "test_1dinput",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_180": {
                "variable": {
                    "value": "test_2dinput",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, channels, dimensions, dimensions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "variable": {
                    "value": "test_domains",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] * (batch_size // 4) + [1] * (batch_size // 4) + [2] * (batch_size // 4) + [3] * (batch_size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_103": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(channels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_104": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_106": {
                "variable": {
                    "value": "self.batch_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_133": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, outputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_135": {
                "variable": {
                    "value": "self.batch_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_161": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(channels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_162": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_164": {
                "variable": {
                    "value": "self.batch_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_83": {
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_103": {
                "*size": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "*size": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_132": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_133": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_161": {
                "*size": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_162": {
                "*size": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "self.config.domain_specific_bn_affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_140": {
                "num_features": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1024",
                            "int"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "self.config.domain_specific_bn_affine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "track_running_stats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "codebase/archs/cluster/da/dial_residual.py": {
        "torch": {
            "Conv2d_8": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/archs/cluster/da/dial_resnet18.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.in_channels",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_34": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_53": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "avg_pool_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "int"
                        ],
                        [
                            "7",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_98": {
                "variable": {
                    "value": "self.heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Linear(512 * DialBasicBlock.expansion, config.output_k), nn.Softmax(dim=1)) for _ in range(self.num_sub_heads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "*args": {
                    "value": "nn.Linear(512 * DialBasicBlock.expansion, config.output_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "512 * DialBasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.output_k",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_100": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/archs/cluster/da/dial_resnet18_two_head.py": {
        "torch": {
            "zeros_21": {
                "variable": {
                    "value": "self.logit_variance_sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "output_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_k",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_probability",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_27": {
                "variable": {
                    "value": "self.heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Linear(512 * DialBasicBlock.expansion, output_k), nn.Softmax(dim=1)) for _ in range(self.num_sub_heads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * DialBasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_27": {
                "*args": {
                    "value": "nn.Linear(512 * DialBasicBlock.expansion, output_k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "512 * DialBasicBlock.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_29": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/archs/cluster/da/multi_domain_heads.py": {
        "torch": {
            "ModuleDict_17": {
                "variable": {
                    "value": "self.modules_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "codebase/archs/cluster/da/whitening.py": {
        "torch": {
            "inverse_54": {
                "variable": {
                    "value": "inv_sqrt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cholesky(f_cov_shrinked)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_57": {
                "variable": {
                    "value": "decorrelated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x - m",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "inv_sqrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(torch.cholesky(f_cov_shrinked)).contiguous().view(self.num_features, self.group_size, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.num_groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_60": {
                "variable": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.momentum * m.detach()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "(1 - self.momentum) * self.running_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_62": {
                "variable": {
                    "value": "self.running_variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.momentum * f_cov.detach()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "(1 - self.momentum) * self.running_variance",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.running_variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_44": {
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xn.permute(1, 0, 2, 3).contiguous().view(self.num_groups, self.group_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "T.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "[1, self.num_features, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.cuda.FloatTensor() if torch.cuda.is_available() else torch.FloatTensor()",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "[self.num_groups, self.group_size, self.group_size]",
                    "type": "List",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.cuda.FloatTensor() if torch.cuda.is_available() else torch.FloatTensor()",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "eye_45": {
                "n": {
                    "value": "self.group_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.cuda.FloatTensor() if torch.cuda.is_available() else torch.FloatTensor()",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "eye_50": {
                "n": {
                    "value": "self.group_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "torch.cuda.FloatTensor() if torch.cuda.is_available() else torch.FloatTensor()",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cholesky_54": {
                "input": {
                    "value": "f_cov_shrinked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - self.eps) * f_cov + self.eps * torch.eye(self.group_size, out=torch.cuda.FloatTensor() if torch.cuda.is_available() else torch.FloatTensor()).repeat(self.num_groups, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "(1 - self.eps) * self.running_variance + self.eps * torch.eye(self.group_size, out=torch.cuda.FloatTensor() if torch.cuda.is_available() else torch.FloatTensor()).repeat(self.num_groups, 1, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "codebase/archs/cluster/estimator.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.estimated_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[1.0 / (rows * columns)] * columns] * rows, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(initial_alpha, dtype=torch.float32, requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.estimated_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([[1.0 / k ** 2] * k] * k, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_75": {
                "variable": {
                    "value": "self.domain_centroids_estimators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[FixedMatrixEstimator(self.features_size, self.num_clusters, self.alpha, initial_value=torch.zeros((self.features_size, self.num_clusters))) for i in range(self.domains_count)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_85": {
                "variable": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(numerator, dim=0, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_86": {
                "variable": {
                    "value": "cluster_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(cluster_probabilities, dim=0, keepdim=False)",
                            "Call"
                        ],
                        [
                            "cluster_probabilities + eps",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "variable": {
                    "value": "initial_value",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0 / (rows * columns)] * columns] * rows",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_112": {
                "variable": {
                    "value": "slice_indexes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "domains.view(-1) == domain_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "initial_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "Method Argument"
                        ],
                        [
                            "0.9",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_42": {
                "data": {
                    "value": "[[1.0 / k ** 2] * k] * k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_45": {
                "input": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "(self.features_size, self.num_clusters)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "*size": {
                    "value": "(self.features_size, self.num_clusters)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/scripts/cluster/source_training.py": {
        "torch": {
            "mean_109": {
                "variable": {
                    "value": "average_per_domain_cluster_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "per_domain_cluster_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_manager.compute_cluster_losses(training_batch, head, current_epoch)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "codebase/scripts/cluster/target_adaptation.py": {
        "torch": {
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "codebase/utils/cluster/IID_losses.py": {
        "torch": {
            "tensor_292": {
                "variable": {
                    "value": "label_smoothing_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_321": {
                "variable": {
                    "value": "label_smoothing_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_415": {
                "variable": {
                    "value": "target_joint",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_i_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "x_out.unsqueeze(2) * x_tf_out.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "p_i_j.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(p_i_j + p_i_j.t()) / 2.0",
                            "BinOp"
                        ],
                        [
                            "p_i_j / p_i_j.sum()",
                            "BinOp"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_418": {
                "variable": {
                    "value": "clamped_joint",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_i_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "x_out.unsqueeze(2) * x_tf_out.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "p_i_j.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(p_i_j + p_i_j.t()) / 2.0",
                            "BinOp"
                        ],
                        [
                            "p_i_j / p_i_j.sum()",
                            "BinOp"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "lower_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lower_prob",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "upper_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upper_prob",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MSELoss_422": {
                "variable": {
                    "value": "mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_434": {
                "variable": {
                    "value": "mse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_162": {
                "variable": {
                    "value": "estimated_joint_probabilities_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "joint_probabilities_estimations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probabilities_estimations",
                            "Method Argument"
                        ],
                        [
                            "joint_probabilities_estimations",
                            "Method Argument"
                        ],
                        [
                            "joint_probabilities_estimations",
                            "Method Argument"
                        ],
                        [
                            "joint_probabilities_estimations",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_162": {
                "variable": {
                    "value": "estimated_joint_probabilities_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_164": {
                "variable": {
                    "value": "estimated_joint_probabilities_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joint_probabilities_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "plain_output.unsqueeze(2) * transformed_output.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "joint_probabilities_sum.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "joint_probabilities_sum + estimated_joint_probabilities_sum",
                            "BinOp"
                        ],
                        [
                            "(joint_probabilities_sum + joint_probabilities_sum.t()) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_199": {
                "input": {
                    "value": "squared_distances_per_cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(squared_distances_per_cluster_pre * cluster_probabilities).sum(dim=0) / (delta + cluster_probabilities_sum)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_294": {
                "variable": {
                    "value": "label_smoothing_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((torch.sum(torch.log(x_out), dim=1), torch.sum(torch.log(x_tf_out), dim=1)), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_323": {
                "variable": {
                    "value": "label_smoothing_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((torch.sum(torch.log(plain_outputs), dim=1), torch.sum(torch.log(transformed_outputs), dim=1)), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_185": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_31": {
                "input": {
                    "value": "p_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_i_j.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_65": {
                "input": {
                    "value": "marginal_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_99": {
                "input": {
                    "value": "marginal_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_126": {
                "input": {
                    "value": "marginal_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_192": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_228": {
                "input": {
                    "value": "p_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_i_j.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_260": {
                "input": {
                    "value": "marginal_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_295": {
                "tensors": {
                    "value": "(torch.sum(torch.log(x_out), dim=1), torch.sum(torch.log(x_tf_out), dim=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_312": {
                "input": {
                    "value": "p_i_j.trace()",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "current_beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_linear_annealing(config.start_beta, config.end_beta, current_epoch, config.loss_anneal_epochs)",
                            "Call"
                        ],
                        [
                            "compute_loss_exponents(config, current_epoch)",
                            "Call"
                        ],
                        [
                            "compute_loss_exponents(config, current_epoch)",
                            "Call"
                        ],
                        [
                            "compute_loss_exponents(config, current_epoch)",
                            "Call"
                        ],
                        [
                            "compute_loss_exponents(config, current_epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_324": {
                "tensors": {
                    "value": "(torch.sum(torch.log(plain_outputs), dim=1), torch.sum(torch.log(transformed_outputs), dim=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_341": {
                "input": {
                    "value": "joint_probability_matrix.trace()",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "current_beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_linear_annealing(config.start_beta, config.end_beta, current_epoch, config.loss_anneal_epochs)",
                            "Call"
                        ],
                        [
                            "compute_loss_exponents(config, current_epoch)",
                            "Call"
                        ],
                        [
                            "compute_loss_exponents(config, current_epoch)",
                            "Call"
                        ],
                        [
                            "compute_loss_exponents(config, current_epoch)",
                            "Call"
                        ],
                        [
                            "compute_loss_exponents(config, current_epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_368": {
                "input": {
                    "value": "joint_probability_matrix.trace()",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "current_beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_linear_annealing(config.start_beta, config.end_beta, current_epoch, config.loss_anneal_epochs)",
                            "Call"
                        ],
                        [
                            "compute_loss_exponents(config, current_epoch)",
                            "Call"
                        ],
                        [
                            "compute_loss_exponents(config, current_epoch)",
                            "Call"
                        ],
                        [
                            "compute_loss_exponents(config, current_epoch)",
                            "Call"
                        ],
                        [
                            "compute_loss_exponents(config, current_epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_388": {
                "input": {
                    "value": "joint_probability_matrix.trace()",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "current_beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_linear_annealing(config.start_beta, config.end_beta, current_epoch, config.loss_anneal_epochs)",
                            "Call"
                        ],
                        [
                            "compute_loss_exponents(config, current_epoch)",
                            "Call"
                        ],
                        [
                            "compute_loss_exponents(config, current_epoch)",
                            "Call"
                        ],
                        [
                            "compute_loss_exponents(config, current_epoch)",
                            "Call"
                        ],
                        [
                            "compute_loss_exponents(config, current_epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_23": {
                "input": {
                    "value": "p_i_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "x_out.unsqueeze(2) * x_tf_out.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "p_i_j.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(p_i_j + p_i_j.t()) / 2.0",
                            "BinOp"
                        ],
                        [
                            "p_i_j / p_i_j.sum()",
                            "BinOp"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_25": {
                "input": {
                    "value": "p_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_i_j.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_29": {
                "input": {
                    "value": "p_i_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "x_out.unsqueeze(2) * x_tf_out.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "p_i_j.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(p_i_j + p_i_j.t()) / 2.0",
                            "BinOp"
                        ],
                        [
                            "p_i_j / p_i_j.sum()",
                            "BinOp"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_30": {
                "input": {
                    "value": "p_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_i_j.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_57": {
                "input": {
                    "value": "joint_probability_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_joint_with_estimations(plain_output, transformed_output, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint(plain_output, transformed_output)",
                            "Call"
                        ],
                        [
                            "(1.0 - alpha) * joint_probability_matrix + alpha * old_joint_probabilities",
                            "BinOp"
                        ],
                        [
                            "compute_joint_with_estimations(plain_output, transformed_output, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint_with_estimations(plain_outputs, transformed_outputs, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint(plain_output, transformed_output)",
                            "Call"
                        ],
                        [
                            "(1.0 - alpha) * joint_probability_matrix + alpha * old_joint_probabilities",
                            "BinOp"
                        ],
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ],
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_59": {
                "input": {
                    "value": "marginal_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_63": {
                "input": {
                    "value": "joint_probability_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_joint_with_estimations(plain_output, transformed_output, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint(plain_output, transformed_output)",
                            "Call"
                        ],
                        [
                            "(1.0 - alpha) * joint_probability_matrix + alpha * old_joint_probabilities",
                            "BinOp"
                        ],
                        [
                            "compute_joint_with_estimations(plain_output, transformed_output, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint_with_estimations(plain_outputs, transformed_outputs, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint(plain_output, transformed_output)",
                            "Call"
                        ],
                        [
                            "(1.0 - alpha) * joint_probability_matrix + alpha * old_joint_probabilities",
                            "BinOp"
                        ],
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ],
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_64": {
                "input": {
                    "value": "marginal_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_91": {
                "input": {
                    "value": "joint_probability_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_joint_with_estimations(plain_output, transformed_output, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint(plain_output, transformed_output)",
                            "Call"
                        ],
                        [
                            "(1.0 - alpha) * joint_probability_matrix + alpha * old_joint_probabilities",
                            "BinOp"
                        ],
                        [
                            "compute_joint_with_estimations(plain_output, transformed_output, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint_with_estimations(plain_outputs, transformed_outputs, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint(plain_output, transformed_output)",
                            "Call"
                        ],
                        [
                            "(1.0 - alpha) * joint_probability_matrix + alpha * old_joint_probabilities",
                            "BinOp"
                        ],
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ],
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_93": {
                "input": {
                    "value": "marginal_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_97": {
                "input": {
                    "value": "joint_probability_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_joint_with_estimations(plain_output, transformed_output, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint(plain_output, transformed_output)",
                            "Call"
                        ],
                        [
                            "(1.0 - alpha) * joint_probability_matrix + alpha * old_joint_probabilities",
                            "BinOp"
                        ],
                        [
                            "compute_joint_with_estimations(plain_output, transformed_output, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint_with_estimations(plain_outputs, transformed_outputs, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint(plain_output, transformed_output)",
                            "Call"
                        ],
                        [
                            "(1.0 - alpha) * joint_probability_matrix + alpha * old_joint_probabilities",
                            "BinOp"
                        ],
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ],
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_98": {
                "input": {
                    "value": "marginal_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_118": {
                "input": {
                    "value": "joint_probability_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_joint_with_estimations(plain_output, transformed_output, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint(plain_output, transformed_output)",
                            "Call"
                        ],
                        [
                            "(1.0 - alpha) * joint_probability_matrix + alpha * old_joint_probabilities",
                            "BinOp"
                        ],
                        [
                            "compute_joint_with_estimations(plain_output, transformed_output, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint_with_estimations(plain_outputs, transformed_outputs, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint(plain_output, transformed_output)",
                            "Call"
                        ],
                        [
                            "(1.0 - alpha) * joint_probability_matrix + alpha * old_joint_probabilities",
                            "BinOp"
                        ],
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ],
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_120": {
                "input": {
                    "value": "marginal_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_124": {
                "input": {
                    "value": "joint_probability_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_joint_with_estimations(plain_output, transformed_output, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint(plain_output, transformed_output)",
                            "Call"
                        ],
                        [
                            "(1.0 - alpha) * joint_probability_matrix + alpha * old_joint_probabilities",
                            "BinOp"
                        ],
                        [
                            "compute_joint_with_estimations(plain_output, transformed_output, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint_with_estimations(plain_outputs, transformed_outputs, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint(plain_output, transformed_output)",
                            "Call"
                        ],
                        [
                            "(1.0 - alpha) * joint_probability_matrix + alpha * old_joint_probabilities",
                            "BinOp"
                        ],
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ],
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_125": {
                "input": {
                    "value": "marginal_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_218": {
                "input": {
                    "value": "p_i_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "x_out.unsqueeze(2) * x_tf_out.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "p_i_j.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(p_i_j + p_i_j.t()) / 2.0",
                            "BinOp"
                        ],
                        [
                            "p_i_j / p_i_j.sum()",
                            "BinOp"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_220": {
                "input": {
                    "value": "p_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_i_j.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_226": {
                "input": {
                    "value": "p_i_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "x_out.unsqueeze(2) * x_tf_out.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "p_i_j.sum(dim=0)",
                            "Call"
                        ],
                        [
                            "(p_i_j + p_i_j.t()) / 2.0",
                            "BinOp"
                        ],
                        [
                            "p_i_j / p_i_j.sum()",
                            "BinOp"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ],
                        [
                            "compute_joint(x_out, x_tf_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_227": {
                "input": {
                    "value": "p_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_i_j.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_250": {
                "input": {
                    "value": "joint_probability_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_joint_with_estimations(plain_output, transformed_output, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint(plain_output, transformed_output)",
                            "Call"
                        ],
                        [
                            "(1.0 - alpha) * joint_probability_matrix + alpha * old_joint_probabilities",
                            "BinOp"
                        ],
                        [
                            "compute_joint_with_estimations(plain_output, transformed_output, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint_with_estimations(plain_outputs, transformed_outputs, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint(plain_output, transformed_output)",
                            "Call"
                        ],
                        [
                            "(1.0 - alpha) * joint_probability_matrix + alpha * old_joint_probabilities",
                            "BinOp"
                        ],
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ],
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_252": {
                "input": {
                    "value": "marginal_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_258": {
                "input": {
                    "value": "joint_probability_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_joint_with_estimations(plain_output, transformed_output, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint(plain_output, transformed_output)",
                            "Call"
                        ],
                        [
                            "(1.0 - alpha) * joint_probability_matrix + alpha * old_joint_probabilities",
                            "BinOp"
                        ],
                        [
                            "compute_joint_with_estimations(plain_output, transformed_output, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint_with_estimations(plain_outputs, transformed_outputs, joint_probabilities_estimations)",
                            "Call"
                        ],
                        [
                            "compute_joint(plain_output, transformed_output)",
                            "Call"
                        ],
                        [
                            "(1.0 - alpha) * joint_probability_matrix + alpha * old_joint_probabilities",
                            "BinOp"
                        ],
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ],
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_259": {
                "input": {
                    "value": "marginal_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_24": {
                "input": {
                    "value": "p_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_i_j.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_58": {
                "input": {
                    "value": "marginal_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_92": {
                "input": {
                    "value": "marginal_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_119": {
                "input": {
                    "value": "marginal_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_219": {
                "input": {
                    "value": "p_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_i_j.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_251": {
                "input": {
                    "value": "marginal_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_295": {
                "input": {
                    "value": "torch.log(x_tf_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_307": {
                "input": {
                    "value": "p_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_i_j.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "p_i_j.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_324": {
                "input": {
                    "value": "torch.log(transformed_outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_336": {
                "input": {
                    "value": "marginal_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_363": {
                "input": {
                    "value": "marginal_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_383": {
                "input": {
                    "value": "marginal_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "joint_probability_matrix.sum(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_295": {
                "input": {
                    "value": "x_tf_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_tf_out",
                            "Method Argument"
                        ],
                        [
                            "x_tf_out",
                            "Method Argument"
                        ],
                        [
                            "x_tf_out",
                            "Method Argument"
                        ],
                        [
                            "x_tf_out",
                            "Method Argument"
                        ],
                        [
                            "x_tf_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_324": {
                "input": {
                    "value": "transformed_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformed_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "codebase/utils/cluster/data.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(root=config.dataset_root, transform=None, target_transform=None)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(root=config.dataset_root)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(config.dataloader_batch_sz)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "list_collate_batcher",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_collate_batcher",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(root=config.dataset_root, transform=None, target_transform=None)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.ImageFolder(root=config.dataset_root)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(config.dataloader_batch_sz)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_collate_batcher",
                            "variable"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_155": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(root=path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "list_collate_batcher",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_collate_batcher",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_177": {
                "tensors": {
                    "value": "transformed_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool.map(transform, current_list)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "codebase/utils/cluster/general.py": {
        "torch": {
            "abs_52": {
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_53": {
                "input": {
                    "value": "p.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "codebase/utils/cluster/management/basic_dial_batching.py": {
        "torch": {
            "DataLoader_84": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImagePathFolder(root=path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(self.config.dataloader_batch_sz)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "list_collate_batcher",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list_collate_batcher",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "ground_truth_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[row[1] for row in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_126": {
                "variable": {
                    "value": "images_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transformed_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processing_pool.map(transform, images)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_133": {
                "variable": {
                    "value": "domain_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(batch), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "images_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transformed_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processing_pool.map(transform, images)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "domain_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(transformed_list), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/utils/cluster/management/basic_dial_network_manager.py": {
        "torch": {
            "CrossEntropyLoss_120": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_169": {
                "variable": {
                    "value": "self.encoder_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.encoder_network",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_61": {
                "input": {
                    "value": "joint_probability_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_63": {
                "input": {
                    "value": "marginal_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=1).view(k, 1).expand(k, k)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_70": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isinf_72": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_62": {
                "input": {
                    "value": "marginal_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, k).expand(k, k)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "codebase/utils/cluster/management/basic_dial_state_manager.py": {
        "torch": {
            "load_20": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_44": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(checkpoint_path)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "codebase/utils/cluster/management/continuous_da_evaluation_manager.py": {
        "torch": {
            "tensor_39": {
                "variable": {
                    "value": "total_entropy_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_99": {
                "tensors": {
                    "value": "subhead_cluster_assignments",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_96": {
                "input": {
                    "value": "clusters_probabilities[subhead_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_22": {
                "input": {
                    "value": "torch.clamp(probabilities, eps, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_27": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor[(torch.max(tensor, dim=1)[0] >= threshold).type(torch.ByteTensor)]",
                            "Subscript"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_22": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probabilities",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/utils/cluster/management/generalization_refinement_batching.py": {
        "torch": {
            "DataLoader_52": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImagePathFolder(root=path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(self.config.dataloader_batch_sz)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "list_collate_batcher",
                    "type": "variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "ground_truth_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[row[1] for row in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_94": {
                "variable": {
                    "value": "images_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transformed_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.processing_pool.map(transform, images)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "domain_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(batch), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "plain_batch_ground_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "tensors": {
                    "value": "transformed_batch_ground_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/utils/cluster/management/mixed_domain_batching.py": {
        "torch": {
            "DataLoader_24": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImagePathFolder(root=path)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(self.config.dataloader_batch_sz // self.domain_count)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "list_collate_batcher",
                    "type": "variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "plain_batch_ground_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "transformed_batch_ground_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/utils/cluster/management/mixed_domain_network_manager.py": {
        "torch": {
            "t_60": {
                "variable": {
                    "value": "joint_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "domain_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(batch_size, self.domains_count * self.domains_count_multiplier).zero_()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "joint_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cluster_probabilities",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_117": {
                "variable": {
                    "value": "demeaned_logits_variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "demeaned_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits - logits.mean(dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_117": {
                "variable": {
                    "value": "demeaned_logits_variance",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_177": {
                "variable": {
                    "value": "(values, positions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probabilities",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "variable": {
                    "value": "total_mi_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "variable": {
                    "value": "total_logit_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_263": {
                "variable": {
                    "value": "total_entropy_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_264": {
                "variable": {
                    "value": "total_logit_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_304": {
                "variable": {
                    "value": "total_per_domain_mi_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] * self.domains_count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_306": {
                "variable": {
                    "value": "total_mi_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_307": {
                "variable": {
                    "value": "total_domain_mi_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "total_logit_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_309": {
                "variable": {
                    "value": "total_centroid_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_396": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_400": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_495": {
                "variable": {
                    "value": "self.encoder_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.encoder_network",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[plain_logits, transformed_logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "all_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(plain_cluster_probabilities, transformed_cluster_probabilities)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_279": {
                "variable": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[plain_logits, transformed_logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[plain_logits, transformed_logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_165": {
                "input": {
                    "value": "torch.pow(global_centroid - domain_centroids[domain_index], 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_165": {
                "input": {
                    "value": "global_centroid - domain_centroids[domain_index]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_317": {
                "tensors": {
                    "value": "[plain_cluster_probabilities, transformed_cluster_probabilities]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_101": {
                "input": {
                    "value": "joint_probability_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_103": {
                "input": {
                    "value": "marginal_columns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, columns).expand(rows, columns)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_123": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor[(torch.max(tensor, dim=1)[0] >= threshold).type(torch.ByteTensor)]",
                            "Subscript"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isinf_125": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor[(torch.max(tensor, dim=1)[0] >= threshold).type(torch.ByteTensor)]",
                            "Subscript"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_366": {
                "tensors": {
                    "value": "(plain_cluster_probabilities, transformed_cluster_probabilities)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_102": {
                "input": {
                    "value": "marginal_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=1).view(rows, 1).expand(rows, columns)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_243": {
                "input": {
                    "value": "torch.clamp(probabilities, eps, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_248": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor[(torch.max(tensor, dim=1)[0] >= threshold).type(torch.ByteTensor)]",
                            "Subscript"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_243": {
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probabilities",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/utils/cluster/management/refinement_evaluation_manager.py": {
        "torch": {
            "cat_44": {
                "tensors": {
                    "value": "subhead_cluster_assignments",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_42": {
                "input": {
                    "value": "clusters_probabilities[subhead_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/utils/cluster/management/refinement_network_manager.py": {
        "torch": {
            "tensor_123": {
                "variable": {
                    "value": "total_mi_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataParallel_184": {
                "variable": {
                    "value": "self.encoder_network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.encoder_network",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_66": {
                "input": {
                    "value": "joint_probability_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_68": {
                "input": {
                    "value": "marginal_columns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=0).view(1, columns).expand(rows, columns)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_67": {
                "input": {
                    "value": "marginal_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint_probability_matrix.sum(dim=1).view(rows, 1).expand(rows, columns)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "codebase/utils/cluster/train_utils.py": {
        "torch": {
            "zeros_38": {
                "variable": {
                    "value": "plain_images_final_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.batch_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "config.in_channels - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.input_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "config.input_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "transformed_images_final_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.batch_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "config.in_channels - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.input_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "config.input_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "plain_images_final_batch_cropped",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.batch_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "config.in_channels - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.input_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "config.input_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "transformed_images_final_batch_cropped",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.batch_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "config.in_channels - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.input_sz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "config.input_sz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_562": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "codebase/utils/cluster/transforms.py": {
        "torch": {
            "cat_20": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_tensor, grey_img_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((items, h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask).cuda()",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_131": {
                "variable": {
                    "value": "conv1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(sobel1).cuda().float().unsqueeze(0).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_137": {
                "variable": {
                    "value": "conv2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(sobel2).cuda().float().unsqueeze(0).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "sobel_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dx, dy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_132": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "ndarray": {
                    "value": "sobel2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_138": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "sobel_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rgb_imgs, sobel_imgs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "sobel_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rgb_imgs, sobel_imgs, ir_imgs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "sobel_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sobel_imgs, ir_imgs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "codebase/utils/cluster/utils.py": {
        "torch": {
            "load_36": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_name",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_name",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_14": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': net.module.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': epoch + 1}",
                            "Dict"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_name",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_name",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_32": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': net.module.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': epoch + 1}",
                            "Dict"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_name",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_name",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_name",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}