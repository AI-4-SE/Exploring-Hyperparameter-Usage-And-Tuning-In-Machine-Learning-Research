{
    "cross_vali_recurrent_network_wifi_activity.py": {
        "sklearn": {
            "shuffle_98": {
                "variable": {
                    "value": "(x_bed, y_bed)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_bed",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_bed",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shuffle_99": {
                "variable": {
                    "value": "(x_fall, y_fall)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_fall",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_fall",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shuffle_100": {
                "variable": {
                    "value": "(x_pickup, y_pickup)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_pickup",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_pickup",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shuffle_101": {
                "variable": {
                    "value": "(x_run, y_run)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_run",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_run",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shuffle_102": {
                "variable": {
                    "value": "(x_sitdown, y_sitdown)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_sitdown",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_sitdown",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shuffle_103": {
                "variable": {
                    "value": "(x_standup, y_standup)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_standup",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_standup",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shuffle_104": {
                "variable": {
                    "value": "(x_walk, y_walk)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x_walk",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_walk",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "confusion_matrix_199": {
                "variable": {
                    "value": "confusion",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_vali, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "confusion_matrix_198": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(y_vali, 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_steps, n_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_79": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=pred, labels=y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_80": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "equal_83": {
                "variable": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_84": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_87": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_steps, n_input])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, n_input])",
                            "Call"
                        ],
                        [
                            "tf.split(x, n_steps, 0)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_steps, n_input])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, n_input])",
                            "Call"
                        ],
                        [
                            "tf.split(x, n_steps, 0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_steps, n_input])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, n_input])",
                            "Call"
                        ],
                        [
                            "tf.split(x, n_steps, 0)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "window_size",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_67": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ]
                    ]
                },
                "forget_bias": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "static_rnn_70": {
                "variable": {
                    "value": "(outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn.BasicLSTMCell(n_hidden, forget_bias=1.0)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_steps, n_input])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, n_input])",
                            "Call"
                        ],
                        [
                            "tf.split(x, n_steps, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden, n_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "initial_value": {
                    "value": "tf.random_normal([n_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_79": {
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RNN(x, weights, biases)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_83": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_classes])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_84": {
                "x": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_157": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_195": {
                "variable": {
                    "value": "y_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RNN(x, weights, biases)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "a": {
                    "value": "outputs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "weights['out']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}