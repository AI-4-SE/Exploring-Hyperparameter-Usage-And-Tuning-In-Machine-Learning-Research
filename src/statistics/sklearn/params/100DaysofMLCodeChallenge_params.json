{
    "Classification/Decision_Tree_Classification/decision_tree_classification.py": {
        "StandardScaler_19": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "DecisionTreeClassifier_25": {
            "variable": {
                "value": "classifier",
                "possible_values": []
            },
            "criterion": {
                "value": "entropy",
                "possible_values": []
            },
            "random_state": {
                "value": "0",
                "possible_values": []
            }
        }
    },
    "Classification/K-Nearest_Neighbors(K-NN)/knn.py": {
        "StandardScaler_19": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "KNeighborsClassifier_25": {
            "variable": {
                "value": "classifier",
                "possible_values": []
            },
            "n_neighbors": {
                "value": "5",
                "possible_values": []
            },
            "metric": {
                "value": "minkowski",
                "possible_values": []
            },
            "p": {
                "value": "2",
                "possible_values": []
            }
        }
    },
    "Classification/Kernel_SVM/kernal_svm.py": {
        "StandardScaler_19": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "SVC_25": {
            "variable": {
                "value": "classifier",
                "possible_values": []
            },
            "kernel": {
                "value": "rbf",
                "possible_values": []
            },
            "random_state": {
                "value": "0",
                "possible_values": []
            }
        }
    },
    "Classification/Logistic_Regression/logistic_regression.py": {
        "StandardScaler_19": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "LogisticRegression_25": {
            "variable": {
                "value": "classifier",
                "possible_values": []
            },
            "random_state": {
                "value": "0",
                "possible_values": []
            }
        }
    },
    "Classification/Naive_Bayes/naive_bayes.py": {
        "StandardScaler_19": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "GaussianNB_25": {
            "variable": {
                "value": "classifier",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "Classification/Random_Forest_Classification/random_forest_classification.py": {
        "StandardScaler_19": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "RandomForestClassifier_25": {
            "variable": {
                "value": "classifier",
                "possible_values": []
            },
            "n_estimators": {
                "value": "10",
                "possible_values": []
            },
            "criterion": {
                "value": "entropy",
                "possible_values": []
            },
            "random_state": {
                "value": "0",
                "possible_values": []
            }
        }
    },
    "Classification/Support_Vector_Machine(SVM)/svm.py": {
        "StandardScaler_19": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "SVC_25": {
            "variable": {
                "value": "classifier",
                "possible_values": []
            },
            "kernel": {
                "value": "linear",
                "possible_values": []
            },
            "random_state": {
                "value": "0",
                "possible_values": []
            }
        }
    },
    "Clustering/Hierarchical-Clustering/hc.py": {
        "AgglomerativeClustering_35": {
            "variable": {
                "value": "hc",
                "possible_values": []
            },
            "n_clusters": {
                "value": "5",
                "possible_values": []
            },
            "affinity": {
                "value": "euclidean",
                "possible_values": []
            },
            "linkage": {
                "value": "ward",
                "possible_values": []
            }
        }
    },
    "Clustering/K-Means_Clustering/kmeans.py": {
        "KMeans_39": {
            "variable": {
                "value": "kmeans",
                "possible_values": []
            },
            "n_clusters": {
                "value": "5",
                "possible_values": []
            },
            "init": {
                "value": "k-means++",
                "possible_values": []
            },
            "random_state": {
                "value": "42",
                "possible_values": []
            }
        },
        "KMeans_29": {
            "variable": {
                "value": "kmeans",
                "possible_values": []
            },
            "n_clusters": {
                "value": "i",
                "possible_values": [
                    "next(iter(range(1, 11)))"
                ]
            },
            "init": {
                "value": "k-means++",
                "possible_values": []
            },
            "random_state": {
                "value": "42",
                "possible_values": []
            }
        }
    },
    "Data-Preprocessing/categorical_data.py": {
        "LabelEncoder_22": {
            "variable": {
                "value": "labelencoder_X",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "OneHotEncoder_24": {
            "variable": {
                "value": "onehotencoder",
                "possible_values": []
            },
            "categorical_features": {
                "value": "[0]",
                "possible_values": []
            }
        },
        "LabelEncoder_27": {
            "variable": {
                "value": "labelencoder_y",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "Data-Preprocessing/data_preprocessing_template.py": {
        "StandardScaler_19": {
            "variable": {
                "value": "sc_X",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "StandardScaler_22": {
            "variable": {
                "value": "sc_y",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "Data-Preprocessing/missing_data.py": {},
    "Deep-Learning/Artificial-Neural-Networks(ANN)/ann.py": {
        "LabelEncoder_26": {
            "variable": {
                "value": "labelencoder_X_1",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "LabelEncoder_28": {
            "variable": {
                "value": "labelencoder_X_2",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "OneHotEncoder_30": {
            "variable": {
                "value": "onehotencoder",
                "possible_values": []
            },
            "categorical_features": {
                "value": "[1]",
                "possible_values": []
            }
        },
        "StandardScaler_40": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "Deep-Learning/Mega_Case_Study/ann.py": {
        "LabelEncoder_26": {
            "variable": {
                "value": "labelencoder_X_1",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "LabelEncoder_28": {
            "variable": {
                "value": "labelencoder_X_2",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "OneHotEncoder_30": {
            "variable": {
                "value": "onehotencoder",
                "possible_values": []
            },
            "categorical_features": {
                "value": "[1]",
                "possible_values": []
            }
        },
        "StandardScaler_40": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "Deep-Learning/Mega_Case_Study/mega_case_study.py": {
        "MinMaxScaler_19": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "feature_range": {
                "value": "(0, 1)",
                "possible_values": []
            }
        },
        "StandardScaler_66": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "Deep-Learning/Mega_Case_Study/som.py": {
        "MinMaxScaler_15": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "feature_range": {
                "value": "(0, 1)",
                "possible_values": []
            }
        }
    },
    "Deep-Learning/Recurrent_Neural_Networks(RNN)/rnn.py": {
        "MinMaxScaler_18": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "feature_range": {
                "value": "(0, 1)",
                "possible_values": []
            }
        }
    },
    "Deep-Learning/Self-Organizing-Maps (SOM)/som.py": {
        "MinMaxScaler_15": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "feature_range": {
                "value": "(0, 1)",
                "possible_values": []
            }
        }
    },
    "Dimensionality-Reduction/Kernel_PCA/kernel_pca.py": {
        "StandardScaler_19": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "KernelPCA_25": {
            "variable": {
                "value": "kpca",
                "possible_values": []
            },
            "n_components": {
                "value": "2",
                "possible_values": []
            },
            "kernel": {
                "value": "rbf",
                "possible_values": []
            }
        },
        "LogisticRegression_31": {
            "variable": {
                "value": "classifier",
                "possible_values": []
            },
            "random_state": {
                "value": "0",
                "possible_values": []
            }
        }
    },
    "Dimensionality-Reduction/Linear_Discriminant_Analysis(LDA)/lda.py": {
        "StandardScaler_19": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "LogisticRegression_31": {
            "variable": {
                "value": "classifier",
                "possible_values": []
            },
            "random_state": {
                "value": "0",
                "possible_values": []
            }
        }
    },
    "Dimensionality-Reduction/Principal_Component_Analysis(PCA)/pca.py": {
        "StandardScaler_19": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "PCA_25": {
            "variable": {
                "value": "pca",
                "possible_values": []
            },
            "n_components": {
                "value": "2",
                "possible_values": []
            }
        },
        "LogisticRegression_32": {
            "variable": {
                "value": "classifier",
                "possible_values": []
            },
            "random_state": {
                "value": "0",
                "possible_values": []
            }
        }
    },
    "Model-Selection-&-Boosting/Model-Selection/grid_search.py": {
        "StandardScaler_19": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "SVC_25": {
            "variable": {
                "value": "classifier",
                "possible_values": []
            },
            "kernel": {
                "value": "rbf",
                "possible_values": []
            },
            "random_state": {
                "value": "0",
                "possible_values": []
            }
        },
        "GridSearchCV_45": {
            "variable": {
                "value": "grid_search",
                "possible_values": []
            },
            "estimator": {
                "value": "classifier",
                "possible_values": [
                    "SVC(kernel='rbf', random_state=0)"
                ]
            },
            "param_grid": {
                "value": "parameters",
                "possible_values": [
                    "[{'C': [1, 10, 100, 1000], 'kernel': ['linear']}, {'C': [1, 10, 100, 1000], 'kernel': ['rbf'], 'gamma': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]}]"
                ]
            },
            "scoring": {
                "value": "accuracy",
                "possible_values": []
            },
            "cv": {
                "value": "10",
                "possible_values": []
            },
            "n_jobs": {
                "value": "-1",
                "possible_values": []
            }
        }
    },
    "Model-Selection-&-Boosting/Model-Selection/k_fold_cross_validation.py": {
        "StandardScaler_19": {
            "variable": {
                "value": "sc",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "SVC_25": {
            "variable": {
                "value": "classifier",
                "possible_values": []
            },
            "kernel": {
                "value": "rbf",
                "possible_values": []
            },
            "random_state": {
                "value": "0",
                "possible_values": []
            }
        }
    },
    "Model-Selection-&-Boosting/XGBoost/xgboost.py": {
        "LabelEncoder_17": {
            "variable": {
                "value": "labelencoder_X_1",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "LabelEncoder_19": {
            "variable": {
                "value": "labelencoder_X_2",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "OneHotEncoder_21": {
            "variable": {
                "value": "onehotencoder",
                "possible_values": []
            },
            "categorical_features": {
                "value": "[1]",
                "possible_values": []
            }
        }
    },
    "Natural-Language-Processing/natural_language_processing.py": {
        "CountVectorizer_29": {
            "variable": {
                "value": "cv",
                "possible_values": []
            },
            "max_features": {
                "value": "1500",
                "possible_values": []
            }
        },
        "GaussianNB_39": {
            "variable": {
                "value": "classifier",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "Regression/Decision-Tree-Regression/decision_tree_regression.py": {
        "DecisionTreeRegressor_27": {
            "variable": {
                "value": "regressor",
                "possible_values": []
            },
            "random_state": {
                "value": "0",
                "possible_values": []
            }
        }
    },
    "Regression/Multiple-Linear-Regression/multiple_linear_regression.py": {
        "LabelEncoder_15": {
            "variable": {
                "value": "labelencoder",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "OneHotEncoder_17": {
            "variable": {
                "value": "onehotencoder",
                "possible_values": []
            },
            "categorical_features": {
                "value": "[3]",
                "possible_values": []
            }
        },
        "LinearRegression_37": {
            "variable": {
                "value": "regressor",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "Regression/Polynomial-Regression/polynomial_regression.py": {
        "LinearRegression_25": {
            "variable": {
                "value": "lin_reg",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "PolynomialFeatures_30": {
            "variable": {
                "value": "poly_reg",
                "possible_values": []
            },
            "degree": {
                "value": "4",
                "possible_values": []
            }
        },
        "LinearRegression_33": {
            "variable": {
                "value": "lin_reg_2",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "Regression/Random-Forest-Regression/random_forest_regression.py": {
        "RandomForestRegressor_27": {
            "variable": {
                "value": "regressor",
                "possible_values": []
            },
            "n_estimators": {
                "value": "300",
                "possible_values": []
            },
            "random_state": {
                "value": "0",
                "possible_values": []
            }
        }
    },
    "Regression/Simple-Linear-Regression/simple_linear_regression.py": {
        "LinearRegression_27": {
            "variable": {
                "value": "regressor",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        }
    },
    "Regression/Support-Vector-Regression(SVR)/svr.py": {
        "StandardScaler_19": {
            "variable": {
                "value": "sc_X",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "StandardScaler_20": {
            "variable": {
                "value": "sc_y",
                "possible_values": []
            },
            "params": {
                "value": "default",
                "possible_values": []
            }
        },
        "SVR_26": {
            "variable": {
                "value": "regressor",
                "possible_values": []
            },
            "kernel": {
                "value": "rbf",
                "possible_values": []
            }
        }
    },
    "Regression/regression_template.py": {}
}