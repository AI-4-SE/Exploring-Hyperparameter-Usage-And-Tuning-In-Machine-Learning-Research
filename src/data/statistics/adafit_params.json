{
    "ThreeDmFVNet.py": {
        "sklearn": {
            "GaussianMixture_234": {
                "variable": {
                    "value": "gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_gaussians",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.shape[0]",
                            "Subscript"
                        ],
                        [
                            "np.prod(np.array(subdivisions))",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_163": {
                "variable": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_163": {
                "variable": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "variable": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_164": {
                "variable": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "variable": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_165": {
                "variable": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_166": {
                "variable": {
                    "value": "w_per_batch_per_d",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_166": {
                "variable": {
                    "value": "w_per_batch_per_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.max(d_pi_all, axis=1)[0], torch.sum(d_pi_all, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d_pi, d_mu, d_sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_248": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_249": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_254": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_255": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 2 * 2 * 512 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_24": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_25": {
                "variable": {
                    "value": "self.do1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_27": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_28": {
                "variable": {
                    "value": "self.do2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_30": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.do3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.fc3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_127": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "D_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "D_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_128": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "D_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_129": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "D_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "D_out_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(D_out / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_130": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "D_out_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(D_out / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv3d_131": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "D_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "D_out_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(D_out / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_132": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "D_out_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(D_out / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "AvgPool3d_133": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_134": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "D_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "D_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_135": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "D_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_138": {
                "variable": {
                    "value": "one_by_one",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_139": {
                "variable": {
                    "value": "c1_by_c1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_140": {
                "variable": {
                    "value": "c2_by_c2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_142": {
                "variable": {
                    "value": "average_pooling",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(average_pooling))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, n_points, 3, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(points)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_205": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.max(d_pi_all, axis=1)[0], torch.sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "torch.sign(d_pi) * torch.pow(torch.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(d_pi, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_206": {
                "variable": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / torch.sqrt(w_per_batch_per_d) * torch.cat([torch.max(d_mu_all, axis=1)[0], torch.min(d_mu_all, axis=1)[0], torch.sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "torch.sign(d_mu) * torch.pow(torch.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(d_mu, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_207": {
                "variable": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / torch.sqrt(2 * w_per_batch_per_d) * torch.cat([torch.max(d_sig_all, axis=1)[0], torch.min(d_sig_all, axis=1)[0], torch.sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "torch.sign(d_sigma) * torch.pow(torch.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(d_sigma, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_143": {
                "tensors": {
                    "value": "(one_by_one, c1_by_c1, c2_by_c2, average_pooling)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_159": {
                "obj": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, n_points, 3, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(points)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_171": {
                "input": {
                    "value": "-0.5 * torch.sum(torch.pow((batch_points - batch_mu) / batch_sig, 2.0), axis=3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_182": {
                "tensors": {
                    "value": "[torch.max(d_mu_all, axis=1)[0], torch.min(d_mu_all, axis=1)[0], torch.sum(d_mu_all, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "tensors": {
                    "value": "[torch.max(d_sig_all, axis=1)[0], torch.min(d_sig_all, axis=1)[0], torch.sum(d_sig_all, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_74": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_179": {
                "input": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((Q - batch_w) / torch.sqrt(batch_w)).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_182": {
                "input": {
                    "value": "w_per_batch_per_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(w).unsqueeze(0).unsqueeze(-1).repeat(n_batches, 1, 3 * D).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_186": {
                "input": {
                    "value": "(batch_points - batch_mu) / batch_sig",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_187": {
                "input": {
                    "value": "2 * w_per_batch_per_d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_199": {
                "input": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.max(d_pi_all, axis=1)[0], torch.sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "torch.sign(d_pi) * torch.pow(torch.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(d_pi, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_199": {
                "input": {
                    "value": "torch.abs(d_pi)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "sign_200": {
                "input": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / torch.sqrt(w_per_batch_per_d) * torch.cat([torch.max(d_mu_all, axis=1)[0], torch.min(d_mu_all, axis=1)[0], torch.sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "torch.sign(d_mu) * torch.pow(torch.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(d_mu, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_200": {
                "input": {
                    "value": "torch.abs(d_mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "sign_201": {
                "input": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / torch.sqrt(2 * w_per_batch_per_d) * torch.cat([torch.max(d_sig_all, axis=1)[0], torch.min(d_sig_all, axis=1)[0], torch.sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "torch.sign(d_sigma) * torch.pow(torch.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(d_sigma, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_201": {
                "input": {
                    "value": "torch.abs(d_sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "MaxPool3d_82": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_85": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_171": {
                "input": {
                    "value": "batch_sig[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_172": {
                "input": {
                    "value": "torch.pow((batch_points - batch_mu) / batch_sig, 2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_178": {
                "input": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(w).unsqueeze(0).unsqueeze(0).repeat(n_batches, n_points, 1).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_179": {
                "input": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((Q - batch_w) / torch.sqrt(batch_w)).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_184": {
                "input": {
                    "value": "d_mu_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_189": {
                "input": {
                    "value": "d_sig_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (torch.pow((batch_points - batch_mu) / batch_sig, 2.0) - 1.0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_199": {
                "input": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.max(d_pi_all, axis=1)[0], torch.sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "torch.sign(d_pi) * torch.pow(torch.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(d_pi, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_200": {
                "input": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / torch.sqrt(w_per_batch_per_d) * torch.cat([torch.max(d_mu_all, axis=1)[0], torch.min(d_mu_all, axis=1)[0], torch.sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "torch.sign(d_mu) * torch.pow(torch.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(d_mu, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_201": {
                "input": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / torch.sqrt(2 * w_per_batch_per_d) * torch.cat([torch.max(d_sig_all, axis=1)[0], torch.min(d_sig_all, axis=1)[0], torch.sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "torch.sign(d_sigma) * torch.pow(torch.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(d_sigma, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool3d_90": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_93": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_96": {
                "variable": {
                    "value": "self.maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_172": {
                "input": {
                    "value": "(batch_points - batch_mu) / batch_sig",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_182": {
                "input": {
                    "value": "d_mu_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_183": {
                "input": {
                    "value": "d_mu_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_187": {
                "input": {
                    "value": "d_sig_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (torch.pow((batch_points - batch_mu) / batch_sig, 2.0) - 1.0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_188": {
                "input": {
                    "value": "d_sig_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (torch.pow((batch_points - batch_mu) / batch_sig, 2.0) - 1.0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/normal_estimation_utils.py": {
        "sklearn": {
            "GaussianMixture_70": {
                "variable": {
                    "value": "gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_gaussians",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.prod(np.array(subdivisions))",
                            "Call"
                        ],
                        [
                            "np.prod(np.array(subdivisions))",
                            "Call"
                        ],
                        [
                            "gmm.means_.shape[0]",
                            "Subscript"
                        ],
                        [
                            "mu.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "covariance_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'diag'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GaussianMixture_94": {
                "variable": {
                    "value": "gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_gaussians",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.prod(np.array(subdivisions))",
                            "Call"
                        ],
                        [
                            "np.prod(np.array(subdivisions))",
                            "Call"
                        ],
                        [
                            "gmm.means_.shape[0]",
                            "Subscript"
                        ],
                        [
                            "mu.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GaussianMixture_121": {
                "variable": {
                    "value": "gmm",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_gaussians",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.prod(np.array(subdivisions))",
                            "Call"
                        ],
                        [
                            "np.prod(np.array(subdivisions))",
                            "Call"
                        ],
                        [
                            "gmm.means_.shape[0]",
                            "Subscript"
                        ],
                        [
                            "mu.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_209": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "d_pi[:, np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_210": {
                "variable": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(s1 - gmm.means_ * s0) / np.sqrt(tiled_weights * gmm.covariances_)",
                            "BinOp"
                        ],
                        [
                            "np.sign(d_mu) * np.power(np.absolute(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "normalize(d_mu, axis=0)",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(Q, -1), D) * x_mu / (np.sqrt(sig2_tiled) * sqrt_w)",
                            "BinOp"
                        ],
                        [
                            "1 / np.sqrt(w_per_batch_per_d) * np.concatenate([np.max(d_mu_all, axis=1), np.min(d_mu_all, axis=1), np.sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "np.sign(d_mu) * np.power(np.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "np.array([l2_normalize(d_mu[i, :, :], dim=0) for i in range(n_batches)])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_211": {
                "variable": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(+s2 - 2 * s1 * gmm.means_ + s0 * gmm.means_ ** 2 - s0 * gmm.covariances_) / (np.sqrt(2 * tiled_weights) * gmm.covariances_)",
                            "BinOp"
                        ],
                        [
                            "np.sign(d_sigma) * np.power(np.absolute(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "normalize(d_sigma, axis=0)",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(Q, -1), 3) * (np.power(x_mu, 2) / sig2_tiled - 1) / (np.sqrt(2) * sqrt_w)",
                            "BinOp"
                        ],
                        [
                            "1 / np.sqrt(2 * w_per_batch_per_d) * np.concatenate([np.max(d_sig_all, axis=1), np.min(d_sig_all, axis=1), np.sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "np.sign(d_sigma) * np.power(np.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "np.array([l2_normalize(d_sigma[i, :, :], dim=0) for i in range(n_batches)])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "bmm_376": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "q.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_362": {
                "input": {
                    "value": "v1.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v2.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_362": {
                "input": {
                    "value": "v1.norm(2, 1) * v2.norm(2, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_373": {
                "input": {
                    "value": "q.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_399": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_403": {
                "variable": {
                    "value": "b1_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_404": {
                "variable": {
                    "value": "b2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_409": {
                "tensors": {
                    "value": "[F, G]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_411": {
                "variable": {
                    "value": "norm_N0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1_2 + b2_2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_415": {
                "tensors": {
                    "value": "[f, g]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "symeig_419": {
                "variable": {
                    "value": "(curvatures, dirs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "M_weingarten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.bmm(torch.inverse(I), II)",
                            "UnaryOp"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_420": {
                "variable": {
                    "value": "dirs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dirs, torch.zeros(dirs.shape[0], 2, 1, device=dirs.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_417": {
                "input": {
                    "value": "torch.inverse(I)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "II",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([e, f], dim=2), torch.cat([f, g], dim=2)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_417": {
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([E, F], dim=2), torch.cat([F, G], dim=2)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_420": {
                "*size": {
                    "value": "dirs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "dirs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/provider.py": {
        "sklearn": {
            "KDTree_165": {
                "variable": {
                    "value": "kdt",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_data[i, :, :]",
                            "Subscript"
                        ],
                        [
                            "np.delete(point_cloud, occluded_points_idx, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "leaf_size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_322": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PointcloudPatchDataset(root=indir, shape_list_filename=dataset_name, patch_radius=patch_radius, points_per_patch=points_per_patch, patch_features=target_features, point_count_std=patch_point_count_std, seed=seed, identical_epochs=identical_epochs, use_pca=use_pca, center=patch_center, point_tuple=point_tuple, cache_capacity=cache_capacity, sparse_patches=sparse_patches)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "datasampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomPointcloudPatchSampler(dataset, patches_per_shape=patches_per_shape, seed=seed, identical_epochs=identical_epochs)",
                            "Call"
                        ],
                        [
                            "SequentialShapeRandomPointcloudPatchSampler(dataset, patches_per_shape=patches_per_shape, seed=seed, identical_epochs=identical_epochs)",
                            "Call"
                        ],
                        [
                            "SequentialPointcloudPatchSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "int(workers)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/tf_util.py": {
        "tensorflow": {
            "tile_594": {
                "variable": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(sigma, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_points, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_595": {
                "variable": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(batch_sig, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_596": {
                "variable": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(mu, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_points, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_597": {
                "variable": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(batch_mu, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_598": {
                "variable": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(w, 0), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, n_points, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_599": {
                "variable": {
                    "value": "batch_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(points, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n_gaussians, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_603": {
                "variable": {
                    "value": "w_per_batch_per_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(w, 0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, 3 * D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_610": {
                "variable": {
                    "value": "w_p",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_per_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "1.0 / (tf.pow(2.0 * np.pi, D / 2.0) * tf.pow(batch_sig[:, :, :, 0], D)) * tf.exp(-0.5 * tf.reduce_sum(tf.square((batch_points - batch_mu) / batch_sig), axis=3))",
                            "BinOp"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "1.0 / (tf.pow(2.0 * np.pi, D / 2.0) * tf.pow(batch_sig[:, :, :, 0], D)) * tf.exp(-0.5 * tf.reduce_sum(tf.square((batch_points - batch_mu) / batch_sig), axis=3))",
                            "BinOp"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_612": {
                "variable": {
                    "value": "Q_per_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(Q, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_618": {
                "variable": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(Q - batch_w) / (tf.sqrt(batch_w) * n_points)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_619": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_637": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_638": {
                "variable": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_639": {
                "variable": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_665": {
                "variable": {
                    "value": "n_original_points",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n_original_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(n_original_points, tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_672": {
                "variable": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(sigma, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_points, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_673": {
                "variable": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(batch_sig, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_674": {
                "variable": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(mu, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_points, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_675": {
                "variable": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(batch_mu, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_676": {
                "variable": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(w, 0), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, n_points, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_677": {
                "variable": {
                    "value": "batch_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(points, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n_gaussians, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_681": {
                "variable": {
                    "value": "w_per_batch_per_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(w, 0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, 3 * D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_689": {
                "variable": {
                    "value": "zeros_per_point",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_per_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "1.0 / (tf.pow(2.0 * np.pi, D / 2.0) * tf.pow(batch_sig[:, :, :, 0], D)) * tf.exp(-0.5 * tf.reduce_sum(tf.square((batch_points - batch_mu) / batch_sig), axis=3))",
                            "BinOp"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "1.0 / (tf.pow(2.0 * np.pi, D / 2.0) * tf.pow(batch_sig[:, :, :, 0], D)) * tf.exp(-0.5 * tf.reduce_sum(tf.square((batch_points - batch_mu) / batch_sig), axis=3))",
                            "BinOp"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "range_691": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tile_693": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(n_points)",
                            "Call"
                        ],
                        [
                            "r[tf.newaxis, :, tf.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(r, (n_batches, 1, n_gaussians))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(n_batches, 1, n_gaussians)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_695": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_original_points[:, tf.newaxis, tf.newaxis]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(idxs, (1, n_points, n_gaussians))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(1, n_points, n_gaussians)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "where_698": {
                "variable": {
                    "value": "w_zero_compensate",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r > idxs",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros_per_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(p_per_point)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_700": {
                "variable": {
                    "value": "w_p",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_per_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "1.0 / (tf.pow(2.0 * np.pi, D / 2.0) * tf.pow(batch_sig[:, :, :, 0], D)) * tf.exp(-0.5 * tf.reduce_sum(tf.square((batch_points - batch_mu) / batch_sig), axis=3))",
                            "BinOp"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "1.0 / (tf.pow(2.0 * np.pi, D / 2.0) * tf.pow(batch_sig[:, :, :, 0], D)) * tf.exp(-0.5 * tf.reduce_sum(tf.square((batch_points - batch_mu) / batch_sig), axis=3))",
                            "BinOp"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "where_703": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r > idxs",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "zeros_per_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(p_per_point)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, zeros_per_point, Q)",
                            "Call"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_704": {
                "variable": {
                    "value": "Q_per_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(Q, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_710": {
                "variable": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(Q - batch_w + w_zero_compensate) / tf.sqrt(batch_w)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_711": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "divide_728": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "effective_n_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(tf.cast(n_original_points, tf.float32), -1), -1)",
                            "Call"
                        ],
                        [
                            "n_points",
                            "variable"
                        ]
                    ]
                }
            },
            "divide_729": {
                "variable": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "effective_n_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(tf.cast(n_original_points, tf.float32), -1), -1)",
                            "Call"
                        ],
                        [
                            "n_points",
                            "variable"
                        ]
                    ]
                }
            },
            "divide_730": {
                "variable": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "effective_n_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(tf.cast(n_original_points, tf.float32), -1), -1)",
                            "Call"
                        ],
                        [
                            "n_points",
                            "variable"
                        ]
                    ]
                }
            },
            "l2_normalize_739": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_740": {
                "variable": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_741": {
                "variable": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_775": {
                "variable": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(sigma, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_points, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_776": {
                "variable": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(batch_sig, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_777": {
                "variable": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(mu, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_points, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_778": {
                "variable": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(batch_mu, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_779": {
                "variable": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(w, 0), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, n_points, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_780": {
                "variable": {
                    "value": "batch_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(points, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n_gaussians, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_784": {
                "variable": {
                    "value": "w_per_batch_per_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(w, 0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_790": {
                "variable": {
                    "value": "w_p",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_per_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "1.0 / (tf.pow(2.0 * np.pi, D / 2.0) * tf.pow(batch_sig[:, :, :, 0], D)) * tf.exp(-0.5 * tf.reduce_sum(tf.square((batch_points - batch_mu) / batch_sig), axis=3))",
                            "BinOp"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "1.0 / (tf.pow(2.0 * np.pi, D / 2.0) * tf.pow(batch_sig[:, :, :, 0], D)) * tf.exp(-0.5 * tf.reduce_sum(tf.square((batch_points - batch_mu) / batch_sig), axis=3))",
                            "BinOp"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_792": {
                "variable": {
                    "value": "Q_per_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(Q, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_798": {
                "variable": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(Q - batch_w) / (tf.sqrt(batch_w) * n_points)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "l2_normalize_821": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_822": {
                "variable": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_823": {
                "variable": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_856": {
                "variable": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(sigma, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_points, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_857": {
                "variable": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(batch_sig, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_858": {
                "variable": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(mu, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_points, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_859": {
                "variable": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(batch_mu, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_860": {
                "variable": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(w, 0), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, n_points, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_861": {
                "variable": {
                    "value": "batch_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(points, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n_gaussians, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_865": {
                "variable": {
                    "value": "w_per_batch_per_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(w, 0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_872": {
                "variable": {
                    "value": "w_p",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_per_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "1.0 / (tf.pow(2.0 * np.pi, D / 2.0) * tf.pow(batch_sig[:, :, :, 0], D)) * tf.exp(-0.5 * tf.reduce_sum(tf.square((batch_points - batch_mu) / batch_sig), axis=3))",
                            "BinOp"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "1.0 / (tf.pow(2.0 * np.pi, D / 2.0) * tf.pow(batch_sig[:, :, :, 0], D)) * tf.exp(-0.5 * tf.reduce_sum(tf.square((batch_points - batch_mu) / batch_sig), axis=3))",
                            "BinOp"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_874": {
                "variable": {
                    "value": "Q_per_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(Q, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_877": {
                "variable": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(Q - batch_w) / tf.sqrt(batch_w)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_878": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w + w_zero_compensate) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(one_over_n * (Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_934": {
                "variable": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(sigma, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_points, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_935": {
                "variable": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(batch_sig, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_936": {
                "variable": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(mu, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_points, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_937": {
                "variable": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(batch_mu, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_938": {
                "variable": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(w, 0), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, n_points, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_939": {
                "variable": {
                    "value": "batch_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(points, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n_gaussians, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_943": {
                "variable": {
                    "value": "w_per_batch_per_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(w, 0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_950": {
                "variable": {
                    "value": "w_p",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_per_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "1.0 / (tf.pow(2.0 * np.pi, D / 2.0) * tf.pow(batch_sig[:, :, :, 0], D)) * tf.exp(-0.5 * tf.reduce_sum(tf.square((batch_points - batch_mu) / batch_sig), axis=3))",
                            "BinOp"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "1.0 / (tf.pow(2.0 * np.pi, D / 2.0) * tf.pow(batch_sig[:, :, :, 0], D)) * tf.exp(-0.5 * tf.reduce_sum(tf.square((batch_points - batch_mu) / batch_sig), axis=3))",
                            "BinOp"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_952": {
                "variable": {
                    "value": "Q_per_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(Q, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_957": {
                "variable": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(Q - batch_w) / tf.sqrt(batch_w)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_958": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w + w_zero_compensate) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(one_over_n * (Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_1020": {
                "variable": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(sigma, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_points, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_1021": {
                "variable": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(batch_sig, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_1022": {
                "variable": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(mu, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_points, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_1023": {
                "variable": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(batch_mu, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_1024": {
                "variable": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(w, 0), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, n_points, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_1025": {
                "variable": {
                    "value": "batch_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(points, -2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n_gaussians, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_1029": {
                "variable": {
                    "value": "w_per_batch_per_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(w, 0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_batches, 1, 3 * D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_1039": {
                "variable": {
                    "value": "w_p",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_per_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "1.0 / (tf.pow(2.0 * np.pi, D / 2.0) * tf.pow(batch_sig[:, :, :, 0], D)) * tf.exp(-0.5 * tf.reduce_sum(tf.square((batch_points - batch_mu) / batch_sig), axis=3))",
                            "BinOp"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ],
                        [
                            "1.0 / (tf.pow(2.0 * np.pi, D / 2.0) * tf.pow(batch_sig[:, :, :, 0], D)) * tf.exp(-0.5 * tf.reduce_sum(tf.square((batch_points - batch_mu) / batch_sig), axis=3))",
                            "BinOp"
                        ],
                        [
                            "mvn.prob(batch_points)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_1041": {
                "variable": {
                    "value": "Q_per_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(Q, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, 1, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1045": {
                "variable": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_over_n * (Q - batch_w) / tf.sqrt(batch_w)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_1046": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_1064": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_1065": {
                "variable": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_1066": {
                "variable": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1078": {
                "variable": {
                    "value": "fv_per_point",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d_pi_all, d_mu_all, d_sig_all]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1079": {
                "variable": {
                    "value": "fv_per_point",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fv_per_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([d_pi_all, d_mu_all, d_sig_all], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(fv_per_point, [n_batches, n_points, n_gaussians * 7])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_batches, n_points, n_gaussians * 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_1092": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_25": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_49": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_52": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_99": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_104": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(outputs) - 0.1 * tf.nn.relu(-outputs)",
                            "BinOp"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_159": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_164": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(outputs) - 0.1 * tf.nn.relu(-outputs)",
                            "BinOp"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_238": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, out_height, out_width, num_output_channels]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_243": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(outputs) - 0.1 * tf.nn.relu(-outputs)",
                            "BinOp"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_298": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_303": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(outputs) - 0.1 * tf.nn.relu(-outputs)",
                            "BinOp"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_340": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[num_input_units, num_outputs], use_xavier=use_xavier, stddev=stddev, wd=weigth_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_343": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(outputs) - 0.1 * tf.nn.relu(-outputs)",
                            "BinOp"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_372": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool_398": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool3d_424": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool3d_450": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_473": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[num_channels])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_475": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[num_channels])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "moments_477": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "moments_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_479": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn_decay if bn_decay is not None else 0.9",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cond_481": {
                "variable": {
                    "value": "ema_apply_op",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : ema.apply([batch_mean, batch_var])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.no_op()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_491": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "mean_var_with_update",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (ema.average(batch_mean), ema.average(batch_var))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "batch_normalization_494": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, initializer)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.0, shape=[num_channels]), name='beta', trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(1.0, shape=[num_channels]), name='gamma', trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_572": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(inputs, keep_prob, noise_shape)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : inputs",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "flatten_644": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_pi, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_645": {
                "variable": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_mu, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_646": {
                "variable": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_sigma, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_647": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d_pi, d_mu, d_sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_649": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d_pi, d_mu, d_sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_650": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_723": {
                "input": {
                    "value": "tf.cast(n_original_points, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_745": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_pi, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_746": {
                "variable": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_mu, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_747": {
                "variable": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_sigma, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_748": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d_pi, d_mu, d_sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_750": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d_pi, d_mu, d_sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_751": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_802": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w + w_zero_compensate) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(one_over_n * (Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_828": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_pi, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_829": {
                "variable": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_mu, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_830": {
                "variable": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_sigma, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_831": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d_pi, d_mu, d_sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_833": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d_pi, d_mu, d_sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_834": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_899": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_900": {
                "variable": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_901": {
                "variable": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_905": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_pi, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_906": {
                "variable": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_mu, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_907": {
                "variable": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_sigma, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_908": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d_pi, d_mu, d_sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_910": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d_pi, d_mu, d_sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_911": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l2_normalize_979": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_980": {
                "variable": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_normalize_981": {
                "variable": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_985": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_pi, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_986": {
                "variable": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_mu, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_987": {
                "variable": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_sigma, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_988": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d_pi, d_mu, d_sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_990": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d_pi, d_mu, d_sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_991": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_1071": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_pi, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_1072": {
                "variable": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_mu, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_1073": {
                "variable": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tf.transpose(d_sigma, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_1074": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d_pi, d_mu, d_sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1076": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d_pi, d_mu, d_sigma]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_1077": {
                "variable": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([d_pi, d_mu, d_sigma], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(fv, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_1103": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_1105": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_23": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_53": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_287": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_333": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_369": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_395": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_421": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_447": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_471": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_571": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_594": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_595": {
                "input": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_596": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_597": {
                "input": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_598": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_599": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_603": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_611": {
                "input": {
                    "value": "tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n_gaussians]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_612": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, zeros_per_point, Q)",
                            "Call"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_623": {
                "values": {
                    "value": "[tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_627": {
                "values": {
                    "value": "[tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_632": {
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_632": {
                "x": {
                    "value": "tf.abs(d_pi)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "sign_633": {
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_633": {
                "x": {
                    "value": "tf.abs(d_mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "sign_634": {
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_634": {
                "x": {
                    "value": "tf.abs(d_sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "expand_dims_672": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_673": {
                "input": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_674": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_675": {
                "input": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_676": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_677": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_681": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_688": {
                "x": {
                    "value": "-0.5 * tf.reduce_sum(tf.square((batch_points - batch_mu) / batch_sig), axis=3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_701": {
                "input": {
                    "value": "tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n_gaussians]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_704": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, zeros_per_point, Q)",
                            "Call"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_715": {
                "values": {
                    "value": "[tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_719": {
                "values": {
                    "value": "[tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_734": {
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_734": {
                "x": {
                    "value": "tf.abs(d_pi)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "sign_735": {
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_735": {
                "x": {
                    "value": "tf.abs(d_mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "sign_736": {
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_736": {
                "x": {
                    "value": "tf.abs(d_sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "expand_dims_775": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_776": {
                "input": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_777": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_778": {
                "input": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_779": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_780": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_784": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_791": {
                "input": {
                    "value": "tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n_gaussians]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_792": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, zeros_per_point, Q)",
                            "Call"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_min_806": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w + w_zero_compensate) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(one_over_n * (Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_816": {
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_816": {
                "x": {
                    "value": "tf.abs(d_pi)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "sign_817": {
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_817": {
                "x": {
                    "value": "tf.abs(d_mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "sign_818": {
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_818": {
                "x": {
                    "value": "tf.abs(d_sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "expand_dims_856": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_857": {
                "input": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_858": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_859": {
                "input": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_860": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_861": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_865": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_873": {
                "input": {
                    "value": "tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n_gaussians]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_874": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, zeros_per_point, Q)",
                            "Call"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_881": {
                "input_tensor": {
                    "value": "d_mu_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_884": {
                "input_tensor": {
                    "value": "d_sig_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.square((batch_points - batch_mu) / batch_sig) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_934": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_935": {
                "input": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_936": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_937": {
                "input": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_938": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_939": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_943": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_949": {
                "x": {
                    "value": "-0.5 * tf.reduce_sum(tf.square((batch_points - batch_mu) / batch_sig), axis=3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_951": {
                "input": {
                    "value": "tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n_gaussians]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_952": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, zeros_per_point, Q)",
                            "Call"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_961": {
                "input_tensor": {
                    "value": "d_mu_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_964": {
                "input_tensor": {
                    "value": "d_sig_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.square((batch_points - batch_mu) / batch_sig) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1020": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1021": {
                "input": {
                    "value": "batch_sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(sigma, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_sig, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1022": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1023": {
                "input": {
                    "value": "batch_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mu, 0), [n_points, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(batch_mu, 0), [n_batches, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1024": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_1025": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1029": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_1040": {
                "input": {
                    "value": "tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n_gaussians]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1041": {
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "tf.where(mask, zeros_per_point, Q)",
                            "Call"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ],
                        [
                            "w_p / tf.tile(tf.expand_dims(tf.reduce_sum(w_p, axis=-1), -1), [1, 1, n_gaussians])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_1043": {
                "x": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "points.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "points.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "points.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "points.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "points.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "points.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "original_n_points",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_1050": {
                "values": {
                    "value": "[tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_1054": {
                "values": {
                    "value": "[tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_1059": {
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_1059": {
                "x": {
                    "value": "tf.abs(d_pi)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "sign_1060": {
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_1060": {
                "x": {
                    "value": "tf.abs(d_mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "sign_1061": {
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_1061": {
                "x": {
                    "value": "tf.abs(d_sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "l2_loss_52": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_103": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_163": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_242": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_302": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_342": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_473": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_475": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_611": {
                "input": {
                    "value": "tf.reduce_sum(w_p, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_620": {
                "input_tensor": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w + w_zero_compensate) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(one_over_n * (Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_620": {
                "input_tensor": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w + w_zero_compensate) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(one_over_n * (Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_626": {
                "x": {
                    "value": "(batch_points - batch_mu) / batch_sig",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_632": {
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_633": {
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_634": {
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_644": {
                "a": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_645": {
                "a": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_646": {
                "a": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_701": {
                "input": {
                    "value": "tf.reduce_sum(w_p, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_710": {
                "x": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_712": {
                "input_tensor": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w + w_zero_compensate) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(one_over_n * (Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_712": {
                "input_tensor": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w + w_zero_compensate) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(one_over_n * (Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_715": {
                "x": {
                    "value": "w_per_batch_per_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_718": {
                "x": {
                    "value": "(batch_points - batch_mu) / batch_sig",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_719": {
                "x": {
                    "value": "2 * w_per_batch_per_d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_734": {
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_735": {
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_736": {
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_745": {
                "a": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_746": {
                "a": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_747": {
                "a": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_791": {
                "input": {
                    "value": "tf.reduce_sum(w_p, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pow_800": {
                "x": {
                    "value": "(batch_points - batch_mu) / batch_sig",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_803": {
                "input_tensor": {
                    "value": "d_mu_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_804": {
                "input_tensor": {
                    "value": "d_sig_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.square((batch_points - batch_mu) / batch_sig) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_810": {
                "variable": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(d_pi_all)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_816": {
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_817": {
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_818": {
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_828": {
                "a": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_829": {
                "a": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_830": {
                "a": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_873": {
                "input": {
                    "value": "tf.reduce_sum(w_p, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_877": {
                "x": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_881": {
                "x": {
                    "value": "w_per_batch_per_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_883": {
                "x": {
                    "value": "(batch_points - batch_mu) / batch_sig",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_884": {
                "x": {
                    "value": "2 * w_per_batch_per_d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_894": {
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_894": {
                "x": {
                    "value": "tf.abs(d_pi)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "sign_895": {
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_895": {
                "x": {
                    "value": "tf.abs(d_mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "sign_896": {
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_896": {
                "x": {
                    "value": "tf.abs(d_sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "transpose_905": {
                "a": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_906": {
                "a": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_907": {
                "a": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_951": {
                "input": {
                    "value": "tf.reduce_sum(w_p, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_957": {
                "x": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_961": {
                "x": {
                    "value": "w_per_batch_per_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_963": {
                "x": {
                    "value": "(batch_points - batch_mu) / batch_sig",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_964": {
                "x": {
                    "value": "2 * w_per_batch_per_d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_974": {
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_974": {
                "x": {
                    "value": "tf.abs(d_pi)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "sign_975": {
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_975": {
                "x": {
                    "value": "tf.abs(d_mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "sign_976": {
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_976": {
                "x": {
                    "value": "tf.abs(d_sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ],
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "transpose_985": {
                "a": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_986": {
                "a": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_987": {
                "a": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1040": {
                "input": {
                    "value": "tf.reduce_sum(w_p, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_1045": {
                "x": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_1047": {
                "input_tensor": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w + w_zero_compensate) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(one_over_n * (Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_1047": {
                "input_tensor": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w + w_zero_compensate) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(one_over_n * (Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_1053": {
                "x": {
                    "value": "(batch_points - batch_mu) / batch_sig",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_1059": {
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_1060": {
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_1061": {
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_1071": {
                "a": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1072": {
                "a": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1073": {
                "a": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_348": {
                "features": {
                    "value": "-outputs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_op_483": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_487": {
                "control_inputs": {
                    "value": "[ema_apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_573": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_611": {
                "input_tensor": {
                    "value": "w_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_618": {
                "x": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_623": {
                "x": {
                    "value": "w_per_batch_per_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_624": {
                "input_tensor": {
                    "value": "d_mu_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_624": {
                "input_tensor": {
                    "value": "d_mu_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_624": {
                "input_tensor": {
                    "value": "d_mu_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_627": {
                "x": {
                    "value": "2 * w_per_batch_per_d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_628": {
                "input_tensor": {
                    "value": "d_sig_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.square((batch_points - batch_mu) / batch_sig) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_628": {
                "input_tensor": {
                    "value": "d_sig_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.square((batch_points - batch_mu) / batch_sig) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_628": {
                "input_tensor": {
                    "value": "d_sig_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.square((batch_points - batch_mu) / batch_sig) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_687": {
                "x": {
                    "value": "batch_sig[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "mu.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "mu.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "mu.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "mu.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "mu.shape[1].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_688": {
                "input_tensor": {
                    "value": "tf.square((batch_points - batch_mu) / batch_sig)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_701": {
                "input_tensor": {
                    "value": "w_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_716": {
                "input_tensor": {
                    "value": "d_mu_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_716": {
                "input_tensor": {
                    "value": "d_mu_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_716": {
                "input_tensor": {
                    "value": "d_mu_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_720": {
                "input_tensor": {
                    "value": "d_sig_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.square((batch_points - batch_mu) / batch_sig) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_720": {
                "input_tensor": {
                    "value": "d_sig_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.square((batch_points - batch_mu) / batch_sig) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_720": {
                "input_tensor": {
                    "value": "d_sig_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.square((batch_points - batch_mu) / batch_sig) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_723": {
                "x": {
                    "value": "n_original_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(n_original_points, tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_791": {
                "input_tensor": {
                    "value": "w_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_798": {
                "x": {
                    "value": "batch_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), 0), [n_batches, n_points, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_min_807": {
                "input_tensor": {
                    "value": "d_mu_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_808": {
                "input_tensor": {
                    "value": "d_sig_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.square((batch_points - batch_mu) / batch_sig) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_873": {
                "input_tensor": {
                    "value": "w_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_894": {
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_895": {
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_896": {
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_949": {
                "x": {
                    "value": "batch_sig[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "mu.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "mu.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "mu.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "mu.shape[1].value",
                            "Attribute"
                        ],
                        [
                            "mu.shape[1].value",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_949": {
                "input_tensor": {
                    "value": "tf.square((batch_points - batch_mu) / batch_sig)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_951": {
                "input_tensor": {
                    "value": "w_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_974": {
                "x": {
                    "value": "d_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.divide(d_pi, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_min(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.square(d_pi_all), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(d_pi_all, axis=1)",
                            "Call"
                        ],
                        [
                            "d_pi / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.reduce_max(d_pi_all, axis=1), tf.reduce_sum(d_pi_all, axis=1)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_pi) * tf.pow(tf.abs(d_pi), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_pi, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_pi, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_975": {
                "x": {
                    "value": "d_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_mu, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_max(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_min(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_mu_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(w_per_batch_per_d) * tf.reduce_sum(d_mu_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_mu / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_mu_all, axis=1), tf.reduce_min(d_mu_all, axis=1), tf.reduce_sum(d_mu_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_mu) * tf.pow(tf.abs(d_mu), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_mu, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_mu, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_976": {
                "x": {
                    "value": "d_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.divide(d_sigma, effective_n_points)",
                            "Call"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_max(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_min(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / (n_points * tf.sqrt(2 * w_per_batch_per_d)) * tf.reduce_sum(tf.square(d_sig_all), axis=1)",
                            "BinOp"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "1 / tf.sqrt(2 * w_per_batch_per_d) * tf.reduce_sum(d_sig_all, axis=1)",
                            "BinOp"
                        ],
                        [
                            "d_sigma / n_points",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "one_over_n * (1 / tf.sqrt(2 * w_per_batch_per_d)) * tf.concat([tf.reduce_max(d_sig_all, axis=1), tf.reduce_min(d_sig_all, axis=1), tf.reduce_sum(d_sig_all, axis=1)], axis=2)",
                            "BinOp"
                        ],
                        [
                            "tf.sign(d_sigma) * tf.pow(tf.abs(d_sigma), alpha)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.l2_normalize(d_sigma, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(tf.transpose(d_sigma, perm=[0, 2, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_1040": {
                "input_tensor": {
                    "value": "w_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ],
                        [
                            "tf.multiply(p_per_point, batch_w)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_1050": {
                "x": {
                    "value": "w_per_batch_per_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_1051": {
                "input_tensor": {
                    "value": "d_mu_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_1051": {
                "input_tensor": {
                    "value": "d_mu_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_1051": {
                "input_tensor": {
                    "value": "d_mu_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_1054": {
                "x": {
                    "value": "2 * w_per_batch_per_d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_1055": {
                "input_tensor": {
                    "value": "d_sig_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.square((batch_points - batch_mu) / batch_sig) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_1055": {
                "input_tensor": {
                    "value": "d_sig_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.square((batch_points - batch_mu) / batch_sig) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_1055": {
                "input_tensor": {
                    "value": "d_sig_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.square((batch_points - batch_mu) / batch_sig) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "identity_488": {
                "input": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_688": {
                "x": {
                    "value": "(batch_points - batch_mu) / batch_sig",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_803": {
                "x": {
                    "value": "w_per_batch_per_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_804": {
                "x": {
                    "value": "2 * w_per_batch_per_d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_810": {
                "x": {
                    "value": "d_pi_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w + w_zero_compensate) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / (tf.sqrt(batch_w) * n_points), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(one_over_n * (Q - batch_w) / tf.sqrt(batch_w), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_811": {
                "input_tensor": {
                    "value": "tf.square(d_mu_all)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_812": {
                "input_tensor": {
                    "value": "tf.square(d_sig_all)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_949": {
                "x": {
                    "value": "(batch_points - batch_mu) / batch_sig",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_807": {
                "x": {
                    "value": "w_per_batch_per_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_808": {
                "x": {
                    "value": "2 * w_per_batch_per_d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_811": {
                "x": {
                    "value": "d_mu_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (batch_points - batch_mu) / batch_sig",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_812": {
                "x": {
                    "value": "d_sig_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.square((batch_points - batch_mu) / batch_sig) - 1)",
                            "BinOp"
                        ],
                        [
                            "Q_per_d * (tf.pow((batch_points - batch_mu) / batch_sig, 2) - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_811": {
                "x": {
                    "value": "w_per_batch_per_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, D])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.expand_dims(w, 0), -1), [n_batches, 1, 3 * D])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_812": {
                "x": {
                    "value": "2 * w_per_batch_per_d",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "AdaFit_multi_scale.py": {
        "torch": {
            "sum_39": {
                "variable": {
                    "value": "valid_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights > 0.001",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_40": {
                "variable": {
                    "value": "w_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "valid_count > 18",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "weights.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(weights, requires_grad=True).view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_40": {
                "variable": {
                    "value": "w_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "XtX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "w_vector * A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "variable": {
                    "value": "XtY",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "w_vector * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_90": {
                "variable": {
                    "value": "n_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([-beta[:, 0:2].squeeze(-1), torch.ones(batch_size, 1, device=x.device, dtype=beta.dtype)], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_134": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XtY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(A.permute(0, 2, 1), w_vector * z)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_54": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, torch.ones_like(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag_embed(1 / torch.cat([h, h, h_2, h_2, h_2, torch.ones_like(h)], dim=1))",
                            "Call"
                        ],
                        [
                            "torch.diag_embed(1 / torch.cat([h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, torch.ones_like(h)], dim=1))",
                            "Call"
                        ],
                        [
                            "torch.diag_embed(1 / torch.cat([h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, h_4, h_4, h_4, h_4, h_4, torch.ones_like(h)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_linear_system(XtX, XtY, sub_batch_size=16)",
                            "Call"
                        ],
                        [
                            "torch.matmul(D_inv, beta)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(XtY)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_168": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_170": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_171": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_172": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_199": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_200": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_261": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_267": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_268": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_269": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_277": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(pointfeat))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_314": {
                "variable": {
                    "value": "global_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(self.pre_bc(x), 2, keepdim=False)[0]",
                            "Subscript"
                        ],
                        [
                            "self.fc(global_feature)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "ThreeDmFVNet.get_3DmFV_pytorch(points.permute([0, 2, 1]), self.gmm.weights_, self.gmm.means_, np.sqrt(self.gmm.covariances_), normalize=True)",
                            "Call"
                        ],
                        [
                            "torch.flatten(global_feature, start_dim=1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_337": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.n_gaussians * self.n_gaussians * self.n_gaussians * 20 + 64",
                            "BinOp"
                        ],
                        [
                            "1024 + 256",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_338": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_339": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_340": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_341": {
                "variable": {
                    "value": "self.conv_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_342": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_343": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_344": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_348": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_354": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_355": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_356": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_385": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_386": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_390": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_391": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "175",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_393": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_394": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_395": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_397": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_398": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_399": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_400": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_401": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_410": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_411": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_415": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_431": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_432": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_435": {
                "variable": {
                    "value": "iden",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_450": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_451": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_454": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_455": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "175",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_456": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_457": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_458": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_460": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_461": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_462": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_463": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_464": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_472": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_473": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_477": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_493": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_494": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, x * x, y * y, x * y, torch.ones_like(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_embed_58": {
                "variable": {
                    "value": "D_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / torch.cat([h, h, h_2, h_2, h_2, torch.ones_like(h)], dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "[-beta[:, 0:2].squeeze(-1), torch.ones(batch_size, 1, device=x.device, dtype=beta.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cholesky_138": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cholesky_solve_140": {
                "variable": {
                    "value": "beta[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "XtY[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input2": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...], upper=False)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...], upper=False)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_192": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "self.bc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, 175)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stn1(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "bmm_206": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "self.bc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, 175)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stn2(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "cat_240": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_362": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_404": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024 * self.num_scales",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_405": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_429": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.fc0(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_467": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024 * self.num_scales",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_468": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_491": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.fc0(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_514": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_518": {
                "variable": {
                    "value": "b1_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_519": {
                "variable": {
                    "value": "b2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_524": {
                "tensors": {
                    "value": "[F, G]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_526": {
                "variable": {
                    "value": "norm_N0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1_2 + b2_2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_530": {
                "tensors": {
                    "value": "[f, g]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "symeig_534": {
                "variable": {
                    "value": "(curvatures, dirs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "M_weingarten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.bmm(torch.inverse(I), II)",
                            "UnaryOp"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_535": {
                "variable": {
                    "value": "dirs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dirs, torch.zeros(dirs.shape[0], 2, 1, device=dirs.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_47": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mean(torch.abs(x), 1) + torch.mean(torch.abs(y), 1)) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_63": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, x_2, y_2, xy, x_2 * x, y_2 * y, x_2 * y, y_2 * x, torch.ones_like(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_embed_66": {
                "variable": {
                    "value": "D_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / torch.cat([h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, torch.ones_like(h)], dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_97": {
                "variable": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x), torch.ones(batch_size, n_points, 1, device=x.device)], dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_143": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(sub_batch_size, n_elements, device=XtX.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "0.01 * torch.ones(sub_batch_size, n_elements, device=XtX.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_embed_145": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_237": {
                "input": {
                    "value": "self.pre_bc(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_283": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "self.bc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, 175)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_286": {
                "tensors": {
                    "value": "[x, pointfeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_316": {
                "tensors": {
                    "value": "[x, pointfeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_365": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_41": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "0.01 + x",
                            "BinOp"
                        ],
                        [
                            "(0.01 + torch.ones_like(x) + x) / 2.0",
                            "BinOp"
                        ],
                        [
                            "0.01 + torch.sigmoid(self.conv4(x))",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_45": {
                "input": {
                    "value": "torch.abs(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_54": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "self.bc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, 175)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_73": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, x_2, y_2, xy, x_3, y_3, x_2 * y, y_2 * x, x_3 * x, y_3 * y, x_3 * y, y_3 * x, y_2 * x_2, torch.ones_like(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_embed_78": {
                "variable": {
                    "value": "D_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / torch.cat([h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, h_4, h_4, h_4, h_4, h_4, torch.ones_like(h)], dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_90": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "beta.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_102": {
                "variable": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y + 3 * beta_[:, :, 5] * x_2 + 2 * beta_[:, :, 7] * xy + beta_[:, :, 8] * y_2), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x + 3 * beta_[:, :, 6] * y_2 + beta_[:, :, 7] * x_2 + 2 * beta_[:, :, 8] * xy), torch.ones(batch_size, n_points, 1, device=x.device)], dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cholesky_150": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cholesky_solve_152": {
                "variable": {
                    "value": "beta[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "XtY[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input2": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...], upper=False)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...], upper=False)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_532": {
                "input": {
                    "value": "torch.inverse(I)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "II",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([e, f], dim=2), torch.cat([f, g], dim=2)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_45": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 1, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "y / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_56": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "self.bc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, 175)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "[h, h, h_2, h_2, h_2, torch.ones_like(h)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "tensors": {
                    "value": "[-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x), torch.ones(batch_size, n_points, 1, device=x.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_110": {
                "variable": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y + 3 * beta_[:, :, 5] * x_2 + 2 * beta_[:, :, 7] * xy + beta_[:, :, 8] * y_2 + 4 * beta_[:, :, 9] * x_3 + 3 * beta_[:, :, 11] * x_2 * y + beta_[:, :, 12] * y_3 + 2 * beta_[:, :, 13] * y_2 * x), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x + 3 * beta_[:, :, 6] * y_2 + beta_[:, :, 7] * x_2 + 2 * beta_[:, :, 8] * xy + 4 * beta_[:, :, 10] * y_3 + beta_[:, :, 11] * x_3 + 3 * beta_[:, :, 12] * x * y_2 + 2 * beta_[:, :, 13] * y * x_2), torch.ones(batch_size, n_points, 1, device=x.device)], dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "sub_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XtX.size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_elements",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XtX.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "XtX.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_145": {
                "input": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.normal(torch.zeros(sub_batch_size, n_elements, device=XtX.device), 0.01 * torch.ones(sub_batch_size, n_elements, device=XtX.device))",
                            "Call"
                        ],
                        [
                            "torch.diag_embed(torch.abs(eps))",
                            "Call"
                        ]
                    ]
                }
            },
            "solve_155": {
                "variable": {
                    "value": "(beta[sub_batch_size * i:sub_batch_size * (i + 1), ...], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "XtY[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "A": {
                    "value": "XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "inverse_532": {
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([E, F], dim=2), torch.cat([F, G], dim=2)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_535": {
                "*size": {
                    "value": "dirs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "dirs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_63": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "self.bc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, 175)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_66": {
                "tensors": {
                    "value": "[h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, torch.ones_like(h)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "tensors": {
                    "value": "[-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y + 3 * beta_[:, :, 5] * x_2 + 2 * beta_[:, :, 7] * xy + beta_[:, :, 8] * y_2), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x + 3 * beta_[:, :, 6] * y_2 + beta_[:, :, 7] * x_2 + 2 * beta_[:, :, 8] * xy), torch.ones(batch_size, n_points, 1, device=x.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_144": {
                "*size": {
                    "value": "sub_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XtX.size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_elements",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XtX.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "XtX.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_368": {
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_58": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mean(torch.abs(x), 1) + torch.mean(torch.abs(y), 1)) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_74": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "self.bc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, 175)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "[h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, h_4, h_4, h_4, h_4, h_4, torch.ones_like(h)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_100": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "[-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y + 3 * beta_[:, :, 5] * x_2 + 2 * beta_[:, :, 7] * xy + beta_[:, :, 8] * y_2 + 4 * beta_[:, :, 9] * x_3 + 3 * beta_[:, :, 11] * x_2 * y + beta_[:, :, 12] * y_3 + 2 * beta_[:, :, 13] * y_2 * x), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x + 3 * beta_[:, :, 6] * y_2 + beta_[:, :, 7] * x_2 + 2 * beta_[:, :, 8] * xy + 4 * beta_[:, :, 10] * y_3 + beta_[:, :, 11] * x_3 + 3 * beta_[:, :, 12] * x * y_2 + 2 * beta_[:, :, 13] * y * x_2), torch.ones(batch_size, n_points, 1, device=x.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_366": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "self.bc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, 175)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_like_66": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mean(torch.abs(x), 1) + torch.mean(torch.abs(y), 1)) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_107": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_78": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mean(torch.abs(x), 1) + torch.mean(torch.abs(y), 1)) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_117": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "AdaFit_single_scale.py": {
        "torch": {
            "sum_37": {
                "variable": {
                    "value": "valid_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights > 0.001",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_38": {
                "variable": {
                    "value": "w_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "valid_count > 18",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "weights.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(weights, requires_grad=True).view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_38": {
                "variable": {
                    "value": "w_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "XtX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "w_vector * A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "variable": {
                    "value": "XtY",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "w_vector * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_88": {
                "variable": {
                    "value": "n_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([-beta[:, 0:2].squeeze(-1), torch.ones(batch_size, 1, device=x.device, dtype=beta.dtype)], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_132": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XtY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(A.permute(0, 2, 1), w_vector * z)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_52": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, torch.ones_like(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag_embed(1 / torch.cat([h, h, h_2, h_2, h_2, torch.ones_like(h)], dim=1))",
                            "Call"
                        ],
                        [
                            "torch.diag_embed(1 / torch.cat([h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, torch.ones_like(h)], dim=1))",
                            "Call"
                        ],
                        [
                            "torch.diag_embed(1 / torch.cat([h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, h_4, h_4, h_4, h_4, h_4, torch.ones_like(h)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_linear_system(XtX, XtY, sub_batch_size=16)",
                            "Call"
                        ],
                        [
                            "torch.matmul(D_inv, beta)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(XtY)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_166": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_168": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_169": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_170": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_196": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_197": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_223": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_224": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_225": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_226": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_233": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(pointfeat))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_265": {
                "variable": {
                    "value": "global_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "ThreeDmFVNet.get_3DmFV_pytorch(points.permute([0, 2, 1]), self.gmm.weights_, self.gmm.means_, np.sqrt(self.gmm.covariances_), normalize=True)",
                            "Call"
                        ],
                        [
                            "torch.flatten(global_feature, start_dim=1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_288": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.n_gaussians * self.n_gaussians * self.n_gaussians * 20 + 64",
                            "BinOp"
                        ],
                        [
                            "1024 + 64",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_289": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_290": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_291": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_292": {
                "variable": {
                    "value": "self.conv_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_293": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_294": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_295": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_299": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_305": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_306": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_307": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_336": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_337": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_338": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_339": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_341": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_342": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_343": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_345": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_346": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_347": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_348": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_349": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_358": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_359": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_360": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_376": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_377": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_380": {
                "variable": {
                    "value": "iden",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_395": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_396": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_397": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_398": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_399": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_400": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_401": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_403": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_404": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_405": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_406": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_407": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_415": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_416": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_417": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_433": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_434": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, x * x, y * y, x * y, torch.ones_like(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_embed_56": {
                "variable": {
                    "value": "D_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / torch.cat([h, h, h_2, h_2, h_2, torch.ones_like(h)], dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_88": {
                "tensors": {
                    "value": "[-beta[:, 0:2].squeeze(-1), torch.ones(batch_size, 1, device=x.device, dtype=beta.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cholesky_136": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cholesky_solve_138": {
                "variable": {
                    "value": "beta[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "XtY[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input2": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...], upper=False)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...], upper=False)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_189": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), 3, -1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stn1(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "bmm_203": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), 3, -1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stn2(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "softmax_313": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_352": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024 * self.num_scales",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_353": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_374": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.fc0(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_410": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024 * self.num_scales",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_411": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_431": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.fc0(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_454": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_458": {
                "variable": {
                    "value": "b1_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_459": {
                "variable": {
                    "value": "b2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_464": {
                "tensors": {
                    "value": "[F, G]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_466": {
                "variable": {
                    "value": "norm_N0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1_2 + b2_2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_470": {
                "tensors": {
                    "value": "[f, g]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "symeig_474": {
                "variable": {
                    "value": "(curvatures, dirs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "M_weingarten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.bmm(torch.inverse(I), II)",
                            "UnaryOp"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_475": {
                "variable": {
                    "value": "dirs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dirs, torch.zeros(dirs.shape[0], 2, 1, device=dirs.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_45": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mean(torch.abs(x), 1) + torch.mean(torch.abs(y), 1)) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_61": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, x_2, y_2, xy, x_2 * x, y_2 * y, x_2 * y, y_2 * x, torch.ones_like(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_embed_64": {
                "variable": {
                    "value": "D_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / torch.cat([h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, torch.ones_like(h)], dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_95": {
                "variable": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x), torch.ones(batch_size, n_points, 1, device=x.device)], dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_141": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(sub_batch_size, n_elements, device=XtX.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "0.01 * torch.ones(sub_batch_size, n_elements, device=XtX.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_embed_143": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_235": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), 3, -1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_237": {
                "tensors": {
                    "value": "[x, pointfeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "tensors": {
                    "value": "[x, pointfeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_316": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_39": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "0.01 + x",
                            "BinOp"
                        ],
                        [
                            "(0.01 + torch.ones_like(x) + x) / 2.0",
                            "BinOp"
                        ],
                        [
                            "0.01 + torch.sigmoid(self.conv4(x))",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_43": {
                "input": {
                    "value": "torch.abs(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_52": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), 3, -1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_71": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, x_2, y_2, xy, x_3, y_3, x_2 * y, y_2 * x, x_3 * x, y_3 * y, x_3 * y, y_3 * x, y_2 * x_2, torch.ones_like(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_embed_76": {
                "variable": {
                    "value": "D_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / torch.cat([h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, h_4, h_4, h_4, h_4, h_4, torch.ones_like(h)], dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "beta.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_100": {
                "variable": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y + 3 * beta_[:, :, 5] * x_2 + 2 * beta_[:, :, 7] * xy + beta_[:, :, 8] * y_2), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x + 3 * beta_[:, :, 6] * y_2 + beta_[:, :, 7] * x_2 + 2 * beta_[:, :, 8] * xy), torch.ones(batch_size, n_points, 1, device=x.device)], dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cholesky_148": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cholesky_solve_150": {
                "variable": {
                    "value": "beta[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "XtY[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input2": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...], upper=False)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...], upper=False)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_472": {
                "input": {
                    "value": "torch.inverse(I)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "II",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([e, f], dim=2), torch.cat([f, g], dim=2)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_43": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 1, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "y / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_54": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), 3, -1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_56": {
                "tensors": {
                    "value": "[h, h, h_2, h_2, h_2, torch.ones_like(h)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_96": {
                "tensors": {
                    "value": "[-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x), torch.ones(batch_size, n_points, 1, device=x.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_108": {
                "variable": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y + 3 * beta_[:, :, 5] * x_2 + 2 * beta_[:, :, 7] * xy + beta_[:, :, 8] * y_2 + 4 * beta_[:, :, 9] * x_3 + 3 * beta_[:, :, 11] * x_2 * y + beta_[:, :, 12] * y_3 + 2 * beta_[:, :, 13] * y_2 * x), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x + 3 * beta_[:, :, 6] * y_2 + beta_[:, :, 7] * x_2 + 2 * beta_[:, :, 8] * xy + 4 * beta_[:, :, 10] * y_3 + beta_[:, :, 11] * x_3 + 3 * beta_[:, :, 12] * x * y_2 + 2 * beta_[:, :, 13] * y * x_2), torch.ones(batch_size, n_points, 1, device=x.device)], dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "*size": {
                    "value": "sub_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XtX.size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_elements",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XtX.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "XtX.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_143": {
                "input": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.normal(torch.zeros(sub_batch_size, n_elements, device=XtX.device), 0.01 * torch.ones(sub_batch_size, n_elements, device=XtX.device))",
                            "Call"
                        ],
                        [
                            "torch.diag_embed(torch.abs(eps))",
                            "Call"
                        ]
                    ]
                }
            },
            "solve_153": {
                "variable": {
                    "value": "(beta[sub_batch_size * i:sub_batch_size * (i + 1), ...], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "XtY[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "A": {
                    "value": "XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "inverse_472": {
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([E, F], dim=2), torch.cat([F, G], dim=2)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_475": {
                "*size": {
                    "value": "dirs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "dirs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_61": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), 3, -1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_64": {
                "tensors": {
                    "value": "[h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, torch.ones_like(h)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "tensors": {
                    "value": "[-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y + 3 * beta_[:, :, 5] * x_2 + 2 * beta_[:, :, 7] * xy + beta_[:, :, 8] * y_2), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x + 3 * beta_[:, :, 6] * y_2 + beta_[:, :, 7] * x_2 + 2 * beta_[:, :, 8] * xy), torch.ones(batch_size, n_points, 1, device=x.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_142": {
                "*size": {
                    "value": "sub_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XtX.size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_elements",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XtX.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "XtX.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_319": {
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_56": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mean(torch.abs(x), 1) + torch.mean(torch.abs(y), 1)) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_72": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), 3, -1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "[h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, h_4, h_4, h_4, h_4, h_4, torch.ones_like(h)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_98": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "[-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y + 3 * beta_[:, :, 5] * x_2 + 2 * beta_[:, :, 7] * xy + beta_[:, :, 8] * y_2 + 4 * beta_[:, :, 9] * x_3 + 3 * beta_[:, :, 11] * x_2 * y + beta_[:, :, 12] * y_3 + 2 * beta_[:, :, 13] * y_2 * x), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x + 3 * beta_[:, :, 6] * y_2 + beta_[:, :, 7] * x_2 + 2 * beta_[:, :, 8] * xy + 4 * beta_[:, :, 10] * y_3 + beta_[:, :, 11] * x_3 + 3 * beta_[:, :, 12] * x * y_2 + 2 * beta_[:, :, 13] * y * x_2), torch.ones(batch_size, n_points, 1, device=x.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_317": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), 3, -1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_like_64": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mean(torch.abs(x), 1) + torch.mean(torch.abs(y), 1)) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_105": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_76": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mean(torch.abs(x), 1) + torch.mean(torch.abs(y), 1)) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_115": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataset_multi_scale.py": {
        "torch": {
            "zeros_281": {
                "variable": {
                    "value": "patch_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.points_per_patch * len(self.patch_radius_absolute[shape_ind])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_283": {
                "variable": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.final_patch_size * len(self.patch_radius_absolute[shape_ind])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_322": {
                "variable": {
                    "value": "patch_pts[start:end, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "shape.pts[patch_point_inds, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_343": {
                "variable": {
                    "value": "patch_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "shape.normals[center_point_ind, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_346": {
                "variable": {
                    "value": "neighbor_normals[start:end, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "shape.normals[patch_point_inds[:175], :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_349": {
                "variable": {
                    "value": "patch_curv",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "shape.curv[center_point_ind, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "svd_363": {
                "variable": {
                    "value": "(trans, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(patch_pts[patch_pts_valid, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_364": {
                "variable": {
                    "value": "patch_pts[patch_pts_valid, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_pts[patch_pts_valid, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(3).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_367": {
                "variable": {
                    "value": "cp_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cp_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-pts_mean",
                            "UnaryOp"
                        ],
                        [
                            "torch.matmul(cp_new, trans)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(3).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_379": {
                "variable": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_384": {
                "variable": {
                    "value": "patch_tuples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.points_per_patch * len(self.patch_radius_absolute[shape_ind])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3 * self.point_tuple",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_373": {
                "variable": {
                    "value": "patch_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(shape.normals[center_point_ind, :])",
                            "Call"
                        ],
                        [
                            "torch.matmul(patch_normal, trans)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(3).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_376": {
                "variable": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.final_patch_size * len(self.patch_radius_absolute[shape_ind]), 3, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.matmul(neighbor_normals, trans)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(3).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_363": {
                "input": {
                    "value": "patch_pts[patch_pts_valid, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_329": {
                "ndarray": {
                    "value": "shape.pts[center_point_ind, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dataset_single_scale.py": {
        "torch": {
            "zeros_280": {
                "variable": {
                    "value": "patch_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.points_per_patch * len(self.patch_radius_absolute[shape_ind])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_281": {
                "variable": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.points_per_patch * len(self.patch_radius_absolute[shape_ind])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_321": {
                "variable": {
                    "value": "patch_pts[start:end, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "shape.pts[patch_point_inds, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_342": {
                "variable": {
                    "value": "patch_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "shape.normals[center_point_ind, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_345": {
                "variable": {
                    "value": "neighbor_normals[start:end, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "shape.normals[patch_point_inds, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_348": {
                "variable": {
                    "value": "patch_curv",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "shape.curv[center_point_ind, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "svd_362": {
                "variable": {
                    "value": "(trans, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(patch_pts[patch_pts_valid, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_363": {
                "variable": {
                    "value": "patch_pts[patch_pts_valid, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_pts[patch_pts_valid, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(3).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_366": {
                "variable": {
                    "value": "cp_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cp_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-pts_mean",
                            "UnaryOp"
                        ],
                        [
                            "torch.matmul(cp_new, trans)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(3).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_378": {
                "variable": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_383": {
                "variable": {
                    "value": "patch_tuples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.points_per_patch * len(self.patch_radius_absolute[shape_ind])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3 * self.point_tuple",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_372": {
                "variable": {
                    "value": "patch_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(shape.normals[center_point_ind, :])",
                            "Call"
                        ],
                        [
                            "torch.matmul(patch_normal, trans)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(3).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_375": {
                "variable": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.points_per_patch * len(self.patch_radius_absolute[shape_ind]), 3, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "torch.matmul(neighbor_normals, trans)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(3).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_362": {
                "input": {
                    "value": "patch_pts[patch_pts_valid, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_328": {
                "ndarray": {
                    "value": "shape.pts[center_point_ind, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/AdaFit_multi_scale.py": {
        "torch": {
            "sum_39": {
                "variable": {
                    "value": "valid_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights > 0.001",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_40": {
                "variable": {
                    "value": "w_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "valid_count > 18",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "weights.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(weights, requires_grad=True).view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_40": {
                "variable": {
                    "value": "w_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "XtX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "w_vector * A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "variable": {
                    "value": "XtY",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "w_vector * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_90": {
                "variable": {
                    "value": "n_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([-beta[:, 0:2].squeeze(-1), torch.ones(batch_size, 1, device=x.device, dtype=beta.dtype)], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_134": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XtY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(A.permute(0, 2, 1), w_vector * z)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_54": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, torch.ones_like(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag_embed(1 / torch.cat([h, h, h_2, h_2, h_2, torch.ones_like(h)], dim=1))",
                            "Call"
                        ],
                        [
                            "torch.diag_embed(1 / torch.cat([h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, torch.ones_like(h)], dim=1))",
                            "Call"
                        ],
                        [
                            "torch.diag_embed(1 / torch.cat([h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, h_4, h_4, h_4, h_4, h_4, torch.ones_like(h)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_linear_system(XtX, XtY, sub_batch_size=16)",
                            "Call"
                        ],
                        [
                            "torch.matmul(D_inv, beta)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(XtY)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_168": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_170": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_171": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_172": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_199": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_200": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_298": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_304": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_305": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_306": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_318": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(pointfeat))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_364": {
                "variable": {
                    "value": "global_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(self.pre_bc(x), 2, keepdim=False)[0]",
                            "Subscript"
                        ],
                        [
                            "self.fc(global_feature)",
                            "Call"
                        ],
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "ThreeDmFVNet.get_3DmFV_pytorch(points.permute([0, 2, 1]), self.gmm.weights_, self.gmm.means_, np.sqrt(self.gmm.covariances_), normalize=True)",
                            "Call"
                        ],
                        [
                            "torch.flatten(global_feature, start_dim=1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_387": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.n_gaussians * self.n_gaussians * self.n_gaussians * 20 + 64",
                            "BinOp"
                        ],
                        [
                            "1024 + 256",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_388": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_389": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_390": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_391": {
                "variable": {
                    "value": "self.conv_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_392": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_393": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_394": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_398": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_404": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_405": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_406": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_435": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_436": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_440": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_441": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "175",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_443": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_444": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_445": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_447": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_448": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_449": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_450": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_451": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_460": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_461": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_465": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_481": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_482": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_485": {
                "variable": {
                    "value": "iden",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_500": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_501": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_507": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_508": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "175",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_509": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_510": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_511": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_513": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_514": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_515": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_516": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_517": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_525": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_526": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_530": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_546": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_547": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, x * x, y * y, x * y, torch.ones_like(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_embed_58": {
                "variable": {
                    "value": "D_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / torch.cat([h, h, h_2, h_2, h_2, torch.ones_like(h)], dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_90": {
                "tensors": {
                    "value": "[-beta[:, 0:2].squeeze(-1), torch.ones(batch_size, 1, device=x.device, dtype=beta.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cholesky_138": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cholesky_solve_140": {
                "variable": {
                    "value": "beta[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "XtY[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input2": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...], upper=False)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...], upper=False)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_192": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "self.bc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, 175)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stn1(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "bmm_206": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "self.bc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, 175)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stn2(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "cat_257": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_412": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_454": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024 * self.num_scales",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_455": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_479": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.fc0(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_520": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024 * self.num_scales",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_521": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_544": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.fc0(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_567": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_571": {
                "variable": {
                    "value": "b1_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_572": {
                "variable": {
                    "value": "b2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_577": {
                "tensors": {
                    "value": "[F, G]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_579": {
                "variable": {
                    "value": "norm_N0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1_2 + b2_2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_583": {
                "tensors": {
                    "value": "[f, g]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "symeig_587": {
                "variable": {
                    "value": "(curvatures, dirs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "M_weingarten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.bmm(torch.inverse(I), II)",
                            "UnaryOp"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_588": {
                "variable": {
                    "value": "dirs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dirs, torch.zeros(dirs.shape[0], 2, 1, device=dirs.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_47": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mean(torch.abs(x), 1) + torch.mean(torch.abs(y), 1)) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_63": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, x_2, y_2, xy, x_2 * x, y_2 * y, x_2 * y, y_2 * x, torch.ones_like(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_embed_66": {
                "variable": {
                    "value": "D_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / torch.cat([h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, torch.ones_like(h)], dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_97": {
                "variable": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x), torch.ones(batch_size, n_points, 1, device=x.device)], dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_143": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(sub_batch_size, n_elements, device=XtX.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "0.01 * torch.ones(sub_batch_size, n_elements, device=XtX.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_embed_145": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_254": {
                "input": {
                    "value": "self.pre_bc(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_333": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "self.bc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, 175)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_336": {
                "tensors": {
                    "value": "[x, pointfeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_366": {
                "tensors": {
                    "value": "[x, pointfeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_415": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_41": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "0.01 + x",
                            "BinOp"
                        ],
                        [
                            "(0.01 + torch.ones_like(x) + x) / 2.0",
                            "BinOp"
                        ],
                        [
                            "0.01 + torch.sigmoid(self.conv4(x))",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_45": {
                "input": {
                    "value": "torch.abs(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_54": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "self.bc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, 175)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_73": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, x_2, y_2, xy, x_3, y_3, x_2 * y, y_2 * x, x_3 * x, y_3 * y, x_3 * y, y_3 * x, y_2 * x_2, torch.ones_like(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_embed_78": {
                "variable": {
                    "value": "D_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / torch.cat([h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, h_4, h_4, h_4, h_4, h_4, torch.ones_like(h)], dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_90": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "beta.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_102": {
                "variable": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y + 3 * beta_[:, :, 5] * x_2 + 2 * beta_[:, :, 7] * xy + beta_[:, :, 8] * y_2), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x + 3 * beta_[:, :, 6] * y_2 + beta_[:, :, 7] * x_2 + 2 * beta_[:, :, 8] * xy), torch.ones(batch_size, n_points, 1, device=x.device)], dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cholesky_150": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cholesky_solve_152": {
                "variable": {
                    "value": "beta[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "XtY[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input2": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...], upper=False)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...], upper=False)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_585": {
                "input": {
                    "value": "torch.inverse(I)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "II",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([e, f], dim=2), torch.cat([f, g], dim=2)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_45": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 1, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "y / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_56": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "self.bc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, 175)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "[h, h, h_2, h_2, h_2, torch.ones_like(h)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "tensors": {
                    "value": "[-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x), torch.ones(batch_size, n_points, 1, device=x.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_110": {
                "variable": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y + 3 * beta_[:, :, 5] * x_2 + 2 * beta_[:, :, 7] * xy + beta_[:, :, 8] * y_2 + 4 * beta_[:, :, 9] * x_3 + 3 * beta_[:, :, 11] * x_2 * y + beta_[:, :, 12] * y_3 + 2 * beta_[:, :, 13] * y_2 * x), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x + 3 * beta_[:, :, 6] * y_2 + beta_[:, :, 7] * x_2 + 2 * beta_[:, :, 8] * xy + 4 * beta_[:, :, 10] * y_3 + beta_[:, :, 11] * x_3 + 3 * beta_[:, :, 12] * x * y_2 + 2 * beta_[:, :, 13] * y * x_2), torch.ones(batch_size, n_points, 1, device=x.device)], dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "sub_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XtX.size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_elements",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XtX.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "XtX.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_145": {
                "input": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.normal(torch.zeros(sub_batch_size, n_elements, device=XtX.device), 0.01 * torch.ones(sub_batch_size, n_elements, device=XtX.device))",
                            "Call"
                        ],
                        [
                            "torch.diag_embed(torch.abs(eps))",
                            "Call"
                        ]
                    ]
                }
            },
            "solve_155": {
                "variable": {
                    "value": "(beta[sub_batch_size * i:sub_batch_size * (i + 1), ...], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "XtY[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "A": {
                    "value": "XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "inverse_585": {
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([E, F], dim=2), torch.cat([F, G], dim=2)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_588": {
                "*size": {
                    "value": "dirs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "dirs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_63": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "self.bc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, 175)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_66": {
                "tensors": {
                    "value": "[h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, torch.ones_like(h)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "tensors": {
                    "value": "[-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y + 3 * beta_[:, :, 5] * x_2 + 2 * beta_[:, :, 7] * xy + beta_[:, :, 8] * y_2), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x + 3 * beta_[:, :, 6] * y_2 + beta_[:, :, 7] * x_2 + 2 * beta_[:, :, 8] * xy), torch.ones(batch_size, n_points, 1, device=x.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_144": {
                "*size": {
                    "value": "sub_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XtX.size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_elements",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XtX.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "XtX.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_418": {
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_58": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mean(torch.abs(x), 1) + torch.mean(torch.abs(y), 1)) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_74": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "self.bc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, 175)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "[h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, h_4, h_4, h_4, h_4, h_4, torch.ones_like(h)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_100": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "[-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y + 3 * beta_[:, :, 5] * x_2 + 2 * beta_[:, :, 7] * xy + beta_[:, :, 8] * y_2 + 4 * beta_[:, :, 9] * x_3 + 3 * beta_[:, :, 11] * x_2 * y + beta_[:, :, 12] * y_3 + 2 * beta_[:, :, 13] * y_2 * x), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x + 3 * beta_[:, :, 6] * y_2 + beta_[:, :, 7] * x_2 + 2 * beta_[:, :, 8] * xy + 4 * beta_[:, :, 10] * y_3 + beta_[:, :, 11] * x_3 + 3 * beta_[:, :, 12] * x * y_2 + 2 * beta_[:, :, 13] * y * x_2), torch.ones(batch_size, n_points, 1, device=x.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_416": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale), pre_global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :self.output_scale], global_feature.view(batch_size, -1, 1).repeat(1, 1, self.output_scale)], 1)",
                            "Call"
                        ],
                        [
                            "self.bc(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, 175)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_like_66": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mean(torch.abs(x), 1) + torch.mean(torch.abs(y), 1)) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_107": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_78": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mean(torch.abs(x), 1) + torch.mean(torch.abs(y), 1)) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_117": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/AdaFit_single_scale.py": {
        "torch": {
            "sum_37": {
                "variable": {
                    "value": "valid_count",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights > 0.001",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_38": {
                "variable": {
                    "value": "w_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "valid_count > 18",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "weights.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(weights, requires_grad=True).view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_38": {
                "variable": {
                    "value": "w_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "XtX",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "w_vector * A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "variable": {
                    "value": "XtY",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "w_vector * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_88": {
                "variable": {
                    "value": "n_est",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([-beta[:, 0:2].squeeze(-1), torch.ones(batch_size, 1, device=x.device, dtype=beta.dtype)], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_132": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XtY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(A.permute(0, 2, 1), w_vector * z)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_52": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, torch.ones_like(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag_embed(1 / torch.cat([h, h, h_2, h_2, h_2, torch.ones_like(h)], dim=1))",
                            "Call"
                        ],
                        [
                            "torch.diag_embed(1 / torch.cat([h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, torch.ones_like(h)], dim=1))",
                            "Call"
                        ],
                        [
                            "torch.diag_embed(1 / torch.cat([h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, h_4, h_4, h_4, h_4, h_4, torch.ones_like(h)], dim=1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_linear_system(XtX, XtY, sub_batch_size=16)",
                            "Call"
                        ],
                        [
                            "torch.matmul(D_inv, beta)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(XtY)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_166": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_168": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_169": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_170": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_196": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_197": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_223": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_224": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_225": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_226": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_233": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(pointfeat))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_265": {
                "variable": {
                    "value": "global_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(x, 2, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "ThreeDmFVNet.get_3DmFV_pytorch(points.permute([0, 2, 1]), self.gmm.weights_, self.gmm.means_, np.sqrt(self.gmm.covariances_), normalize=True)",
                            "Call"
                        ],
                        [
                            "torch.flatten(global_feature, start_dim=1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_288": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.n_gaussians * self.n_gaussians * self.n_gaussians * 20 + 64",
                            "BinOp"
                        ],
                        [
                            "1024 + 64",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_289": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_290": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_291": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_292": {
                "variable": {
                    "value": "self.conv_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_293": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_294": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_295": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_299": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_305": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_306": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_307": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_336": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_337": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_338": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_339": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_341": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_342": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_343": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.dim * self.dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_345": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_346": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_347": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_348": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_349": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_358": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_359": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_360": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_376": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_377": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_380": {
                "variable": {
                    "value": "iden",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_395": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_396": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_397": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool1d_398": {
                "variable": {
                    "value": "self.mp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "num_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ],
                        [
                            "500",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_399": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_400": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_401": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_403": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_404": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_405": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_406": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_407": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_415": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_416": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_417": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_433": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_434": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.fc2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, x * x, y * y, x * y, torch.ones_like(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_embed_56": {
                "variable": {
                    "value": "D_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / torch.cat([h, h, h_2, h_2, h_2, torch.ones_like(h)], dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_88": {
                "tensors": {
                    "value": "[-beta[:, 0:2].squeeze(-1), torch.ones(batch_size, 1, device=x.device, dtype=beta.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cholesky_136": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cholesky_solve_138": {
                "variable": {
                    "value": "beta[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "XtY[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input2": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...], upper=False)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...], upper=False)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_189": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), 3, -1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stn1(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "bmm_203": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), 3, -1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trans2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stn2(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "softmax_313": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_352": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024 * self.num_scales",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_353": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_374": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.fc0(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_410": {
                "variable": {
                    "value": "self.fc0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024 * self.num_scales",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_411": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_431": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn0(self.fc0(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_454": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_458": {
                "variable": {
                    "value": "b1_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_459": {
                "variable": {
                    "value": "b2_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_464": {
                "tensors": {
                    "value": "[F, G]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_466": {
                "variable": {
                    "value": "norm_N0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1_2 + b2_2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_470": {
                "tensors": {
                    "value": "[f, g]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "symeig_474": {
                "variable": {
                    "value": "(curvatures, dirs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "M_weingarten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.bmm(torch.inverse(I), II)",
                            "UnaryOp"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_475": {
                "variable": {
                    "value": "dirs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dirs, torch.zeros(dirs.shape[0], 2, 1, device=dirs.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_45": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mean(torch.abs(x), 1) + torch.mean(torch.abs(y), 1)) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_61": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, x_2, y_2, xy, x_2 * x, y_2 * y, x_2 * y, y_2 * x, torch.ones_like(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_embed_64": {
                "variable": {
                    "value": "D_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / torch.cat([h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, torch.ones_like(h)], dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_95": {
                "variable": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x), torch.ones(batch_size, n_points, 1, device=x.device)], dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_141": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "torch.zeros(sub_batch_size, n_elements, device=XtX.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "0.01 * torch.ones(sub_batch_size, n_elements, device=XtX.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_embed_143": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_235": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), 3, -1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_237": {
                "tensors": {
                    "value": "[x, pointfeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_267": {
                "tensors": {
                    "value": "[x, pointfeat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_316": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_39": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "0.01 + x",
                            "BinOp"
                        ],
                        [
                            "(0.01 + torch.ones_like(x) + x) / 2.0",
                            "BinOp"
                        ],
                        [
                            "0.01 + torch.sigmoid(self.conv4(x))",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_43": {
                "input": {
                    "value": "torch.abs(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_52": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), 3, -1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_71": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, x_2, y_2, xy, x_3, y_3, x_2 * y, y_2 * x, x_3 * x, y_3 * y, x_3 * y, y_3 * x, y_2 * x_2, torch.ones_like(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_embed_76": {
                "variable": {
                    "value": "D_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / torch.cat([h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, h_4, h_4, h_4, h_4, h_4, torch.ones_like(h)], dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "beta.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_100": {
                "variable": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y + 3 * beta_[:, :, 5] * x_2 + 2 * beta_[:, :, 7] * xy + beta_[:, :, 8] * y_2), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x + 3 * beta_[:, :, 6] * y_2 + beta_[:, :, 7] * x_2 + 2 * beta_[:, :, 8] * xy), torch.ones(batch_size, n_points, 1, device=x.device)], dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cholesky_148": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cholesky_solve_150": {
                "variable": {
                    "value": "beta[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "XtY[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input2": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...], upper=False)",
                            "Call"
                        ],
                        [
                            "torch.cholesky(XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...], upper=False)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_472": {
                "input": {
                    "value": "torch.inverse(I)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "II",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([e, f], dim=2), torch.cat([f, g], dim=2)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_43": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 1, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "y / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_54": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), 3, -1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_56": {
                "tensors": {
                    "value": "[h, h, h_2, h_2, h_2, torch.ones_like(h)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_96": {
                "tensors": {
                    "value": "[-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x), torch.ones(batch_size, n_points, 1, device=x.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_108": {
                "variable": {
                    "value": "neighbor_normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y + 3 * beta_[:, :, 5] * x_2 + 2 * beta_[:, :, 7] * xy + beta_[:, :, 8] * y_2 + 4 * beta_[:, :, 9] * x_3 + 3 * beta_[:, :, 11] * x_2 * y + beta_[:, :, 12] * y_3 + 2 * beta_[:, :, 13] * y_2 * x), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x + 3 * beta_[:, :, 6] * y_2 + beta_[:, :, 7] * x_2 + 2 * beta_[:, :, 8] * xy + 4 * beta_[:, :, 10] * y_3 + beta_[:, :, 11] * x_3 + 3 * beta_[:, :, 12] * x * y_2 + 2 * beta_[:, :, 13] * y * x_2), torch.ones(batch_size, n_points, 1, device=x.device)], dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "*size": {
                    "value": "sub_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XtX.size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_elements",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XtX.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "XtX.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_143": {
                "input": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.normal(torch.zeros(sub_batch_size, n_elements, device=XtX.device), 0.01 * torch.ones(sub_batch_size, n_elements, device=XtX.device))",
                            "Call"
                        ],
                        [
                            "torch.diag_embed(torch.abs(eps))",
                            "Call"
                        ]
                    ]
                }
            },
            "solve_153": {
                "variable": {
                    "value": "(beta[sub_batch_size * i:sub_batch_size * (i + 1), ...], _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "XtY[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "A": {
                    "value": "XtX[sub_batch_size * i:sub_batch_size * (i + 1), ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "inverse_472": {
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([E, F], dim=2), torch.cat([F, G], dim=2)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_475": {
                "*size": {
                    "value": "dirs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "dirs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_61": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), 3, -1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_64": {
                "tensors": {
                    "value": "[h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, torch.ones_like(h)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "tensors": {
                    "value": "[-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y + 3 * beta_[:, :, 5] * x_2 + 2 * beta_[:, :, 7] * xy + beta_[:, :, 8] * y_2), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x + 3 * beta_[:, :, 6] * y_2 + beta_[:, :, 7] * x_2 + 2 * beta_[:, :, 8] * xy), torch.ones(batch_size, n_points, 1, device=x.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_142": {
                "*size": {
                    "value": "sub_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XtX.size(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_elements",
                    "type": "variable",
                    "possible_values": [
                        [
                            "XtX.shape[2]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "XtX.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_319": {
                "input": {
                    "value": "self.conv4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_56": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mean(torch.abs(x), 1) + torch.mean(torch.abs(y), 1)) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_72": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), 3, -1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "[h, h, h_2, h_2, h_2, h_3, h_3, h_3, h_3, h_4, h_4, h_4, h_4, h_4, torch.ones_like(h)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_98": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "[-(beta_[:, :, 0] + 2 * beta_[:, :, 2] * x + beta_[:, :, 4] * y + 3 * beta_[:, :, 5] * x_2 + 2 * beta_[:, :, 7] * xy + beta_[:, :, 8] * y_2 + 4 * beta_[:, :, 9] * x_3 + 3 * beta_[:, :, 11] * x_2 * y + beta_[:, :, 12] * y_3 + 2 * beta_[:, :, 13] * y_2 * x), -(beta_[:, :, 1] + 2 * beta_[:, :, 3] * y + beta_[:, :, 4] * x + 3 * beta_[:, :, 6] * y_2 + beta_[:, :, 7] * x_2 + 2 * beta_[:, :, 8] * xy + 4 * beta_[:, :, 10] * y_3 + beta_[:, :, 11] * x_3 + 3 * beta_[:, :, 12] * x * y_2 + 2 * beta_[:, :, 13] * y * x_2), torch.ones(batch_size, n_points, 1, device=x.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_317": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[:, 0, :].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "x / h.unsqueeze(-1).repeat(1, n_points, 1)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), 3, -1)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(x.size(0), 3 * self.point_tuple, -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, trans2)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(pointfeat)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x))",
                            "Call"
                        ],
                        [
                            "global_feature.view(-1, 1024, 1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "global_feature.unsqueeze(-1).repeat(1, 1, n_pts)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.softmax(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.conv4(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.dim, self.dim)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.mp1(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024 * self.num_scales)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn0(self.fc0(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.fc1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.fc2(x)))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "x + iden",
                            "BinOp"
                        ],
                        [
                            "normal_estimation_utils.batch_quat_to_rotmat(x)",
                            "Call"
                        ],
                        [
                            "x_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_like_64": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mean(torch.abs(x), 1) + torch.mean(torch.abs(y), 1)) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_105": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_76": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.mean(torch.abs(x), 1) + torch.mean(torch.abs(y), 1)) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_115": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "n_points",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "netBase.py": {
        "torch": {
            "Conv1d_11": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_30": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(self.fc(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_14": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(self.conv(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test_n_est_multi_scale.py": {
        "torch": {
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_234": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PointcloudPatchDataset(root=opt.indir, shape_list_filename=opt.testset, patch_radius=trainopt.patch_radius, points_per_patch=trainopt.points_per_patch, patch_features=target_features, point_count_std=trainopt.patch_point_count_std, seed=opt.seed, identical_epochs=trainopt.identical_epochs, use_pca=trainopt.use_pca, center=trainopt.patch_center, point_tuple=trainopt.point_tuple, sparse_patches=opt.sparse_patches, cache_capacity=opt.cache_capacity, neighbor_search_method=trainopt.neighbor_search, final_patch_size=opt.points_per_patch // 4)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_datasampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialPointcloudPatchSampler(test_dataset)",
                            "Call"
                        ],
                        [
                            "SequentialShapeRandomPointcloudPatchSampler(test_dataset, patches_per_shape=opt.patches_per_shape, seed=opt.seed, sequential_shapes=True, identical_epochs=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "model_batchSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainopt.batchSize",
                            "Attribute"
                        ],
                        [
                            "opt.batchSize",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_79": {
                "variable": {
                    "value": "trainopt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "param_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_log_dir, model_name + opt.parmpostfix)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "normal_prop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[shape_patch_count, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_75": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_114": {
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_log_dir, model_name + opt.modelpostfix)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_159": {
                "variable": {
                    "value": "n_est[:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "n_est.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trans.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_159": {
                "variable": {
                    "value": "n_est[:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_163": {
                "variable": {
                    "value": "n_est[:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "n_est.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "data_trans.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_163": {
                "variable": {
                    "value": "n_est[:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_196": {
                "variable": {
                    "value": "normal_prop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[shape_patch_count, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "test_n_est_single_scale.py": {
        "torch": {
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cpu' if opt.gpu_idx < 0 else 'cuda:%d' % 0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_232": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PointcloudPatchDataset(root=opt.indir, shape_list_filename=opt.testset, patch_radius=trainopt.patch_radius, points_per_patch=trainopt.points_per_patch, patch_features=target_features, point_count_std=trainopt.patch_point_count_std, seed=opt.seed, identical_epochs=trainopt.identical_epochs, use_pca=trainopt.use_pca, center=trainopt.patch_center, point_tuple=trainopt.point_tuple, sparse_patches=opt.sparse_patches, cache_capacity=opt.cache_capacity, neighbor_search_method=trainopt.neighbor_search)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_datasampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialPointcloudPatchSampler(test_dataset)",
                            "Call"
                        ],
                        [
                            "SequentialShapeRandomPointcloudPatchSampler(test_dataset, patches_per_shape=opt.patches_per_shape, seed=opt.seed, sequential_shapes=True, identical_epochs=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "model_batchSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainopt.batchSize",
                            "Attribute"
                        ],
                        [
                            "opt.batchSize",
                            "Attribute"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_78": {
                "variable": {
                    "value": "trainopt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "param_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_log_dir, model_name + opt.parmpostfix)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "normal_prop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[shape_patch_count, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_113": {
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_log_dir, model_name + opt.modelpostfix)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_158": {
                "variable": {
                    "value": "n_est[:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "n_est.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trans.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_158": {
                "variable": {
                    "value": "n_est[:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_162": {
                "variable": {
                    "value": "n_est[:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "n_est.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "data_trans.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_162": {
                "variable": {
                    "value": "n_est[:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_195": {
                "variable": {
                    "value": "normal_prop",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[shape_patch_count, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "train_n_est_multi_scale.py": {
        "torch": {
            "device_110": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_348": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_349": {
                "variable": {
                    "value": "n_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_350": {
                "variable": {
                    "value": "consistency_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_351": {
                "variable": {
                    "value": "bias_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_483": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PointcloudPatchDataset(root=opt.indir, shape_list_filename=opt.trainset, patch_radius=opt.patch_radius, points_per_patch=opt.points_per_patch, patch_features=target_features, point_count_std=opt.patch_point_count_std, seed=opt.seed, identical_epochs=opt.identical_epochs, use_pca=opt.use_pca, center=opt.patch_center, point_tuple=opt.point_tuple, cache_capacity=opt.cache_capacity, neighbor_search_method=opt.neighbor_search, final_patch_size=opt.points_per_patch // 4)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_datasampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomPointcloudPatchSampler(train_dataset, patches_per_shape=opt.patches_per_shape, seed=opt.seed, identical_epochs=opt.identical_epochs)",
                            "Call"
                        ],
                        [
                            "SequentialShapeRandomPointcloudPatchSampler(train_dataset, patches_per_shape=opt.patches_per_shape, seed=opt.seed, identical_epochs=opt.identical_epochs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_520": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PointcloudPatchDataset(root=opt.indir, shape_list_filename=opt.testset, patch_radius=opt.patch_radius, points_per_patch=opt.points_per_patch, patch_features=target_features, point_count_std=opt.patch_point_count_std, seed=opt.seed, identical_epochs=opt.identical_epochs, use_pca=opt.use_pca, center=opt.patch_center, point_tuple=opt.point_tuple, cache_capacity=opt.cache_capacity, neighbor_search_method=opt.neighbor_search, final_patch_size=opt.points_per_patch // 4)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_datasampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomPointcloudPatchSampler(test_dataset, patches_per_shape=opt.patches_per_shape, seed=opt.seed, identical_epochs=opt.identical_epochs)",
                            "Call"
                        ],
                        [
                            "SequentialShapeRandomPointcloudPatchSampler(test_dataset, patches_per_shape=opt.patches_per_shape, seed=opt.seed, identical_epochs=opt.identical_epochs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_153": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_172": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_181": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=opt.lr, momentum=opt.momentum)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=opt.lr, weight_decay=1e-07, eps=opt.opt_eps)",
                            "Call"
                        ],
                        [
                            "optim.RMSprop(model.parameters(), lr=opt.lr, weight_decay=1e-07, eps=opt.opt_eps)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[200, 500, 700]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_183": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=opt.lr, momentum=opt.momentum)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=opt.lr, weight_decay=1e-07, eps=opt.opt_eps)",
                            "Call"
                        ],
                        [
                            "optim.RMSprop(model.parameters(), lr=opt.lr, weight_decay=1e-07, eps=opt.opt_eps)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_192": {
                "obj": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "params_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, '%s_params.pth' % opt.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_174": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.opt_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_146": {
                "f": {
                    "value": "refine_model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, '{}_model_{}.pth'.format(opt.name, opt.refine_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_176": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.opt_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_336": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, '%s_model.pth' % opt.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_341": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(out_dir, '%s_model_%d.pth' % (opt.name, epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_353": {
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_374": {
                "variable": {
                    "value": "o_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_pred.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "patch_rot.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_374": {
                "variable": {
                    "value": "o_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_360": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "trans.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_360": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_364": {
                "n": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "trans.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_364": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "acos_392": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_ang",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal_estimation_utils.cos_angle(o_pred, o_target)",
                            "Call"
                        ],
                        [
                            "torch.abs(normal_estimation_utils.cos_angle(o_pred, o_target))",
                            "Call"
                        ],
                        [
                            "normal_estimation_utils.cos_angle(o_pred.view(-1, 3), o_target.view(-1, 3)).view(batch_size, n_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_393": {
                "variable": {
                    "value": "err_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(cos_ang)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_390": {
                "variable": {
                    "value": "cos_ang",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normal_estimation_utils.cos_angle(o_pred, o_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_404": {
                "input": {
                    "value": "torch.abs(o_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_378": {
                "input": {
                    "value": "(o_pred - o_target).pow(2).sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_404": {
                "input": {
                    "value": "o_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[output_target_ind[oi]]",
                            "Subscript"
                        ],
                        [
                            "target[output_target_ind[oi]]",
                            "Subscript"
                        ],
                        [
                            "target[output_target_ind[oi]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "bmm_415": {
                "variable": {
                    "value": "o_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_pred.view(-1, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "patch_rot.transpose(2, 1).repeat(1, n_points, 1, 1).view(-1, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_419": {
                "variable": {
                    "value": "consistency_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_weights * torch.min((o_pred - o_target).pow(2).sum(2), (o_pred + o_target).pow(2).sum(2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_424": {
                "variable": {
                    "value": "consistency_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_weights * (1 - torch.abs(cos_ang)).pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_383": {
                "input": {
                    "value": "torch.cross(o_pred, o_target, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_433": {
                "input": {
                    "value": "point_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_437": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / n_points * torch.norm(point_weights - 1, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_419": {
                "input": {
                    "value": "(o_pred - o_target).pow(2).sum(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_435": {
                "input": {
                    "value": "point_weights.log()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_426": {
                "input": {
                    "value": "point_weights * torch.norm(torch.cross(o_pred.view(-1, 3), o_target.view(-1, 3), dim=-1).view(batch_size, -1, 3), p=2, dim=2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_383": {
                "input": {
                    "value": "o_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[:, output_pred_ind[oi]:output_pred_ind[oi] + 3]",
                            "Subscript"
                        ],
                        [
                            "torch.bmm(o_pred.unsqueeze(1), patch_rot.transpose(2, 1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "pred[:, output_pred_ind[oi]:output_pred_ind[oi] + 1]",
                            "Subscript"
                        ],
                        [
                            "neighbor_normals",
                            "variable"
                        ],
                        [
                            "torch.bmm(o_pred.view(-1, 1, 3), patch_rot.transpose(2, 1).repeat(1, n_points, 1, 1).view(-1, 3, 3)).view(batch_size, n_points, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "o_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[output_target_ind[oi]]",
                            "Subscript"
                        ],
                        [
                            "target[output_target_ind[oi]]",
                            "Subscript"
                        ],
                        [
                            "target[output_target_ind[oi]]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_437": {
                "input": {
                    "value": "point_weights - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_381": {
                "input": {
                    "value": "cos_ang",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal_estimation_utils.cos_angle(o_pred, o_target)",
                            "Call"
                        ],
                        [
                            "torch.abs(normal_estimation_utils.cos_angle(o_pred, o_target))",
                            "Call"
                        ],
                        [
                            "normal_estimation_utils.cos_angle(o_pred.view(-1, 3), o_target.view(-1, 3)).view(batch_size, n_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_427": {
                "input": {
                    "value": "torch.cross(o_pred.view(-1, 3), o_target.view(-1, 3), dim=-1).view(batch_size, -1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_424": {
                "input": {
                    "value": "cos_ang",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal_estimation_utils.cos_angle(o_pred, o_target)",
                            "Call"
                        ],
                        [
                            "torch.abs(normal_estimation_utils.cos_angle(o_pred, o_target))",
                            "Call"
                        ],
                        [
                            "normal_estimation_utils.cos_angle(o_pred.view(-1, 3), o_target.view(-1, 3)).view(batch_size, n_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_427": {
                "input": {
                    "value": "o_pred.view(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "o_target.view(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_n_est_single_scale.py": {
        "torch": {
            "device_110": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_348": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_349": {
                "variable": {
                    "value": "n_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_350": {
                "variable": {
                    "value": "consistency_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_351": {
                "variable": {
                    "value": "bias_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_482": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PointcloudPatchDataset(root=opt.indir, shape_list_filename=opt.trainset, patch_radius=opt.patch_radius, points_per_patch=opt.points_per_patch, patch_features=target_features, point_count_std=opt.patch_point_count_std, seed=opt.seed, identical_epochs=opt.identical_epochs, use_pca=opt.use_pca, center=opt.patch_center, point_tuple=opt.point_tuple, cache_capacity=opt.cache_capacity, neighbor_search_method=opt.neighbor_search)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_datasampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomPointcloudPatchSampler(train_dataset, patches_per_shape=opt.patches_per_shape, seed=opt.seed, identical_epochs=opt.identical_epochs)",
                            "Call"
                        ],
                        [
                            "SequentialShapeRandomPointcloudPatchSampler(train_dataset, patches_per_shape=opt.patches_per_shape, seed=opt.seed, identical_epochs=opt.identical_epochs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_518": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PointcloudPatchDataset(root=opt.indir, shape_list_filename=opt.testset, patch_radius=opt.patch_radius, points_per_patch=opt.points_per_patch, patch_features=target_features, point_count_std=opt.patch_point_count_std, seed=opt.seed, identical_epochs=opt.identical_epochs, use_pca=opt.use_pca, center=opt.patch_center, point_tuple=opt.point_tuple, cache_capacity=opt.cache_capacity, neighbor_search_method=opt.neighbor_search)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "test_datasampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomPointcloudPatchSampler(test_dataset, patches_per_shape=opt.patches_per_shape, seed=opt.seed, identical_epochs=opt.identical_epochs)",
                            "Call"
                        ],
                        [
                            "SequentialShapeRandomPointcloudPatchSampler(test_dataset, patches_per_shape=opt.patches_per_shape, seed=opt.seed, identical_epochs=opt.identical_epochs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(opt.workers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_153": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_172": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_181": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=opt.lr, momentum=opt.momentum)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=opt.lr, weight_decay=1e-07, eps=opt.opt_eps)",
                            "Call"
                        ],
                        [
                            "optim.RMSprop(model.parameters(), lr=opt.lr, weight_decay=1e-07, eps=opt.opt_eps)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[200, 500, 700]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_183": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=opt.lr, momentum=opt.momentum)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=opt.lr, weight_decay=1e-07, eps=opt.opt_eps)",
                            "Call"
                        ],
                        [
                            "optim.RMSprop(model.parameters(), lr=opt.lr, weight_decay=1e-07, eps=opt.opt_eps)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "rel",
                    "type": "str",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_192": {
                "obj": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "params_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, '%s_params.pth' % opt.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_174": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.opt_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_146": {
                "f": {
                    "value": "refine_model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, '{}_model_{}.pth'.format(opt.name, opt.refine_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "RMSprop_176": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "opt.opt_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_336": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, '%s_model.pth' % opt.name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_341": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(out_dir, '%s_model_%d.pth' % (opt.name, epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_353": {
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_374": {
                "variable": {
                    "value": "o_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_pred.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "patch_rot.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_374": {
                "variable": {
                    "value": "o_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_360": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "trans.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_360": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_364": {
                "n": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "trans.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_364": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "acos_392": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cos_ang",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal_estimation_utils.cos_angle(o_pred, o_target)",
                            "Call"
                        ],
                        [
                            "torch.abs(normal_estimation_utils.cos_angle(o_pred, o_target))",
                            "Call"
                        ],
                        [
                            "normal_estimation_utils.cos_angle(o_pred.view(-1, 3), o_target.view(-1, 3)).view(batch_size, n_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_393": {
                "variable": {
                    "value": "err_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(cos_ang)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_390": {
                "variable": {
                    "value": "cos_ang",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normal_estimation_utils.cos_angle(o_pred, o_target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_404": {
                "input": {
                    "value": "torch.abs(o_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_378": {
                "input": {
                    "value": "(o_pred - o_target).pow(2).sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_404": {
                "input": {
                    "value": "o_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[output_target_ind[oi]]",
                            "Subscript"
                        ],
                        [
                            "target[output_target_ind[oi]]",
                            "Subscript"
                        ],
                        [
                            "target[output_target_ind[oi]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "bmm_415": {
                "variable": {
                    "value": "o_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_pred.view(-1, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "patch_rot.transpose(2, 1).repeat(1, n_points, 1, 1).view(-1, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_419": {
                "variable": {
                    "value": "consistency_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_weights * torch.min((o_pred - o_target).pow(2).sum(2), (o_pred + o_target).pow(2).sum(2))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_424": {
                "variable": {
                    "value": "consistency_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_weights * (1 - torch.abs(cos_ang)).pow(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_383": {
                "input": {
                    "value": "torch.cross(o_pred, o_target, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_433": {
                "input": {
                    "value": "point_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_437": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / n_points * torch.norm(point_weights - 1, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_419": {
                "input": {
                    "value": "(o_pred - o_target).pow(2).sum(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_435": {
                "input": {
                    "value": "point_weights.log()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_426": {
                "input": {
                    "value": "point_weights * torch.norm(torch.cross(o_pred.view(-1, 3), o_target.view(-1, 3), dim=-1).view(batch_size, -1, 3), p=2, dim=2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_383": {
                "input": {
                    "value": "o_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred[:, output_pred_ind[oi]:output_pred_ind[oi] + 3]",
                            "Subscript"
                        ],
                        [
                            "torch.bmm(o_pred.unsqueeze(1), patch_rot.transpose(2, 1)).squeeze(1)",
                            "Call"
                        ],
                        [
                            "pred[:, output_pred_ind[oi]:output_pred_ind[oi] + 1]",
                            "Subscript"
                        ],
                        [
                            "neighbor_normals",
                            "variable"
                        ],
                        [
                            "torch.bmm(o_pred.view(-1, 1, 3), patch_rot.transpose(2, 1).repeat(1, n_points, 1, 1).view(-1, 3, 3)).view(batch_size, n_points, 3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "o_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[output_target_ind[oi]]",
                            "Subscript"
                        ],
                        [
                            "target[output_target_ind[oi]]",
                            "Subscript"
                        ],
                        [
                            "target[output_target_ind[oi]]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_437": {
                "input": {
                    "value": "point_weights - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_381": {
                "input": {
                    "value": "cos_ang",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal_estimation_utils.cos_angle(o_pred, o_target)",
                            "Call"
                        ],
                        [
                            "torch.abs(normal_estimation_utils.cos_angle(o_pred, o_target))",
                            "Call"
                        ],
                        [
                            "normal_estimation_utils.cos_angle(o_pred.view(-1, 3), o_target.view(-1, 3)).view(batch_size, n_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_427": {
                "input": {
                    "value": "torch.cross(o_pred.view(-1, 3), o_target.view(-1, 3), dim=-1).view(batch_size, -1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_424": {
                "input": {
                    "value": "cos_ang",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal_estimation_utils.cos_angle(o_pred, o_target)",
                            "Call"
                        ],
                        [
                            "torch.abs(normal_estimation_utils.cos_angle(o_pred, o_target))",
                            "Call"
                        ],
                        [
                            "normal_estimation_utils.cos_angle(o_pred.view(-1, 3), o_target.view(-1, 3)).view(batch_size, n_points)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_427": {
                "input": {
                    "value": "o_pred.view(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "o_target.view(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/pcpnet_dataset.py": {
        "torch": {
            "from_numpy_330": {
                "variable": {
                    "value": "patch_pts[start:end, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "shape.pts[patch_point_inds, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_347": {
                "variable": {
                    "value": "patch_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "shape.normals[center_point_ind, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_350": {
                "variable": {
                    "value": "patch_curv",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "shape.curv[center_point_ind, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "svd_364": {
                "variable": {
                    "value": "(trans, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.t(patch_pts[patch_pts_valid, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_365": {
                "variable": {
                    "value": "patch_pts[patch_pts_valid, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_pts[patch_pts_valid, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(3).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_368": {
                "variable": {
                    "value": "cp_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cp_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-pts_mean",
                            "UnaryOp"
                        ],
                        [
                            "torch.matmul(cp_new, trans)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(3).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_377": {
                "variable": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_374": {
                "variable": {
                    "value": "patch_normal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "patch_normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(shape.normals[center_point_ind, :])",
                            "Call"
                        ],
                        [
                            "torch.matmul(patch_normal, trans)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(3).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_364": {
                "input": {
                    "value": "patch_pts[patch_pts_valid, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_336": {
                "ndarray": {
                    "value": "shape.pts[center_point_ind, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/visualization.py": {
        "torch": {
            "DataLoader_196": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(root=type, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}