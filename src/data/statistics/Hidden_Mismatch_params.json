{
    "blocking_calculation.py": {
        "torch": {
            "DataLoader_73": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(validation_folder, data_transforms['test'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "device.py": {
        "torch": {
            "device_4": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_3": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_10": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "memory_allocated_12": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "memory_cached_13": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "manual_seed_23": {
                "seed": {
                    "value": "random_seed + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_29": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "model/blocking_calculation.py": {
        "torch": {
            "DataLoader_73": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(validation_folder, data_transforms['test'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/conv_bn_relu.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(channels_in, channels_out, 3, stride, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "channels_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "channels_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/decoder.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.message_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.message_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_25": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "model/discriminator.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.before_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.discriminator_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_16": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "model/encoder.py": {
        "torch": {
            "Sequential_25": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.final_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.conv_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[expanded_message, encoded_image, image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/encoder_decoder.py": {
        "torch": {}
    },
    "model/focal_loss.py": {
        "torch": {
            "log_softmax_22": {
                "variable": {
                    "value": "logpt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input.size(0), input.size(1), -1)",
                            "Call"
                        ],
                        [
                            "input.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, input.size(2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_11": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_12": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/hidden.py": {
        "torch": {
            "mean_24": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(input - target) ** 2",
                            "BinOp"
                        ],
                        [
                            "out * weights.expand_as(out)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_38": {
                "variable": {
                    "value": "self.optimizer_enc_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder_decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "self.optimizer_discrim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_57": {
                "variable": {
                    "value": "self.bce_with_logits_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_58": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SmoothL1Loss_59": {
                "variable": {
                    "value": "self.Smooth_L1_Loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_94": {
                "variable": {
                    "value": "d_target_label_cover",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.cover_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_95": {
                "variable": {
                    "value": "d_target_label_encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.encoded_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_96": {
                "variable": {
                    "value": "g_target_label_encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.cover_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_184": {
                "variable": {
                    "value": "d_target_label_cover",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.cover_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_185": {
                "variable": {
                    "value": "d_target_label_encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.encoded_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_186": {
                "variable": {
                    "value": "g_target_label_encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.cover_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__140": {
                "parameters": {
                    "value": "self.encoder_decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "noise_layers/crop.py": {
        "torch": {}
    },
    "noise_layers/cropout.py": {
        "torch": {
            "zeros_like_21": {
                "variable": {
                    "value": "cropout_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noised_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noised_and_cover[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "noise_layers/dropout.py": {
        "torch": {
            "tensor_23": {
                "variable": {
                    "value": "mask_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.choice([0.0, 1.0], noised_image.shape[2:], p=[1 - mask_percent, mask_percent])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "noised_image.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "noise_layers/identity.py": {
        "torch": {}
    },
    "noise_layers/jpeg_compression.py": {
        "torch": {
            "tensor_70": {
                "variable": {
                    "value": "self.dct_conv_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "gen_filters(8, 8, dct_coeff)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "self.idct_conv_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "gen_filters(8, 8, idct_coeff)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "image_conv_stacked",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_conv_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_138": {
                "variable": {
                    "value": "image_yuv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noised_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noised_and_cover[0]",
                            "Subscript"
                        ],
                        [
                            "nn.ZeroPad2d((0, pad_width, 0, pad_height))(noised_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_149": {
                "variable": {
                    "value": "image_dct_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_dct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.apply_conv(image_yuv, 'dct')",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((window_size, window_size), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(get_jpeg_yuv_filter_mask(requested_shape, 8, weights_to_keep))",
                            "Call"
                        ],
                        [
                            "self.get_mask(image_dct.shape[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_154": {
                "variable": {
                    "value": "image_ret_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_dct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.apply_conv(image_yuv, 'dct')",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_86": {
                "variable": {
                    "value": "self.jpeg_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3,) + requested_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_110": {
                "variable": {
                    "value": "image_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_yuv_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, channel, :, :].unsqueeze_(1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((size_x * size_y, size_x, size_y))",
                            "Call"
                        ],
                        [
                            "self.dct_conv_weights",
                            "Attribute"
                        ],
                        [
                            "self.idct_conv_weights",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "get_jpeg_yuv_filter_mask(requested_shape, 8, weights_to_keep)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ZeroPad2d_135": {
                "padding": {
                    "value": "(0, pad_width, 0, pad_height)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "noise_layers/noiser.py": {
        "torch": {}
    },
    "noise_layers/quantization.py": {
        "torch": {
            "tensor_25": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[(-1) ** (n + 1) / (np.pi * (n + 1)) for n in range(self.N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[2 * np.pi * (n + 1) for n in range(self.N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mul_34": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_35": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(self.weights, torch.sin(torch.mul(tensor, self.scales)))",
                            "Call"
                        ],
                        [
                            "torch.sum(z, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_20": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sin_34": {
                "input": {
                    "value": "torch.mul(tensor, self.scales)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "noise_layers/resize.py": {
        "torch": {
            "interpolate_21": {
                "variable": {
                    "value": "noised_and_cover[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "noised_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noised_and_cover[0]",
                            "Subscript"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "(resize_ratio, resize_ratio)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.interpolation_method",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test_crop.py": {
        "torch": {
            "cat_44": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_cat[0], img_cat[1], img_cat[2], img_cat[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "tensors": {
                    "value": "[imgs[0 + i], imgs[1 + i], imgs[2 + i], imgs[3 + i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test_model.py": {
        "torch": {
            "load_45": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_57": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "cat_85": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_cat[0], img_cat[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "img_col",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[imgs[0 + i], imgs[1 + i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img, img_cat[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "img_col",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_col, imgs[j + i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_191": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_253": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "data": {
                    "value": "modified_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_tensor1[0:batch, 0:channel, i_n:i_n + size, j_n:j_n + size]",
                            "Subscript"
                        ],
                        [
                            "modified_img.to(device)",
                            "Call"
                        ],
                        [
                            "modified_img.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_66": {
                "data": {
                    "value": "img_entropy[0:len(modified_img)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "train_10_pixel_global.py": {
        "torch": {
            "cat_40": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_cat[0], img_cat[1], img_cat[2], img_cat[3]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_38": {
                "tensors": {
                    "value": "[imgs[0 + i], imgs[1 + i], imgs[2 + i], imgs[3 + i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_94": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_188": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "Tensor_24": {
                "variable": {
                    "value": "image_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "stacked_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images, watermarked_images]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "last_checkpoint_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_checkpoint_from_folder(checkpoint_folder)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_145": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(train_options.train_folder, data_transforms['train'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_options.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_150": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(train_options.validation_folder, data_transforms['test'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_options.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_cat[0], img_cat[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_51": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "original_images[:original_images.shape[0], :, :, :].cpu()",
                            "Call"
                        ],
                        [
                            "(images + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(images, size=resize_to)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize_to",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_52": {
                "variable": {
                    "value": "watermarked_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "watermarked_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "watermarked_images[:watermarked_images.shape[0], :, :, :].cpu()",
                            "Call"
                        ],
                        [
                            "(watermarked_images + 1) / 2",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(watermarked_images, size=resize_to)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize_to",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_87": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'enc-dec-model': model.encoder_decoder.state_dict(), 'enc-dec-optim': model.optimizer_enc_dec.state_dict(), 'discrim-model': model.discriminator.state_dict(), 'discrim-optim': model.optimizer_discrim.state_dict(), 'epoch': epoch}",
                            "Dict"
                        ],
                        [
                            "torch.load(last_checkpoint_file)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'{experiment_name}--epoch-{epoch}.pyt'",
                            "JoinedStr"
                        ],
                        [
                            "os.path.join(checkpoint_folder, checkpoint_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_258": {
                "variable": {
                    "value": "img_col",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[imgs[0 + i], imgs[1 + i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img, img_cat[i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "img_col",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_col, imgs[j + i]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_241": {
                "data": {
                    "value": "modified_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_tensor1[0:batch, 0:channel, i_n:i_n + size, j_n:j_n + size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_244": {
                "data": {
                    "value": "img_entropy[0:len(modified_img)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "validate-trained-models.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_74": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "vgg_loss.py": {
        "torch": {
            "Sequential_29": {
                "variable": {
                    "value": "self.vgg_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    }
}