{
    "acronyms/acronym_utils.py": {
        "sklearn": {
            "train_test_split_144": {
                "variable": {
                    "value": "(train_df, test_df)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1.0 - train_frac",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "train_test_split_184": {
                "variable": {
                    "value": "(train_df, test_df)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1.0 - train_frac",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "classification_report_424": {
                "variable": {
                    "value": "sf_results",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_true + [lf] * count",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y_pred + [pred_lf] * count",
                            "BinOp"
                        ]
                    ]
                },
                "output_dict": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_463": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_383": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "acronyms/error_analysis.py": {
        "sklearn": {
            "classification_report_99": {
                "variable": {
                    "value": "sf_results",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sf_confusion[sf][0]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sf_confusion[sf][1]",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "list(range(len(labels_trunc)))",
                    "type": "Call",
                    "possible_values": []
                },
                "target_names": {
                    "value": "labels_trunc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(map(lambda x: x.split(';')[0], labels))",
                            "Call"
                        ]
                    ]
                },
                "output_dict": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "classification_report_101": {
                "variable": {
                    "value": "report",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sf_confusion[sf][0]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sf_confusion[sf][1]",
                            "Subscript"
                        ]
                    ]
                },
                "labels": {
                    "value": "list(range(len(labels_trunc)))",
                    "type": "Call",
                    "possible_values": []
                },
                "target_names": {
                    "value": "labels_trunc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(map(lambda x: x.split(';')[0], labels))",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "CrossEntropyLoss_260": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_322": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_227": {
                "input": {
                    "value": "batch_scores",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_278": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_340": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "topk_230": {
                "input": {
                    "value": "batch_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "top_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(batch_scores.size()[-1], 3)",
                            "Call"
                        ],
                        [
                            "min(scores.size()[-1], 3)",
                            "Call"
                        ],
                        [
                            "min(scores.size()[-1], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_283": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "top_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(batch_scores.size()[-1], 3)",
                            "Call"
                        ],
                        [
                            "min(scores.size()[-1], 3)",
                            "Call"
                        ],
                        [
                            "min(scores.size()[-1], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "topk_345": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "top_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(batch_scores.size()[-1], 3)",
                            "Call"
                        ],
                        [
                            "min(scores.size()[-1], 3)",
                            "Call"
                        ],
                        [
                            "min(scores.size()[-1], 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_270": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_332": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "acronyms/evaluate.py": {
        "sklearn": {},
        "torch": {
            "Adam_160": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda x: x.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_162": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "acronyms/bert_evaluate.py": {
        "torch": {
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_68": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "acronyms/elmo_evaluate.py": {
        "torch": {
            "load_64": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.expanduser('~'), 'allennlp/{}/{}.th'.format(args.lm_experiment, ckpt_str))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_95": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "acronyms/modules/bert_acronym_expander.py": {
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_58": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "acronyms/modules/bsg_acronym_expander.py": {
        "torch": {
            "Embedding_28": {
                "variable": {
                    "value": "self.embeddings_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "token_vocab.size()",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_32": {
                "variable": {
                    "value": "self.embeddings_log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "token_vocab.size()",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_42": {
                "variable": {
                    "value": "self.encoder.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "token_vocab.size()",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "encoder_embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder.embeddings.weight.size()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "combined_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(map(lambda x: x.unsqueeze(1), combined_mu))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "combined_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(map(lambda x: x.unsqueeze(1), combined_sigma))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_31": {
                "ndarray": {
                    "value": "mu_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(0, 1, size=(vocab_size, embed_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_35": {
                "ndarray": {
                    "value": "log_weights_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(low=-3.5, high=-1.5, size=(vocab_size, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_43": {
                "ndarray": {
                    "value": "encoder_embed_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(0, 1, size=(vocab_size, encoder_embed_dim))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "acronyms/modules/elmo_acronym_expander.py": {
        "torch": {
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_49": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "acronyms/modules/lmc_acronym_expander.py": {
        "torch": {
            "Embedding_33": {
                "variable": {
                    "value": "self.encoder.token_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "token_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "token_vocab.size()",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "encoder_embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_43": {
                "variable": {
                    "value": "self.decoder.token_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "token_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "token_vocab.size()",
                            "Call"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "decoder_embed_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "ndarray": {
                    "value": "encoder_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(0, 1, size=(token_vocab_size, encoder_embed_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "decoder_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(0, 1, size=(token_vocab_size, decoder_embed_dim))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "modules/bsg/bsg_encoder.py": {
        "torch": {
            "Embedding_23": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LSTM_25": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "merged_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[center_embedding_tiled, context_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modules/bsg/bsg_main.py": {
        "torch": {
            "Adam_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda x: x.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modules/bsg/bsg_model.py": {
        "torch": {
            "Embedding_34": {
                "variable": {
                    "value": "self.embeddings_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_36": {
                "variable": {
                    "value": "self.embeddings_log_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "self.input_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(list(map(float, args.multi_weights.split(','))))",
                            "Call"
                        ],
                        [
                            "np.array([0.7, 0.2, 0.1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_99": {
                "variable": {
                    "value": "center_id_candidates",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[token_ids.unsqueeze(0), sec_ids.unsqueeze(0), cat_ids.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multinomial_104": {
                "variable": {
                    "value": "input_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "ndarray": {
                    "value": "log_weights_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(low=-3.5, high=-1.5, size=(vocab_size, 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "modules/bsg/bsg_utils.py": {
        "torch": {
            "load_35": {
                "variable": {
                    "value": "checkpoint_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "latest_checkpoint_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, checkpoint_fns[latest_checkpoint_idx])",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_37": {
                "variable": {
                    "value": "checkpoint_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "latest_checkpoint_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, checkpoint_fns[latest_checkpoint_idx])",
                            "Call"
                        ]
                    ]
                }
            },
            "save_62": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model_state_dict': model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modules/lmc/albert_encode.py": {
        "torch": {
            "stack_16": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_encoded_layers[-last_layers:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_16": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modules/lmc/lmc_decoder.py": {
        "torch": {
            "Linear_44": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.att_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_47": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_62": {
                "variable": {
                    "value": "self.token_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "token_vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_63": {
                "variable": {
                    "value": "self.metadata_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "metadata_vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "[center_embedding, metadata_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_77": {
                "input": {
                    "value": "self.f(merged_embeds)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "modules/lmc/lmc_encoder.py": {
        "torch": {
            "Linear_43": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.att_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_46": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_56": {
                "variable": {
                    "value": "self.token_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "token_vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_57": {
                "variable": {
                    "value": "self.metadata_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "metadata_vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LSTM_59": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.combine_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_64": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_65": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "merged_embeds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[center_embedding_tiled, context_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bmm_106": {
                "input": {
                    "value": "h_reps",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "metadata_embedding.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_106": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_113": {
                "tensors": {
                    "value": "[h_sum, metadata_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "modules/lmc/lmc_eval.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "pad_context",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_59": {
                "variable": {
                    "value": "context_tens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_74": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "modules/lmc/lmc_main.py": {
        "torch": {
            "device_146": {
                "variable": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device_str",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if torch.cuda.is_available() else 'cpu'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataLoader_168": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedDataset(**kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_183": {
                "variable": {
                    "value": "num_gpu_available",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_190": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda x: x.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_186": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_prototype(args, kwargs['token_vocab_size'], metadata_vocab_size=kwargs['metadata_vocab'].size())",
                            "Call"
                        ],
                        [
                            "model.to(args.device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__230": {
                "parameters": {
                    "value": "trainable_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda x: x.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "modules/lmc/lmc_model.py": {
        "torch": {
            "cat_61": {
                "variable": {
                    "value": "joint_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[center_ids, pos_ids_flat, neg_ids_flat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "joint_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[center_mask, pos_mask_flat, neg_mask_flat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "decoder_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[joint_ids.size()[0], max_decoder_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modules/lmc/lmc_prebatch.py": {
        "torch": {}
    },
    "modules/lmc/lmc_utils.py": {
        "torch": {
            "load_37": {
                "variable": {
                    "value": "checkpoint_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "latest_checkpoint_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, checkpoint_fns[latest_checkpoint_idx])",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_39": {
                "variable": {
                    "value": "checkpoint_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "latest_checkpoint_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, checkpoint_fns[latest_checkpoint_idx])",
                            "Call"
                        ]
                    ]
                }
            },
            "save_84": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model_state_dict': model.state_dict(), 'token_metadata_counts': token_metadata_counts}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/compute_utils.py": {
        "torch": {
            "zeros_76": {
                "variable": {
                    "value": "a_covar",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "components",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "components",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MultivariateNormal_82": {
                "variable": {
                    "value": "dist_a",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu_a",
                    "type": "variable",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "a_covar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, components, components).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultivariateNormal_83": {
                "variable": {
                    "value": "dist_b",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu_b",
                    "type": "variable",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "b_covar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a_covar.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_63": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Softmax_17": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_48": {
                "input": {
                    "value": "mu_b - mu_a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_49": {
                "input": {
                    "value": "sigma_a * sigma_p_inv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}