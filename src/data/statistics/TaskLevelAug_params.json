{
    "algo/OptimBase.py": {
        "torch": {
            "Sequential_216": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_258": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.num * self.lossf(output.view(*output_size), labela)",
                            "BinOp"
                        ],
                        [
                            "self.lossf(output.view(*output_size), labelb, reduction='none')",
                            "Call"
                        ],
                        [
                            "loss.view(-1, self.num)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.inner_plist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_217": {
                "*args": {
                    "value": "*feature_embedding",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "algo/parallel.py": {
        "torch": {
            "is_available_14": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "conv2d_186": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.view(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.permute(2, 0, 1, 3).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "(x - x.mean(-1, keepdim=True).detach()) / torch.sqrt(x.var(-1, keepdim=True, unbiased=False).detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x.view(in_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_196": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.view(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.permute(2, 0, 1, 3).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "(x - x.mean(-1, keepdim=True).detach()) / torch.sqrt(x.var(-1, keepdim=True, unbiased=False).detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x.view(in_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_223": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.view(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.permute(2, 0, 1, 3).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "(x - x.mean(-1, keepdim=True).detach()) / torch.sqrt(x.var(-1, keepdim=True, unbiased=False).detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x.view(in_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose1d_233": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.view(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.permute(2, 0, 1, 3).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "(x - x.mean(-1, keepdim=True).detach()) / torch.sqrt(x.var(-1, keepdim=True, unbiased=False).detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x.view(in_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_276": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y if self.output_num == -1 else y[-self.output_num:]",
                            "IfExp"
                        ],
                        [
                            "torch.cat(y, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y if self.output_num == -1 else y[-self.output_num:]",
                            "IfExp"
                        ],
                        [
                            "torch.cat(y, dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y if self.output_num == -1 else y[-self.output_num:]",
                            "IfExp"
                        ],
                        [
                            "torch.cat(y, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "y if self.output_num == -1 else y[-self.output_num:]",
                            "IfExp"
                        ],
                        [
                            "torch.cat(y, dim=-2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_328": {
                "variable": {
                    "value": "rz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ih[:, :, :2 * self.hidden_size] + hh[:, :, :2 * self.hidden_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_329": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ih[:, :, 2 * self.hidden_size:] + rz[:, :, :self.hidden_size] * hh[:, :, 2 * self.hidden_size:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_305": {
                "variable": {
                    "value": "hx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*x.size()[1:-1]",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_norm_461": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.view(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.permute(2, 0, 1, 3).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "(x - x.mean(-1, keepdim=True).detach()) / torch.sqrt(x.var(-1, keepdim=True, unbiased=False).detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x.view(in_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "instance_norm_485": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.view(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.permute(2, 0, 1, 3).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "(x - x.mean(-1, keepdim=True).detach()) / torch.sqrt(x.var(-1, keepdim=True, unbiased=False).detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x.view(in_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_input_stats": {
                    "value": "self.training or not self.track_running_stats",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool3d_527": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.view(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.permute(2, 0, 1, 3).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "(x - x.mean(-1, keepdim=True).detach()) / torch.sqrt(x.var(-1, keepdim=True, unbiased=False).detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x.view(in_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "self.count_include_pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool3d_550": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.view(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.permute(2, 0, 1, 3).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "(x - x.mean(-1, keepdim=True).detach()) / torch.sqrt(x.var(-1, keepdim=True, unbiased=False).detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x.view(in_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "self.return_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_588": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3], si[4])",
                            "Call"
                        ],
                        [
                            "x.view(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.reshape(si[0], si[1] * si[2], si[3])",
                            "Call"
                        ],
                        [
                            "x.transpose(0, 1).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.permute(2, 0, 1, 3).contiguous() if self.batch_first else x",
                            "IfExp"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "(x - x.mean(-1, keepdim=True).detach()) / torch.sqrt(x.var(-1, keepdim=True, unbiased=False).detach() + self.eps)",
                            "BinOp"
                        ],
                        [
                            "x.view(in_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ],
                        [
                            "x.view(*re_size)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "self.count_include_pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_395": {
                "input": {
                    "value": "x.var(-1, keepdim=True, unbiased=False).detach() + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_657": {
                "data": {
                    "value": "torch.Tensor(self.basis_num, *p.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_681": {
                "data": {
                    "value": "torch.Tensor(self.basis_num, self.outsize)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_682": {
                "data": {
                    "value": "torch.Tensor(self.basis_num)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "one_hot_13": {
                "variable": {
                    "value": "smoothed_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_16": {
                "variable": {
                    "value": "log_prb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inpt.reshape(-1, num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nll_loss_8": {
                "input": {
                    "value": "torch.log(inpt)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "size_average",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-100",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduce": {
                    "value": "reduce",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'elementwise_mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_8": {
                "input": {
                    "value": "inpt",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "meta_e.py": {
        "torch": {
            "manual_seed_245": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_100": {
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[{'params': model.parameters(), 'lr': args.lr, 'initial_lr': args.lr}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_103": {
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[{'params': model.parameters(), 'lr': args.lr, 'initial_lr': args.lr}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_117": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_optim(args.optim, whole_net, args)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_epoch",
                    "type": "Lambda",
                    "possible_values": [
                        [
                            "lambda e: 1.0 if e < 20 else 0.06 if e < 40 else 0.012 if e < 50 else 0.0024",
                            "Lambda"
                        ],
                        [
                            "lambda e: 1.0 if e < 30 else 0.5 if e < 40 else 0.25 if e < 50 else 0.125",
                            "Lambda"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "start_epoch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.start_epoch if args.start_epoch > 0 else -1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "load_271": {
                "variable": {
                    "value": "saved_models",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.logdir, str(args.start_epoch) + savesuffix)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(best) + savesuffix)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(epoch) + '.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(epoch) + '.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(epoch) + savesuffix)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_328": {
                "variable": {
                    "value": "data_shot_query",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data_shot.view([-1] + list(data_shot.shape[-3:])), data_query.view([-1] + list(data_query.shape[-3:]))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_370": {
                "obj": {
                    "value": "{'embedding': embedding.state_dict(), 'head': cls_head.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, str(epoch) + savesuffix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_509": {
                "variable": {
                    "value": "saved_models",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.logdir, str(args.start_epoch) + savesuffix)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(best) + savesuffix)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(epoch) + '.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(epoch) + '.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(epoch) + savesuffix)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_358": {
                "tensors": {
                    "value": "logit_query_save",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_359": {
                "tensors": {
                    "value": "labels_query_save",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_417": {
                "variable": {
                    "value": "data_shot_query",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data_shot.view([-1] + list(data_shot.shape[-3:])), data_query.view([-1] + list(data_query.shape[-3:]))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_456": {
                "obj": {
                    "value": "{'embedding': embedding.state_dict(), 'head': cls_head.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.logdir, str(epoch) + savesuffix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_444": {
                "tensors": {
                    "value": "logit_query_save",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_445": {
                "tensors": {
                    "value": "labels_query_save",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_478": {
                "variable": {
                    "value": "saved_models",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.logdir, str(args.start_epoch) + savesuffix)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(best) + savesuffix)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(epoch) + '.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(epoch) + '.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(epoch) + savesuffix)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_536": {
                "variable": {
                    "value": "saved_models",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.logdir, str(args.start_epoch) + savesuffix)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(best) + savesuffix)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(epoch) + '.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(epoch) + '.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(epoch) + savesuffix)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_551": {
                "variable": {
                    "value": "saved_models",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(args.logdir, str(args.start_epoch) + savesuffix)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(best) + savesuffix)",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(epoch) + '.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(epoch) + '.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(args.logdir, str(epoch) + savesuffix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "metadatas/taskaug.py": {
        "torch": {
            "stack_101": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[get_image(img_idx) for (img_idx, _) in examples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_189": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dataset[img_idx[1]][0][self.orders[img_idx[0]]] for (img_idx, _) in examples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_285": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.rot90(dataset[img_idx[1]][0], img_idx[0], [1, 2]) for (img_idx, _) in examples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_416": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack([get_image(img_idx) for (img_idx, _) in examples], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([dataset[img_idx[1]][0][self.orders[img_idx[0]]] for (img_idx, _) in examples], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.rot90(dataset[img_idx[1]][0], img_idx[0], [1, 2]) for (img_idx, _) in examples], dim=0)",
                            "Call"
                        ],
                        [
                            "[self.trans_ratio(dataset[img_idx[1]][0], img_idx[0]) for (img_idx, _) in examples]",
                            "ListComp"
                        ],
                        [
                            "[self.transform(img) for img in images]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(images, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rot90_286": {
                "input": {
                    "value": "dataset[img_idx[1]][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "img_idx[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "metadatas/utils.py": {
        "torch": {
            "DataLoader_231": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "listdataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ListDataset(elem_list=range(self.epoch_size), load=load_function)",
                            "Call"
                        ],
                        [
                            "ListDataset(elem_list=range(self.epoch_size), load=load_function)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "self.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_262": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "listdataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ListDataset(elem_list=range(self.epoch_size), load=load_function)",
                            "Call"
                        ],
                        [
                            "ListDataset(elem_list=range(self.epoch_size), load=load_function)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "self.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_317": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self[img_idx][0] for (img_idx, _) in examples]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_217": {
                "seed": {
                    "value": "epoch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_218": {
                "seed": {
                    "value": "epoch",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_238": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_239": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "metamodels/R2D2_embedding.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 3, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "(b3.view(b3.size(0), -1), b4.view(b4.size(0), -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_18": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "p": {
                    "value": "1 - keep_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "metamodels/ResNet12_embedding.py": {
        "torch": {
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_23": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_97": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1 - self.keep_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_29": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AvgPool2d_94": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_31": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_69": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.pool(out)",
                            "Call"
                        ],
                        [
                            "self.DropBlock(out, gamma=gamma)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.drop_rate, training=self.training, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "metamodels/classification_heads.py": {
        "torch": {
            "solve_41": {
                "variable": {
                    "value": "(b_inv, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "id_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "b_mat.new_ones(b_mat.size(-1)).diag().expand_as(b_mat).cuda()",
                            "Call"
                        ],
                        [
                            "torch.eye(n_support).expand(tasks_per_batch, n_support, n_support)",
                            "Call"
                        ],
                        [
                            "torch.eye(n_way * n_support).expand(tasks_per_batch, n_way * n_support, n_way * n_support)",
                            "Call"
                        ],
                        [
                            "torch.eye(n_support).expand(tasks_per_batch, n_support, n_support).cuda()",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "b_mat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "encoded_indicies",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "indices.size() + torch.Size([depth])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "id_matrix_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tasks_per_batch * n_way",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "n_support",
                    "type": "Call",
                    "possible_values": [
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "n_support",
                    "type": "Call",
                    "possible_values": [
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_145": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "qp_sol.float().unsqueeze(2).expand(tasks_per_batch, n_support, n_query, n_way)",
                            "Call"
                        ],
                        [
                            "logits * compatibility",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, 1)",
                            "Call"
                        ],
                        [
                            "qp_sol.float().unsqueeze(1).expand(tasks_per_batch, n_query, n_support)",
                            "Call"
                        ],
                        [
                            "logits * compatibility",
                            "BinOp"
                        ],
                        [
                            "logits.view(tasks_per_batch, n_query, n_shot, n_way)",
                            "Call"
                        ],
                        [
                            "torch.sum(logits, 2)",
                            "Call"
                        ],
                        [
                            "AA.expand_as(AB) - 2 * AB + BB.expand_as(AB)",
                            "BinOp"
                        ],
                        [
                            "-logits",
                            "UnaryOp"
                        ],
                        [
                            "logits / d",
                            "BinOp"
                        ],
                        [
                            "(Y_support_reshaped - qp_sol) * compatibility",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, 2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(query, ridge_sol)",
                            "Call"
                        ],
                        [
                            "qp_sol.float().unsqueeze(2).expand(tasks_per_batch, n_support, n_query, n_way)",
                            "Call"
                        ],
                        [
                            "logits * compatibility",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, 1)",
                            "Call"
                        ],
                        [
                            "self.base_learner(query, support, support_labels, n_way, n_shot, **kwargs)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=2).view(self.n_learners, tasks_per_batch, n_query, n_way).mean(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_191": {
                "variable": {
                    "value": "id_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n_support",
                    "type": "Call",
                    "possible_values": [
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_214": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "qp_sol.float().unsqueeze(2).expand(tasks_per_batch, n_support, n_query, n_way)",
                            "Call"
                        ],
                        [
                            "logits * compatibility",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, 1)",
                            "Call"
                        ],
                        [
                            "qp_sol.float().unsqueeze(1).expand(tasks_per_batch, n_query, n_support)",
                            "Call"
                        ],
                        [
                            "logits * compatibility",
                            "BinOp"
                        ],
                        [
                            "logits.view(tasks_per_batch, n_query, n_shot, n_way)",
                            "Call"
                        ],
                        [
                            "torch.sum(logits, 2)",
                            "Call"
                        ],
                        [
                            "AA.expand_as(AB) - 2 * AB + BB.expand_as(AB)",
                            "BinOp"
                        ],
                        [
                            "-logits",
                            "UnaryOp"
                        ],
                        [
                            "logits / d",
                            "BinOp"
                        ],
                        [
                            "(Y_support_reshaped - qp_sol) * compatibility",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, 2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(query, ridge_sol)",
                            "Call"
                        ],
                        [
                            "qp_sol.float().unsqueeze(2).expand(tasks_per_batch, n_support, n_query, n_way)",
                            "Call"
                        ],
                        [
                            "logits * compatibility",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, 1)",
                            "Call"
                        ],
                        [
                            "self.base_learner(query, support, support_labels, n_way, n_shot, **kwargs)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=2).view(self.n_learners, tasks_per_batch, n_query, n_way).mean(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_259": {
                "variable": {
                    "value": "prototypes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_train_transposed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "support_labels_one_hot.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "support",
                    "type": "Call",
                    "possible_values": [
                        [
                            "support.view(tasks_per_batch * n_support, 1, self.in_channels, -1)",
                            "Call"
                        ],
                        [
                            "F.unfold(support, (self.n_channels, feature_size), dilation=1, padding=0, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "support.permute(2, 0, 1).reshape(self.n_learners * tasks_per_batch, n_support, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_432": {
                "variable": {
                    "value": "id_matrix_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n_way",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_456": {
                "variable": {
                    "value": "id_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n_way * n_support",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_462": {
                "variable": {
                    "value": "zer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tasks_per_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_way * n_support",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_486": {
                "variable": {
                    "value": "A_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qp_sol",
                    "type": "Call",
                    "possible_values": [
                        [
                            "QPFunction(verbose=False)(G, e.detach(), C.detach(), h.detach(), dummy.detach(), dummy.detach())",
                            "Call"
                        ],
                        [
                            "qp_sol.reshape(n_way, tasks_per_batch, n_support)",
                            "Call"
                        ],
                        [
                            "qp_sol.permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "qp_sol.reshape(tasks_per_batch, n_support, n_way)",
                            "Call"
                        ],
                        [
                            "QPFunction(verbose=False)(G, e.detach(), C.detach(), h.detach(), dummy.detach(), dummy.detach())",
                            "Call"
                        ],
                        [
                            "QPFunction(verbose=False)(G, e, C, h, dummy.detach(), dummy.detach())",
                            "Call"
                        ],
                        [
                            "qp_sol.float()",
                            "Call"
                        ],
                        [
                            "qp_sol.reshape(tasks_per_batch, n_way, n_support)",
                            "Call"
                        ],
                        [
                            "qp_sol.float().unsqueeze(3).expand(tasks_per_batch, n_way, n_support, n_query)",
                            "Call"
                        ],
                        [
                            "QPFunction(verbose=False, maxIter=15 if self.training else self.evalIter)(G, e.detach(), C.detach(), h.detach(), A.detach(), b.detach())",
                            "Call"
                        ],
                        [
                            "qp_sol.reshape(tasks_per_batch, n_support, n_way)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_494": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "qp_sol.float().unsqueeze(2).expand(tasks_per_batch, n_support, n_query, n_way)",
                            "Call"
                        ],
                        [
                            "logits * compatibility",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, 1)",
                            "Call"
                        ],
                        [
                            "qp_sol.float().unsqueeze(1).expand(tasks_per_batch, n_query, n_support)",
                            "Call"
                        ],
                        [
                            "logits * compatibility",
                            "BinOp"
                        ],
                        [
                            "logits.view(tasks_per_batch, n_query, n_shot, n_way)",
                            "Call"
                        ],
                        [
                            "torch.sum(logits, 2)",
                            "Call"
                        ],
                        [
                            "AA.expand_as(AB) - 2 * AB + BB.expand_as(AB)",
                            "BinOp"
                        ],
                        [
                            "-logits",
                            "UnaryOp"
                        ],
                        [
                            "logits / d",
                            "BinOp"
                        ],
                        [
                            "(Y_support_reshaped - qp_sol) * compatibility",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, 2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(query, ridge_sol)",
                            "Call"
                        ],
                        [
                            "qp_sol.float().unsqueeze(2).expand(tasks_per_batch, n_support, n_query, n_way)",
                            "Call"
                        ],
                        [
                            "logits * compatibility",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, 1)",
                            "Call"
                        ],
                        [
                            "self.base_learner(query, support, support_labels, n_way, n_shot, **kwargs)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=2).view(self.n_learners, tasks_per_batch, n_query, n_way).mean(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_561": {
                "variable": {
                    "value": "id_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n_support",
                    "type": "Call",
                    "possible_values": [
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_567": {
                "variable": {
                    "value": "ridge_sol",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "support.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "ridge_sol",
                    "type": "Call",
                    "possible_values": [
                        [
                            "computeGramMatrix(support, support) + l2_regularizer_lambda * id_matrix",
                            "BinOp"
                        ],
                        [
                            "binv(ridge_sol)",
                            "Call"
                        ],
                        [
                            "torch.bmm(support.transpose(1, 2), ridge_sol)",
                            "Call"
                        ],
                        [
                            "torch.bmm(ridge_sol, support_labels_one_hot)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_568": {
                "variable": {
                    "value": "ridge_sol",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ridge_sol",
                    "type": "Call",
                    "possible_values": [
                        [
                            "computeGramMatrix(support, support) + l2_regularizer_lambda * id_matrix",
                            "BinOp"
                        ],
                        [
                            "binv(ridge_sol)",
                            "Call"
                        ],
                        [
                            "torch.bmm(support.transpose(1, 2), ridge_sol)",
                            "Call"
                        ],
                        [
                            "torch.bmm(ridge_sol, support_labels_one_hot)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "support_labels_one_hot",
                    "type": "Call",
                    "possible_values": [
                        [
                            "one_hot(support_labels.view(tasks_per_batch * n_support), n_way)",
                            "Call"
                        ],
                        [
                            "support_labels_one_hot.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "support_labels_one_hot.reshape(n_way * tasks_per_batch, n_support)",
                            "Call"
                        ],
                        [
                            "one_hot(support_labels.view(tasks_per_batch * n_support), n_way)",
                            "Call"
                        ],
                        [
                            "support_labels_one_hot.view(tasks_per_batch, n_support, n_way)",
                            "Call"
                        ],
                        [
                            "one_hot(support_labels.view(tasks_per_batch * n_support), n_way)",
                            "Call"
                        ],
                        [
                            "support_labels_one_hot.view(tasks_per_batch, n_support, n_way)",
                            "Call"
                        ],
                        [
                            "one_hot(support_labels.view(tasks_per_batch * n_support), n_way)",
                            "Call"
                        ],
                        [
                            "support_labels_one_hot.view(tasks_per_batch, n_support, n_way)",
                            "Call"
                        ],
                        [
                            "support_labels_one_hot.reshape(tasks_per_batch, n_support * n_way)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_572": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query.view(-1, 1, self.in_channels, feature_size)",
                            "Call"
                        ],
                        [
                            "F.unfold(query, (self.n_channels, feature_size), dilation=1, padding=0, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "query.permute(2, 0, 1).reshape(self.n_learners * tasks_per_batch, n_query, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ridge_sol",
                    "type": "Call",
                    "possible_values": [
                        [
                            "computeGramMatrix(support, support) + l2_regularizer_lambda * id_matrix",
                            "BinOp"
                        ],
                        [
                            "binv(ridge_sol)",
                            "Call"
                        ],
                        [
                            "torch.bmm(support.transpose(1, 2), ridge_sol)",
                            "Call"
                        ],
                        [
                            "torch.bmm(ridge_sol, support_labels_one_hot)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_26": {
                "input": {
                    "value": "A",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(batched_kronecker(id_matrix_2, torch.ones(tasks_per_batch, 1, n_way).cuda()))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "B.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_67": {
                "input": {
                    "value": "matrix1_flatten.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "matrix2_flatten.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "input": {
                    "value": "matrix1.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "matrix1.size(1) * matrix2.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_67": {
                "input": {
                    "value": "[0, 1, 3, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_325": {
                "variable": {
                    "value": "id_matrix_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n_way",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_343": {
                "variable": {
                    "value": "id_matrix_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n_way * n_support",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_349": {
                "variable": {
                    "value": "id_matrix_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n_support",
                    "type": "Call",
                    "possible_values": [
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_373": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "qp_sol.float().unsqueeze(2).expand(tasks_per_batch, n_support, n_query, n_way)",
                            "Call"
                        ],
                        [
                            "logits * compatibility",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, 1)",
                            "Call"
                        ],
                        [
                            "qp_sol.float().unsqueeze(1).expand(tasks_per_batch, n_query, n_support)",
                            "Call"
                        ],
                        [
                            "logits * compatibility",
                            "BinOp"
                        ],
                        [
                            "logits.view(tasks_per_batch, n_query, n_shot, n_way)",
                            "Call"
                        ],
                        [
                            "torch.sum(logits, 2)",
                            "Call"
                        ],
                        [
                            "AA.expand_as(AB) - 2 * AB + BB.expand_as(AB)",
                            "BinOp"
                        ],
                        [
                            "-logits",
                            "UnaryOp"
                        ],
                        [
                            "logits / d",
                            "BinOp"
                        ],
                        [
                            "(Y_support_reshaped - qp_sol) * compatibility",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, 2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(query, ridge_sol)",
                            "Call"
                        ],
                        [
                            "qp_sol.float().unsqueeze(2).expand(tasks_per_batch, n_support, n_query, n_way)",
                            "Call"
                        ],
                        [
                            "logits * compatibility",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, 1)",
                            "Call"
                        ],
                        [
                            "self.base_learner(query, support, support_labels, n_way, n_shot, **kwargs)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=2).view(self.n_learners, tasks_per_batch, n_query, n_way).mean(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unfold_622": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "support",
                    "type": "Call",
                    "possible_values": [
                        [
                            "support.view(tasks_per_batch * n_support, 1, self.in_channels, -1)",
                            "Call"
                        ],
                        [
                            "F.unfold(support, (self.n_channels, feature_size), dilation=1, padding=0, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "support.permute(2, 0, 1).reshape(self.n_learners * tasks_per_batch, n_support, -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.n_channels, feature_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_626": {
                "variable": {
                    "value": "query",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query.view(-1, 1, self.in_channels, feature_size)",
                            "Call"
                        ],
                        [
                            "F.unfold(query, (self.n_channels, feature_size), dilation=1, padding=0, stride=self.stride)",
                            "Call"
                        ],
                        [
                            "query.permute(2, 0, 1).reshape(self.n_learners * tasks_per_batch, n_query, -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(self.n_channels, feature_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_632": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "qp_sol.float().unsqueeze(2).expand(tasks_per_batch, n_support, n_query, n_way)",
                            "Call"
                        ],
                        [
                            "logits * compatibility",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, 1)",
                            "Call"
                        ],
                        [
                            "qp_sol.float().unsqueeze(1).expand(tasks_per_batch, n_query, n_support)",
                            "Call"
                        ],
                        [
                            "logits * compatibility",
                            "BinOp"
                        ],
                        [
                            "logits.view(tasks_per_batch, n_query, n_shot, n_way)",
                            "Call"
                        ],
                        [
                            "torch.sum(logits, 2)",
                            "Call"
                        ],
                        [
                            "AA.expand_as(AB) - 2 * AB + BB.expand_as(AB)",
                            "BinOp"
                        ],
                        [
                            "-logits",
                            "UnaryOp"
                        ],
                        [
                            "logits / d",
                            "BinOp"
                        ],
                        [
                            "(Y_support_reshaped - qp_sol) * compatibility",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, 2)",
                            "Call"
                        ],
                        [
                            "torch.bmm(query, ridge_sol)",
                            "Call"
                        ],
                        [
                            "qp_sol.float().unsqueeze(2).expand(tasks_per_batch, n_support, n_query, n_way)",
                            "Call"
                        ],
                        [
                            "logits * compatibility",
                            "BinOp"
                        ],
                        [
                            "torch.sum(logits, 1)",
                            "Call"
                        ],
                        [
                            "self.base_learner(query, support, support_labels, n_way, n_shot, **kwargs)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=2).view(self.n_learners, tasks_per_batch, n_query, n_way).mean(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_632": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_102": {
                "n": {
                    "value": "n_support",
                    "type": "Call",
                    "possible_values": [
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_116": {
                "*size": {
                    "value": "(tasks_per_batch * n_way, n_support)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_192": {
                "tensors": {
                    "value": "(id_matrix, -id_matrix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_193": {
                "tensors": {
                    "value": "(C_reg * torch.ones(tasks_per_batch, n_support), torch.zeros(tasks_per_batch, n_support))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_430": {
                "*size": {
                    "value": "tasks_per_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_support",
                    "type": "Call",
                    "possible_values": [
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "n_support",
                    "type": "Call",
                    "possible_values": [
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_443": {
                "start": {
                    "value": "n_way",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_443": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_443": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_455": {
                "*size": {
                    "value": "tasks_per_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_way * n_support",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_460": {
                "tensors": {
                    "value": "(id_matrix, -id_matrix)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_464": {
                "tensors": {
                    "value": "(C_mat, zer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_481": {
                "*size": {
                    "value": "tasks_per_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_support",
                    "type": "Call",
                    "possible_values": [
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "n_query",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query.size(1)",
                            "Call"
                        ],
                        [
                            "query.size(1)",
                            "Call"
                        ],
                        [
                            "query.size(1)",
                            "Call"
                        ],
                        [
                            "query.size(1)",
                            "Call"
                        ],
                        [
                            "query.size(1)",
                            "Call"
                        ],
                        [
                            "query.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_584": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_585": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_612": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_613": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_186": {
                "*size": {
                    "value": "tasks_per_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_support",
                    "type": "Call",
                    "possible_values": [
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "n_way",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_190": {
                "*size": {
                    "value": "tasks_per_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_support",
                    "type": "Call",
                    "possible_values": [
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_328": {
                "n": {
                    "value": "n_way * n_support",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_352": {
                "*size": {
                    "value": "tasks_per_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_support",
                    "type": "Call",
                    "possible_values": [
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_458": {
                "*size": {
                    "value": "tasks_per_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_way * n_support",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_519": {
                "data": {
                    "value": "torch.FloatTensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_193": {
                "*size": {
                    "value": "tasks_per_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_support",
                    "type": "Call",
                    "possible_values": [
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_351": {
                "*size": {
                    "value": "tasks_per_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "n_way",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_466": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_193": {
                "*size": {
                    "value": "tasks_per_batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ],
                        [
                            "query.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n_support",
                    "type": "Call",
                    "possible_values": [
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ],
                        [
                            "support.size(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "metamodels/densenet.py": {
        "torch": {
            "Sequential_128": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(3, num_init_features, kernel_size=5, stride=1, padding=2, bias=False)), ('norm0', nn.BatchNorm2d(num_init_features)), ('relu0', nn.LeakyReLU(0.1)), ('pool0', nn.AvgPool2d(2))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "[x, new_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_79": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "module(new_features)",
                            "Call"
                        ],
                        [
                            "self.DropBlock(new_features, gamma=gamma)",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_96": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_99": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_149": {
                "num_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_init_features",
                            "Name"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LeakyReLU_154": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_50": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_55": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_158": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_init_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "num_features": {
                    "value": "num_init_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_132": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_133": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "metamodels/dropblock.py": {
        "torch": {
            "stack_44": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(self.block_size).view(-1, 1).expand(self.block_size, self.block_size).reshape(-1), torch.arange(self.block_size).repeat(self.block_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "t_44": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(self.block_size ** 2, 2).cuda().long(), offsets.long())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Bernoulli_22": {
                "variable": {
                    "value": "bernoulli",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_59": {
                "variable": {
                    "value": "padded_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bernoulli.sample((batch_size, channels, height - (self.block_size - 1), width - (self.block_size - 1))).cuda()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(left_padding, right_padding, left_padding, right_padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_62": {
                "variable": {
                    "value": "padded_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bernoulli.sample((batch_size, channels, height - (self.block_size - 1), width - (self.block_size - 1))).cuda()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(left_padding, right_padding, left_padding, right_padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "self.block_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_46": {
                "start": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_47": {
                "start": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "metamodels/for_parallel.py": {
        "torch": {
            "stack_157": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(self.block_size).view(-1, 1).expand(self.block_size, self.block_size).reshape(-1), torch.arange(self.block_size).repeat(self.block_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "t_157": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(self.block_size ** 2, 2).cuda().long(), offsets.long())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_199": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_norm_64": {
                "input": {
                    "value": "inpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "running_var": {
                    "value": "running_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_173": {
                "variable": {
                    "value": "padded_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bernoulli.sample((batch_size, channels, height - (self.block_size - 1), width - (self.block_size - 1))).to(device=x.device)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(left_padding, right_padding, left_padding, right_padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_176": {
                "variable": {
                    "value": "padded_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bernoulli.sample((batch_size, channels, height - (self.block_size - 1), width - (self.block_size - 1))).to(device=x.device)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(left_padding, right_padding, left_padding, right_padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_205": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_253": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_263": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_14": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_15": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_82": {
                "variable": {
                    "value": "self.dind",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "inpt_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inpt.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_83": {
                "variable": {
                    "value": "self.dind",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dind",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_96": {
                "input": {
                    "value": "inpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Bernoulli_127": {
                "variable": {
                    "value": "bernoulli",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1 - keep_rate) / self.block_size ** 2 * width ** 2 / (width - self.block_size + 1) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "AvgPool2d_207": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_cache_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_164": {
                "*size": {
                    "value": "self.block_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_254": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_159": {
                "start": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_159": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_161": {
                "start": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "metamodels/protonet_embedding.py": {
        "torch": {
            "Sequential_8": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBlock(x_dim, h_dim, pool=pool)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_17": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_19": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "qpthhere/qp.py": {
        "torch": {
            "eig_89": {
                "variable": {
                    "value": "(e, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "Q[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_105": {
                "variable": {
                    "value": "zhats",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_106": {
                "variable": {
                    "value": "lams",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_109": {
                "variable": {
                    "value": "slacks",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clamp_153": {
                "input": {
                    "value": "self.slacks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "*size": {
                    "value": "nBatch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "extract_nBatch(Q_, p_, G_, h_, A_, b_)",
                            "Call"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "*size": {
                    "value": "nBatch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "extract_nBatch(Q_, p_, G_, h_, A_, b_)",
                            "Call"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_117": {
                "variable": {
                    "value": "zhats[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_118": {
                "variable": {
                    "value": "lams[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_119": {
                "variable": {
                    "value": "slacks[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "*size": {
                    "value": "nBatch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "extract_nBatch(Q_, p_, G_, h_, A_, b_)",
                            "Call"
                        ],
                        [
                            "extract_nBatch(Q, p, G, h, A, b)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "neq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A.size(1) if A.nelement() > 0 else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Tensor_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_90": {
                "input": {
                    "value": "e[:, 0] > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Tensor_107": {},
            "Tensor_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_121": {
                "variable": {
                    "value": "nus[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "qpthhere/solvers/pdipm/batch.py": {
        "torch": {
            "zeros_275": {
                "variable": {
                    "value": "H_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_296": {
                "variable": {
                    "value": "S_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q)], 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invH_A_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "A_.transpose(1, 2).lu_solve(*H_LU)",
                            "Call"
                        ],
                        [
                            "A_.transpose(1, 2).lu_solve(*H_LU)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_315": {
                "variable": {
                    "value": "H_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nz + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_333": {
                "variable": {
                    "value": "S_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q).repeat(nBatch, 1, 1)], 2), torch.cat([A, torch.zeros(nBatch, neq, nineq).type_as(Q)], 2)], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q)], 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invH_A_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "A_.transpose(1, 2).lu_solve(*H_LU)",
                            "Call"
                        ],
                        [
                            "A_.transpose(1, 2).lu_solve(*H_LU)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_395": {
                "variable": {
                    "value": "G_invQ_GT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "G.transpose(1, 2).lu_solve(*Q_LU)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_397": {
                "variable": {
                    "value": "S_LU_pivots",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_55": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_101": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(s * z).sum(1).squeeze() / nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_102": {
                "variable": {
                    "value": "z_resid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(x.unsqueeze(1), G.transpose(1, 2)).squeeze(1) + s - h",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(nBatch, nineq).type_as(Q)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_102": {
                "variable": {
                    "value": "z_resid",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_105": {
                "variable": {
                    "value": "dual_resid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(torch.bmm(y.unsqueeze(1), A).squeeze(1) if neq > 0 else 0.0) + torch.bmm(z.unsqueeze(1), G).squeeze(1) + torch.bmm(x.unsqueeze(1), Q.transpose(1, 2)).squeeze(1) + p",
                            "BinOp"
                        ],
                        [
                            "torch.zeros(nBatch, nz).type_as(Q)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_105": {
                "variable": {
                    "value": "dual_resid",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_159": {
                "input": {
                    "value": "get_step(z, dz_aff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_165": {
                "variable": {
                    "value": "t3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1 * t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_165": {
                "variable": {
                    "value": "t3",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_166": {
                "variable": {
                    "value": "t4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s * z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_166": {
                "variable": {
                    "value": "t4",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "rx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nz",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "rz",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_192": {
                "input": {
                    "value": "get_step(z, dz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_281": {
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "g_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "h_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rz, ry]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "A_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q_tilde).repeat(nBatch, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_288": {
                "variable": {
                    "value": "g_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_319": {
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q).repeat(nBatch, 1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_321": {
                "variable": {
                    "value": "g_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "h_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rz, ry]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "A_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "g_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_354": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(invQ_rx.unsqueeze(1).bmm(A.transpose(1, 2)).squeeze(1) - ry, invQ_rx.unsqueeze(1).bmm(G.transpose(1, 2)).squeeze(1) + rs / d - rz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_401": {
                "variable": {
                    "value": "A_invQ_AT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "invQ_AT",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A.transpose(1, 2).lu_solve(*Q_LU)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_402": {
                "variable": {
                    "value": "G_invQ_AT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "invQ_AT",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A.transpose(1, 2).lu_solve(*Q_LU)",
                            "Call"
                        ]
                    ]
                }
            },
            "lu_unpack_405": {
                "variable": {
                    "value": "(P_A_invQ_AT, L_A_invQ_AT, U_A_invQ_AT)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "LU_data": {
                    "value": "*LU_A_invQ_AT",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_414": {
                "variable": {
                    "value": "S_LU_22",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_415": {
                "tensors": {
                    "value": "(S_LU_11, S_LU_12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_422": {
                "variable": {
                    "value": "S_LU_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_439": {
                "variable": {
                    "value": "factor_kkt_eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "lu_unpack_450": {
                "variable": {
                    "value": "(oldPivots, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "LU_data": {
                    "value": "T_LU[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "LU_pivots": {
                    "value": "oldPivotsPacked",
                    "type": "Name",
                    "possible_values": [
                        [
                            "S_LU[1][:, -nineq:] - neq",
                            "BinOp"
                        ]
                    ]
                },
                "unpack_data": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "lu_unpack_453": {
                "variable": {
                    "value": "(newPivots, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "LU_data": {
                    "value": "T_LU[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "LU_pivots": {
                    "value": "newPivotsPacked",
                    "type": "Name",
                    "possible_values": [
                        [
                            "T_LU[1]",
                            "Subscript"
                        ]
                    ]
                },
                "unpack_data": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_12": {
                "variable": {
                    "value": "pivots",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1 + x.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_61": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_77": {
                "input": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s + alpha_nineq * ds",
                            "BinOp"
                        ],
                        [
                            "v[:, i:i + nineq]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_83": {
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z + alpha_nineq * dz",
                            "BinOp"
                        ],
                        [
                            "v[:, i:i + nineq]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_297": {
                "n": {
                    "value": "neq + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_299": {
                "input": {
                    "value": "invH_g_.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A_.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_299": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_335": {
                "input": {
                    "value": "invH_g_.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A_.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_335": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_14": {
                "variable": {
                    "value": "pivots",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "1 + x.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_14": {
                "variable": {
                    "value": "pivots",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "nBatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_68": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_103": {
                "input": {
                    "value": "ry",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "torch.bmm(x.unsqueeze(1), A.transpose(1, 2)).squeeze(1) - b if neq > 0 else 0.0",
                            "IfExp"
                        ],
                        [
                            "torch.zeros(nBatch, neq).type_as(Q) if neq > 0 else torch.Tensor()",
                            "IfExp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_161": {
                "*size": {
                    "value": "nBatch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "*size": {
                    "value": "nBatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "neq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "S_LU[1].size(1) - nineq",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_194": {
                "*size": {
                    "value": "nBatch",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_248": {
                "n": {
                    "value": "nz",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_249": {
                "n": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "nBatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_95": {
                "input": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Q.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_95": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_98": {
                "input": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "G.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_98": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_99": {
                "input": {
                    "value": "x.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_99": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_282": {
                "tensors": {
                    "value": "[A, torch.zeros(nBatch, neq, nineq).type_as(Q_tilde)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_287": {
                "n": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_320": {
                "tensors": {
                    "value": "[A, torch.zeros(nBatch, neq, nineq).type_as(Q)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_324": {
                "n": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_416": {
                "tensors": {
                    "value": "(S_LU_21, S_LU_22)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "nBatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_94": {
                "input": {
                    "value": "z.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_94": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_93": {
                "input": {
                    "value": "y.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_93": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_281": {
                "n": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_282": {
                "*size": {
                    "value": "nBatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "neq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "S_LU[1].size(1) - nineq",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_319": {
                "n": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_320": {
                "*size": {
                    "value": "nBatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "neq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "S_LU[1].size(1) - nineq",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nineq",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "qpthhere/solvers/pdipm/single.py": {
        "torch": {
            "ones_19": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nineq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "R.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_146": {
                "variable": {
                    "value": "U_S",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "neq + nineq",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "neq + nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_148": {
                "variable": {
                    "value": "G_invQ_GT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.potrs(G.t(), U_Q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_202": {
                "variable": {
                    "value": "S_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q)], 1), torch.cat([A, torch.zeros(neq, nineq).type_as(Q)], 1)], 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q)], 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "invH_A_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.potrs(A_.t(), U_H_)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_43": {
                "variable": {
                    "value": "dual_resid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(torch.mv(A.t(), y) if neq > 0 else 0.0) + torch.mv(G.t(), z) + torch.mv(Q, x) + inputs_i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_80": {
                "variable": {
                    "value": "dx_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dx_aff + dx_cor",
                            "BinOp"
                        ],
                        [
                            "torch.potrs(g1.view(-1, 1), U_Q).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_81": {
                "variable": {
                    "value": "dz_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dz_aff + dz_cor",
                            "BinOp"
                        ],
                        [
                            "w[neq:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_109": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.mv(A, invQ_rx) - ry, torch.mv(G, invQ_rx) + rs / d - rz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_152": {
                "variable": {
                    "value": "A_invQ_AT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "invQ_AT",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.potrs(A.t(), U_Q)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_153": {
                "variable": {
                    "value": "G_invQ_AT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "invQ_AT",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.potrs(A.t(), U_Q)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_184": {
                "tensors": {
                    "value": "[Q, torch.zeros(nz, nineq).type_as(Q)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_186": {
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "g_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "h_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rz, ry]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_191": {
                "tensors": {
                    "value": "[Q, torch.zeros(nz, nineq).type_as(Q)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "A_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[G, torch.eye(nineq).type_as(Q)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "g_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rx, rs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "nineq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "R.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_28": {
                "input": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s + alpha * ds",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_30": {
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z + alpha * dz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_96": {
                "input": {
                    "value": "I",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dv < 1e-12",
                            "Compare"
                        ]
                    ]
                }
            },
            "min_98": {
                "input": {
                    "value": "a[I]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mv_116": {
                "input": {
                    "value": "G.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "w[neq:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mv_118": {
                "input": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "w[:neq]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_169": {
                "input": {
                    "value": "U12.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "U12",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.gesv(G_invQ_AT.t(), U11.t())[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mv_204": {
                "input": {
                    "value": "A_",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([torch.cat([G, torch.eye(nineq).type_as(Q)], 1), torch.cat([A, torch.zeros(neq, nineq).type_as(Q)], 1)], 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([G, torch.eye(nineq).type_as(Q)], 1)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "invH_g_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.potrs(g_.view(-1, 1), U_H_).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_29": {
                "input": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s + alpha * ds",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_31": {
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z + alpha * dz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dot_41": {
                "input": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s + alpha * ds",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z + alpha * dz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_42": {
                "input": {
                    "value": "rz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mv(G, x) + s - h",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_67": {
                "*size": {
                    "value": "nz",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "*size": {
                    "value": "neq",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_161": {
                "variable": {
                    "value": "U11",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "diag_177": {
                "input": {
                    "value": "1 / d.cpu()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mv_37": {
                "input": {
                    "value": "G.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z + alpha * dz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mv_39": {
                "input": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "vec": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + alpha * dx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mv_40": {
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "vec": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + alpha * dx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dot_64": {
                "input": {
                    "value": "s + alpha * ds_aff",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "z + alpha * dz_aff",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dot_65": {
                "input": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s + alpha * ds",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z + alpha * dz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mv_112": {
                "input": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "vec": {
                    "value": "invQ_rx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.potrs(rx.view(-1, 1), U_Q).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_185": {
                "tensors": {
                    "value": "[torch.zeros(nineq, nz).type_as(Q), D]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_187": {
                "tensors": {
                    "value": "[A, torch.zeros(neq, nineq).type_as(Q)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_192": {
                "tensors": {
                    "value": "[torch.zeros(nineq, nz).type_as(Q), D]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_193": {
                "n": {
                    "value": "nineq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "R.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_109": {
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "vec": {
                    "value": "invQ_rx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.potrs(rx.view(-1, 1), U_Q).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_206": {
                "input": {
                    "value": "A_.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "w_",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-torch.potrs(t_, U_S_).view(-1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "mv_36": {
                "input": {
                    "value": "A.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y + alpha * dy if neq > 0 else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_68": {
                "*size": {
                    "value": "nineq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "R.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_110": {
                "input": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "vec": {
                    "value": "invQ_rx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.potrs(rx.view(-1, 1), U_Q).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_184": {
                "*size": {
                    "value": "nz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nineq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "R.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_185": {
                "*size": {
                    "value": "nineq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "R.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_186": {
                "n": {
                    "value": "nineq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "R.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_187": {
                "*size": {
                    "value": "neq",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nineq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "R.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_191": {
                "*size": {
                    "value": "nz",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nineq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "R.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_192": {
                "*size": {
                    "value": "nineq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "R.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "qpthhere/solvers/pdipm/spbatch.py": {
        "torch": {
            "stack_196": {
                "variable": {
                    "value": "Gi_U",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Gi[1, :], Gi[0, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_204": {
                "variable": {
                    "value": "Ai_U",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Ai[1, :], Ai[0, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "Ki",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Qi, Di, Gi_L, Gi_U, Ai_L, Ai_U, Ii_L, Ii_U, Ii_11, Ii_22)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "Kv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Qv, Dv, Gv_L, Gv_U, Av_L, Av_U, Iv_L, Iv_U, Iv_11, Iv_22)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_238": {
                "variable": {
                    "value": "Kv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Ks[i]._values() for i in range(nBatch)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "nonzero_240": {
                "variable": {
                    "value": "Didx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(Ki[0] == Ki[1]).__and__(nz <= Ki[0]).__and__(Ki[0] < nz + nineq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_240": {
                "variable": {
                    "value": "Didx",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_256": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r[i] - torch.mm(Ks[i], l[i].unsqueeze(1)) for i in range(nBatch)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_47": {
                "variable": {
                    "value": "Dv",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "len(Ks)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rz.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_73": {
                "variable": {
                    "value": "rx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(torch.mm(As[j].t(), y[j].unsqueeze(1)) if neq > 0 else 0.0) + torch.mm(Gs[j].t(), z[j].unsqueeze(1)) + torch.mm(Qs[j], x[j].unsqueeze(1)) + p[j] for j in range(nBatch)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_73": {
                "variable": {
                    "value": "rx",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "rz",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.mm(Gs[j], x[j].unsqueeze(1)) + s[j] - h[j] for j in range(nBatch)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_78": {
                "variable": {
                    "value": "rz",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "ry",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.mm(As[j], x[j].unsqueeze(1)) - b[j] for j in range(nBatch)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_80": {
                "variable": {
                    "value": "ry",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_82": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(s * z).sum(1).squeeze() / nineq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_83": {
                "variable": {
                    "value": "z_resid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rz",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([torch.mm(Gs[j], x[j].unsqueeze(1)) + s[j] - h[j] for j in range(nBatch)], 1).t()",
                            "Call"
                        ],
                        [
                            "torch.zeros(nBatch, nineq).type_as(Qv)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_83": {
                "variable": {
                    "value": "z_resid",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_86": {
                "variable": {
                    "value": "dual_resid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([(torch.mm(As[j].t(), y[j].unsqueeze(1)) if neq > 0 else 0.0) + torch.mm(Gs[j].t(), z[j].unsqueeze(1)) + torch.mm(Qs[j], x[j].unsqueeze(1)) + p[j] for j in range(nBatch)], 1).t()",
                            "Call"
                        ],
                        [
                            "torch.zeros(nBatch, nz).type_as(Qv)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "variable": {
                    "value": "dual_resid",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_134": {
                "input": {
                    "value": "get_step(z, dz_aff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_140": {
                "variable": {
                    "value": "t3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t1 * t2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_140": {
                "variable": {
                    "value": "t3",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_141": {
                "variable": {
                    "value": "t4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s * z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_141": {
                "variable": {
                    "value": "t4",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "rx",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "len(Ks)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rx.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_146": {
                "variable": {
                    "value": "rz",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "len(Ks)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rz.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_147": {
                "variable": {
                    "value": "ry",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "len(Ks)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "neq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ry.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_159": {
                "input": {
                    "value": "get_step(z, dz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_261": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r[i] - torch.mm(Ks[i], l[i].unsqueeze(1)) for i in range(nBatch)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_253": {
                "tensors": {
                    "value": "(rx, rs, rz, ry)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_53": {
                "input": {
                    "value": "(Didx - Didxtilde).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "nBatch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "len(Ks)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nineq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rz.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_84": {
                "input": {
                    "value": "ry",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([torch.mm(As[j], x[j].unsqueeze(1)) - b[j] for j in range(nBatch)], 1).t()",
                            "Call"
                        ],
                        [
                            "torch.zeros(nBatch, neq).type_as(Qv)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_136": {
                "*size": {
                    "value": "nBatch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "len(Ks)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_161": {
                "*size": {
                    "value": "nBatch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "Qv.size(0)",
                            "Call"
                        ],
                        [
                            "len(Ks)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_60": {
                "input": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s + alpha_nineq * ds",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_64": {
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z + alpha_nineq * dz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_256": {
                "input": {
                    "value": "Ks[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "l[i].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_261": {
                "input": {
                    "value": "Ks[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "l[i].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_80": {
                "input": {
                    "value": "As[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x[j].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_75": {
                "input": {
                    "value": "Qs[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x[j].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_78": {
                "input": {
                    "value": "Gs[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x[j].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_74": {
                "input": {
                    "value": "Gs[j].t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "z[j].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_73": {
                "input": {
                    "value": "As[j].t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "y[j].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "qpthhere/util.py": {
        "torch": {
            "zeros_38": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nBatch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "sz",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sz",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_39": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "sz",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "is_available_14": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "loss_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loss_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_133": {
                "variable": {
                    "value": "accu_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "accu_list",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(accu_list)",
                            "Call"
                        ],
                        [
                            "np.array(ob['accu'])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_134": {
                "variable": {
                    "value": "logit_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logit_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(logit_list, dim=0).view(-1, kway)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_590": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(label, dim=0).to(device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(label, dim=0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_579": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_705": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "label",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(label, dim=0).to(device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(label, dim=0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_723": {
                "variable": {
                    "value": "outList",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out.unsqueeze(dim=0) for out in outList]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_682": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "data_shot_query",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data_shot.view([-1] + list(data_shot.shape[-3:])), data_query.view([-1] + list(data_query.shape[-3:]))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_364": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_610": {
                "variable": {
                    "value": "outList",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out.unsqueeze(dim=0) for out in outList]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_730": {
                "input": {
                    "value": "y.view(-1, nkquery, kway)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_126": {
                "input": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cls_head(emb_query, emb_shot, label_shot, kway, kshot)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_617": {
                "input": {
                    "value": "y.view(-1, nkquery, kway)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_642": {
                "input": {
                    "value": "y.view(-1, nkquery, kway)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}