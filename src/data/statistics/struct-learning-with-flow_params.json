{
    "modules/markov_flow_model.py": {
        "sklearn": {
            "v_measure_score_354": {
                "labels_true": {
                    "value": "gold_vm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gold_vm + [gold_tag]",
                            "BinOp"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "model_vm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "model_vm + [model_tag]",
                            "BinOp"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "zeros_30": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.tparams",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_state, self.num_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_state, self.num_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "self.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_58": {
                "variable": {
                    "value": "self.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "jacobian_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_147": {
                "variable": {
                    "value": "objective",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_sum_exp(alpha, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_257": {
                "variable": {
                    "value": "(_, assign)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pi + self._eval_density(sents_var[0])",
                            "BinOp"
                        ],
                        [
                            "mask_ep * delta_new + (1 - mask_ep) * delta.unsqueeze(dim=1).expand(ep_size)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "tensors": {
                    "value": "alpha_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_252": {
                "variable": {
                    "value": "(delta, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pi + self._eval_density(sents_var[0])",
                            "BinOp"
                        ],
                        [
                            "mask_ep * delta_new + (1 - mask_ep) * delta.unsqueeze(dim=1).expand(ep_size)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_263": {
                "variable": {
                    "value": "assign_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index_all[t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "assign.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_263": {
                "variable": {
                    "value": "assign_new",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_276": {
                "tensors": {
                    "value": "assign_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "assign_all[-1::-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "self.args.load_nice",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_78": {
                "f": {
                    "value": "self.args.load_gaussian",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_86": {
                "input": {
                    "value": "masks.view(-1, 1).expand_as(flat_sents) * flat_sents",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_88": {
                "input": {
                    "value": "masks.view(-1, 1).expand_as(flat_sents) * (flat_sents - seed_mean.expand_as(flat_sents)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_105": {
                "input": {
                    "value": "torch.log(self.var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_142": {
                "input": {
                    "value": "mask_ep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks[t].expand(self.num_state, batch_size).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "masks[t].expand(self.num_state, batch_size).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "masks[t].view(-1, 1, 1).expand(ep_size)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self._forward_cell(alpha, density)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_144": {
                "input": {
                    "value": "1 - mask_ep",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pi + self._eval_density(sents[0])",
                            "BinOp"
                        ],
                        [
                            "torch.mul(mask_ep, self._forward_cell(alpha, density)) + torch.mul(1 - mask_ep, alpha)",
                            "BinOp"
                        ],
                        [
                            "self.pi + self._eval_density(sents[0])",
                            "BinOp"
                        ],
                        [
                            "torch.mul(mask_ep, self._forward_cell(alpha, density)) + torch.mul(1 - mask_ep, alpha)",
                            "BinOp"
                        ],
                        [
                            "log_sum_exp(alpha.unsqueeze(dim=2).expand(ep_size) + self.logA.expand(ep_size) + density.unsqueeze(dim=1).expand(ep_size), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_169": {
                "input": {
                    "value": "mask_ep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks[t].expand(self.num_state, batch_size).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "masks[t].expand(self.num_state, batch_size).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "masks[t].view(-1, 1, 1).expand(ep_size)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self._forward_cell(alpha, density)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_170": {
                "input": {
                    "value": "1 - mask_ep",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pi + self._eval_density(sents[0])",
                            "BinOp"
                        ],
                        [
                            "torch.mul(mask_ep, self._forward_cell(alpha, density)) + torch.mul(1 - mask_ep, alpha)",
                            "BinOp"
                        ],
                        [
                            "self.pi + self._eval_density(sents[0])",
                            "BinOp"
                        ],
                        [
                            "torch.mul(mask_ep, self._forward_cell(alpha, density)) + torch.mul(1 - mask_ep, alpha)",
                            "BinOp"
                        ],
                        [
                            "log_sum_exp(alpha.unsqueeze(dim=2).expand(ep_size) + self.logA.expand(ep_size) + density.unsqueeze(dim=1).expand(ep_size), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_211": {
                "input": {
                    "value": "(means - words) ** 2 / var",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_105": {
                "input": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dmv_flow_train.py": {
        "torch": {
            "is_available_66": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_108": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_81": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_121": {
                "f": {
                    "value": "args.train_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__160": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.clip_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "markov_flow_train.py": {
        "torch": {
            "is_available_69": {
                "variable": {
                    "value": "args.cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_125": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_144": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_90": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_205": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_92": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modules/dmv_flow_model.py": {
        "torch": {
            "Parameter_52": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_state, self.num_dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_dims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.attach_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_state, self.num_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.attach_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_state, self.num_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.stop_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2, self.num_state, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "variable": {
                    "value": "self.stop_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2, self.num_state, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.root_attach_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "jacobian_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_473": {
                "variable": {
                    "value": "log_p_sum_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_p_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "log_p_sum + [self.log_p_parse[0, sent_len, 2][i].unsqueeze(dim=0)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_704": {
                "variable": {
                    "value": "log_p_sum_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_p_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "log_p_sum + [self.log_p_parse[0, sent_len, 2][i].unsqueeze(dim=0)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_707": {
                "variable": {
                    "value": "(log_root_max, root_max_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_root.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_720": {
                "variable": {
                    "value": "index_ladj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.num_state, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_724": {
                "variable": {
                    "value": "index_radj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.num_state, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_732": {
                "variable": {
                    "value": "log_stop_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_stop_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_stop_right[0]",
                            "Subscript"
                        ],
                        [
                            "self.log_stop_right[0]",
                            "Subscript"
                        ],
                        [
                            "self.log_stop_right[1].expand(batch_size, self.num_state, 2)",
                            "Call"
                        ],
                        [
                            "torch.gather(log_stop_right, 2, index_radj)",
                            "Call"
                        ],
                        [
                            "self.log_stop_right[1].expand(batch_size, self.num_state, 2)",
                            "Call"
                        ],
                        [
                            "torch.gather(log_stop_right, 2, index_radj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index_radj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, self.num_state, seq_length), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.zeros((batch_size, self.num_state, seq_length), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_747": {
                "variable": {
                    "value": "log_stop_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_stop_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_stop_left[0]",
                            "Subscript"
                        ],
                        [
                            "self.log_stop_left[0]",
                            "Subscript"
                        ],
                        [
                            "self.log_stop_left[1].expand(batch_size, self.num_state, 2)",
                            "Call"
                        ],
                        [
                            "torch.gather(log_stop_left, 2, index_ladj)",
                            "Call"
                        ],
                        [
                            "self.log_stop_left[1].expand(batch_size, self.num_state, 2)",
                            "Call"
                        ],
                        [
                            "torch.gather(log_stop_left, 2, index_ladj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index_ladj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, self.num_state, seq_length), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.zeros((batch_size, self.num_state, seq_length), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_756": {
                "variable": {
                    "value": "index_ladj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.num_state, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_760": {
                "variable": {
                    "value": "index_radj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.num_state, seq_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_773": {
                "variable": {
                    "value": "log_stop_right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_stop_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_stop_right[0]",
                            "Subscript"
                        ],
                        [
                            "self.log_stop_right[0]",
                            "Subscript"
                        ],
                        [
                            "self.log_stop_right[1].expand(batch_size, self.num_state, 2)",
                            "Call"
                        ],
                        [
                            "torch.gather(log_stop_right, 2, index_radj)",
                            "Call"
                        ],
                        [
                            "self.log_stop_right[1].expand(batch_size, self.num_state, 2)",
                            "Call"
                        ],
                        [
                            "torch.gather(log_stop_right, 2, index_radj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index_radj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, self.num_state, seq_length), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.zeros((batch_size, self.num_state, seq_length), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_817": {
                "variable": {
                    "value": "log_stop_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_stop_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_stop_left[0]",
                            "Subscript"
                        ],
                        [
                            "self.log_stop_left[0]",
                            "Subscript"
                        ],
                        [
                            "self.log_stop_left[1].expand(batch_size, self.num_state, 2)",
                            "Call"
                        ],
                        [
                            "torch.gather(log_stop_left, 2, index_ladj)",
                            "Call"
                        ],
                        [
                            "self.log_stop_left[1].expand(batch_size, self.num_state, 2)",
                            "Call"
                        ],
                        [
                            "torch.gather(log_stop_left, 2, index_ladj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index_ladj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, self.num_state, seq_length), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "torch.zeros((batch_size, self.num_state, seq_length), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_384": {
                "variable": {
                    "value": "self.log_p_inside[i, j, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros((batch_size, self.num_state, 1), dtype=torch.float32, device=self.device).fill_(NEG_INFINITY) for _ in range(seq_length)]",
                            "ListComp"
                        ],
                        [
                            "[torch.zeros((batch_size, self.num_state, 1), dtype=torch.float32, device=self.device).fill_(NEG_INFINITY) for _ in range(seq_length)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_478": {
                "input": {
                    "value": "log_sum_exp(log_root.view(batch_size, -1), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_527": {
                "variable": {
                    "value": "self.log_p_parse[i, j, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cat_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros((batch_size, self.num_state, 1), dtype=torch.float32, device=self.device).fill_(NEG_INFINITY) for _ in range(seq_length)]",
                            "ListComp"
                        ],
                        [
                            "[torch.zeros((batch_size, self.num_state, 1), dtype=torch.float32, device=self.device).fill_(NEG_INFINITY) for _ in range(seq_length)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_528": {
                "variable": {
                    "value": "self.left_child[i, j, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.num_state, seq_length, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_531": {
                "variable": {
                    "value": "self.right_child[i, j, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.num_state, seq_length, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_737": {
                "variable": {
                    "value": "right_stop_mark",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(right_stop_mark.unsqueeze(dim=3), inter_right_stop_mark.unsqueeze(dim=3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_801": {
                "variable": {
                    "value": "(right_stop_mark, max_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((right_stop_mark.unsqueeze(dim=3), inter_right_stop_mark.unsqueeze(dim=3)), dim=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_106": {
                "input": {
                    "value": "masks.view(-1, 1).expand_as(flat_sents) * flat_sents",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_108": {
                "input": {
                    "value": "masks.view(-1, 1).expand_as(flat_sents) * (flat_sents - seed_mean.expand_as(flat_sents)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_397": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(seq_length, j - i - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_406": {
                "variable": {
                    "value": "log_p1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_407": {
                "variable": {
                    "value": "log_p2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_411": {
                "variable": {
                    "value": "log_stop_right_gather",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_stop_right.unsqueeze(-1).expand(*log_stop_right.size(), j - i - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((seq_length, j - i - 1), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "index.unsqueeze(0).expand(self.num_state, *index.size())",
                            "Call"
                        ],
                        [
                            "torch.zeros((seq_length, j - i - 1), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "index.unsqueeze(0).expand(self.num_state, *index.size())",
                            "Call"
                        ],
                        [
                            "torch.zeros((seq_length, j - i - 1), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "index.unsqueeze(0).expand(self.num_state, *index.size())",
                            "Call"
                        ],
                        [
                            "torch.zeros((seq_length, j - i - 1), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "index.unsqueeze(0).expand(self.num_state, *index.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_434": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(seq_length, j - i - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_442": {
                "variable": {
                    "value": "log_p1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_443": {
                "variable": {
                    "value": "log_p2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_446": {
                "variable": {
                    "value": "log_stop_left_gather",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_stop_left.unsqueeze(-1).expand(*log_stop_left.size(), j - i - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((seq_length, j - i - 1), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "index.unsqueeze(0).expand(self.num_state, *index.size())",
                            "Call"
                        ],
                        [
                            "torch.zeros((seq_length, j - i - 1), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "index.unsqueeze(0).expand(self.num_state, *index.size())",
                            "Call"
                        ],
                        [
                            "torch.zeros((seq_length, j - i - 1), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "index.unsqueeze(0).expand(self.num_state, *index.size())",
                            "Call"
                        ],
                        [
                            "torch.zeros((seq_length, j - i - 1), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "index.unsqueeze(0).expand(self.num_state, *index.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_548": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(seq_length, j - i - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_557": {
                "variable": {
                    "value": "log_p1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_558": {
                "variable": {
                    "value": "log_p2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_562": {
                "variable": {
                    "value": "log_stop_right_gather",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_stop_right.unsqueeze(-1).expand(*log_stop_right.size(), j - i - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((seq_length, j - i - 1), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "index.unsqueeze(0).expand(self.num_state, *index.size())",
                            "Call"
                        ],
                        [
                            "torch.zeros((seq_length, j - i - 1), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "index.unsqueeze(0).expand(self.num_state, *index.size())",
                            "Call"
                        ],
                        [
                            "torch.zeros((seq_length, j - i - 1), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "index.unsqueeze(0).expand(self.num_state, *index.size())",
                            "Call"
                        ],
                        [
                            "torch.zeros((seq_length, j - i - 1), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "index.unsqueeze(0).expand(self.num_state, *index.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "max_568": {
                "variable": {
                    "value": "(log_p2_tmp, max_index_loc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_572": {
                "variable": {
                    "value": "(log_p2_tmp, max_index_symbol)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p2_tmp.unsqueeze(1) + self.log_attach_right.view(1, *self.log_attach_right.size(), 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_580": {
                "variable": {
                    "value": "(log_p_max, max_index_k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_p1 + log_p2_tmp.unsqueeze(2) + log_stop_right_gather.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "log_p1_tmp.unsqueeze(2) + log_p2 + log_stop_left_gather.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "log_p1 + log_p2_tmp.unsqueeze(2) + log_stop_right_gather.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "log_p1_tmp.unsqueeze(2) + log_p2 + log_stop_left_gather.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_584": {
                "variable": {
                    "value": "max_index_loc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_index_loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(max_index_loc, index=max_index_symbol, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.gather(max_index_loc, index=max_index_k, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.gather(max_index_loc, index=max_index_symbol, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.gather(max_index_loc, index=max_index_k, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "index": {
                    "value": "max_index_symbol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(max_index_symbol, index=max_index_k, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.gather(max_index_symbol, index=max_index_k, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_587": {
                "variable": {
                    "value": "max_index_symbol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_index_symbol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(max_index_symbol, index=max_index_k, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.gather(max_index_symbol, index=max_index_k, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "index": {
                    "value": "max_index_k",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_588": {
                "variable": {
                    "value": "max_index_loc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_index_loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(max_index_loc, index=max_index_symbol, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.gather(max_index_loc, index=max_index_k, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.gather(max_index_loc, index=max_index_symbol, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.gather(max_index_loc, index=max_index_k, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "index": {
                    "value": "max_index_k",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_591": {
                "variable": {
                    "value": "max_index_r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(max_index_k.unsqueeze(-1), max_index_symbol.unsqueeze(-1), max_index_loc.unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_599": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(seq_length, j - i - 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_607": {
                "variable": {
                    "value": "log_p1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_608": {
                "variable": {
                    "value": "log_p2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_p2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_612": {
                "variable": {
                    "value": "log_stop_left_gather",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_stop_left.unsqueeze(-1).expand(*log_stop_left.size(), j - i - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((seq_length, j - i - 1), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "index.unsqueeze(0).expand(self.num_state, *index.size())",
                            "Call"
                        ],
                        [
                            "torch.zeros((seq_length, j - i - 1), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "index.unsqueeze(0).expand(self.num_state, *index.size())",
                            "Call"
                        ],
                        [
                            "torch.zeros((seq_length, j - i - 1), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "index.unsqueeze(0).expand(self.num_state, *index.size())",
                            "Call"
                        ],
                        [
                            "torch.zeros((seq_length, j - i - 1), dtype=torch.long, device=self.device, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "index.unsqueeze(0).expand(self.num_state, *index.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "max_618": {
                "variable": {
                    "value": "(log_p1_tmp, max_index_loc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(log_p1, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_622": {
                "variable": {
                    "value": "(log_p1_tmp, max_index_symbol)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p1_tmp.unsqueeze(2) + self.log_attach_left.permute(1, 0).view(1, *self.log_attach_left.size(), 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_631": {
                "variable": {
                    "value": "(log_p_max, max_index_k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_p1 + log_p2_tmp.unsqueeze(2) + log_stop_right_gather.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "log_p1_tmp.unsqueeze(2) + log_p2 + log_stop_left_gather.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "log_p1 + log_p2_tmp.unsqueeze(2) + log_stop_right_gather.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "log_p1_tmp.unsqueeze(2) + log_p2 + log_stop_left_gather.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_635": {
                "variable": {
                    "value": "max_index_loc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_index_loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(max_index_loc, index=max_index_symbol, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.gather(max_index_loc, index=max_index_k, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.gather(max_index_loc, index=max_index_symbol, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.gather(max_index_loc, index=max_index_k, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "index": {
                    "value": "max_index_symbol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(max_index_symbol, index=max_index_k, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.gather(max_index_symbol, index=max_index_k, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_638": {
                "variable": {
                    "value": "max_index_symbol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_index_symbol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(max_index_symbol, index=max_index_k, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.gather(max_index_symbol, index=max_index_k, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "index": {
                    "value": "max_index_k",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_639": {
                "variable": {
                    "value": "max_index_loc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_index_loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(max_index_loc, index=max_index_symbol, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.gather(max_index_loc, index=max_index_k, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.gather(max_index_loc, index=max_index_symbol, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.gather(max_index_loc, index=max_index_k, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "index": {
                    "value": "max_index_k",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_642": {
                "variable": {
                    "value": "max_index_l",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(max_index_k.unsqueeze(-1), max_index_symbol.unsqueeze(-1), max_index_loc.unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_333": {
                "input": {
                    "value": "(means - words) ** 2 / var",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_338": {
                "input": {
                    "value": "torch.log(self.var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_379": {
                "*size": {
                    "value": "(batch_size, self.num_state, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_523": {
                "*size": {
                    "value": "(batch_size, self.num_state, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_801": {
                "tensors": {
                    "value": "(right_stop_mark.unsqueeze(dim=3), inter_right_stop_mark.unsqueeze(dim=3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_273": {
                "input": {
                    "value": "masks[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_338": {
                "input": {
                    "value": "self.var",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "modules/projection.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.in_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_layer(input)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "getattr(self, name)(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.cat((h1, h2 + getattr(self, name)(h1)), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((h1 + getattr(self, name)(h2), h2), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "jacobian_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_layer(input)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "getattr(self, name)(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.cat((h1, h2 + getattr(self, name)(h1)), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((h1 + getattr(self, name)(h2), h2), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_98": {
                "variable": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_layer(input)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "getattr(self, name)(h)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.cat((h1, h2 + getattr(self, name)(h1)), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((h1 + getattr(self, name)(h2), h2), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "features // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, h2 + getattr(self, name)(h1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1 + getattr(self, name)(h2), h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "modules/utils.py": {
        "torch": {
            "tensor_164": {
                "variable": {
                    "value": "sents_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sents",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "masks_t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_56": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_62": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_63": {
                "variable": {
                    "value": "sum_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(value - m)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_236": {
                "tensors": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "idx[::-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_60": {
                "input": {
                    "value": "torch.sum(torch.exp(value0), dim=dim, keepdim=keepdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_63": {
                "input": {
                    "value": "value - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_64": {
                "input": {
                    "value": "sum_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.exp(value - m))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_60": {
                "input": {
                    "value": "torch.exp(value0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_60": {
                "input": {
                    "value": "value0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value - m",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}