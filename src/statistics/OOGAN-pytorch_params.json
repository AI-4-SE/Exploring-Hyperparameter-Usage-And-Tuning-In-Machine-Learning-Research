{
    "dist.py": {
        "torch": {
            "STHeaviside_11": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "Normal_22": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Laplace_123": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Bernoulli_197": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Tensor_204": {
                    "variable": {
                        "value": "p",
                        "possible_values": []
                    }
                },
                "self.stgradient": {
                    "value": "stgradient",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_14": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size()",
                    "possible_values": []
                }
            },
            "exp_69": {
                "variable": {
                    "value": "inv_sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "-logsigma",
                    "possible_values": []
                }
            },
            "exp_157": {
                "variable": {
                    "value": "scale",
                    "possible_values": []
                },
                "input": {
                    "value": "logscale",
                    "possible_values": [
                        [
                            "mu_logscale.select(-1, 1).expand(size)",
                            "Call"
                        ],
                        [
                            "self.logscale.expand(size)",
                            "Call"
                        ],
                        [
                            "mu_logscale.select(-1, 1)",
                            "Call"
                        ],
                        [
                            "logscale.type_as(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_172": {
                "variable": {
                    "value": "inv_scale",
                    "possible_values": []
                },
                "input": {
                    "value": "-logscale",
                    "possible_values": []
                }
            },
            "logsigmoid_232": {
                "variable": {
                    "value": "logp",
                    "possible_values": []
                },
                "input": {
                    "value": "presigm_ps",
                    "possible_values": [
                        [
                            "self._check_inputs(size, params)",
                            "Call"
                        ],
                        [
                            "self._check_inputs(sample.size(), params).type_as(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsigmoid_233": {
                "variable": {
                    "value": "logq",
                    "possible_values": []
                },
                "input": {
                    "value": "-presigm_ps",
                    "possible_values": []
                }
            },
            "cat_103": {
                "tensors": {
                    "value": "[self.mu, self.logsigma]",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "[self.mu, self.logscale]",
                    "possible_values": []
                }
            },
            "randn_56": {
                "*size": {
                    "value": "mu.size()",
                    "possible_values": []
                }
            },
            "log_205": {
                "input": {
                    "value": "p / (1 - p) + eps",
                    "possible_values": []
                }
            },
            "rand_226": {
                "*size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_227": {
                "input": {
                    "value": "1 - u + eps",
                    "possible_values": []
                }
            },
            "exp_57": {
                "input": {
                    "value": "logsigma",
                    "possible_values": [
                        [
                            "mu_logsigma.select(-1, 1).expand(size)",
                            "Call"
                        ],
                        [
                            "self.logsigma.expand(size)",
                            "Call"
                        ],
                        [
                            "mu_logsigma.select(-1, 1)",
                            "Call"
                        ],
                        [
                            "logsigma.type_as(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_159": {
                "*size": {
                    "value": "mu.size()",
                    "possible_values": []
                }
            },
            "log_160": {
                "input": {
                    "value": "1 - 2 * torch.abs(u) + eps",
                    "possible_values": []
                }
            },
            "abs_173": {
                "input": {
                    "value": "sample - mu",
                    "possible_values": []
                }
            },
            "sigmoid_241": {
                "input": {
                    "value": "presigm_ps",
                    "possible_values": [
                        [
                            "self._check_inputs(size, params)",
                            "Call"
                        ],
                        [
                            "self._check_inputs(sample.size(), params).type_as(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_242": {
                "input": {
                    "value": "1 - p + eps",
                    "possible_values": []
                }
            },
            "exp_86": {
                "input": {
                    "value": "sample_logsigma.mul(2) - logsigma.mul(2)",
                    "possible_values": []
                }
            },
            "sign_160": {
                "input": {
                    "value": "u",
                    "possible_values": [
                        [
                            "Variable(torch.rand(mu.size()).type_as(mu.data)) - 0.5",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.rand(size))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_262": {
                "input": {
                    "value": "self.p.data",
                    "possible_values": []
                }
            },
            "abs_160": {
                "input": {
                    "value": "u",
                    "possible_values": [
                        [
                            "Variable(torch.rand(mu.size()).type_as(mu.data)) - 0.5",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.rand(size))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "generate.py": {
        "torch": {
            "device_12": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % config['CUDA_ID']",
                    "possible_values": []
                }
            },
            "load_20": {
                "f": {
                    "value": "./train_results/trial_celeba_oogan_2/models/30000.pth",
                    "possible_values": []
                }
            }
        }
    },
    "helper_functions.py": {
        "torch": {
            "DSpriteDataset_13": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.im_size": {
                    "value": "im_size",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "InfiniteSamplerWrapper_57": {
                "base_class_0": {
                    "value": "torch.utils.data.Sampler",
                    "possible_values": []
                }
            },
            "Tensor_24": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                }
            },
            "unsqueeze_24": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "interpolate_26": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "torch.Tensor(result).unsqueeze(0).unsqueeze(0).mul_(2).add_(-1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(image, scale_factor=0.5)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/dist.py": {
        "torch": {
            "STHeaviside_9": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "Normal_22": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Laplace_123": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Bernoulli_197": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Tensor_204": {
                    "variable": {
                        "value": "p",
                        "possible_values": []
                    }
                },
                "self.stgradient": {
                    "value": "stgradient",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_12": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size()",
                    "possible_values": []
                }
            },
            "exp_69": {
                "variable": {
                    "value": "inv_sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "-logsigma",
                    "possible_values": []
                }
            },
            "exp_157": {
                "variable": {
                    "value": "scale",
                    "possible_values": []
                },
                "input": {
                    "value": "logscale",
                    "possible_values": [
                        [
                            "mu_logscale.select(-1, 1).expand(size)",
                            "Call"
                        ],
                        [
                            "self.logscale.expand(size)",
                            "Call"
                        ],
                        [
                            "mu_logscale.select(-1, 1)",
                            "Call"
                        ],
                        [
                            "logscale.type_as(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_172": {
                "variable": {
                    "value": "inv_scale",
                    "possible_values": []
                },
                "input": {
                    "value": "-logscale",
                    "possible_values": []
                }
            },
            "logsigmoid_232": {
                "variable": {
                    "value": "logp",
                    "possible_values": []
                },
                "input": {
                    "value": "presigm_ps",
                    "possible_values": [
                        [
                            "self._check_inputs(size, params)",
                            "Call"
                        ],
                        [
                            "self._check_inputs(sample.size(), params).type_as(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsigmoid_233": {
                "variable": {
                    "value": "logq",
                    "possible_values": []
                },
                "input": {
                    "value": "-presigm_ps",
                    "possible_values": []
                }
            },
            "cat_103": {
                "tensors": {
                    "value": "[self.mu, self.logsigma]",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "[self.mu, self.logscale]",
                    "possible_values": []
                }
            },
            "randn_56": {
                "*size": {
                    "value": "mu.size()",
                    "possible_values": []
                }
            },
            "log_205": {
                "input": {
                    "value": "p / (1 - p) + eps",
                    "possible_values": []
                }
            },
            "rand_226": {
                "*size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_227": {
                "input": {
                    "value": "1 - u + eps",
                    "possible_values": []
                }
            },
            "exp_57": {
                "input": {
                    "value": "logsigma",
                    "possible_values": [
                        [
                            "mu_logsigma.select(-1, 1).expand(size)",
                            "Call"
                        ],
                        [
                            "self.logsigma.expand(size)",
                            "Call"
                        ],
                        [
                            "mu_logsigma.select(-1, 1)",
                            "Call"
                        ],
                        [
                            "logsigma.type_as(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_159": {
                "*size": {
                    "value": "mu.size()",
                    "possible_values": []
                }
            },
            "log_160": {
                "input": {
                    "value": "1 - 2 * torch.abs(u) + eps",
                    "possible_values": []
                }
            },
            "abs_173": {
                "input": {
                    "value": "sample - mu",
                    "possible_values": []
                }
            },
            "sigmoid_241": {
                "input": {
                    "value": "presigm_ps",
                    "possible_values": [
                        [
                            "self._check_inputs(size, params)",
                            "Call"
                        ],
                        [
                            "self._check_inputs(sample.size(), params).type_as(sample)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_242": {
                "input": {
                    "value": "1 - p + eps",
                    "possible_values": []
                }
            },
            "exp_86": {
                "input": {
                    "value": "sample_logsigma.mul(2) - logsigma.mul(2)",
                    "possible_values": []
                }
            },
            "sign_160": {
                "input": {
                    "value": "u",
                    "possible_values": [
                        [
                            "Variable(torch.rand(mu.size()).type_as(mu.data)) - 0.5",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.rand(size))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_262": {
                "input": {
                    "value": "self.p.data",
                    "possible_values": []
                }
            },
            "abs_160": {
                "input": {
                    "value": "u",
                    "possible_values": [
                        [
                            "Variable(torch.rand(mu.size()).type_as(mu.data)) - 0.5",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.rand(size))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "metrics/percep_diversity_metric.py": {
        "torch": {
            "VGG_celeba_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "AdaptiveAvgPool2d_15": {
                    "variable": {
                        "value": "self.avgpool",
                        "possible_values": []
                    },
                    "output_size": {
                        "value": "(7, 7)",
                        "possible_values": []
                    }
                },
                "Sequential_16": {
                    "variable": {
                        "value": "self.classifier",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(512 * 7 * 7, 4096)",
                        "possible_values": []
                    }
                }
            },
            "device_71": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % config['CUDA_ID']",
                    "possible_values": []
                }
            },
            "load_78": {
                "f": {
                    "value": "/path/to/model.pth",
                    "possible_values": []
                }
            },
            "load_82": {
                "f": {
                    "value": "./model.pth",
                    "possible_values": []
                }
            },
            "randn_95": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "Z_DIM",
                    "possible_values": [
                        [
                            "config['Z_DIM']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_96": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "C_DIM",
                    "possible_values": [
                        [
                            "config['C_DIM']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "l1_loss_114": {
                "variable": {
                    "value": "diff",
                    "possible_values": []
                },
                "input": {
                    "value": "vgg.get_feat(gimg1)",
                    "possible_values": []
                },
                "target": {
                    "value": "vgg.get_feat(gimg2)",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "4096",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "4096",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "conv2d",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MaxPool2d_47": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "v",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "oo_stylegan/oo_stylegan_modules.py": {
        "torch": {
            "PixelNorm_60": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Blur_70": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "tensor_74": {
                    "variable": {
                        "value": "weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "[[1, 2, 1], [2, 4, 2], [1, 2, 1]]",
                        "possible_values": []
                    },
                    "dtype": {
                        "value": "torch.float32",
                        "possible_values": []
                    }
                }
            },
            "EqualConv2d_83": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_87": {
                    "variable": {
                        "value": "conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "*args",
                        "possible_values": []
                    }
                }
            },
            "EqualConvOrth2d_101": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_106": {
                    "variable": {
                        "value": "conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "*args",
                        "possible_values": []
                    }
                },
                "Adam_110": {
                    "variable": {
                        "value": "self.opt_orth",
                        "possible_values": []
                    },
                    "params": {
                        "value": "self.parameters()",
                        "possible_values": []
                    },
                    "lr": {
                        "value": "1e-05",
                        "possible_values": []
                    },
                    "betas": {
                        "value": "(0.5, 0.99)",
                        "possible_values": []
                    }
                }
            },
            "EqualConvTranspose2d_125": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ConvTranspose2d_130": {
                    "variable": {
                        "value": "conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "*args",
                        "possible_values": []
                    }
                }
            },
            "EqualLinear_138": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_142": {
                    "variable": {
                        "value": "linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "in_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "out_dim",
                        "possible_values": []
                    }
                }
            },
            "ConvBlock_152": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "pad1": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "pad2": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel1": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel2": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "Sequential_176": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "conv_module(in_channel, out_channel, kernel1, padding=pad1)",
                        "possible_values": []
                    }
                }
            },
            "AdaptiveInstanceNorm_189": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "InstanceNorm2d_193": {
                    "variable": {
                        "value": "self.norm",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "in_channel",
                        "possible_values": []
                    }
                }
            },
            "NoiseInjection_209": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_212": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.zeros(1, channel, 1, 1)",
                        "possible_values": []
                    }
                }
            },
            "ConstantInput_218": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_222": {
                    "variable": {
                        "value": "self.input",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.randn(1, channel, size, size)",
                        "possible_values": []
                    }
                }
            },
            "StyledConvBlock_231": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.initial": {
                    "value": "initial",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "LeakyReLU_246": {
                    "variable": {
                        "value": "self.lrelu1",
                        "possible_values": []
                    },
                    "negative_slope": {
                        "value": "0.2",
                        "possible_values": []
                    }
                },
                "LeakyReLU_251": {
                    "variable": {
                        "value": "self.lrelu2",
                        "possible_values": []
                    },
                    "negative_slope": {
                        "value": "0.2",
                        "possible_values": []
                    }
                }
            },
            "Generator_269": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_273": {
                    "variable": {
                        "value": "self.progression",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[StyledConvBlock(control_dim, 512, 4, 0, initial=True), StyledConvBlock(512, 512, 3, 1), StyledConvBlock(512, 512, 3, 1), StyledConvBlock(512, 512, 3, 1), StyledConvBlock(512, 256, 3, 1), StyledConvBlock(256, 128, 3, 1)]",
                        "possible_values": []
                    }
                },
                "ModuleList_280": {
                    "variable": {
                        "value": "self.to_rgb",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[EqualConv2d(512, 3, 1), EqualConv2d(512, 3, 1), EqualConv2d(512, 3, 1), EqualConv2d(512, 3, 1), EqualConv2d(256, 3, 1), EqualConv2d(128, 3, 1)]",
                        "possible_values": []
                    }
                }
            },
            "StyledGenerator_333": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.control_dim": {
                    "value": "control_dim",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "Sequential_344": {
                    "variable": {
                        "value": "self.style",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*layers",
                        "possible_values": []
                    }
                },
                "ModuleList_346": {
                    "variable": {
                        "value": "self.controlled_noise",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[EqualLinear(control_dim, 4 ** 2), EqualLinear(control_dim, 8 ** 2)]",
                        "possible_values": []
                    }
                }
            },
            "Discriminator_396": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.control_dim": {
                    "value": "control_dim",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_402": {
                    "variable": {
                        "value": "self.progression",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[ConvBlock(128, 256, 3, 1), ConvBlock(256, 512, 3, 1), ConvBlock(512, 512, 3, 1), ConvBlock(512, 512, 3, 1), ConvBlock(512, 512, 3, 1), ConvBlock(513, 512, 3, 1, 4, 0)]",
                        "possible_values": []
                    }
                },
                "ModuleList_409": {
                    "variable": {
                        "value": "self.from_rgb",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "[EqualConv2d(3, 128, 1), EqualConv2d(3, 256, 1), EqualConv2d(3, 512, 1), EqualConv2d(3, 512, 1), EqualConv2d(3, 512, 1), EqualConv2d(3, 512, 1)]",
                        "possible_values": []
                    }
                },
                "Sequential_419": {
                    "variable": {
                        "value": "self.to_c",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "ConvBlock(512, 512, 3, 1, orth=False)",
                        "possible_values": []
                    }
                }
            },
            "mm_98": {
                "variable": {
                    "value": "cos_distance",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "weight / weight.norm(dim=-1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "getattr(module, self.name + '_orig')",
                            "Call"
                        ],
                        [
                            "getattr(module, name)",
                            "Call"
                        ],
                        [
                            "self.compute_weight(module)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[1, 2, 1], [2, 4, 2], [1, 2, 1]], dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "weight.view(1, 1, 3, 3)",
                            "Call"
                        ],
                        [
                            "weight / weight.sum()",
                            "BinOp"
                        ],
                        [
                            "self.conv.weight_orig",
                            "Attribute"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight.transpose(1, 0)",
                    "possible_values": []
                }
            },
            "conv2d_80": {
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "input.unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[input]",
                            "List"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight.repeat(input.shape[1], 1, 1, 1)",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "input.shape[1]",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "data": {
                    "value": "weight.data",
                    "possible_values": []
                }
            },
            "sqrt_65": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=1, keepdim=True) + 1e-08",
                    "possible_values": []
                }
            },
            "LeakyReLU_178": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "LeakyReLU_181": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "zeros_212": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "randn_222": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "possible_values": [
                        [
                            "4 * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "size",
                    "possible_values": [
                        [
                            "4 * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_314": {
                "variable": {
                    "value": "upsample",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.norm(input)",
                            "Call"
                        ],
                        [
                            "gamma * out + beta",
                            "BinOp"
                        ],
                        [
                            "self.input.repeat(batch, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(input)",
                            "Call"
                        ],
                        [
                            "self.noise1(out, noise)",
                            "Call"
                        ],
                        [
                            "self.adain1(out, style)",
                            "Call"
                        ],
                        [
                            "self.lrelu1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.noise2(out, noise)",
                            "Call"
                        ],
                        [
                            "self.adain2(out, style)",
                            "Call"
                        ],
                        [
                            "self.lrelu2(out)",
                            "Call"
                        ],
                        [
                            "noise[0][0]",
                            "Subscript"
                        ],
                        [
                            "conv(upsample, style_step, noise[i])",
                            "Call"
                        ],
                        [
                            "conv(out, style_step, noise[i][1])",
                            "Call"
                        ],
                        [
                            "to_rgb(out)",
                            "Call"
                        ],
                        [
                            "(1 - alpha) * skip_rgb + alpha * out",
                            "BinOp"
                        ],
                        [
                            "out.squeeze(2).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[index](input)",
                            "Call"
                        ],
                        [
                            "torch.cat([out, mean_std], 1)",
                            "Call"
                        ],
                        [
                            "self.progression[index](out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=0.5, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "(1 - alpha) * skip_rgb + alpha * out",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "sqrt_438": {
                "variable": {
                    "value": "out_std",
                    "possible_values": []
                },
                "input": {
                    "value": "out.var(0, unbiased=False) + 1e-08",
                    "possible_values": []
                }
            },
            "cat_441": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, mean_std]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_447": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.norm(input)",
                            "Call"
                        ],
                        [
                            "gamma * out + beta",
                            "BinOp"
                        ],
                        [
                            "self.input.repeat(batch, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(input)",
                            "Call"
                        ],
                        [
                            "self.noise1(out, noise)",
                            "Call"
                        ],
                        [
                            "self.adain1(out, style)",
                            "Call"
                        ],
                        [
                            "self.lrelu1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.noise2(out, noise)",
                            "Call"
                        ],
                        [
                            "self.adain2(out, style)",
                            "Call"
                        ],
                        [
                            "self.lrelu2(out)",
                            "Call"
                        ],
                        [
                            "noise[0][0]",
                            "Subscript"
                        ],
                        [
                            "conv(upsample, style_step, noise[i])",
                            "Call"
                        ],
                        [
                            "conv(out, style_step, noise[i][1])",
                            "Call"
                        ],
                        [
                            "to_rgb(out)",
                            "Call"
                        ],
                        [
                            "(1 - alpha) * skip_rgb + alpha * out",
                            "BinOp"
                        ],
                        [
                            "out.squeeze(2).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "self.from_rgb[index](input)",
                            "Call"
                        ],
                        [
                            "torch.cat([out, mean_std], 1)",
                            "Call"
                        ],
                        [
                            "self.progression[index](out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=0.5, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "(1 - alpha) * skip_rgb + alpha * out",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "LeakyReLU_342": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "interpolate_451": {
                "variable": {
                    "value": "skip_rgb",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "input.unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "[input]",
                            "List"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "mean_65": {
                "input": {
                    "value": "input ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_376": {
                "*size": {
                    "value": "batch",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ],
                        [
                            "input[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "possible_values": [
                        [
                            "4 * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "size",
                    "possible_values": [
                        [
                            "4 * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "input[0].device",
                    "possible_values": []
                }
            },
            "randn_378": {
                "*size": {
                    "value": "batch",
                    "possible_values": [
                        [
                            "input.shape[0]",
                            "Subscript"
                        ],
                        [
                            "input[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "possible_values": [
                        [
                            "4 * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "size",
                    "possible_values": [
                        [
                            "4 * 2 ** i",
                            "BinOp"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "input[0].device",
                    "possible_values": []
                }
            }
        }
    },
    "oo_stylegan/oo_stylegan_train.py": {
        "torch": {
            "exp_79": {
                "variable": {
                    "value": "inv_sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "-logsigma",
                    "possible_values": []
                }
            },
            "linspace_98": {
                "variable": {
                    "value": "inter",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.2",
                    "possible_values": []
                },
                "end": {
                    "value": "1.2",
                    "possible_values": []
                },
                "steps": {
                    "value": "8",
                    "possible_values": []
                }
            },
            "Tensor_99": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_330": {
                "variable": {
                    "value": "class_loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_332": {
                "variable": {
                    "value": "g_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.generator.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.99)",
                    "possible_values": []
                }
            },
            "Adam_334": {
                "variable": {
                    "value": "d_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.99)",
                    "possible_values": []
                }
            },
            "Adam_337": {
                "variable": {
                    "value": "info_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "chain(generator.generator.parameters(), discriminator.to_c.parameters())",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.99)",
                    "possible_values": []
                }
            },
            "DataLoader_35": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "possible_values": [
                        [
                            "datasets.LSUNClass(path, transform=transform, target_transform=lambda x: 0)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(path, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "possible_values": [
                        [
                            "datasets.LSUNClass(path, transform=transform, target_transform=lambda x: 0)",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(path, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "0.5 * (tmp * tmp + 2 * logsigma + c)",
                    "possible_values": []
                }
            },
            "randn_179": {
                "variable": {
                    "value": "gen_in",
                    "possible_values": []
                },
                "*size": {
                    "value": "b_size",
                    "possible_values": [
                        [
                            "8 * c_dim",
                            "BinOp"
                        ],
                        [
                            "real_image.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "code_size",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "Tensor_182": {
                "variable": {
                    "value": "gen_c",
                    "possible_values": []
                }
            },
            "rand_198": {
                "variable": {
                    "value": "eps",
                    "possible_values": []
                },
                "*size": {
                    "value": "b_size",
                    "possible_values": [
                        [
                            "8 * c_dim",
                            "BinOp"
                        ],
                        [
                            "real_image.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "grad_202": {
                "outputs": {
                    "value": "hat_predict.sum()",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_hat",
                    "possible_values": [
                        [
                            "eps * real_image.data + (1 - eps) * fake_image.detach().data",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cross_entropy_231": {
                "variable": {
                    "value": "loss_onehot",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_c_params[:, :, 0]",
                    "possible_values": []
                },
                "target": {
                    "value": "gen_c_idx",
                    "possible_values": []
                }
            },
            "randn_259": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "code_size",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                }
            },
            "no_grad_246": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_273": {
                "obj": {
                    "value": "g_running.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{log_folder}/checkpoint/{str(i + 1).zfill(6)}_g.model'",
                    "possible_values": []
                }
            },
            "save_274": {
                "obj": {
                    "value": "discriminator.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{log_folder}/checkpoint/{str(i + 1).zfill(6)}_d.model'",
                    "possible_values": []
                }
            },
            "randn_247": {
                "*size": {
                    "value": "5 * 10",
                    "possible_values": []
                },
                "out": {
                    "value": "code_size",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                }
            },
            "Tensor_248": {}
        }
    },
    "oogan_models.py": {
        "torch": {
            "Generator_56": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.c_dim": {
                    "value": "c_dim",
                    "possible_values": [
                        [
                            "c_dim * 2",
                            "BinOp"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.z_dim": {
                    "value": "z_dim",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "Sequential_79": {
                    "variable": {
                        "value": "self.blocks",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*self.blocks",
                        "possible_values": []
                    }
                }
            },
            "Discriminator_90": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_99": {
                    "variable": {
                        "value": "self.feat_16",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*feat_16",
                        "possible_values": []
                    }
                },
                "Sequential_101": {
                    "variable": {
                        "value": "self.real_fake",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "DownConvBlock(ndf * ndf_multi[-3], ndf * ndf_multi[-2])",
                        "possible_values": []
                    }
                },
                "Sequential_106": {
                    "variable": {
                        "value": "self.pred_c",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "DownConvBlock(ndf * ndf_multi[-3], ndf * ndf_multi[-2])",
                        "possible_values": []
                    }
                }
            },
            "DisentangleGAN_125": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.z_dim": {
                    "value": "z_dim",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.c_dim": {
                    "value": "c_dim",
                    "possible_values": [
                        [
                            "c_dim * 2",
                            "BinOp"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.device": {
                    "value": "device",
                    "possible_values": []
                },
                "self.prob_c": {
                    "value": "prob_c",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.one_hot": {
                    "value": "one_hot",
                    "possible_values": []
                },
                "self.g_type": {
                    "value": "g_type",
                    "possible_values": []
                },
                "self.d_type": {
                    "value": "d_type",
                    "possible_values": []
                },
                "self.recon_weight": {
                    "value": "recon_weight",
                    "possible_values": []
                },
                "self.onehot_weight": {
                    "value": "onehot_weight",
                    "possible_values": []
                },
                "Adam_143": {
                    "variable": {
                        "value": "self.opt_gen",
                        "possible_values": []
                    },
                    "params": {
                        "value": "self.generator.parameters()",
                        "possible_values": []
                    },
                    "lr": {
                        "value": "lr",
                        "possible_values": []
                    },
                    "betas": {
                        "value": "(0.5, 0.99)",
                        "possible_values": []
                    }
                },
                "Adam_144": {
                    "variable": {
                        "value": "self.opt_disc",
                        "possible_values": []
                    },
                    "params": {
                        "value": "self.discriminator.parameters()",
                        "possible_values": []
                    },
                    "lr": {
                        "value": "lr",
                        "possible_values": []
                    },
                    "betas": {
                        "value": "(0.5, 0.99)",
                        "possible_values": []
                    }
                },
                "Adam_145": {
                    "variable": {
                        "value": "self.opt_info",
                        "possible_values": []
                    },
                    "params": {
                        "value": "chain(self.generator.parameters(), self.discriminator.pred_c.parameters())",
                        "possible_values": []
                    },
                    "lr": {
                        "value": "lr",
                        "possible_values": []
                    },
                    "betas": {
                        "value": "(0.5, 0.99)",
                        "possible_values": []
                    }
                }
            },
            "max_35": {
                "variable": {
                    "value": "(m, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_42": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "possible_values": []
                }
            },
            "sum_43": {
                "variable": {
                    "value": "sum_exp",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(value - m)",
                    "possible_values": []
                }
            },
            "Tensor_198": {
                "variable": {
                    "value": "constant",
                    "possible_values": []
                }
            },
            "exp_201": {
                "variable": {
                    "value": "inv_sigma",
                    "possible_values": []
                },
                "input": {
                    "value": "-logsigma",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "variable": {
                    "value": "y_onehot",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "real_images.size(0)",
                            "Call"
                        ],
                        [
                            "real_image.size(0)",
                            "Call"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "c_dim",
                    "possible_values": [
                        [
                            "c_dim * 2",
                            "BinOp"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_238": {
                "variable": {
                    "value": "alpha",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_images.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_243": {
                "variable": {
                    "value": "exp_grad",
                    "possible_values": []
                },
                "*size": {
                    "value": "out.size()",
                    "possible_values": []
                }
            },
            "sqrt_251": {
                "variable": {
                    "value": "grad_l2norm",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(grad ** 2, dim=1)",
                    "possible_values": []
                }
            },
            "mean_252": {
                "variable": {
                    "value": "d_loss_gp",
                    "possible_values": []
                },
                "input": {
                    "value": "(grad_l2norm - 1) ** 2",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "real_images",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.real_images",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Tensor_317": {
                "variable": {
                    "value": "loss_g_onehot",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.pred_c",
                    "possible_values": []
                },
                "*args": {
                    "value": "DownConvBlock(ndf * ndf_multi[-3], ndf * ndf_multi[-2])",
                    "possible_values": []
                }
            },
            "save_154": {
                "obj": {
                    "value": "self.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "possible_values": []
                }
            },
            "randn_162": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "real_images.size(0)",
                            "Call"
                        ],
                        [
                            "real_image.size(0)",
                            "Call"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.z_dim",
                    "possible_values": []
                }
            },
            "randn_164": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "real_images.size(0)",
                            "Call"
                        ],
                        [
                            "real_image.size(0)",
                            "Call"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.c_dim",
                    "possible_values": []
                }
            },
            "randn_180": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.z_dim",
                    "possible_values": []
                }
            },
            "randn_183": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.c_dim",
                    "possible_values": []
                }
            },
            "linspace_185": {
                "variable": {
                    "value": "c_line",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_interpolate",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_221": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "real_images.size(0)",
                            "Call"
                        ],
                        [
                            "real_image.size(0)",
                            "Call"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.z_dim",
                    "possible_values": []
                }
            },
            "Tensor_226": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                }
            },
            "Tensor_229": {
                "variable": {
                    "value": "c_idx",
                    "possible_values": []
                }
            },
            "l1_loss_315": {
                "variable": {
                    "value": "loss_g_recon_c",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_c_params",
                    "possible_values": []
                },
                "target": {
                    "value": "c",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, self.c_dim).uniform_(0, 1).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.randn(num_samples, self.c_dim).uniform_(0.2, 0.6).to(self.device)",
                            "Call"
                        ],
                        [
                            "c.unsqueeze(1).repeat(1, num_interpolate, 1)",
                            "Call"
                        ],
                        [
                            "c.view(-1, self.c_dim)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(batch_size, self.c_dim).uniform_(0.2, 0.6).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(batch_size, self.c_dim).uniform_(0, 1).to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_39": {
                "input": {
                    "value": "torch.sum(torch.exp(value0), dim=dim, keepdim=keepdim)",
                    "possible_values": []
                }
            },
            "exp_43": {
                "input": {
                    "value": "value - m",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "*args": {
                    "value": "spectral_norm(nn.Conv2d(ngf * ngf_multi[-1], nc, 1, 1, 0, bias=True))",
                    "possible_values": []
                }
            },
            "spectral_norm_94": {
                "module": {
                    "value": "nn.Conv2d(nc, ndf, 1, 1, 0, bias=True)",
                    "possible_values": []
                }
            },
            "spectral_norm_104": {
                "module": {
                    "value": "nn.Conv2d(ndf * ndf_multi[-1], 1, 4, 1, 0, bias=True)",
                    "possible_values": []
                }
            },
            "no_grad_166": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Tensor_233": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                }
            },
            "grad_244": {
                "outputs": {
                    "value": "out",
                    "possible_values": [
                        [
                            "self.discriminator(interpolated)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolated",
                    "possible_values": [
                        [
                            "(alpha * real_images + (1 - alpha) * fake_images).clone().detach().requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "exp_grad",
                    "possible_values": [
                        [
                            "torch.ones(out.size()).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_251": {
                "input": {
                    "value": "grad ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "no_grad_261": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "relu_291": {
                "input": {
                    "value": "1 + pred_f",
                    "possible_values": []
                }
            },
            "mean_291": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sum_39": {
                "input": {
                    "value": "torch.exp(value0)",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_47": {
                "input": {
                    "value": "sum_exp",
                    "possible_values": [
                        [
                            "torch.sum(torch.exp(value - m))",
                            "Call"
                        ]
                    ]
                }
            },
            "spectral_norm_75": {
                "module": {
                    "value": "nn.Conv2d(ngf * ngf_multi[-1], nc, 1, 1, 0, bias=True)",
                    "possible_values": []
                }
            },
            "Tanh_77": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "nc",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "ndf * ndf_multi[-1]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "spectral_norm_115": {
                "module": {
                    "value": "nn.Conv2d(c_dim, c_dim, 4, 1, 0, bias=True)",
                    "possible_values": []
                }
            },
            "cross_entropy_319": {
                "input": {
                    "value": "pred_c_params[:, :self.c_dim]",
                    "possible_values": []
                },
                "target": {
                    "value": "c_idx",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.Tensor(batch_size).fill_(choosen_dim).long().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_39": {
                "input": {
                    "value": "value0",
                    "possible_values": [
                        [
                            "value - m",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "ngf * ngf_multi[-1]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "c_dim",
                    "possible_values": [
                        [
                            "c_dim * 2",
                            "BinOp"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_dim",
                    "possible_values": [
                        [
                            "c_dim * 2",
                            "BinOp"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cross_entropy_321": {
                "input": {
                    "value": "pred_c_params[:, :self.c_dim]",
                    "possible_values": []
                },
                "target": {
                    "value": "c_idx",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.Tensor(batch_size).fill_(choosen_dim).long().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "oogan_modules.py": {
        "torch": {
            "UnFlatten_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.block_size": {
                    "value": "block_size",
                    "possible_values": []
                }
            },
            "Flatten_17": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "OrthorConv2d_30": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channel": {
                    "value": "in_channel",
                    "possible_values": []
                },
                "self.out_channel": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "self.groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "Conv2d_36": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channel",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_channel",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "kernel",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "padding",
                        "possible_values": [
                            [
                                "0",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "bias": {
                        "value": "bias",
                        "possible_values": [
                            [
                                "True",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "groups": {
                        "value": "groups",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "Adam_37": {
                    "variable": {
                        "value": "self.opt_orth",
                        "possible_values": []
                    },
                    "params": {
                        "value": "self.parameters()",
                        "possible_values": []
                    },
                    "lr": {
                        "value": "1e-05",
                        "possible_values": []
                    },
                    "betas": {
                        "value": "(0.5, 0.99)",
                        "possible_values": []
                    }
                }
            },
            "OrthorTransform_52": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.c_dim": {
                    "value": "c_dim",
                    "possible_values": [
                        [
                            "c_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "self.feat_hw": {
                    "value": "feat_hw",
                    "possible_values": []
                },
                "Parameter_58": {
                    "variable": {
                        "value": "self.weight",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.randn(1, c_dim, feat_hw, feat_hw)",
                        "possible_values": []
                    }
                },
                "Adam_59": {
                    "variable": {
                        "value": "self.opt_orth",
                        "possible_values": []
                    },
                    "params": {
                        "value": "self.parameters()",
                        "possible_values": []
                    },
                    "lr": {
                        "value": "0.0001",
                        "possible_values": []
                    },
                    "betas": {
                        "value": "(0.5, 0.99)",
                        "possible_values": []
                    }
                }
            },
            "CodeReduction_75": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_81": {
                    "variable": {
                        "value": "self.main",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(feat_c, c_dim, 3, 1, 1, bias=True, groups=1)",
                        "possible_values": []
                    }
                }
            },
            "ChannelAttentionMask_94": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.feat_c": {
                    "value": "feat_c",
                    "possible_values": []
                },
                "self.feat_hw": {
                    "value": "feat_hw",
                    "possible_values": []
                },
                "Parameter_100": {
                    "variable": {
                        "value": "self.instance_attention",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.randn(1, feat_c, feat_hw * feat_hw)",
                        "possible_values": []
                    }
                },
                "Sequential_101": {
                    "variable": {
                        "value": "self.channel_attention",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(c_dim, feat_c)",
                        "possible_values": []
                    }
                }
            },
            "Upscale2d_110": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.factor": {
                    "value": "factor",
                    "possible_values": []
                }
            },
            "UpConvBlock_127": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_131": {
                    "variable": {
                        "value": "self.main",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "Upscale2d(factor=2)",
                        "possible_values": []
                    }
                }
            },
            "DownConvBlock_142": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_146": {
                    "variable": {
                        "value": "self.main",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(in_channel, out_channel, 3, 1, 1, bias=True)",
                        "possible_values": []
                    }
                }
            },
            "OOGANInput_158": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_182": {
                    "variable": {
                        "value": "self.init_noise",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.randn(1, feat_4, 4, 4)",
                        "possible_values": []
                    }
                },
                "Sequential_184": {
                    "variable": {
                        "value": "self.from_c_4",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "UnFlatten(1)",
                        "possible_values": []
                    }
                },
                "self.z_dim": {
                    "value": "z_dim",
                    "possible_values": []
                }
            },
            "InfoGANInput_212": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.z_dim": {
                    "value": "z_dim",
                    "possible_values": []
                },
                "Sequential_218": {
                    "variable": {
                        "value": "self.main",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "UnFlatten(1)",
                        "possible_values": []
                    }
                }
            },
            "mm_27": {
                "variable": {
                    "value": "cos_distance",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "weight / weight.norm(dim=-1).unsqueeze(-1)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight.transpose(1, 0)",
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "variable": {
                    "value": "self.from_z_8",
                    "possible_values": []
                },
                "*args": {
                    "value": "UnFlatten(1)",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "c",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c, z]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "randn_58": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "c_dim",
                    "possible_values": [
                        [
                            "c_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "feat_hw",
                    "possible_values": []
                },
                "layout": {
                    "value": "feat_hw",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "feat_c",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_dim",
                    "possible_values": [
                        [
                            "c_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_83": {
                "negative_slope": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "randn_100": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "feat_c",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feat_hw * feat_hw",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "in_features": {
                    "value": "feat_c",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feat_c",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "in_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BatchNorm2d_134": {
                "num_features": {
                    "value": "out_channel",
                    "possible_values": []
                }
            },
            "LeakyReLU_135": {
                "negative_slope": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "in_channels": {
                    "value": "in_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BatchNorm2d_148": {
                "num_features": {
                    "value": "out_channel",
                    "possible_values": []
                }
            },
            "AvgPool2d_149": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "LeakyReLU_150": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "randn_182": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "feat_4",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_186": {
                "in_channels": {
                    "value": "c_dim",
                    "possible_values": [
                        [
                            "c_dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feat_4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BatchNorm2d_187": {
                "num_features": {
                    "value": "feat_4",
                    "possible_values": []
                }
            },
            "LeakyReLU_188": {
                "negative_slope": {
                    "value": "0.01",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_220": {
                "in_channels": {
                    "value": "c_dim + z_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feat_4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BatchNorm2d_221": {
                "num_features": {
                    "value": "feat_4",
                    "possible_values": []
                }
            },
            "LeakyReLU_222": {
                "negative_slope": {
                    "value": "0.01",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_197": {
                "in_channels": {
                    "value": "z_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "z_dim // 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BatchNorm2d_198": {
                "num_features": {
                    "value": "z_dim // 2",
                    "possible_values": []
                }
            },
            "LeakyReLU_199": {
                "negative_slope": {
                    "value": "0.01",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_62": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % config['CUDA_ID']",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "Dataset.ImageFolder(root=config['DATA_ROOT'], transform=trans_maker(config['IM_SIZE']))",
                            "Call"
                        ],
                        [
                            "DSpriteDataset(config['DATA_ROOT'], im_size=config['IM_SIZE'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['BATCH_SIZE']",
                    "possible_values": []
                },
                "sampler": {
                    "value": "InfiniteSamplerWrapper(dataset)",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config['DATALOADER_WORKERS']",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Tensor_40": {
                "variable": {
                    "value": "noise",
                    "possible_values": []
                }
            }
        }
    }
}