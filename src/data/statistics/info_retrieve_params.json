{
    "model_finetuning.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "src/dataloader.py": {
        "sklearn": {
            "train_test_split_42": {
                "variable": {
                    "value": "(train_idx, test_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "kb_id",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/finetune_eval.py": {
        "sklearn": {
            "cosine_similarity_259": {
                "variable": {
                    "value": "similarity_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "encoded_train_questions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(train_questions, type='query')",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "encoded_all_possible_answers_in_kb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(all_possible_answers_in_kb, type='response')",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_438": {
                "variable": {
                    "value": "test_similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "encoded_queries[test_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "Y": {
                    "value": "encoded_responses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(response_list, type='response')",
                            "Call"
                        ]
                    ]
                }
            },
            "train_test_split_543": {
                "variable": {
                    "value": "(train_idx, test_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "kb_id",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "src/importance.py": {
        "sklearn": {
            "cosine_similarity_105": {
                "X": {
                    "value": "encoded_original_response",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(response_string, type='response')",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "encoded_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(query_string, type='query')",
                            "Call"
                        ]
                    ]
                }
            },
            "cosine_similarity_120": {
                "X": {
                    "value": "encoded_perturbed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(perturbed, type='response')",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "encoded_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(query_string, type='query')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/model.py": {
        "sklearn": {
            "cosine_similarity_118": {
                "variable": {
                    "value": "similarity_score",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.kb[kb_name].vectorised_responses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "Y": {
                    "value": "self.predict([querystring], type=predict_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_338": {
                "variable": {
                    "value": "similarity_score",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.vectorized_knowledge[kb_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "Y": {
                    "value": "self.predict([querystring], type=predict_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_598": {
                "variable": {
                    "value": "similarity_score",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.vectorized_knowledge[kb_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "Y": {
                    "value": "self.predict([querystring], type=predict_type)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Adam_61": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_226": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "savepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'fine_tuned'",
                            "Method Argument"
                        ],
                        [
                            "'gr_bert.hdf5'",
                            "Method Argument"
                        ],
                        [
                            "'gr_bert.hdf5'",
                            "Method Argument"
                        ],
                        [
                            "'./model/albert/gr_albert.hdf5'",
                            "Method Argument"
                        ],
                        [
                            "'./model/albert/gr_albert.hdf5'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Input_262": {
                "variable": {
                    "value": "res_id",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.max_seq_length,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_ids",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_263": {
                "variable": {
                    "value": "res_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.max_seq_length,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_masks",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_264": {
                "variable": {
                    "value": "res_segment",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.max_seq_length,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_seg",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_270": {
                "variable": {
                    "value": "self.response_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(768,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "response_dense_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_274": {
                "variable": {
                    "value": "self.bert_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[res_id, res_mask, res_segment]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "encoded_response",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.response_encoder(res_pooled)",
                            "Call"
                        ],
                        [
                            "self.response_encoder(res_pooled)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_290": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_model_479": {
                "variable": {
                    "value": "self.bert_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "savepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'fine_tuned'",
                            "Method Argument"
                        ],
                        [
                            "'gr_bert.hdf5'",
                            "Method Argument"
                        ],
                        [
                            "'gr_bert.hdf5'",
                            "Method Argument"
                        ],
                        [
                            "'./model/albert/gr_albert.hdf5'",
                            "Method Argument"
                        ],
                        [
                            "'./model/albert/gr_albert.hdf5'",
                            "Method Argument"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{'KerasLayer': hub.KerasLayer}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Input_516": {
                "variable": {
                    "value": "res_id",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.max_seq_length,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_ids",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_517": {
                "variable": {
                    "value": "res_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.max_seq_length,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_masks",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_518": {
                "variable": {
                    "value": "res_segment",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.max_seq_length,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "input_seg",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_524": {
                "variable": {
                    "value": "self.response_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(768,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "response_dense_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_528": {
                "variable": {
                    "value": "self.albert_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[res_id, res_mask, res_segment]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "encoded_response",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.response_encoder(res_pooled)",
                            "Call"
                        ],
                        [
                            "self.response_encoder(res_pooled)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_543": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_589": {
                "variable": {
                    "value": "encoded_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "encoded_strings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._predict_one_str(t, type=type) for t in text]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_214": {
                "obj": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "savepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'fine_tuned'",
                            "Method Argument"
                        ],
                        [
                            "'gr_bert.hdf5'",
                            "Method Argument"
                        ],
                        [
                            "'gr_bert.hdf5'",
                            "Method Argument"
                        ],
                        [
                            "'./model/albert/gr_albert.hdf5'",
                            "Method Argument"
                        ],
                        [
                            "'./model/albert/gr_albert.hdf5'",
                            "Method Argument"
                        ]
                    ]
                },
                "signatures": {
                    "value": "{'default': self.embed.signatures['default'], 'response_encoder': self.embed.signatures['response_encoder'], 'question_encoder': self.embed.signatures['question_encoder']}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "GradientTape_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_152": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientTape_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_381": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientTape_629": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_645": {
                "variable": {
                    "value": "self.cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineSimilarity_163": {
                "variable": {
                    "value": "self.cosine_dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineSimilarity_391": {
                "variable": {
                    "value": "self.cosine_dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineSimilarity_655": {
                "variable": {
                    "value": "self.cosine_dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_82": {
                "values": {
                    "value": "[self.question_encoder(tf.constant([one_text]))['outputs'] for one_text in text]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_99": {
                "variable": {
                    "value": "encoded_responses_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "encoded_responses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.response_encoder(input=tf.constant([t]), context=tf.constant([c]))['outputs'] for (t, c) in zip(text, context)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_143": {
                "value": {
                    "value": "question",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_374": {
                "value": {
                    "value": "response_id_mask_seg[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_375": {
                "value": {
                    "value": "response_id_mask_seg[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_376": {
                "value": {
                    "value": "response_id_mask_seg[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_579": {
                "value": {
                    "value": "response_id_mask_seg[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_580": {
                "value": {
                    "value": "response_id_mask_seg[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_581": {
                "value": {
                    "value": "response_id_mask_seg[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_638": {
                "value": {
                    "value": "response_id_mask_seg[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_639": {
                "value": {
                    "value": "response_id_mask_seg[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_640": {
                "value": {
                    "value": "response_id_mask_seg[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_79": {
                "value": {
                    "value": "[text]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_144": {
                "value": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_145": {
                "value": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_326": {
                "value": {
                    "value": "response_id_mask_seg[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_327": {
                "value": {
                    "value": "response_id_mask_seg[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_328": {
                "value": {
                    "value": "response_id_mask_seg[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_571": {
                "value": {
                    "value": "question_id_mask_seg[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_572": {
                "value": {
                    "value": "question_id_mask_seg[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_573": {
                "value": {
                    "value": "question_id_mask_seg[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_633": {
                "value": {
                    "value": "question_id_mask_seg[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_634": {
                "value": {
                    "value": "question_id_mask_seg[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_635": {
                "value": {
                    "value": "question_id_mask_seg[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_94": {
                "value": {
                    "value": "[context]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_403": {
                "value": {
                    "value": "neg_answer_id_mask_seg[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_404": {
                "value": {
                    "value": "neg_answer_id_mask_seg[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_405": {
                "value": {
                    "value": "neg_answer_id_mask_seg[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_667": {
                "value": {
                    "value": "neg_answer_id_mask_seg[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_668": {
                "value": {
                    "value": "neg_answer_id_mask_seg[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_669": {
                "value": {
                    "value": "neg_answer_id_mask_seg[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_82": {
                "value": {
                    "value": "[one_text]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_174": {
                "value": {
                    "value": "neg_answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_175": {
                "value": {
                    "value": "neg_answer_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ],
                        [
                            "[]",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_97": {
                "value": {
                    "value": "[t]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_98": {
                "value": {
                    "value": "[c]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "sklearn": {
            "cosine_similarity_103": {
                "variable": {
                    "value": "similarity_score",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "answer_array",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "model.predict([question], type='query')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_136": {
                "variable": {
                    "value": "cossim",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "doc_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(df_doc.loc[kb]['text'].tolist())",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "question_vector.reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_model.py": {
        "sklearn": {
            "train_test_split_129": {
                "variable": {
                    "value": "(train_idx, test_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "kb_id",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/bert_tokenization.py": {
        "tensorflow": {
            "GFile_212": {
                "name": {
                    "value": "vocab_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/metric_learning.py": {
        "tensorflow": {
            "CosineSimilarity_24": {
                "variable": {
                    "value": "cosine_distance",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_27": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "margin + d_pos - d_neg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_28": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, margin + d_pos - d_neg)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}