{
    "train.py": {
        "tensorflow": {
            "ConfigProto_9": {
                "variable": {
                    "value": "config",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_data_16": {
                "variable": {
                    "value": "((train_images, train_labels), (_, _))",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "shuffle_19": {
                "variable": {
                    "value": "train_dataset",
                    "possible_values": []
                },
                "value": {
                    "value": "60000",
                    "possible_values": []
                }
            },
            "batch_19": {
                "variable": {
                    "value": "train_dataset",
                    "possible_values": []
                },
                "tensors": {
                    "value": "BATCH_SIZE",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                }
            },
            "AdamOptimizer_96": {
                "variable": {
                    "value": "generator_optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "possible_values": []
                }
            },
            "AdamOptimizer_97": {
                "variable": {
                    "value": "discriminator_optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "possible_values": []
                }
            },
            "Checkpoint_101": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "generator_optimizer": {
                    "value": "generator_optimizer",
                    "possible_values": [
                        [
                            "tf.train.AdamOptimizer(learning_rate=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "discriminator_optimizer": {
                    "value": "discriminator_optimizer",
                    "possible_values": [
                        [
                            "tf.train.AdamOptimizer(learning_rate=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "generator": {
                    "value": "generator",
                    "possible_values": [
                        [
                            "Generator()",
                            "Call"
                        ]
                    ]
                },
                "discriminator": {
                    "value": "discriminator",
                    "possible_values": [
                        [
                            "Discriminator()",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_113": {
                "variable": {
                    "value": "seed",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_examples_to_generate, noise_dim]",
                    "possible_values": []
                }
            },
            "enable_eager_execution_11": {
                "config": {
                    "value": "config",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_78": {
                "variable": {
                    "value": "real_loss",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(real_output)",
                    "possible_values": []
                },
                "logits": {
                    "value": "real_output",
                    "possible_values": [
                        [
                            "discriminator(images, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_80": {
                "variable": {
                    "value": "fake_loss",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.zeros_like(fake_output)",
                    "possible_values": []
                },
                "logits": {
                    "value": "fake_output",
                    "possible_values": [
                        [
                            "discriminator(generated_images, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_87": {
                "variable": {
                    "value": "g_loss",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(fake_output)",
                    "possible_values": []
                },
                "logits": {
                    "value": "fake_output",
                    "possible_values": [
                        [
                            "discriminator(generated_images, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "normal_118": {
                "variable": {
                    "value": "noise",
                    "possible_values": []
                },
                "shape": {
                    "value": "[BATCH_SIZE, noise_dim]",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "layers": {
                    "value": "[dense1, bn1, ac1, reshape1, dconv2, bn2, ac2, dconv3, bn3, ac3, dconv4]",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "layers": {
                    "value": "[conv1, ac1, drop1, conv2, ac2, drop2, f1, dense]",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.model_test",
                    "possible_values": []
                },
                "layers": {
                    "value": "[conv1, ac1, conv2, ac2, f1, dense]",
                    "possible_values": []
                }
            },
            "reduce_mean_89": {
                "input_tensor": {
                    "value": "g_loss",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.ones_like(fake_output), logits=fake_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_82": {
                "input_tensor": {
                    "value": "fake_loss",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.zeros_like(fake_output), logits=fake_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_120": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_like_79": {
                "input": {
                    "value": "real_output",
                    "possible_values": [
                        [
                            "discriminator(images, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_81": {
                "input": {
                    "value": "fake_output",
                    "possible_values": [
                        [
                            "discriminator(generated_images, training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_88": {
                "input": {
                    "value": "fake_output",
                    "possible_values": [
                        [
                            "discriminator(generated_images, training=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}