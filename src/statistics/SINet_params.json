{
    "MyTest.py": {
        "torch": {
            "load_21": {
                "f": {
                    "value": "opt.model_path",
                    "possible_values": []
                }
            },
            "upsample_45": {
                "variable": {
                    "value": "cam",
                    "possible_values": []
                },
                "input": {
                    "value": "cam",
                    "possible_values": [
                        [
                            "F.upsample(cam, size=gt.shape, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "cam.sigmoid().data.cpu().numpy().squeeze()",
                            "Call"
                        ],
                        [
                            "(cam - cam.min()) / (cam.max() - cam.min() + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "gt.shape",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "MyTrain.py": {
        "torch": {
            "Adam_40": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model_SINet.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_41": {
                "variable": {
                    "value": "LogitsBCE",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "set_device_34": {
                "device": {
                    "value": "opt.gpu",
                    "possible_values": []
                }
            }
        }
    },
    "Src/SINet.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.branch0",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.branch1",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.branch2",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.branch3",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(in_channel, out_channel, 1)",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_73": {
                "variable": {
                    "value": "self.upsample",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv5",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4 * channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "x2_2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2_1, self.conv_upsample4(self.upsample(x1_1)))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "x3_2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x3_1, self.conv_upsample5(self.upsample(x2_2)), x4)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_109": {
                "variable": {
                    "value": "self.upsample",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "variable": {
                    "value": "self.conv5",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3 * channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "x2_2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2_1, self.conv_upsample4(self.upsample(x1_1)))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "x3_2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x3_1, self.conv_upsample5(self.upsample(x2_2)))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "MaxPool2d_143": {
                "variable": {
                    "value": "self.downSample",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Upsample_156": {
                "variable": {
                    "value": "self.upsample_2",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_157": {
                "variable": {
                    "value": "self.upsample_8",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "8",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "x01",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "x2_sm_cat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2_sm, self.upsample_2(x3_sm), self.upsample_2(self.upsample_2(x4_sm)))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "x3_sm_cat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x3_sm, self.upsample_2(x4_sm))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_61": {
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "Src/SearchAttention.py": {
        "torch": {
            "Parameter_38": {
                "variable": {
                    "value": "self.gaussian_kernel",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(gaussian_kernel)",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "variable": {
                    "value": "soft_attention",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.gaussian_kernel",
                    "possible_values": []
                },
                "padding": {
                    "value": "15",
                    "possible_values": []
                }
            },
            "mul_43": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "np.linspace(-nsig - interval / 2.0, nsig + interval / 2.0, kernlen + 1)",
                            "Call"
                        ],
                        [
                            "torch.mul(x, soft_attention.max(attention))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "soft_attention.max(attention)",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "ndarray": {
                    "value": "gaussian_kernel",
                    "possible_values": [
                        [
                            "np.float32(_get_kernel(31, 4))",
                            "Call"
                        ],
                        [
                            "gaussian_kernel[np.newaxis, np.newaxis, ...]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "Src/backbone/ResNet.py": {
        "torch": {
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn2",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn2",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "variable": {
                    "value": "self.bn3",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_95": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                }
            }
        }
    },
    "Src/utils/Dataloader.py": {
        "torch": {
            "DataLoader_147": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "CamObjDataset(image_root, gt_root, trainsize)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "Src/utils/trainer.py": {
        "torch": {
            "abs_16": {
                "input": {
                    "value": "y_pred - y",
                    "possible_values": []
                }
            },
            "mean_16": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "ndarray": {
                    "value": "numpy",
                    "possible_values": []
                }
            },
            "save_85": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + 'SINet_%d.pth' % (epoch + 1)",
                    "possible_values": []
                }
            }
        }
    }
}