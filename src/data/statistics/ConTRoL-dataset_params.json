{
    "basline/src/training.py": {
        "sklearn": {
            "precision_recall_fscore_support_785": {
                "y_true": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[gt_dict[key]['label'] for (key, value) in pred_list.items()]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value['predicted_label'] for (key, value) in pred_list.items()]",
                            "ListComp"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "SequentialSampler_249": {
                "variable": {
                    "value": "d_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "d_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NLIDataset(d_list, data_transformer)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_250": {
                "variable": {
                    "value": "d_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "d_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NLIDataset(d_list, data_transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_per_gpu_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.per_gpu_eval_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "d_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(d_dataset)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "BaseBatchBuilder(batching_schema)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_193": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_554": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_class_item['sequence_classification'].from_pretrained(model_name, cache_dir=str(config.PRO_ROOT / 'trans_cache'), num_labels=num_labels)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(model, device_ids=[local_rank], output_device=local_rank, find_unused_parameters=True)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_606": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NLIDataset(training_list, data_transformer)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_612": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NLIDataset(training_list, data_transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_per_gpu_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.per_gpu_train_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "DistributedSampler(train_dataset, args.world_size, args.global_rank, shuffle=True)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "BaseBatchBuilder(batching_schema)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_529": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_609": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NLIDataset(training_list, data_transformer)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "args.world_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "args.global_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_816": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_418": {
                "f": {
                    "value": "model_checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'saved_models/transfer/checkpoints/eval/model.pt'",
                            "str"
                        ]
                    ]
                }
            },
            "save_749": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_750": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_751": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__661": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__663": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_701": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_702": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_703": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(model_output_dir / 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_834": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "basline/src/data_utils/batchbuilder.py": {
        "torch": {}
    },
    "basline/src/data_utils/fields.py": {
        "torch": {
            "tensor_18": {
                "data": {
                    "value": "batched_data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_33": {
                "obj": {
                    "value": "values[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "basline/src/evaluation.py": {
        "torch": {
            "load_74": {
                "f": {
                    "value": "model_checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.model_checkpoint_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "set_device_120": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}