{
    "src/models/data.py": {
        "torch": {
            "ChainDataset_114": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "datasets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[FileDataset(f, args.use_interval, testing) for f in pts]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "load_19": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.pt_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "word_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "FileDataset._pad(pre_word_ids, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "FileDataset._pad(pre_labels, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "FileDataset._pad(pre_segment_ids, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "cls_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "FileDataset._pad(pre_cls_indices, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_116": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.ChainDataset(datasets)",
                            "Call"
                        ],
                        [
                            "torch.load(self.pt_file)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "lambda x: FileDataset.batch(x, testing)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/model.py": {
        "torch": {
            "load_24": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(checkpoint, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_72": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_76": {
                "variable": {
                    "value": "i2",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_77": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i2 * -(math.log(10000.0) / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_80": {
                "variable": {
                    "value": "enc[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_83": {
                "variable": {
                    "value": "enc[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_88": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TransformerEncoderLayer_124": {
                "variable": {
                    "value": "encoder_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "d_model": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bert.config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "nhead": {
                    "value": "args.heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim_feedforward": {
                    "value": "args.ff_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "gelu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TransformerEncoder_132": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "encoder_layer": {
                    "value": "encoder_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.TransformerEncoderLayer(d_model, nhead=args.heads, dim_feedforward=args.ff_size, dropout=args.dropout, activation='gelu')",
                            "Call"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "args.inter_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm": {
                    "value": "nn.LayerNorm(d_model, eps=1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bert.config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_139": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_135": {
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bert.config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_171": {
                "start": {
                    "value": "bert_emb.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_171": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_44": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/trainer.py": {
        "torch": {
            "BCELoss_101": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_371": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'opt': self.args, 'optim': self.optim}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.args.model_path, 'model_step_%d.pt' % step)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/others/utils.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_device_21": {
                "device": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/prepro/data_builder.py": {
        "torch": {
            "save_273": {
                "obj": {
                    "value": "datasets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[args.dataset]",
                            "List"
                        ],
                        [
                            "['train', 'valid', 'test']",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "torch": {}
    }
}